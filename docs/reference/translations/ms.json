{
  "TODO": "SEMUA",
  "proporcionar conexión por patrón singleton": "ukur sambungan pola singleton",
  "Firstly, we create the object and the resolve function.": "Pertama, kita menciptakan objek dan fungsi penyelesaian.",
  "Luego cargamos la API de base de datos.": "Lalu kami memuat API database.",
  "Y al final definimos las funciones de inicio y cierre, y devolvemos el objeto de la API.": "Dan pada akhirnya kita mendefinisikan fungsi awal dan tutup, dan kita mengembalikan objek API.",
  "El API Loader es la función que se encarga de montar toda la API,\nque al final es un objeto que está accesible, normalmente,\no como `this` en los métodos del propio framework,\no como algún parámetro.\n": "API Pengisi adalah fungsi yang bertanggung jawab untuk mounting seluruh API,\nPada akhirnya adalah objek yang dapat diakses, biasanya,\nDan sebagai `ini` dalam metode kerangka itu sendiri,\nAtau sebagai parameter.\n.",
  "Se dice que la API siempre está accesible porque, en general, este proyecto adopta patrones o ideas de la programación funcional. E intentar, aunque no estrictamente, que todas las variables que se usan en la función se proporcionen vía `this` o vía parámetros es una cláusula en mi estilo de programación.": "Konon, API selalu dapat diakses karena, secara umum, proyek ini mengadopsi pola atau ide pemrograman fungsional. Dan cobalah, meskipun tidak secara ketat, bahwa semua variabel yang digunakan dalam fungsi disediakan melalui `this` atau melalui parameter adalah klausa dalam gaya pemrograman saya.",
  "ATENCIÓN": "PENDAFTAPAN",
  "los módulos deben estar en orden de carga, de lo contrario implementa tu propia estrategia o envuélvelo como 1 grupo.": "modulasi harus dalam urutan beban, jika tidak melaksanakan strategi sendiri atau membungkusnya sebagai 1 kelompok.",
  "Se dice que la API siempre está accesible porque, en general, este proyecto adopta patrones o ideas de la programación funcional. E intentar (no estrictamente) que todas las variables que se usan en la función se proporcionen vía `this` o vía parámetros es una cláusula en mi estilo de programación.": "Konon, API selalu dapat diakses karena, secara umum, proyek ini mengadopsi pola atau ide pemrograman fungsional. Dan cobalah (tidak ketat) bahwa semua variabel yang digunakan dalam fungsi disediakan melalui `this` atau melalui parameter adalah klausa dalam gaya pemrograman saya.",
  "i18n.hello": "Halo, semuanya!"
}