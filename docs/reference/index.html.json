{
  "comments": [
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/bootloader/runner.js",
      "$location": {
        "start": {
          "offset": 904,
          "line": 33,
          "column": 1
        },
        "end": {
          "offset": 941,
          "line": 34,
          "column": 1
        }
      },
      "DONE": "en desarrollo:",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-agenda-randomizer/lsw-agenda-randomizer.js",
      "$location": {
        "start": {
          "offset": 805,
          "line": 32,
          "column": 1
        },
        "end": {
          "offset": 858,
          "line": 33,
          "column": 1
        }
      },
      "TODO": "esto no está valiendo ahora mismo.",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-asserter/lsw-asserter.js",
      "$location": {
        "start": {
          "offset": 288,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 377,
          "line": 15,
          "column": 1
        }
      },
      "$section": "Lsw LswAsserter API » LswAsserter class",
      "$code": "  const LswAssertion = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    trace(msg) {\n      if(this.$asserter.$options.trace) {\n        console.log(\"[trace][lsw-assertion] \" + msg);\n      }\n    }\n\n    constructor(asserter, message) {\n      this.$asserter = asserter;\n      this.$message = message;\n      this.$result = undefined;\n    }\n\n    that(booleanExpression) {\n      this.trace(\"that\");\n      this.$result = booleanExpression;\n      if(this.$result === true) {\n        this.$asserter.onAssertionSuccess(this.$message, this.$result, this, this.$asserter);\n      } else {\n        this.$asserter.onAssertionError(this.$message, this.$result, this, this.$asserter);\n      }\n    }\n\n  }\n\n  const LswAsserter = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    static Assertion = LswAssertion;\n\n    static defaultEvents = {\n      onSuccess: () => {},\n      onError: () => {},\n    };\n\n    static defaultOptions = {\n      trace: false,\n    }\n\n    trace(msg) {\n      if(this.$options.trace) {\n        console.log(\"[trace][lsw-asserter] \" + msg);\n      }\n    }\n\n    constructor(customEvents = {}, customOptions = {}) {\n      const events = Object.assign({}, this.constructor.defaultEvents, customEvents);\n      const options = Object.assign({}, this.constructor.defaultOptions, customOptions);\n      this.$events = events;\n      this.$options = options;\n      this.$onAssertionSuccess = events.onSuccess;\n      this.$onAssertionError = events.onError;\n    }\n\n    onAssertionSuccess(assertionObject) {\n      this.trace(\"onAssertionSuccess\");\n      console.log(\"[*] Assertion success:\", assertionObject);\n      console.log(\"[*] Assertion success:\", assertionObject.$message);\n      this.$onAssertionSuccess(assertionObject, this);\n    }\n\n    onAssertionError(assertionObject) {\n      this.trace(\"onAssertionError\");\n      console.log(\"[!] Assertion error:\", assertionObject.$message);\n      const assertionError = new Error(`Assertion error on: «${assertionObject.$message}»`);\n      Vue.prototype.$lsw.toasts.showError(assertionError);\n      this.$onAssertionError(assertionObject, this, assertionError);\n    }\n\n    as(message) {\n      this.trace(\"as\");\n      console.log(\"Message:\", message);\n      return LswAssertion.create(this, message);\n    }\n\n  };\n\n  return LswAsserter;\n",
      "$code.label": "LswAsserter class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-backuper/lsw-backuper.js",
      "$location": {
        "start": {
          "offset": 288,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 374,
          "line": 15,
          "column": 1
        }
      },
      "$section": "Lsw Backuper API » LswBackuper class",
      "$code": "\n  const LswBackuper = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    static get defaultOptions() {\n      return {\n        storageId: \"lsw_default_database_backup_1\",\n        trace: Vue.prototype.$lsw.logger.$options.active,\n      };\n    }\n\n    $trace(method, args = []) {\n      if(this.options.trace) {\n        console.log(`[lsw][trace][lsw-backuper] ${method}: ${Array.from(args).length}`);\n      }\n    }\n\n    constructor(options = {}) {\n      this.options = Object.assign({}, this.constructor.defaultOptions, options);\n    }\n\n    getLastBackup() {\n      this.$trace(\"getLastBackup\", arguments);\n      try {\n        const jsonData = localStorage[this.options.storageId] || \"{}\";\n        const data = JSON.parse(jsonData);\n        return data;\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    }\n\n    setLastBackup(backupJson) {\n      this.$trace(\"setLastBackup\", arguments);\n      localStorage[this.options.storageId] = JSON.stringify(backupJson, null, 2);\n    }\n\n    deleteLastBackup() {\n      this.$trace(\"deleteLastBackup\", arguments);\n      delete localStorage[this.options.storageId];\n    }\n\n  };\n\n  return LswBackuper;\n",
      "$code.label": "LswBackuper class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-circuiter/async-circuit.js",
      "$location": {
        "start": {
          "offset": 288,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 377,
          "line": 15,
          "column": 1
        }
      },
      "$section": "Lsw Circuiter API » LswCircuiter class",
      "$code": "  class AsyncCircuit {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor() {\n      this.middlewares = [];\n    }\n\n    hook(callback) {\n      this.middlewares.push(callback);\n      return this;\n    }\n\n    prehook(callback) {\n      this.middlewares.unshift(callback);\n      return this;\n    }\n\n    unhook(callback) {\n      const pos = this.middlewares.indexOf(callback);\n      if(pos !== -1) {\n        this.middlewares.splice(pos, 1);\n      }\n      return this;\n    }\n\n    // Función principal para parsear el árbol\n    parse(node) {\n      // Si el nodo es un array (ejecutar en paralelo)\n      if (Array.isArray(node)) {\n        const code = node.map(cb => this.parse(cb)).join(',');\n        return `Promise.all([${code}])`; // Convertimos todo en un Promise.all\n      }\n\n      // Si es un objeto con $type y $callbacks\n      if (node && typeof node === 'object') {\n        Inject_middlewares: {\n          for(let index__middleware=0; index__middleware<this.middlewares.length; index__middleware++) {\n            const middleware = this.middlewares[index__middleware];\n            const result = middleware(node);\n          }\n        }\n        const { $type, $callbacks } = node;\n        const callbacks = $callbacks.map(cb => (typeof cb === 'function' ? `(${cb.toString()})()` : this.parse(cb)));\n        // Dependiendo del tipo, generamos el código adecuado\n        switch ($type) {\n          case 'parallel':\n            return `Promise.all([\\n  ${callbacks.join(',')}\\n  ])`; // Ejecutar en paralelo\n          case 'serie':\n            return `(async () => {\\n  ${callbacks.map(cb => `await ${cb}`).join('; ')}\\n  })()`; // Ejecutar en serie\n          case 'race':\n            return `Promise.race([\\n  ${callbacks.join(',')}\\n  ])`; // Ejecutar en carrera\n          case 'sync':\n            return `(() => {\\n  ${callbacks.join(';\\n  ')};\\n  return Promise.resolve();\\n  })()`; // Ejecutar síncrono\n          default:\n            throw new Error(`Required property «$type» to be one known but found «${$type}» on «this.parse»`);\n        }\n      }\n\n      // Si el nodo es una función, la transformamos directamente\n      if (typeof node === 'function') {\n        return `(${node.toString()})()`; // Convertimos la función en una llamada inmediata\n      }\n\n      throw new Error(`Required argument «node» to be of known type but found «${typeof $type}» on «this.parse»`);\n    }\n\n    // Método que ejecuta el código generado por eval\n    async execute(node, externalScope = {}) {\n      const code = this.parse(node);\n      const AsyncFunction = (async function() {}).constructor;\n      const argKeys = Object.keys(externalScope).join(\", \");\n      const argValues = Object.values(externalScope);\n      const asyncFunction = new AsyncFunction(argKeys, code);\n      return await asyncFunction(...argValues); // Ejecutamos el código generado con eval\n    }\n  }\n",
      "$code.label": "LswCircuiter class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-class-register/lsw-class-register.js",
      "$location": {
        "start": {
          "offset": 300,
          "line": 14,
          "column": 3
        },
        "end": {
          "offset": 530,
          "line": 25,
          "column": 6
        }
      },
      "$section": "Lsw ClassRegister API » LswClassRegister class\n",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "LswClassRegister",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-class-register/lsw-class-register.js",
      "$location": {
        "start": {
          "offset": 531,
          "line": 26,
          "column": 1
        },
        "end": {
          "offset": 632,
          "line": 27,
          "column": 1
        }
      },
      "$section": "Lsw ClassRegister API » LswClassRegister class",
      "$code": "  class LswClassRegister {\n\n    constructor() {\n      this.$classes = {};\n    }\n\n    register(id, classDefinition, forceOverwrite = false) {\n      $ensure({id},1).type(\"string\");\n      $ensure({classDefinition},1).type(\"function\");\n      if(!forceOverwrite) {\n        $ensure({$classes:this.$classes},1).to.not.have.key(id);\n      }\n      this.$classes[id] = classDefinition;\n    }\n\n    unregister(id, silenceError = false) {\n      if(!silenceError) {\n        $ensure({$classes:this.$classes},1).to.have.key(id);\n      }\n      delete this.$classes[id];\n    }\n\n    instantiate(id, ...args) {\n      $ensure({id},1).type(\"string\");\n      $ensure({$classes:this.$classes},1).to.have.key(id);\n      const clazz = this.$classes[id];\n      const objeto = new clazz(...args);\n      return objeto;\n    }\n\n    async initialize(id, ...args) {\n      $ensure({id},1).type(\"string\");\n      $ensure({$classes:this.$classes},1).to.have.key(id);\n      const clazz = this.$classes[id];\n      const objeto = new clazz(...args);\n      if(typeof objeto.initialize === \"function\") {\n        await objeto.initialize();\n      }\n      return objeto;\n    }\n\n  }\n",
      "$code.label": "LswClassRegister class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-commander/url-command.js",
      "$location": {
        "start": {
          "offset": 797,
          "line": 31,
          "column": 3
        },
        "end": {
          "offset": 1015,
          "line": 42,
          "column": 6
        }
      },
      "$section": "Lsw Commander API » LswCommander class\n",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "LswCommander",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-commander/url-command.js",
      "$location": {
        "start": {
          "offset": 1016,
          "line": 43,
          "column": 1
        },
        "end": {
          "offset": 1105,
          "line": 44,
          "column": 1
        }
      },
      "$section": "Lsw Commander API » LswCommander class",
      "$code": "  const LswCommander = class {\n\n    static from(...args) {\n      return new this(...args);\n    }\n\n    onRun(callback, args) {\n      try {\n        let output = undefined;\n        if (typeof this.$beforeRun === \"function\") {\n          this.$beforeRun(...args);\n        }\n        output = callback(...args);\n        if (typeof this.$afterRun === \"function\") {\n          this.$afterRun(...args);\n        }\n        return output;\n      } catch (error) {\n        if (typeof this.$onError === \"function\") {\n          const output = this.$onError(error);\n          if (typeof output !== \"undefined\") {\n            return output;\n          }\n        }\n        throw error;\n      }\n    }\n\n    constructor(handlers) {\n      this.$handlers = handlers;\n      this.$beforeRun = undefined;\n      this.$afterRun = undefined;\n      this.$onError = undefined;\n      this.command = (url, queryParamsExtender = {}) => {\n        if (!url) throw new Error(\"URL is required\");\n        if (typeof url !== \"string\") throw new Error(\"URL must be a string\");\n        if (typeof this.$handlers !== \"object\" || this.$handlers === null) {\n          throw new Error(\"Handlers must be a valid object\");\n        }\n        const [path, queryString] = url.split(\"?\");\n        const queryParams = queryString ? Object.fromEntries(new URLSearchParams(queryString).entries()) : {};\n        Object.assign(queryParams, queryParamsExtender);\n        const pathParts = path.split(\"/\").filter(Boolean);\n        let currentHandler = this.$handlers;\n        for (const part of pathParts) {\n          if (currentHandler[part] === undefined) {\n            throw new Error(`Handler for path \"${path}\" not found`);\n          }\n          currentHandler = currentHandler[part];\n        }\n        if (typeof currentHandler !== \"function\") {\n          throw new Error(`Handler at path \"${path}\" is not a function`);\n        }\n        const isSpreadable = isOnlyConsecutiveNumbers(queryParams);\n        if (isSpreadable && isSpreadable.length) {\n          return this.onRun(currentHandler, isSpreadable);\n        } else if (queryParams.argumentsOrder) {\n          const args = [];\n          const argKeys = queryParams.argumentsOrder.split(\",\").map(arg => arg.trim());\n          for (let index = 0; index < argKeys.length; index++) {\n            const argKey = argKeys[index];\n            const argValue = queryParams[argKey] || null;\n            args.push(argValue);\n          }\n          return this.onRun(currentHandler, args);\n        } else {\n          return this.onRun(currentHandler, [queryParams]);\n        }\n      };\n    }\n    get run() {\n      return this.command;\n    }\n    beforeRun(callback) {\n      if (typeof callback !== \"function\") {\n        throw new Error(\"Required parameter «callback» to be a function on «beforeRun»\");\n      }\n      this.$beforeRun = callback;\n    }\n    afterRun(callback) {\n      if (typeof callback !== \"function\") {\n        throw new Error(\"Required parameter «callback» to be a function on «afterRun»\");\n      }\n      this.$afterRun = callback;\n    }\n    onError(callback) {\n      if (typeof callback !== \"function\") {\n        throw new Error(\"Required parameter «callback» to be a function on «onError»\");\n      }\n      this.$onError = callback;\n    }\n  };\n",
      "$code.label": "LswCommander class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-compromiser/lsw-compromiser.js",
      "$location": {
        "start": {
          "offset": 294,
          "line": 14,
          "column": 3
        },
        "end": {
          "offset": 524,
          "line": 25,
          "column": 6
        }
      },
      "$section": "Lsw ClassRegister API » LswClassRegister class\n",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "LswClassRegister",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-compromiser/lsw-compromiser.js",
      "$location": {
        "start": {
          "offset": 525,
          "line": 26,
          "column": 1
        },
        "end": {
          "offset": 625,
          "line": 27,
          "column": 1
        }
      },
      "section": "Lsw ClassRegister API » LswClassRegister class",
      "$code": "  Promise_extensions: {\n    \n    globalThis.Promise.prototype.chain = function (nextPromise) {\n      return this.then(() => nextPromise);\n    };\n  }\n",
      "$code.label": "LswClassRegister class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-compromiser/lsw-compromiser.js",
      "$location": {
        "start": {
          "offset": 816,
          "line": 35,
          "column": 3
        },
        "end": {
          "offset": 1039,
          "line": 45,
          "column": 6
        }
      },
      "$section": "Lsw Compromiser API » LswCompromiser class",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "LswCompromiser",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-compromiser/lsw-compromiser.js",
      "$location": {
        "start": {
          "offset": 1040,
          "line": 46,
          "column": 1
        },
        "end": {
          "offset": 1134,
          "line": 47,
          "column": 1
        }
      },
      "section": "Lsw Compromiser API » LswCompromiser class",
      "$code": "  class PromiseMap {\n\n    constructor(keys) {\n      this.promises = new Map();\n\n      keys.forEach(key => {\n        this.set(key);\n      });\n    }\n\n    static create(keys) {\n      return new this(keys);\n    }\n\n    has(key) {\n      return this.promises.has(key);\n    }\n\n    get(key) {\n      if (!this.has(key)) {\n        throw new Error(`Required argument «key» to be an existing key (not «${key}») on «PromiseMap.get»`);\n      }\n      return this.promises.get(key);\n    }\n\n    set(key) {\n      if (this.has(key)) {\n        throw new Error(`Required argument «key» to not be an existing key (not «${key}») on «PromiseMap.set»`);\n      }\n      let resolve, reject;\n      const promise = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n      });\n      this.promises.set(key, { promise, resolve, reject });\n    }\n\n    unset(key) {\n      if (!this.has(key)) {\n        throw new Error(`Required argument «key» to be an existing key (not «${key}») on «PromiseMap.unset»`);\n      }\n      this.promises.delete(key);\n    }\n\n    on(key) {\n      if (!this.has(key)) {\n        throw new Error(`Required argument «key» to be an existing key (not «${key}») on «PromiseMap.on»`);\n      }\n      return this.promises.get(key).promise;\n    }\n\n    bind(key, key2) {\n      this.on(key).then(output => this.get(key2).resolve(output));\n    }\n\n    propagate(key) {\n      return {\n        to: (key2) => {\n          this.bind(key, key2);\n          return this.propagate(key2);\n        }\n      }\n    }\n\n  }\n",
      "$code.label": "LswCompromiser class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-configurer/lsw-configurer.js",
      "$location": {
        "start": {
          "offset": 294,
          "line": 14,
          "column": 3
        },
        "end": {
          "offset": 514,
          "line": 24,
          "column": 6
        }
      },
      "$section": "Lsw Configurer API » LswConfigurer class",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "LswConfigurer",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-configurer/lsw-configurer.js",
      "$location": {
        "start": {
          "offset": 515,
          "line": 25,
          "column": 1
        },
        "end": {
          "offset": 606,
          "line": 26,
          "column": 1
        }
      },
      "section": "Lsw Configurer API » LswConfigurer class",
      "$code": "  const LswConfigurer = class {\n\n    constructor(parentConfigurer = null) {\n      this.$parent = parentConfigurer;\n      this.$state = {};\n    }\n\n    configure(stateOptions = {}) {\n      Object.assign(this.$state, stateOptions);\n    }\n\n    get(key, defaultValue = undefined) {\n      let target = this;\n      Iterating_parents:\n      while(!!target) {\n        if(key in target.$state) {\n          return target.$state[key];\n        }\n        target = target.$parent;\n      }\n      return defaultValue;\n    }\n\n  }\n",
      "$code.label": "LswConfigurer class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-constants/lsw-constants.js",
      "$location": {
        "start": {
          "offset": 288,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 376,
          "line": 15,
          "column": 1
        }
      },
      "section": "Lsw Constants API » LswConstants class",
      "$code": "\n  const LswConstants = class {\n\n    static THROW_ERROR = {};\n    static global = new this();\n\n    constructor() {\n      this.$values = {};\n    }\n\n    define(key, value) {\n      if(key in this.$values) {\n        throw new Error(`Cannot override constant «${key}» on «LswConstants.define»`);\n      }\n      this.$values[key] = value;\n    }\n\n    pick(key, defaultValue = LswConstants.THROW_ERROR) {\n      if(!(key in this.$values)) {\n        if(defaultValue === LswConstants.THROW_ERROR) {\n          console.log(\"[!] Known keys only:\", Object.keys(this.$values));\n          throw new Error(`Could not find constant «${key}» on «LswConstants.pick»`);\n        }\n      }\n      return this.$values[key] || defaultValue;\n    }\n\n  };\n  \n  return LswConstants;\n\n",
      "$code.label": "LswConstants class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-cycler/lsw-cycler.js",
      "$location": {
        "start": {
          "offset": 309,
          "line": 16,
          "column": 1
        },
        "end": {
          "offset": 388,
          "line": 17,
          "column": 1
        }
      },
      "section": "Lsw Cycler API » LswCycler class",
      "$code": "  class LswCyclerSet {\n    constructor(value) {\n      this.value = value;\n    }\n  }\n\n  class LswCyclerReturn {\n    constructor(value) {\n      this.value = value;\n    }\n  }\n\n  class LswCyclerReturner {\n    constructor(value) {\n      if(typeof value !== \"function\") {\n        throw new Error(\"Required argument «value» to be a function on «LswCyclerReturner.constructor»\");\n      }\n      this.value = value;\n    }\n  }\n\n  class LswCycler {\n\n    static Return = LswCyclerReturn;\n    static Returner = LswCyclerReturner;\n    static Set = LswCyclerSet;\n\n    static returner(value) {\n      return new this.Returner(value);\n    }\n\n    static return(value) {\n      return new this.Return(value);\n    }\n\n    static set(value) {\n      return new this.Set(value);\n    }\n\n    constructor($object, exposedProps = []) {\n      this.$object = $object;\n      if(exposedProps === \"*\") {\n        Object.assign(this, $object);\n      } else {\n        for(let index=0; index<exposedProps.length; index++) {\n          const exposedProp = exposedProps[index];\n          this[exposedProp] = $object[exposedProp];\n        }\n      }\n    }\n\n    static from(...args) {\n      return new this(...args);\n    }\n\n    async run(steps, parameters) {\n      let original = [];\n      let output = original;\n      Iterate_cycle:\n      for (let j = 0; j < steps.length; j++) {\n        let step = steps[j];\n        let fn = this.$object[step];\n        if (typeof fn !== \"function\") {\n          throw new Error(\"Required step «\" + step + \"» to be a function on round \" + j + \" on «LswCycler.run»\");\n        }\n        const result = await fn.call(this.$object, parameters);\n        Apply_intercycle_signals: {\n          if (result instanceof this.constructor.Set) {\n            output = await result.value;\n          } else if (result instanceof this.constructor.Return) {\n            return result.value;\n          } else if (result instanceof this.constructor.Returner) {\n            return result.value(output, original);\n          }\n        }\n        Append_result_if_not_changed_output: {\n          original.push(result);\n        }\n      }\n      return output;\n    }\n\n  }\n",
      "$code.label": "LswCycler class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-database/browsie.unbundled.js",
      "$location": {
        "start": {
          "offset": 287,
          "line": 15,
          "column": 3
        },
        "end": {
          "offset": 501,
          "line": 25,
          "column": 6
        }
      },
      "$section": "Lsw Database API » LswDatabase class",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "LswDatabase",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-database/browsie.unbundled.js",
      "$location": {
        "start": {
          "offset": 502,
          "line": 26,
          "column": 1
        },
        "end": {
          "offset": 587,
          "line": 27,
          "column": 1
        }
      },
      "section": "Lsw Database API » LswDatabase class",
      "$code": "  class BrowsieCheckersAPI {\n\n    static mustBeString(obj, method = \"Browsie.mustBeString\", id = \"?\") {\n      if (typeof obj !== \"string\") {\n        throw new Error(`Required «${id}» to be a string on «${method}»`);\n      }\n    }\n\n    static mustBeArray(obj, method = \"Browsie.mustBeArray\", id = \"?\") {\n      if (!Array.isArray(obj)) {\n        throw new Error(`Required «${id}» to be an array on «${method}»`);\n      }\n    }\n\n    static mustBeObject(obj, method = \"Browsie.mustBeObject\", id = \"?\") {\n      if (typeof obj !== \"object\") {\n        throw new Error(`Required «${id}» to be an object on «${method}»`);\n      }\n    }\n\n    static mustBeGreaterThan(obj, comparison = 0, method = \"Browsie.mustBeObject\", id = \"?\") {\n      if (obj <= comparison) {\n        throw new Error(`Required «${id}» to be greater than «${comparison}» on «${method}»`);\n      }\n    }\n  }\n\n  class BrowsieStaticAPI extends BrowsieCheckersAPI {\n\n    static openedConnections = [];\n\n    static _trace = true;\n\n    static trace(methodName, args = []) {\n      // @INJECTION: from LSW\n      const traceActivatedGlobally = (typeof Vue === \"undefined\") || (typeof Vue.prototype.$lsw === \"undefined\") || ((typeof Vue !== \"undefined\") && (typeof Vue.prototype.$lsw !== \"undefined\") && (Vue.prototype.$lsw.logger.$options.active));\n      if (this._trace && traceActivatedGlobally) {\n        console.log(\"[browsie][\" + methodName + \"]\", args.length + \" args: \" + Array.from(args).map(arg => typeof (arg)).join(\", \"));\n      }\n    }\n\n    static async listDatabases() {\n      this.trace(\"Browsie.listDatabases\", arguments);\n      try {\n        const databases = await indexedDB.databases();\n        console.log('Bases de datos disponibles:', databases);\n        return databases;\n      } catch (error) {\n        console.error('Error al obtener las bases de datos:', error);\n      }\n    }\n\n    static createDatabase(dbName, schemaDefinition = null, version = 1, versionUpgrades = {}) {\n      this.trace(\"Browsie.createDatabase\", arguments);\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.open(dbName, version);\n        request.onsuccess = () => {\n          console.log(`[SUCCESS] Database \"${dbName}\" created/opened successfully.`);\n          request.result.close();\n          resolve(request.result);\n        };\n        request.onerror = (error) => {\n          console.error(`[ERROR] Failed to create/open database \"${dbName}\":`, error);\n          reject(error);\n        };\n        request.onupgradeneeded = async (event) => {\n          const db = event.target.result;\n          console.log(`[UPGRADE] Upgrading database \"${dbName}\" from version ${event.oldVersion} to ${version}.`);\n          // Si hay una definición de esquema inicial, crear los almacenes e índices\n          if (schemaDefinition && event.oldVersion === 0) {\n            console.log(\"[SCHEMA] Applying initial schema definition.\");\n            Object.keys(schemaDefinition).forEach((storeName) => {\n              if (!db.objectStoreNames.contains(storeName)) {\n                const objectStore = db.createObjectStore(storeName, {\n                  keyPath: \"id\",\n                  autoIncrement: true,\n                });\n                if (!Array.isArray(schemaDefinition[storeName])) {\n                  console.log(schemaDefinition);\n                  throw new Error(`Required property «schemaDefinition.${storeName}» to be an array on «LswDatabase.createDatabase»`);\n                }\n                schemaDefinition[storeName].forEach((index) => {\n                  const indexName = index.replace(/^\\!/, \"\");\n                  objectStore.createIndex(indexName, indexName, {\n                    unique: index.startsWith(\"!\")\n                  });\n                });\n              }\n            });\n          }\n          // Aplicar las transformaciones de esquema para cada versión\n          for (let v = event.oldVersion + 1; v <= version; v++) {\n            if (versionUpgrades[v]) {\n              console.log(`[VERSION ${v}] Applying upgrade function.`);\n              await versionUpgrades[v](db);\n            } else {\n              console.log(`[VERSION ${v}] No upgrade function defined.`);\n            }\n          }\n        };\n      });\n    }\n\n    static async exportDatabase(dbName) {\n      this.trace(\"Browsie.exportDatabase\", arguments);\n      const schema = await this.getSchema(dbName);\n      const storeIds = Object.keys(schema);\n      const allData = {};\n      for(let indexStore=0; indexStore<storeIds.length; indexStore++) {\n        const storeId = storeIds[indexStore];\n        const storeData = await this.getAllDataFromStore(dbName, storeId);\n        allData[storeId] = storeData;\n      }\n      return allData;\n    }\n\n    static async importToDatabase(dbName, storesData = {}) {\n      this.trace(\"Browsie.importToDatabase\", arguments);\n      const storeIds = Object.keys(storesData);\n      const connection = await this.open(dbName);\n      for(let indexStore=0; indexStore<storeIds.length; indexStore++) {\n        const storeId = storeIds[indexStore];\n        const allData = storesData[storeId];\n        console.log(`[*] Importing store «${storeId}»`);\n        await connection.insertMany(storeId, allData);\n      }\n    }\n\n    // Obtener todos los datos de un store\n    static async getAllDataFromStore(dbName, storeName) {\n      this.trace(\"Browsie.getAllDataFromStore\", arguments);\n      return await new Promise((resolve, reject) => {\n        const request = indexedDB.open(dbName);\n\n        request.onsuccess = (event) => {\n          const db = event.target.result;\n          const transaction = db.transaction(storeName, 'readonly');\n          const store = transaction.objectStore(storeName);\n\n          const getAllRequest = store.getAll();\n          getAllRequest.onsuccess = () => resolve(getAllRequest.result);\n          getAllRequest.onerror = () => {\n            db.close();\n            reject(new Error('Error al obtener los datos del store'));\n          };\n        };\n\n        request.onerror = () => {\n          reject(new Error('Error al abrir la base de datos'));\n        };\n      });\n    }\n\n    // Insertar datos en un store\n    static async insertDataIntoStore(dbName, storeName, data) {\n      this.trace(\"Browsie.insertDataIntoStore\", arguments);\n      return await new Promise((resolve, reject) => {\n        const request = indexedDB.open(dbName);\n\n        request.onsuccess = (event) => {\n          const db = event.target.result;\n          const transaction = db.transaction(storeName, 'readwrite');\n          const store = transaction.objectStore(storeName);\n\n          data.forEach(item => store.add(item));\n\n          transaction.oncomplete = () => resolve();\n          transaction.onerror = () => {\n            db.close();\n            reject(new Error('Error al insertar los datos en el store'));\n          };\n        };\n\n        request.onerror = () => {\n          reject(new Error('Error al abrir la base de datos'));\n        };\n      });\n    }\n\n    // Eliminar una base de datos\n    static deleteDatabase(dbName) {\n      this.trace(\"Browsie.deleteDatabase\", arguments);\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.deleteDatabase(dbName);\n\n        request.onblocked = () => {\n          // db.close();\n          reject(new Error(\"Error al eliminar la base de datos porque está bloqueada\"));\n        };\n        request.onsuccess = () => resolve();\n        request.onerror = () => {\n          // db.close();\n          reject(new Error('Error al eliminar la base de datos'));\n        };\n      }).then(() => {\n        console.log(`[!] Base de datos «${dbName}» eliminada correctamente.`);\n      });\n    }\n\n    static async getSchema(dbName) {\n      this.trace(\"Browsie.getSchema\", arguments);\n      let db = undefined;\n      try {\n        // Abrir la base de datos en modo solo lectura\n        const request = indexedDB.open(dbName);\n\n        db = await new Promise((resolve, reject) => {\n          request.onsuccess = (event) => resolve(event.target.result);\n          request.onerror = () => {\n            reject(new Error('Error al abrir la base de datos'));\n          };\n        });\n\n        // Construir el esquema a partir de los almacenes\n        const schema = {};\n        const objectStoreNames = Array.from(db.objectStoreNames); // Lista de stores\n\n        objectStoreNames.forEach(storeName => {\n          const transaction = db.transaction(storeName, 'readonly');\n          const store = transaction.objectStore(storeName);\n\n          const storeInfo = {\n            keyPath: store.keyPath,\n            autoIncrement: store.autoIncrement,\n            indexes: []\n          };\n\n          // Recorrer los índices del store\n          const indexNames = Array.from(store.indexNames); // Lista de índices\n          indexNames.forEach(indexName => {\n            const index = store.index(indexName);\n            storeInfo.indexes.push({\n              name: index.name,\n              keyPath: index.keyPath,\n              unique: index.unique,\n              multiEntry: index.multiEntry\n            });\n          });\n\n          schema[storeName] = storeInfo;\n        });\n\n        return schema;\n      } catch (error) {\n        console.error('Error al obtener el esquema:', error);\n        throw error;\n      } finally {\n        if (db) {\n          db.close();\n        }\n      }\n    }\n\n    static async pickRow(databaseId, tableId, rowId) {\n      this.trace(\"Browsie.pickRow\", arguments);\n      $ensure(databaseId).type(\"string\");\n      $ensure(tableId).type(\"string\");\n      $ensure(rowId).type(\"number\");\n      let connection = undefined;\n      try {\n        connection = await this.open(databaseId);\n        const rows = await connection.selectMany(tableId, v => v.id === rowId);\n        if (rows.length === 1) {\n          return rows[0];\n        } else if (rows.length === 0) {\n          return undefined;\n        }\n      } catch (error) {\n        throw error;\n      } finally {\n        try {\n          await connection.close();\n        } catch (error) {\n          console.log(\"Could not close connection on picking row\");\n        }\n      }\n    }\n\n  }\n\n  class BrowsieTriggersAPI extends BrowsieStaticAPI {\n\n    static globMatch = TriggersClass.globMatch;\n\n    triggers = new TriggersClass();\n\n  }\n\n\n  class BrowsieCrudAPI extends BrowsieTriggersAPI {\n\n    static async open(...args) {\n      this.trace(\"Browsie.open\", arguments);\n      const db = new this(...args);\n      await db.open();\n      return db;\n    }\n\n    // Constructor que abre la base de datos\n    constructor(dbName, trace = false) {\n      super();\n      this.$dbName = dbName;\n      this.$db = null;\n      this.$innerSchema = null;\n      this._trace = trace;\n    }\n\n    getInnerSchema() {\n      this.constructor.trace(\"browsie.getInnerSchema\", arguments);\n      return this.$innerSchema;\n    }\n\n    setInnerSchema(innerSchema) {\n      this.constructor.trace(\"browsie.setInnerSchema\", arguments);\n      if (!(innerSchema instanceof LswSchema)) {\n        throw new Error(`Required parameter «innerSchema» to be an instance of LswSchema on «browsie.setInnerSchema»`);\n      }\n      this.$innerSchema = innerSchema;\n    }\n\n    // Abre la base de datos\n    open() {\n      this.constructor.trace(\"browsie.open\", arguments);\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.open(this.$dbName);\n\n        request.onsuccess = () => {\n          this.$db = request.result;\n          resolve(this.$db);\n        };\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.open» operation over database «${this.$dbName}»: `));\n      });\n    }\n\n    close(...args) {\n      this.constructor.trace(\"browsie.close\", arguments);\n      return this.$db.close(...args);\n    }\n\n    // Método para seleccionar 1 elemento de un store con un filtro\n    select(store, filter = {}) {\n      this.constructor.trace(\"browsie.select\", arguments);\n      this.triggers.emit(`crud.select.one.${store}`, { store, filter });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readonly');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.getAll();\n        request.onsuccess = () => {\n          const result = request.result.filter(item => {\n            return Object.keys(filter).every(key => item[key] === filter[key]);\n          });\n          resolve(result);\n        };\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.select» operation over store «${store}»: `));\n      });\n    }\n\n    // Método para insertar un solo item en un store\n    insert(store, item) {\n      this.constructor.trace(\"browsie.insert\", arguments);\n      this.triggers.emit(`crud.insert.one.${store}`, { store, item });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readwrite');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.add(item);\n\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.insert» operation over store «${store}»: `));\n      });\n    }\n\n    // Método para actualizar un item en un store\n    update(store, id, item) {\n      this.constructor.trace(\"browsie.update\", arguments);\n      this.triggers.emit(`crud.update.one.${store}`, { store, id, item });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readwrite');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.put({ ...item, id });\n\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.update» operation over store «${store}»: `));\n      });\n    }\n\n    // Método tipo upsert: que cambia solo los campos que le proporcionas (hace entre 1 y 2 queries)\n    async overwrite(store, idOrItem, item) {\n      this.constructor.trace(\"browsie.overwrite\", arguments);\n      this.triggers.emit(`crud.overwrite.one.${store}`, { store, idOrItem, item });\n      const isId = (typeof idOrItem === \"string\") || (typeof idOrItem === \"number\");\n      const isItem = typeof idOrItem === \"object\";\n      let previousItem = undefined;\n      if (isItem) {\n        previousItem = idOrItem;\n      } else if (isId) {\n        const matches = await this.select(store, it => it.id === idOrItem);\n        if (matches.length === 0) {\n          throw new Error(`Zero rows on overwrite operator. Cannot overwrite a row that does not exist on «browsie.overwrite»`);\n        } else if (matches.length > 1) {\n          throw new Error(`Multiple rows on overwrite operation. Cannot overwrite multiple rows. Ensure store «${store}» is using index «id» as unique value to complete this operation`);\n        }\n        previousItem = matches[0];\n      } else {\n        throw new Error(`Required parameter «idOrItem» to be a string or an object on «browsie.overwrite»`);\n      }\n      const newItem = Object.assign({}, previousItem, item);\n      return await this.update(store, newItem.id, newItem);\n    }\n\n    // Método para eliminar un item de un store por ID\n    delete(store, id) {\n      this.constructor.trace(\"browsie.delete\", arguments);\n      this._ensureIntegrity(store, id);\n      this.triggers.emit(`crud.delete.one.${store}`, { store, id });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readwrite');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.delete(id);\n        request.onsuccess = () => resolve();\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.delete» operation over store «${store}»: `));\n      });\n    }\n\n    _getSchemaEntityByStoreName(store) {\n      this.constructor.trace(\"browsie._ensureIntegrity\", arguments);\n      const innerSchema = this.getInnerSchema().$schema;\n      const tableIds = Object.keys(innerSchema.hasTables);\n      Iterating_tables:\n      for (let indexTables = 0; indexTables < tableIds.length; indexTables++) {\n        const tableId = tableIds[indexTables];\n        if (tableId === store) {\n          return innerSchema.hasTables[tableId];\n        }\n      }\n      return undefined;\n    }\n\n    _ensureIntegrity(store, id) {\n      this.constructor.trace(\"browsie._ensureIntegrity\", arguments);\n      const innerSchema = this.getInnerSchema().$schema;\n      const tableIds = Object.keys(innerSchema.hasTables);\n      const sourceEntity = innerSchema.hasTables[store];\n      const sourceEntityId = sourceEntity.hasEntityId;\n      const boundColumns = [];\n      Iterating_tables:\n      for (let indexTables = 0; indexTables < tableIds.length; indexTables++) {\n        const tableId = tableIds[indexTables];\n        const tableData = innerSchema.hasTables[tableId];\n        const columnIds = Object.keys(tableData.hasColumns);\n        Iterating_columns:\n        for (let indexColumns = 0; indexColumns < columnIds.length; indexColumns++) {\n          const columnId = columnIds[indexColumns];\n          const columnData = tableData.hasColumns[columnId];\n          When_it_has_references: {\n            if (!columnData.refersTo) {\n              break When_it_has_references;\n            }\n            const { entity: schemaEntityId, property: entityColumnId, constraint = true } = columnData.refersTo;\n            if (!constraint) {\n              break When_it_has_references;\n            }\n            const isSameEntity = schemaEntityId === sourceEntityId;\n            if (!isSameEntity) {\n              break When_it_has_references;\n            }\n            boundColumns.push({\n              source: [store, entityColumnId],\n              mustCheck: [tableId, columnId]\n            });\n          }\n        }\n      }\n      console.log(`BOUND COLUMNS to ${store}:`, boundColumns);\n    }\n\n    _expandError(errorObject, baseMessage = false) {\n      this.constructor.trace(\"browsie._expandError\", arguments);\n      let error = errorObject;\n      if (errorObject instanceof Error) {\n        error = errorObject;\n      } else if (errorObject.target && errorObject.target.error) {\n        error = errorObject.target.error;\n      } else {\n        error = new Error(errorObject);\n      }\n      if (baseMessage) {\n        const errorTemp = new Error(error.message ?? error);\n        Object.assign(errorTemp, error);\n        errorTemp.message = baseMessage + errorTemp.message;\n        error = errorTemp;\n      }\n      return error;\n    }\n\n    // Método para seleccionar elementos de un store con un filtro\n    select(store, filter) {\n      this.constructor.trace(\"browsie.select\", arguments);\n      this.triggers.emit(`crud.select.one.${store}`, { store, filter });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readonly');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.getAll();\n\n        request.onsuccess = () => {\n          const result = request.result.filter(item => {\n            try {\n              return filter(item);\n            } catch (error) {\n              console.error(\"Error arised from filter callback on «browsie.select»\");\n              return false;\n            }\n          });\n          resolve(result);\n        };\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.select» operation over store «${store}»: `));\n      });\n    }\n\n    selectMany(store, filterFn = i => true) {\n      this.constructor.trace(\"browsie.selectMany\", arguments);\n      this.triggers.emit(`crud.select.many.${store}`, { store, filterFn });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readonly');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.openCursor(); // Usa cursor para recorrer la BD sin cargar todo en memoria\n        const results = [];\n        request.onsuccess = (event) => {\n          const cursor = event.target.result;\n          if (cursor) {\n            let isAccepted = undefined;\n            try {\n              isAccepted = filterFn(cursor.value);\n            } catch (error) {\n              console.error(`Silent error arised from filter callback on «browsie.selectMany» against store «${store}»`, error);\n            }\n            if (isAccepted) { // Aplica la función de filtro\n              results.push(cursor.value);\n            }\n            cursor.continue(); // Avanza al siguiente registro\n          } else {\n            resolve(results); // Se terminó el recorrido\n          }\n        };\n        request.onerror = (error) =>\n          reject(this._expandError(error, `Error on «browsie.selectMany» operation over store «${store}»: `));\n      });\n    }\n\n    // Método para insertar varios items en un store\n    insertMany(store, items) {\n      this.constructor.trace(\"browsie.insertMany\", arguments);\n      this.triggers.emit(`crud.insert.many.${store}`, { store, items });\n      this.constructor.mustBeString(store, \"insertMany\", \"arguments[0]\");\n      this.constructor.mustBeArray(items, \"insertMany\", \"arguments[1]\");\n      return new Promise((resolve, reject) => {\n        if (items.length === 0) {\n          return resolve(false);\n        }\n        const transaction = this.$db.transaction(store, 'readwrite');\n        const objectStore = transaction.objectStore(store);\n        let insertedCount = 0;\n        items.forEach(item => {\n          const request = objectStore.add(item);\n          request.onsuccess = () => {\n            insertedCount++;\n            if (insertedCount === items.length) resolve();\n          };\n          request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.insertMany» operation over store «${store}» inserting «${items.length}» items: `));\n        });\n      });\n    }\n\n    // Método para actualizar varios items en un store\n    updateMany(store, filter, item) {\n      this.constructor.trace(\"browsie.updateMany\", arguments);\n      this.triggers.emit(`crud.update.many.${store}`, { store, filter, item });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readwrite');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.openCursor();\n        let updatedCount = 0;\n        request.onsuccess = () => {\n          const cursor = request.result;\n          if (cursor) {\n            if (Object.keys(filter).every(key => cursor.value[key] === filter[key])) {\n              const updatedItem = { ...cursor.value, ...item };\n              const updateRequest = cursor.update(updatedItem);\n              updateRequest.onsuccess = () => {\n                updatedCount++;\n                if (updatedCount === cursor.value.length) resolve();\n              };\n            }\n            cursor.continue();\n          }\n        };\n\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.updateMany» operation over store «${store}»: `));\n      });\n    }\n\n    // Método a tipo upsertAll para llenar los valores pero dejar los que no\n    async overwriteMany(store, filter, item) {\n      this.constructor.trace(\"browsie.overwriteMany\", arguments);\n      this.triggers.emit(`crud.overwrite.many.${store}`, { store, filter, item });\n      const allMatches = await this.selectMany(store, filter);\n      const allResults = [];\n      for (let indexRow = 0; indexRow < allMatches.length; indexRow++) {\n        const row = allMatches[indexRow];\n        const result = await this.overwrite(store, row, item);\n        allResults.push(result);\n      }\n      return allResults;\n    }\n\n    // Método para eliminar varios items de un store según un filtro\n    deleteMany(store, filterCallback) {\n      this.constructor.trace(\"browsie.deleteMany\", arguments);\n      this.triggers.emit(`crud.delete.many.${store}`, { store, filterCallback });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readwrite');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.openCursor();\n        let deletedCount = 0;\n        request.onsuccess = () => {\n          const cursor = request.result;\n          if (!cursor) {\n            return resolve();\n          }\n          const isAccepted = filterCallback(cursor.value);\n          if (isAccepted) {\n            const deleteRequest = cursor.delete();\n            deleteRequest.onsuccess = () => {\n              deletedCount++;\n              if (deletedCount === cursor.value.length) {\n                return resolve();\n              }\n            };\n            deleteRequest.onerror = (error) => reject(this._expandError(error, `Error on «browsie.deleteMany» operation over store «${store}» and id «${cursor.value.id}»: `));\n          }\n          cursor.continue();\n        };\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.deleteMany» operation over store «${store}»: `));\n      });\n    }\n  }\n\n  // @TOCONTINUEFROM\n  class BrowsieMigration {\n\n    static from(...args) {\n      return new this(...args);\n    }\n\n    static createTable(arg) {\n      return this.from({\n        operation: \"createTable\",\n        parameters: arg\n      });\n    }\n\n    static renameTable(arg) {\n      return this.from({\n        operation: \"renameTable\",\n        parameters: arg\n      });\n    }\n\n    static deleteTable(arg) {\n      return this.from({\n        operation: \"deleteTable\",\n        parameters: arg\n      });\n    }\n\n    static createColumn(arg) {\n      return this.from({\n        operation: \"createColumn\",\n        parameters: arg\n      });\n    }\n\n    static renameColumn(arg) {\n      return this.from({\n        operation: \"renameColumn\",\n        parameters: arg\n      });\n    }\n\n    static deleteColumn(arg) {\n      return this.from({\n        operation: \"deleteColumn\",\n        parameters: arg\n      });\n    }\n\n    constructor(options = {}) {\n      LswDatabase.trace(\"LswDatabaseMigration.constructor\");\n      const { operation, parameters } = options;\n      this.$validateOperation(operation);\n      this.$validateParameters(parameters);\n      this.operation = operation;\n      this.parameters = parameters;\n      this.config = {\n        temporaryDatabase: this.parameters.fromDatabase + \"_\" + this.$getRandomString(5),\n      };\n      this.migrated = false;\n    }\n\n    $getRandomString(len = 10) {\n      LswDatabase.trace(\"LswDatabaseMigration.$getRandomString\");\n      const alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n      let out = \"\";\n      while (out.length < len) {\n        out += alphabet[Math.floor(Math.random() * alphabet.length)];\n      }\n      return out;\n    };\n\n    $validateOperation(operation) {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateOperation\");\n      if ([\"createTable\", \"renameTable\", \"deleteTable\", \"createColumn\", \"renameColumn\", \"deleteColumn\", \"cloneDatabase\", \"moveDatabase\"].indexOf(operation) === -1) {\n        throw new Error(\"Required «operation» to be a valid operation on «LswDatabaseMigration.$validateOperation»\");\n      }\n    }\n\n    $validateParameters(parameters) {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateParameters\");\n      if (typeof parameters !== \"object\") {\n        throw new Error(\"Required «parameters» to be an object on «LswDatabaseMigration.$validateParameters»\");\n      }\n    }\n\n    async $$transferBackTemporaryDatabase() {\n      await LswDatabase.deleteDatabase(this.parameters.fromDatabase);\n      await this.$replicateSchema({\n        fromDatabase: this.config.temporaryDatabase,\n        toDatabase: this.parameters.fromDatabase,\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.config.temporaryDatabase,\n        toDatabase: this.parameters.fromDatabase,\n      });\n      await LswDatabase.deleteDatabase(this.config.temporaryDatabase);\n    }\n\n    commit() {\n      LswDatabase.trace(\"LswDatabaseMigration.commit\");\n      return this[\"$$\" + this.operation].call(this).finally(() => {\n        this.migrated = true;\n      });\n    }\n\n    $validateCreateTableParameters() {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateCreateTableParameters\");\n      if (typeof this.parameters.fromDatabase !== \"string\") {\n        throw new Error(\"Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateCreateTableParameters»\");\n      }\n      if (typeof this.parameters.table !== \"string\") {\n        throw new Error(\"Required «parameters.table» to be a string on «LswDatabaseMigration.$validateCreateTableParameters»\");\n      }\n      if (typeof this.parameters.tableDefinition !== \"object\") {\n        throw new Error(\"Required «parameters.tableDefinition» to be an object on «LswDatabaseMigration.$validateCreateTableParameters»\");\n      }\n    }\n\n    async $$cloneDatabase() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$cloneDatabase\");\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.parameters.toDatabase,\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.parameters.toDatabase,\n      });\n    }\n\n    async $$moveDatabase() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$moveDatabase\");\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.parameters.toDatabase,\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.parameters.toDatabase,\n      });\n      await LswDatabase.deleteDatabase(this.parameters.fromDatabase);\n    }\n\n    async $$createTable() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$createTable\");\n      this.$validateCreateTableParameters();\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onAlterSchema: schema => {\n          schema[this.parameters.table] = this.parameters.tableDefinition;\n          return schema;\n        },\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onMapTableId: false,\n        onMapColumnId: false,\n      });\n      await this.$$transferBackTemporaryDatabase();\n    }\n\n    $validateDeleteTableParameters() {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateDeleteTableParameters\");\n      if (typeof this.parameters.fromDatabase !== \"string\") {\n        throw new Error(\"Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»\");\n      }\n      if (typeof this.parameters.table !== \"string\") {\n        throw new Error(\"Required «parameters.table» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»\");\n      }\n    }\n\n    async $$deleteTable() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$deleteTable\");\n      this.$validateDeleteTableParameters();\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onAlterSchema: schema => {\n          delete schema[this.parameters.table];\n          return schema;\n        },\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onMapTableId: false,\n        onMapColumnId: false,\n      });\n      await this.$$transferBackTemporaryDatabase();\n    }\n\n    $validateRenameTableParameters() {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateRenameTableParameters\");\n      if (typeof this.parameters.fromDatabase !== \"string\") {\n        throw new Error(\"Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»\");\n      }\n      if (typeof this.parameters.tableSource !== \"string\") {\n        throw new Error(\"Required «parameters.tableSource» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»\");\n      }\n      if (typeof this.parameters.tableDestination !== \"string\") {\n        throw new Error(\"Required «parameters.tableDestination» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»\");\n      }\n    }\n\n    async $$renameTable() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$renameTable\");\n      this.$validateRenameTableParameters();\n      const currentSchema = await LswDatabase.getSchema(this.parameters.fromDatabase);\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onAlterSchema: schema => {\n          delete schema[this.parameters.tableSource];\n          const tableInput = this.$adaptSchemaTableAsSchemaDefinition(currentSchema[this.parameters.tableSource]);\n          schema[this.parameters.tableDestination] = tableInput;\n          return schema;\n        },\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onMapTableId: tableId => {\n          return this.parameters.tableDestination;\n        },\n        onMapColumnId: false,\n      });\n      await this.$$transferBackTemporaryDatabase();\n    }\n\n    $validateCreateColumnParameters() {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateCreateColumnParameters\");\n      if (typeof this.parameters.fromDatabase !== \"string\") {\n        throw new Error(\"Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateCreateColumnParameters»\");\n      }\n      if (typeof this.parameters.table !== \"string\") {\n        throw new Error(\"Required «parameters.table» to be a string on «LswDatabaseMigration.$validateCreateColumnParameters»\");\n      }\n      if (typeof this.parameters.column !== \"string\") {\n        throw new Error(\"Required «parameters.column» to be a string on «LswDatabaseMigration.$validateCreateColumnParameters»\");\n      }\n      if (typeof this.parameters.columnDefinition !== \"object\") {\n        throw new Error(\"Required «parameters.columnDefinition» to be an object on «LswDatabaseMigration.$validateCreateColumnParameters»\");\n      }\n    }\n\n    async $$createColumn() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$createColumn\");\n      this.$validateCreateColumnParameters();\n      const isUnique = !!this.parameters.columnDefinition.isUnique;\n      const columnSymbol = `${isUnique ? \"!\" : \"\"}${this.parameters.column}`;\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        table: this.parameters.table,\n        onAlterSchema: schema => {\n          schema[this.parameters.table].push(columnSymbol);\n          return schema;\n        },\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onMapTableId: false,\n        onMapColumnId: false,\n      });\n      await this.$$transferBackTemporaryDatabase();\n    }\n\n    $validateDeleteColumnParameters() {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateDeleteColumnParameters\");\n      if (typeof this.parameters.fromDatabase !== \"string\") {\n        throw new Error(\"Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateDeleteColumnParameters»\");\n      }\n      if (typeof this.parameters.table !== \"string\") {\n        throw new Error(\"Required «parameters.table» to be a string on «LswDatabaseMigration.$validateDeleteColumnParameters»\");\n      }\n      if (typeof this.parameters.column !== \"string\") {\n        throw new Error(\"Required «parameters.column» to be a string on «LswDatabaseMigration.$validateDeleteColumnParameters»\");\n      }\n    }\n\n    async $$deleteColumn() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$deleteColumn\");\n      this.$validateDeleteColumnParameters();\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onAlterSchema: schema => {\n          console.log(schema);\n          const columnPosition = schema[this.parameters.table].indexOf(this.parameters.column);\n          schema[this.parameters.table].splice(columnPosition, 1);\n          return schema;\n        },\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        // !@TOCONFIGURE: $$deleteColumn needs a specific hook (or none).\n        onMapTableId: false,\n        onMapColumnId: false,\n      });\n      await this.$$transferBackTemporaryDatabase();\n    }\n\n    $validateRenameColumnParameters() {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateRenameColumnParameters\");\n      if (typeof this.parameters.fromDatabase !== \"string\") {\n        throw new Error(\"Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateRenameColumnParameters»\");\n      }\n      if (typeof this.parameters.table !== \"string\") {\n        throw new Error(\"Required «parameters.table» to be a string on «LswDatabaseMigration.$validateRenameColumnParameters»\");\n      }\n      if (typeof this.parameters.columnSource !== \"string\") {\n        throw new Error(\"Required «parameters.columnSource» to be a string on «LswDatabaseMigration.$validateRenameColumnParameters»\");\n      }\n      if (typeof this.parameters.columnDestination !== \"string\") {\n        throw new Error(\"Required «parameters.columnDestination» to be a string on «LswDatabaseMigration.$validateRenameColumnParameters»\");\n      }\n    }\n\n    async $$renameColumn() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$renameColumn\");\n      this.$validateRenameColumnParameters();\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onAlterSchema: schema => {\n          console.log(schema);\n          const columnPosition = schema[this.parameters.table].indexOf(this.parameters.columnSource);\n          schema[this.parameters.table].splice(columnPosition, 1);\n          schema[this.parameters.table].push(this.parameters.columnDestination);\n          return schema;\n        },\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onMapTableId: false,\n        onMapColumnId: (columnId) => {\n          return columnId;\n        },\n      });\n      await this.$$transferBackTemporaryDatabase();\n    }\n\n    $adaptSchemaAsSchemaDefinition(schemaDefinition) {\n      const output = {};\n      const tableIds = Object.keys(schemaDefinition);\n      for (let index = 0; index < tableIds.length; index++) {\n        const storeId = tableIds[index];\n        const tableDefinition = schemaDefinition[storeId];\n        const columns = tableDefinition.indexes;\n        if (!(storeId in output)) {\n          output[storeId] = [];\n        }\n        for (let indexColumn = 0; indexColumn < columns.length; indexColumn++) {\n          const column = columns[indexColumn];\n          const columnId = column.name;\n          const columnInput = this.$adaptSchemaColumnAsSchemaDefinition(column, columnId);\n          output[storeId].push(columnInput);\n        }\n      }\n      return output;\n    }\n\n    $adaptSchemaTableAsSchemaDefinition(tableDefinition) {\n      const output = [];\n      const columns = tableDefinition.indexes;\n      for (let indexColumn = 0; indexColumn < columns.length; indexColumn++) {\n        const column = columns[indexColumn];\n        const columnId = column.name;\n        const columnInput = this.$adaptSchemaColumnAsSchemaDefinition(column, columnId);\n        output.push(columnInput);\n      }\n      return output;\n    }\n\n    $adaptSchemaColumnAsSchemaDefinition(column, columnId) {\n      if (column.unique) {\n        return \"!\" + columnId;\n      } else {\n        return columnId;\n      }\n    }\n\n    async $replicateSchema(scenario) {\n      LswDatabase.trace(\"LswDatabaseMigration.$replicateSchema\");\n      const { fromDatabase, toDatabase, onAlterSchema } = scenario;\n      console.log(`⌛️ Replicating database from «${fromDatabase}» to «${toDatabase}» on «LswDatabaseMigration.$replicateSchema»`);\n      const schemaDefinition = await LswDatabase.getSchema(fromDatabase);\n      const schemaInput = this.$adaptSchemaAsSchemaDefinition(schemaDefinition);\n      let alteredSchema = schemaInput;\n      if (onAlterSchema) {\n        alteredSchema = onAlterSchema(schemaInput);\n        if (typeof alteredSchema === \"undefined\") {\n          throw new Error(\"Required «onAlterSchema» to return an object on «LswDatabaseMigration.$replicateSchema»\")\n        }\n      }\n      console.log(\"Replicated schema:\", alteredSchema);\n      await LswDatabase.createDatabase(toDatabase, alteredSchema);\n    }\n\n    async $populateDatabase(scenario) {\n      LswDatabase.trace(\"LswDatabaseMigration.$populateDatabase\");\n      const { fromDatabase, toDatabase, onMapTableId = false, onMapColumnId = false } = scenario;\n      console.log(`⌛️ Populating database from «${fromDatabase}» to «${toDatabase}» on «LswDatabaseMigration.$populateDatabase»`);\n      const schemaDefinition = await LswDatabase.getSchema(fromDatabase);\n      const tableIds = Object.keys(schemaDefinition);\n      let fromConnection = undefined;\n      let toConnection = undefined;\n      let indexTable = 0;\n      let indexColumn = 0;\n      let tableId = undefined;\n      let alteredTableId = undefined;\n      try {\n        fromConnection = new LswDatabase(fromDatabase);\n        toConnection = new LswDatabase(toDatabase);\n        await fromConnection.open();\n        await toConnection.open();\n        for (indexTable = 0; indexTable < tableIds.length; indexTable++) {\n          tableId = tableIds[indexTable];\n          console.log(\"table:\", tableId);\n          Transfering_tables: {\n            console.log(`⌛️ Transfering table «${tableId}» on «LswDatabaseMigration.$populateDatabase»`);\n            let allRows = await fromConnection.selectMany(tableId, v => true);\n            console.log(\"[*] Getting table id\");\n            alteredTableId = tableId;\n            if (onMapTableId) {\n              alteredTableId = onMapTableId(tableId);\n            }\n            console.log(\"[*] Getting column id\");\n            if (onMapColumnId) {\n              allRows = allRows.reduce((output, row) => {\n                const allKeys = Object.keys(row);\n                const alteredRow = {};\n                for (let indexKeys = 0; indexKeys < allKeys.length; indexKeys++) {\n                  console.log(\"column:\", indexKeys);\n                  const columnId = allKeys[indexKeys];\n                  const alteredColumnId = onMapColumnId(columnId, tableId, alteredTableId, {\n                    fromConnection,\n                    toConnection\n                  }) || columnId;\n                  alteredRow[alteredColumnId] = row[columnId];\n                }\n                output.push(alteredRow);\n                return output;\n              }, []);\n            }\n            console.log(\"[*] Got:\", alteredTableId, allRows);\n            await toConnection.insertMany(alteredTableId, allRows);\n            console.log(\"What??? 444\")\n          }\n        }\n      } catch (error) {\n        console.log(`💥 Error while populating database on table ${tableId || \"-\"} (alias «${alteredTableId}»):`, error);\n      } finally {\n        try {\n          await fromConnection.close();\n        } catch (error) {\n          console.log(error);\n        }\n        try {\n          await toConnection.close();\n        } catch (error) {\n          console.log(error);\n        }\n        console.log(`[*] Database «${toDatabase}» population finished successfully.`);\n      }\n    }\n\n  }\n\n  class LswDatabaseMigration extends BrowsieMigration {\n\n  }\n\n  LswDatabaseMigration.default = LswDatabaseMigration;\n  window.LswDatabaseMigration = LswDatabaseMigration;\n  window.BrowsieMigration = BrowsieMigration;\n\n  class BrowsieMigrable extends BrowsieCrudAPI {\n\n    static migration = LswDatabaseMigration;\n\n  }\n\n  window.Browsie = BrowsieMigrable;\n  Browsie.default = BrowsieMigrable;\n\n  /* Extended API */\n\n  class LswDatabase extends BrowsieMigrable {\n\n    class = this.constructor;\n\n  }\n\n  LswDatabase.default = LswDatabase;\n  window.LswDatabase = LswDatabase;\n",
      "$code.label": "LswDatabase class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-database/browsie.unbundled.js",
      "$location": {
        "start": {
          "offset": 1615,
          "line": 61,
          "column": 1
        },
        "end": {
          "offset": 1645,
          "line": 62,
          "column": 1
        }
      },
      "INJECTION": "from LSW",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-database-virtualizer/lsw-database-virtualizer.js",
      "$location": {
        "start": {
          "offset": 310,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 428,
          "line": 15,
          "column": 1
        }
      },
      "section": "Lsw DatabaseVirtualizer API » LswDatabaseVirtualizer class",
      "$code": "  const LswDatabaseVirtualizer = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    static start(...args) {\n      const virtualization = new this(...args);\n      return virtualization;\n    }\n\n    $lifecycle = [\n      \"onStart\",\n      \"onStartValidation\",\n      \"onValidateConnection\",\n      \"onValidateSchema\",\n      \"onFinishValidation\",\n      \"onDeleteVirtualDatabase\",\n      \"onStartClonation\",\n      \"onCloneDatabase\",\n      \"onFinishClonation\",\n      \"onStartVirtualization\",\n      \"onVirtualizeSchema\",\n      \"onVirtualizeTables\",\n      \"onVirtualizeColumns\",\n      \"onFinishVirtualization\",\n      \"onStartFormalization\",\n      \"onFormalizeColumns\",\n      \"onFormalizeTables\",\n      \"onFormalizeSchema\",\n      \"onReport\",\n      \"onFinishFormalization\",\n      \"onFinish\",\n    ];\n\n    $defaultConfigurations = {\n      trace: (Vue?.prototype?.$lsw?.logger?.$options?.active ),\n    };\n\n    $trace(method, args) {\n      if(this.$configurations.trace) {\n        const methodArgs = Array.from(args);\n        console.log(`[trace][lsw-database-virtualizer] ${method}: (${methodArgs.length}) ${methodArgs.map(e => typeof e).join(\", \")}`);\n      }\n    }\n\n    constructor(configurations = {}) {\n      this.$configurations = Object.assign({}, this.$defaultConfigurations, configurations || {});\n      this.$trace(\"constructor\", arguments);\n      this.triggers = new TriggersClass();\n      this.physicalConnection = undefined;\n      this.virtualConnection = undefined;\n      this.schema = undefined;\n    }\n\n    configure(options = {}) {\n      this.$trace(\"configure\", arguments);\n      $ensure({ options }, 1).to.have.uniquelyKeys([\"physicalConnection\", \"virtualConnection\", \"schema\"]);\n      Object.assign(this, options);\n      return this;\n    }\n\n    setPhysicalConnection(physicalConnection) {\n      this.$trace(\"setPhysicalConnection\", arguments);\n      this.physicalConnection = physicalConnection;\n      return this;\n    }\n\n    setVirtualConnection(virtualConnection) {\n      this.$trace(\"setVirtualConnection\", arguments);\n      this.virtualConnection = virtualConnection;\n      return this;\n    }\n\n    setSchema(schema) {\n      this.$trace(\"setSchema\", arguments);\n      this.schema = schema;\n      return this;\n    }\n\n    start() {\n      this.$trace(\"start\", arguments);\n      return LswCycler.from(this, \"*\").run(this.$lifecycle);\n    }\n\n    async onStart() {\n      this.$trace(\"onStart\", arguments);\n      // *@TODO:\n    }\n\n    async onStartValidation() {\n      this.$trace(\"onStartValidation\", arguments);\n      // *@TODO:\n    }\n\n    async onValidateConnection() {\n      this.$trace(\"onValidateConnection\", arguments);\n      // *@TODO:\n    }\n\n    async onValidateSchema() {\n      this.$trace(\"onValidateSchema\", arguments);\n      // *@TODO:\n    }\n\n    async onFinishValidation() {\n      this.$trace(\"onFinishValidation\", arguments);\n      // *@TODO:\n    }\n\n    async onDeleteVirtualDatabase() {\n      this.$trace(\"onDeleteVirtualDatabase\", arguments);\n      // *@TODO:\n    }\n\n    async onStartClonation() {\n      this.$trace(\"onStartClonation\", arguments);\n      // *@TODO:\n    }\n\n    async onCloneDatabase() {\n      this.$trace(\"onCloneDatabase\", arguments);\n      // *@TODO:\n    }\n\n    async onFinishClonation() {\n      this.$trace(\"onFinishClonation\", arguments);\n      // *@TODO:\n    }\n\n    async onStartVirtualization() {\n      this.$trace(\"onStartVirtualization\", arguments);\n      // *@TODO:\n    }\n\n    async onVirtualizeSchema() {\n      this.$trace(\"onVirtualizeSchema\", arguments);\n      // *@TODO:\n    }\n\n    async onVirtualizeTables() {\n      this.$trace(\"onVirtualizeTables\", arguments);\n      // *@TODO:\n    }\n\n    async onVirtualizeColumns() {\n      this.$trace(\"onVirtualizeColumns\", arguments);\n      // *@TODO:\n    }\n\n    async onFinishVirtualization() {\n      this.$trace(\"onFinishVirtualization\", arguments);\n      // *@TODO:\n    }\n\n    async onStartFormalization() {\n      this.$trace(\"onStartFormalization\", arguments);\n      // *@TODO:\n    }\n\n    async onFormalizeColumns() {\n      this.$trace(\"onFormalizeColumns\", arguments);\n      // *@TODO:\n    }\n\n    async onFormalizeTables() {\n      this.$trace(\"onFormalizeTables\", arguments);\n      // *@TODO:\n    }\n\n    async onFormalizeSchema() {\n      this.$trace(\"onFormalizeSchema\", arguments);\n      // *@TODO:\n    }\n\n    async onFinishFormalization() {\n      this.$trace(\"onFinishFormalization\", arguments);\n      // *@TODO:\n    }\n\n    async onReport() {\n      this.$trace(\"onReport\", arguments);\n      // *@TODO:\n    }\n\n    async onFinish() {\n      this.$trace(\"onFinish\", arguments);\n      // *@TODO:\n    }\n\n  }\n",
      "$code.label": "LswDatabaseVirtualizer class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-depender/lsw-depender.js",
      "$location": {
        "start": {
          "offset": 288,
          "line": 14,
          "column": 3
        },
        "end": {
          "offset": 502,
          "line": 24,
          "column": 6
        }
      },
      "$section": "Lsw Depender API » LswDepender class",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "LswDepender",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-depender/lsw-depender.js",
      "$location": {
        "start": {
          "offset": 503,
          "line": 25,
          "column": 1
        },
        "end": {
          "offset": 588,
          "line": 26,
          "column": 1
        }
      },
      "section": "Lsw Depender API » LswDepender class",
      "$code": "  const Definition = class {\n    constructor({ id, dependencies = [] }) {\n      this.id = id;\n      this.dependencies = dependencies;\n    }\n  };\n\n  const LswDepender = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor(definitions = {}) {\n      this.$definitions = definitions;\n    }\n\n    hasDefined(name) {\n      if (name in this.$definitions) {\n        if (this.$definitions[name] instanceof Definition) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    define(...args) {\n      if (typeof args[0] === \"string\") {\n        return this.addDefinition(...args);\n      }\n      return this.addUniqueDefinitions(...args);\n    }\n\n    resolve(idsInput = this, defs = this.$definitions) {\n      const ids = idsInput === this ? Object.keys(this.$definitions) : idsInput;\n      let resolved = new Set();\n      let resultado = [];\n      const resolverNodo = function(id) {\n        console.log(\"resolviendo nodo:\", id, defs);\n        if (resolved.has(id)) return;\n        if (!defs[id]) return; // Si no está definido, lo ignoramos\n        for (let dep of defs[id].dependencies || []) {\n          resolverNodo(dep);\n        }\n        resolved.add(id);\n        resultado.push(id);\n      }\n      for (let id of [].concat(ids)) {\n        resolverNodo(id);\n      }\n      return resultado;\n    }\n\n    addDefinition(name, definition, shouldFailOnRedundancy = 1, shouldOverrideOnRedundancy = 1) {\n      Validation: {\n        if (this.hasDefined(name)) {\n          if (shouldFailOnRedundancy) {\n            throw new Error(`Dependency «${name}» is already defined and should not redund on «LswDepender.define»`);\n          } else if (!shouldOverrideOnRedundancy) {\n            return false; // !@BREAK: the fallback must not override it\n          } else if (shouldOverrideOnRedundancy) {\n            // !@OK: the fallback will override it\n          } else {\n            throw new Error(\"Cannot logically happen (1)\");\n          }\n        }\n      }\n      Define_it: {\n        if (typeof definition !== \"object\") {\n          throw new Error(`Required definition of «${name}» to be an object on «LswDepender.define»`);\n        } else if (typeof definition.id !== \"string\") {\n          definition.id = name;\n        } else if (Array.isArray(definition.dependencies)) {\n          throw new Error(`Required definition of «${name}» its property «dependencies» to be a array on «LswDepender.define»`);\n        } else {\n          for (let indexDependency = 0; indexDependency < definition.dependencies.length; indexDependency++) {\n            const dependencyRef = definition.dependencies[indexDependency];\n            if (typeof dependencyRef !== \"string\") {\n              throw new Error(`Required definition of «${name}» its property «dependencies» on its index «${indexDependency}» to be a string on «LswDepender.define»`);\n            }\n          }\n        }\n        this.$definitions[name] = new Definition(definition);\n      }\n    }\n\n    addUniqueDefinitions(moreDefinitions = {}) {\n      const definitionIds = Object.keys(moreDefinitions);\n      for (let indexId = 0; indexId < definitionIds.length; indexId++) {\n        const definitionId = definitionIds[indexId];\n        const definitionInstance = moreDefinitions[definitionId];\n        this.define(definitionId, definitionInstance, 1);\n      }\n    }\n\n    addMissingDefinitions(moreDefinitions = {}) {\n      const definitionIds = Object.keys(moreDefinitions);\n      for (let indexId = 0; indexId < definitionIds.length; indexId++) {\n        const definitionId = definitionIds[indexId];\n        const definitionInstance = moreDefinitions[definitionId];\n        this.define(definitionId, definitionInstance, 0, 0);\n      }\n    }\n\n    resetDefinitions(moreDefinitions = {}) {\n      const definitionIds = Object.keys(moreDefinitions);\n      for (let indexId = 0; indexId < definitionIds.length; indexId++) {\n        const definitionId = definitionIds[indexId];\n        const definitionInstance = moreDefinitions[definitionId];\n        this.define(definitionId, definitionInstance, 0, 1);\n      }\n    }\n\n    deleteDefinitions(definitionsInput = []) {\n      const definitions = Array.isArray(definitionsInput) ? definitionsInput : [definitionsInput];\n      for (let indexDefinition = 0; indexDefinition < definitions.length; indexDefinition++) {\n        const definitionId = definitions[indexDefinition];\n        delete this.$definitions[definitionId];\n      }\n    }\n\n  }\n\n  LswDepender.default = LswDepender;\n",
      "$code.label": "LswDepender class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-dom/lsw-dom-irruptor.js",
      "$location": {
        "start": {
          "offset": 292,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 387,
          "line": 15,
          "column": 1
        }
      },
      "section": "Lsw Dom Irruptor API » LswDomIrruptor class",
      "$code": "  const LswDomIrruptor = class {\n\n    static async aniadirNota() {\n      LswDom.querySelectorFirst(\".home_bottom_panel > button\", \"+ 💬\").click();\n    }\n    static async verNotas() {\n      LswDom.querySelectorFirst(\".home_mobile_off_panel > .mobile_off_panel_cell\", \"💬\").click();\n    }\n    static async abrirHomepage() {\n      LswDom.querySelectorFirst(\".main_topbar_button\", \"📟\").click();\n    }\n    static async calendario() {\n      LswDom.querySelectorFirst(\".home_mobile_off_panel > .mobile_off_panel_cell\", \"📅\").click();\n    }\n    static async abrirCalendario() {\n      LswDom.querySelectorFirst(\".main_topbar_button\", \"📆\").click();\n    }\n    static async reportesDeCalendario() {\n      LswDom.querySelectorFirst(\".home_mobile_off_panel > .mobile_off_panel_cell\", \"📅\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"button.nowrap\", \"📊\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"button\", \"🔮 Iniciar conductometría\").click();\n      \n    }\n    static async abrirNavegacionRapida() {\n      LswDom.querySelectorFirst(\".main_topbar_button\", \"📟\").click();\n    }\n    static async abrirBinarios() {\n      LswDom.querySelectorFirst(\".main_topbar_button\", \"📟\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\".lista_apps div\", \"💣 Binarios\").click();\n    }\n    static async abrirBaseDeDatos() {\n      LswDom.querySelectorFirst(\".main_topbar_button\", \"📟\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"div\", \"📦 Base de datos\").click();\n    }\n    static async abrirBaseDeDatosPorTabla(tabla) {\n      LswDom.querySelectorFirst(\".main_topbar_button\", \"📟\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"div\", \"📦 Base de datos\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"span.table_name\", tabla).click();\n    }\n    static async abrirBaseDeDatosPorNuevoDatoDeTabla(tabla) {\n      this.abrirBaseDeDatosPorTabla(tabla);\n      await LswDom.waitForMilliseconds(500);\n      LswDom.querySelectorFirst(\"button\", \"➕\").click();\n    }\n    static async abrirAccionesVirtuales() {\n      await this.abrirBaseDeDatos();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"button\", \"Accion_virtual\").click();\n    }\n    static async abrirTareasPosterioresDeNavegacionRapida() {\n      LswDom.querySelectorFirst(\".lista_apps button\", \"🕓 Tareas posteriores\").click();\n    }\n    static async abrirRecords() {\n      this.abrirTareasPosterioresDeNavegacionRapida();\n      await LswDom.waitForMilliseconds(500);\n      LswDom.querySelectorFirst(\"button\", \"📷📊\").click();\n    }\n    static async configuraciones() {\n      LswDom.querySelectorFirst(\"#windows_pivot_button\", \"🔵\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"button.main_tab_topbar_button\", \"🔧\").click();\n    }\n    static async abrirConfiguraciones() {\n      LswDom.querySelectorFirst(\"#windows_pivot_button\", \"🔵\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"button.main_tab_topbar_button\", \"🔧\").click();\n    }\n    static async abrirFicheros() {\n      LswDom.querySelectorFirst(\"#windows_pivot_button\", \"🔵\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"button.main_tab_topbar_button\", \"📂\").click();\n    }\n    static async abrirWiki() {\n      LswDom.querySelectorFirst(\".mobile_off_panel_cell\", \"🔬\").click();\n    }\n    static async abrirWikiArticulos() {\n      await this.abrirWiki();\n      await LswDom.waitForMilliseconds();\n      Abrir_articulos: {\n        await LswDom.waitForMilliseconds(200);\n        LswDom.querySelectorFirst(\".lsw_wiki button.supermini\", \"🔬\").click();\n        return;\n      }\n    }\n    static async abrirWikiLibros() {\n      await this.abrirWiki();\n      await LswDom.waitForMilliseconds();\n      Abrir_libros: {\n        await LswDom.waitForMilliseconds(200);\n        LswDom.querySelectorFirst(\".lsw_wiki button.supermini\", \"📚\").click();\n      }\n    }\n    static async abrirWeekPlanner() {\n      await this.abrirCalendario();\n      Abrir_planificador: {\n        await LswDom.waitForMilliseconds(1000);\n        LswDom.querySelectorFirst(\"button\", \"7️⃣\").click();\n      }\n    }\n    static async abrirAcciones() {\n      await this.abrirBaseDeDatos();\n      Abrir_planificador: {\n        await LswDom.waitForMilliseconds(1000);\n        LswDom.querySelectorFirst(\"button\", \"7️⃣\").click();\n      }\n    }\n    \n    static async abrirNuevaFeature() {\n      await this.abrirHomepage();\n      Abrir_planificador: {\n        await LswDom.waitForMilliseconds(1000);\n        LswDom.querySelectorFirst(\"div\", \"✨ Nueva feature\").click();\n      }\n    }\n\n    static async abrirJsInspector() {\n      await this.abrirHomepage();\n      Abrir_inspector: {\n        await LswDom.waitForMilliseconds(1000);\n        LswDom.querySelectorFirst(\"div\", \"🪲 Inspector de JS\").click();\n      }\n    }\n\n    static async abrirTestsDeAplicacion() {\n      await this.abrirHomepage();\n      Abrir_tests: {\n        await LswDom.waitForMilliseconds(200);\n        LswDom.querySelectorFirst(\"div\", \"✅ Tests de aplicación\").click();\n      }\n    }\n\n    static async arrancarTestsDeAplicacion() {\n      await this.abrirTestsDeAplicacion();\n      Abrir_tests: {\n        await LswDomIrruptor.abrirTestsDeAplicacion();\n        await LswUtils.waitForMilliseconds(1000);\n        await LswDom.querySelectorFirst(\"button\", \"🧪 ↗️\").click();\n        await LswUtils.waitForMilliseconds(1000);\n        await LswDom.querySelectorFirst(\"button\", \"▶️ Iniciar tests\").click();\n      }\n    }\n\n    static async getRutinerTimeout() {\n      const rutinerConfig = await Vue.prototype.$lsw.fs.evaluateAsDotenvFileOrReturn(\"/kernel/settings/rutiner.config.env\", []);\n      LswTimer.utils.fromDurationstringToMilliseconds(rutinerConfig.timeout);\n      return rutinerConfig.timeout;\n    }\n\n    static async setRutinerTimeout(durationstring) {\n      LswTimer.utils.fromDurationstringToMilliseconds(durationstring);\n      await Vue.prototype.$lsw.fs.write_file(\"/kernel/settings/rutiner.config.env\", \"timeout=\" + durationstring);\n    }\n\n    static async configurarRutinerTimeout() {\n      const currentTimeout = await LswDomIrruptor.getRutinerTimeout();\n      const duracion = await Vue.prototype.$lsw.dialogs.open({\n        title: \"Configurar frecuencia de mensaje rutinario\",\n        template: `\n          <div class=\"pad_1\" v-xform.form=\"{ onSubmit }\" ref=\"formulario\">\n            <div class=\"pad_bottom_1\">Especifica la duración preferida:</div>\n            <lsw-duration-control :settings=\"{name:'duracion',initialValue}\" />\n            <hr/>\n            <div class=\"flex_row centered pad_1\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"submitForm\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            initialValue: currentTimeout,\n          },\n          methods: {\n            onSubmit(formdata) {\n              return this.accept(formdata.duracion);\n            },\n            async submitForm() {\n              this.$trace(\"Dialogs.configurar-frecuencia-rutiner.methods.submitForm\");\n              return await this.$refs.formulario.$xform.submit();\n            }\n          },\n        }\n      });\n      if(duracion === -1) {\n        return;\n      }\n      if(typeof duracion !== \"string\") {\n        console.log(\"duracion\", duracion);\n      }\n      const milliseconds = LswTimer.utils.fromDurationstringToMilliseconds(duracion);\n      return await LswDomIrruptor.setRutinerTimeout(duracion);\n    }\n\n  }\n\n  return LswDomIrruptor;\n",
      "$code.label": "LswDomIrruptor class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-dom/lsw-dom.js",
      "$location": {
        "start": {
          "offset": 281,
          "line": 15,
          "column": 3
        },
        "end": {
          "offset": 480,
          "line": 25,
          "column": 6
        }
      },
      "$section": "Lsw Dom API » LswDom class",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "LswDom",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-dom/lsw-dom.js",
      "$location": {
        "start": {
          "offset": 481,
          "line": 26,
          "column": 1
        },
        "end": {
          "offset": 551,
          "line": 27,
          "column": 1
        }
      },
      "section": "Lsw Dom API » LswDom class",
      "$code": "  const LswDom = class {\n\n    static collectLeaves(originalCollection, selectorSequence = []) {\n      $ensure(originalCollection).type(\"object\");\n      $ensure(selectorSequence).type(\"object\").to.be.array();\n      let collection = Array.isArray(originalCollection) ? originalCollection : [originalCollection];\n      const mapperFactory = selector => element => {\n        return [].concat(element.querySelectorAll(selector));\n      };\n      for(let indexSelector=0; indexSelector<selectorSequence.length; indexSelector++) {\n        const selector = selectorSequence[indexSelector];\n        const subnodes = collection.map(mapperFactory(selector)).flat();\n        collection = [].concat(subnodes);\n      }\n      return collection;\n    }\n\n    static getClosestParent(originalElement, selector) {\n      $ensure(originalElement).type(\"object\").to.be.instanceOf(HTMLElement);\n      $ensure(selector).type(\"string\");\n      let element = originalElement.parentElement;\n      while(element && (element !== document)) {\n        if(element.matches(selector)) {\n          return element;\n        }\n        element = element.parentElement;\n      }\n      return null;\n    }\n\n    static getClosestChildren(originalElement, selector) {\n      $ensure(originalElement).type(\"object\").to.be.instanceOf(HTMLElement);\n      $ensure(selector).type(\"string\");\n      return [...originalElement.querySelectorAll(selector)].filter(element => {\n        return this.getClosestParent(element, selector) === originalElement;\n      });\n    }\n\n    static querySelectorFirst(selector, matchingText = false, originalElement = document) {\n      const all = originalElement.querySelectorAll(selector);\n      const matched = Array.from(all).filter(element => {\n        return element.textContent.trim().toLowerCase() === matchingText.toLowerCase();\n      });\n      return matched.length ? matched[0] : null;\n    }\n\n    static findVue(selector, matchingText = false, base = document) {\n      const all = base.querySelectorAll(selector);\n      const matched = Array.from(all).filter(element => {\n        if(!matchingText) {\n          return true;\n        }\n        return element.textContent.trim().toLowerCase() === matchingText.toLowerCase();\n      });\n      return matched.length ? matched[0].__vue__ : null;\n    }\n\n    static waitForMilliseconds(ms) {\n      return new Promise((resolve, reject) => {\n        setTimeout(resolve, ms);\n      });\n    }\n\n    static extractPlaintextFromHtmltext(htmlText) {\n      const el1 = document.createElement(\"div\");\n      el1.innerHTML = htmlText;\n      return el1.textContent;\n    }\n\n    static findCssRulesContaining(selector) {\n      const matchingRules = [];\n      for (const styleSheet of document.styleSheets) {\n        let rules;\n        try {\n          rules = styleSheet.cssRules || styleSheet.rules;\n        } catch (e) {\n          // Evita errores por CORS en hojas de estilo externas\n          continue;\n        }\n        if (!rules) continue;\n        for (const rule of rules) {\n          if (rule.selectorText && rule.selectorText.includes(selector)) {\n            matchingRules.push(rule);\n          }\n        }\n      }\n      return matchingRules;\n    }\n\n    static hasCssRulesContaining(selector) {\n      const matchingRules = [];\n      for (const styleSheet of document.styleSheets) {\n        let rules;\n        try {\n          rules = styleSheet.cssRules || styleSheet.rules;\n        } catch (e) {\n          // Evita errores por CORS en hojas de estilo externas\n          continue;\n        }\n        if (!rules) continue;\n        for (const rule of rules) {\n          if (rule.selectorText && rule.selectorText.includes(selector)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n  };\n",
      "$code.label": "LswDom class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-dom/lsw-vue2.js",
      "$location": {
        "start": {
          "offset": 280,
          "line": 14,
          "column": 3
        },
        "end": {
          "offset": 482,
          "line": 24,
          "column": 6
        }
      },
      "$section": "Lsw Vue2 API » LswVue2 class",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "LswVue2",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-dom/lsw-vue2.js",
      "$location": {
        "start": {
          "offset": 483,
          "line": 25,
          "column": 1
        },
        "end": {
          "offset": 556,
          "line": 26,
          "column": 1
        }
      },
      "section": "Lsw Vue2 API » LswVue2 class",
      "$code": "  const LswVue2 = class {\n\n    static getClosestParent(component, filterCallback) {\n      $ensure(component).type(\"object\");\n      $ensure(filterCallback).type(\"function\");\n      let parentOf = component;\n      do {\n        parentOf = parentOf.$parent;\n        const isValid = filterCallback(parentOf);\n        if (isValid) {\n          return parentOf;\n        }\n      } while (typeof parentOf !== \"undefined\");\n      return undefined;\n    }\n\n    static extendComponent(baseComponent = {}) {\n      const extendedComponent = Object.assign({}, baseComponent);\n      extendedComponent.props = Object.assign({}, baseComponent.props || {});\n      extendedComponent.methods = Object.assign({}, baseComponent.methods || {});\n      extendedComponent.watch = Object.assign({}, baseComponent.watch || {});\n      extendedComponent.computed = Object.assign({}, baseComponent.computed || {});\n      return extendedComponent;\n    }\n\n  }\n",
      "$code.label": "LswVue2 class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-ensurer/ensure.js",
      "$location": {
        "start": {
          "offset": 286,
          "line": 14,
          "column": 3
        },
        "end": {
          "offset": 497,
          "line": 24,
          "column": 6
        }
      },
      "$section": "Lsw Ensurer API » LswEnsurer class",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "LswEnsurer",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-ensurer/ensure.js",
      "$location": {
        "start": {
          "offset": 498,
          "line": 25,
          "column": 1
        },
        "end": {
          "offset": 580,
          "line": 26,
          "column": 1
        }
      },
      "section": "Lsw Ensurer API » LswEnsurer class",
      "$code": "  class AssertionError extends Error {\n\n    constructor(...args) {\n      super(...args);\n      this.name = \"AssertionError\";\n    }\n\n  }\n\n  class Ensurement {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor(source, asLabeledObject = 0) {\n      Resolve_subject: {\n        if ((asLabeledObject === 1) && (typeof source === \"object\")) {\n          const sourceKeys = Object.keys(source);\n          if (sourceKeys.length !== 1) {\n            throw new Error(`The first parameter of $ensure or $check {when $2 is literally 1} must have 1 property (not ${sourceKeys.length}) on «Ensurement.constructor»`);\n          }\n          this.$subjectId = sourceKeys[0];\n          this.$subject = source[this.$subjectId];\n        } else if(typeof asLabeledObject === \"string\") {\n          this.$subjectId = asLabeledObject;\n          this.$subject = source;\n        } else {\n          this.$subjectId = \"@\";\n          this.$subject = source;\n        }\n      }\n      this.$operation = undefined;\n      this.$objectation = undefined;\n      this.asBoolean = false;\n    }\n    type(value) {\n      this.$operation = \"is of type\";\n      this.$objectation = value;\n      if(typeof value === \"string\") {\n        if (typeof this.$subject !== value) {\n          return this.$asFailed();\n        }\n      } else if(Array.isArray(value)) {\n        if(value.indexOf(typeof this.$subject) === -1) {\n          return this.$asFailed();\n        }\n      } else {\n        throw new Error(`Bad parameter on «$ensure(...).type(?)» (${typeof value} not admitted)`);\n      }\n      return this.$asResolved();\n    }\n    notType(value) {\n      this.$operation = \"is not of type\";\n      this.$objectation = value;\n      if (typeof this.$subject === value) {\n        return this.$asFailed();\n      }\n      return this.$asResolved();\n    }\n    is(value) {\n      this.$operation = \"is\";\n      this.$objectation = value;\n      if (this.$subject !== value) {\n        return this.$asFailed();\n      }\n      return this.$asResolved();\n    }\n    isnt(value) {\n      this.$operation = \"is not\";\n      this.$objectation = value;\n      if (this.$subject === value) {\n        return this.$asFailed();\n      }\n      return this.$asResolved();\n    }\n    can(value) {\n      this.$operation = \"can\";\n      this.$objectation = value;\n      if (!value(this.$subject)) {\n        return this.$asFailed();\n      }\n      return this.$asResolved();\n    }\n    cant(value) {\n      this.$operation = \"cant\";\n      this.$objectation = value;\n      if (value(this.$subject)) {\n        return this.$asFailed();\n      }\n      return this.$asResolved();\n    }\n    throws(value) {\n      this.$operation = \"throws\";\n      this.$objectation = value;\n      try {\n        objectation(this.$subject);\n        return this.$asFailed();\n      } catch (error) {\n        return this.$asResolved();\n      }\n    }\n    doesntThrow(value) {\n      this.$operation = \"doesntThrow\";\n      this.$objectation = value;\n      try {\n        value(this.$subject);\n        return this.$asFailed();\n      } catch (error) {\n        return this.$asResolved();\n      }\n    }\n    $asFailed(operation = this.$operation) {\n      if (this.asBoolean) {\n        return false;\n      }\n      throw new AssertionError(\"could not ensure «\" + this.$subjectId + \"» \" + operation + (this.$objectation ? \" «\" + this.$getObjectationAsString() + \"»\": \"\") + \"\");\n    }\n    $getObjectationAsString() {\n      return JSON.stringify(this.$objectation);\n    }\n    $asResolved() {\n      if (this.asBoolean) {\n        return true;\n      } else {\n        return this;\n      }\n    }\n  };\n\n  const BasicToBeInterface = class {\n    $isNegated = false;\n    set $operation(value) {\n      this.$ensurement.$operation = value;\n    }\n    get $operation() {\n      return this.$ensurement.$operation;\n    }\n    set $objectation(value) {\n      this.$ensurement.$objectation = value;\n    }\n    get $objectation() {\n      return this.$ensurement.$objectation;\n    }\n    constructor(ensurement) {\n      this.$ensurement = ensurement;\n      this.$subject = this.$ensurement.$subject;\n    }\n    $makeNegable(condition) {\n      return this.$isNegated === true ? !condition : condition;\n    }\n    $asFailed() {\n      return this.$ensurement.$asFailed();\n    }\n    $resolveNegableString(text) {\n      return text.replace(/\\{not\\?\\} */g, this.$isNegated ? \"not \" : \"\");\n    }\n  };\n\n  const ToBeInterface = class extends BasicToBeInterface {\n    string() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be string\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof this.$subject !== \"string\")) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    number() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be number\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof this.$subject !== \"number\") || Number.isNaN(this.$subject)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    object() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be object\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof this.$subject !== \"object\")) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    null() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be null\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof this.$subject !== null)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    undefined() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be undefined\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof this.$subject !== \"undefined\")) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    boolean() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be boolean\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof this.$subject !== \"boolean\")) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    instanceOf(clazz) {\n      this.$operation = this.$resolveNegableString(\"to {not?} be instanceOf\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(!(this.$subject instanceof clazz))) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    array() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be array\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(!Array.isArray(this.$subject))) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    function() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be function\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof (this.$subject) !== \"function\")) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    empty() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be empty\");\n      this.$objectation = undefined;\n      const isEmpty = (() => {\n        const s = this.$subject;\n        if (Array.isArray(s)) {\n          return s.length === 0;\n        } else if (typeof s === \"object\") {\n          return s === null || Object.keys(s).length === 0;\n        } else if (typeof s === \"string\") {\n          return s === \"\";\n        } else if (typeof s === \"number\") {\n          return s === 0;\n        } else if (typeof s === \"boolean\") {\n          return s === false;\n        } else {\n          return true;\n        }\n      })();\n      if (this.$makeNegable(!isEmpty)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    equalTo(value) {\n      this.$operation = this.$resolveNegableString(\"to {not?} be equal to\");\n      this.$objectation = value;\n      let isEqual = this.$subject === value;\n      if (this.$makeNegable(!isEqual)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    equalOrGreaterThan(value) {\n      this.$operation = this.$resolveNegableString(\"to {not?} be equal or greater than\");\n      this.$objectation = value;\n      let isGreaterOrEqual = this.$subject >= value;\n      if (this.$makeNegable(!isGreaterOrEqual)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    greaterThan(value) {\n      this.$operation = this.$resolveNegableString(\"to {not?} be greater than\");\n      this.$objectation = value;\n      let isGreater = this.$subject > value;\n      if (this.$makeNegable(!isGreater)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    greaterOrEqualTo(...args) {\n      return this.equalOrGreaterThan(...args);\n    }\n    equalOrLowerThan(value) {\n      this.$operation = this.$resolveNegableString(\"to {not?} equal or lower than\");\n      this.$objectation = value;\n      let isGreaterOrEqual = this.$subject <= value;\n      if (this.$makeNegable(!isGreaterOrEqual)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    lowerThan(value) {\n      this.$operation = this.$resolveNegableString(\"to {not?} be lower than\");\n      this.$objectation = value;\n      let isGreater = this.$subject < value;\n      if (this.$makeNegable(!isGreater)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    lowerOrEqualTo(value) {\n      return this.equalOrLowerThan(...args);\n    }\n    oneOf(value) {\n      this.$operation = this.$resolveNegableString(\"to {not?} be one of\");\n      this.$objectation = value;\n      if(!Array.isArray(value)) {\n        throw new Error(`Required on «$ensure(...).to.be.oneOf(!)» to provide an array on «ToBeInterface.oneOf»`);\n      }\n      let isOne = this.$objectation.indexOf(this.$subject) !== -1;\n      if (this.$makeNegable(!isOne)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n  };\n\n  const ToNotBeInterface = class extends ToBeInterface {\n    $isNegated = true;\n  };\n\n  const ToHaveInterface = class extends BasicToBeInterface {\n\n    text(prop) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have text\");\n      this.$objectation = prop;\n      const hasSubstring = this.$subject.indexOf(prop) !== -1;\n      if (this.$makeNegable(!hasSubstring)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    \n    key(prop) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have key\");\n      this.$objectation = prop;\n      const keys = Object.keys(this.$subject);\n      const hasKey = keys.indexOf(prop) !== -1;\n      if (this.$makeNegable(!hasKey)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n    value(prop) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have value\");\n      this.$objectation = prop;\n      const values = Object.values(this.$subject);\n      const hasValue = values.indexOf(prop) !== -1;\n      if (this.$makeNegable(!hasValue)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n    onlyPotentialKeys(props) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have only potential keys\");\n      this.$objectation = props;\n      const keys = Object.keys(this.$subject);\n      let hasOnly = true;\n      Iterating_props:\n      for (let index = 0; index < keys.length; index++) {\n        const key = keys[index];\n        if (props.indexOf(key) === -1) {\n          hasOnly = false;\n          break Iterating_props;\n        }\n      }\n      if (this.$makeNegable(!hasOnly)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n    keys(props) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have keys\");\n      this.$objectation = props;\n      const keys = Object.keys(this.$subject);\n      let hasKeys = true;\n      Iterating_props:\n      for (let index = 0; index < props.length; index++) {\n        const prop = props[index];\n        if (keys.indexOf(prop) === -1) {\n          hasKeys = false;\n          break Iterating_props;\n        }\n      }\n      if (this.$makeNegable(!hasKeys)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n    values(props) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have values\");\n      this.$objectation = props;\n      const values = Object.values(this.$subject);\n      let hasValues = true;\n      Iterating_props:\n      for (let index = 0; index < props.length; index++) {\n        const prop = props[index];\n        if (values.indexOf(prop) === -1) {\n          hasValues = false;\n          break Iterating_props;\n        }\n      }\n      if (this.$makeNegable(!hasValues)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n    uniquelyKeys(props) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have uniquelyKeys\");\n      this.$objectation = props;\n      const keys = Object.keys(this.$subject);\n      let hasKeys = true;\n      Iterating_props:\n      for (let index = 0; index < keys.length; index++) {\n        const key = keys[index];\n        if (props.indexOf(key) === -1) {\n          hasKeys = false;\n          break Iterating_props;\n        }\n      }\n      if (this.$makeNegable(!hasKeys)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n    uniquelyValues(props) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have uniquelyValues\");\n      this.$objectation = props;\n      const values = Object.values(this.$subject);\n      let hasValues = true;\n      Iterating_props:\n      for (let index = 0; index < values.length; index++) {\n        const value = values[index];\n        if (props.indexOf(value) === -1) {\n          hasValues = false;\n          break Iterating_props;\n        }\n      }\n      if (this.$makeNegable(!hasValues)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n  };\n\n  const ToNotHaveInterface = class extends ToHaveInterface {\n    $isNegated = true;\n  };\n\n  const EnsurementV1 = class extends Ensurement {\n\n    selfExtend(obj) {\n      return Object.assign(this, obj);\n    }\n\n    get $toNotBe() {\n      return new ToNotBeInterface(this);\n    }\n\n    get $toNotHave() {\n      return new ToNotHaveInterface(this);\n    }\n\n    get $toNot() {\n      return {\n        be: this.$toNotBe,\n        have: this.$toNotHave,\n      }\n    }\n\n    get $toBe() {\n      return new ToBeInterface(this);\n    }\n\n    get $toHave() {\n      return new ToHaveInterface(this);\n    }\n\n    get to() {\n      return {\n        be: this.$toBe,\n        have: this.$toHave,\n        not: this.$toNot,\n      };\n    }\n\n    its(id) {\n      return this.constructor.create({\n        [id]: this.$subject[id]\n      }, 1).selfExtend({\n        $parent: this,\n        asBoolean: this.asBoolean,\n      });\n    }\n\n    getSubject() {\n      return this.$subject;\n    }\n\n    safelyBack(levels = 1) {\n      for (let index = 0; index < levels; index++) {\n        try {\n          parent = this.$parent;\n        } catch (error) {\n          // @OK.\n        }\n      }\n    }\n\n    back(levels = 1) {\n      let parent = this;\n      for (let index = 0; index < levels; index++) {\n        try {\n          parent = this.$parent;\n        } catch (error) {\n          throw new Error(`Ensurement could not go «back» reaching parent on level «${index}» on «ensure(...).back»`);\n        }\n      }\n      return parent;\n    }\n\n    static $or(options) {\n      let correctOption = undefined;\n      const allIds = Object.keys(options);\n      const orError = new Error(`could not ensure «or» group with options: «${allIds.join(\"», «\")}»`);\n      for(let index=0; index<allIds.length; index++) {\n        const currentId = allIds[index];\n        const currentOptionCallback = options[currentId];\n        try {\n          currentOptionCallback();\n          return currentId;\n        } catch (error) {\n          orError.appendError(error);\n        }\n      }\n      throw orError.unified();\n    }\n    \n    static id(obj) {\n      return this.create(obj,1);\n    }\n    \n    static ensure(...args) {\n      return this.create(...args);\n    }\n\n    static check(...args) {\n      return this.create(...args).selfExtend({\n        asBoolean: true\n      });\n    }\n\n    static assert(condition, errorMessage = \"Assertion error happened\") {\n      if (!condition) {\n        throw new AssertionError(errorMessage);\n      }\n      return true;\n    }\n\n    static fails(callback, errorMessage = \"Assertion error happened\") {\n      let passes = true;\n      try {\n        callback();\n        passes = false;\n      } catch (error) {\n        return true;\n      }\n      if (!passes) {\n        throw new AssertionError(errorMessage);\n      }\n    }\n\n    static AssertionError = AssertionError;\n\n  };\n\n  Export_to_globals: {\n    globalThis.$fails = EnsurementV1.fails.bind(EnsurementV1);\n    globalThis.$ensure = EnsurementV1.ensure.bind(EnsurementV1);\n    globalThis.$ensure.id = EnsurementV1.id.bind(EnsurementV1);\n    globalThis.$ensure.check = EnsurementV1.check.bind(EnsurementV1);\n    globalThis.$ensure.assert = EnsurementV1.assert.bind(EnsurementV1);\n    globalThis.$ensure.fails = EnsurementV1.fails.bind(EnsurementV1);\n    globalThis.$check = EnsurementV1.check.bind(EnsurementV1);\n    globalThis.$assert = EnsurementV1.assert.bind(EnsurementV1);\n    // globalThis.AssertionError = AssertionError;\n    globalThis.$ensure.$or = EnsurementV1.$or;\n  }\n  \n  return EnsurementV1;\n",
      "$code.label": "LswEnsurer class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-error-manager/lsw-error-manager.js",
      "$location": {
        "start": {
          "offset": 2,
          "line": 3,
          "column": 1
        },
        "end": {
          "offset": 208,
          "line": 13,
          "column": 4
        }
      },
      "$section": "Lsw ErrorManager API » LswErrorManager class",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "LswErrorManager",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-error-manager/lsw-error-manager.js",
      "$location": {
        "start": {
          "offset": 209,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 304,
          "line": 15,
          "column": 1
        }
      },
      "section": "Lsw ErrorManager API » LswErrorManager class",
      "$code": "\nglobalThis.ErrorSummary = class {\n  constructor(data) {\n    Object.assign(this, data);\n  }\n  toString() {\n    return JSON.stringify(this, null, 2);\n  }\n}\n\nglobalThis.Error = class AccumulableError extends Error {\n  constructor(...args) {\n    super(...args);\n    this.$accumulatedErrors = [];\n  }\n  toString() {\n    return JSON.stringify(this, null, 2);\n  }\n  toJSON() {\n    const data = {\n      name: this.name || \"Error\",\n      message: this.message || \"\",\n      stack: this.stack ? this.stack.split(\"\\n    at \") : \"\",\n      ...this,\n    };\n    if (this.$accumulatedErrors && this.$accumulatedErrors.length) {\n      data.$accumulatedErrors = this.$accumulatedErrors;\n    }\n    return data;\n  }\n  unified() {\n    this.message = this.message + \"\\n\" + this.$accumulatedErrors.map((e, i) => (i + 1) + ': ' + e.name + ': ' + e.message).join(\"\\n\");\n    this.$accumulatedErrors = [];\n    return this;\n  }\n  prependError(error) {\n    this.$accumulatedErrors.unshift(error);\n    return this;\n  }\n  appendError(error) {\n    this.$accumulatedErrors.push(error);\n    return this;\n  }\n  summarized() {\n    let uniqueTraces = [];\n    let commonTraces = [];\n    // Recopilar las trazas de la pila de errores acumulados\n    const allStacks = this.$accumulatedErrors.map(\n      (error) => (error.stack ? error.stack.split(\"\\n    at \") : [])\n    );\n    // Si no hay acumulados, no hay comunes ni únicos\n    if (allStacks.length === 0) {\n      return new ErrorSummary({\n        name: this.name,\n        message: this.message,\n        stack: this.stack ? this.stack.split(\"\\n\").map(line => line.split(\"@\")) : [],\n        uniqueTraces: uniqueTraces,\n        commonTraces: commonTraces,\n      });\n    }\n    // Identificar trazas comunes\n    const firstStack = allStacks[0];\n    for (let i = 0; i < firstStack.length; i++) {\n      const trace = firstStack[i];\n      let isCommon = true;\n      for (let j = 1; j < allStacks.length; j++) {\n        if (!allStacks[j].includes(trace)) {\n          isCommon = false;\n          break;\n        }\n      }\n      if (isCommon) {\n        commonTraces.push(trace);\n      }\n    }\n    // Identificar trazas únicas\n    for (let i = 0; i < allStacks.length; i++) {\n      const uniqueForStack = [];\n      for (let j = 0; j < allStacks[i].length; j++) {\n        const trace = allStacks[i][j];\n        if (!commonTraces.includes(trace)) {\n          uniqueForStack.push(trace);\n        }\n      }\n      uniqueTraces.push(uniqueForStack);\n    }\n    return new ErrorSummary({\n      ...this,\n      name: this.name,\n      message: this.message,\n      stack: this.stack ? this.stack.split(\"\\n    at \") : [],\n      uniqueTraces: uniqueTraces,\n      commonTraces: commonTraces,\n    });\n  }\n\n}\n\n",
      "$code.label": "LswErrorManager class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-filesystem/ufs-v1.0.2.js",
      "$location": {
        "start": {
          "offset": 326,
          "line": 9,
          "column": 1
        },
        "end": {
          "offset": 408,
          "line": 10,
          "column": 1
        }
      },
      "section": "UFS Manager API » UFS_manager class",
      "$code": "(function (factory) {\n  const name = \"UFS_manager\";\n  const modulo = factory();\n  if (typeof window !== 'undefined') {\n    window[name] = modulo;\n  }\n  if (typeof module !== 'undefined') {\n    module.exports = modulo;\n  }\n  if (typeof global !== 'undefined') {\n    global[name] = modulo;\n  }\n  return modulo;\n})(function () {\n  const FilesystemError = class extends Error {\n    constructor(...args) {\n      super(...args);\n      this.name = \"FilesystemError\";\n    }\n  }\n  const UFS_manager_for_node = class {\n    constructor() {\n      // @OK\n    }\n    init() {\n      return this;\n    }\n    trace(method, args = []) {\n      // @INJECTION: from LSW\n      const traceActivatedGlobally = (typeof Vue === \"undefined\") || (typeof Vue.prototype.$lsw === \"undefined\") || ((typeof Vue !== \"undefined\") && (typeof Vue.prototype.$lsw !== \"undefined\") && (Vue.prototype.$lsw.logger.$options.active));\n      if(traceActivatedGlobally) {\n        console.log(\"[ufs][node-driver][\" + method + \"]\", Array.from(args).map(arg => typeof (arg) + \": \" + arg).join(\", \"));\n      }\n    }\n    resolve_path(...args) {\n      this.trace(\"resolve_path\", arguments);\n      return require(\"path\").resolve(...args);\n    }\n    get_current_directory() {\n      this.trace(\"get_current_directory\", arguments);\n      return process.cwd();\n    }\n    change_directory(node) {\n      this.trace(\"change_directory\", arguments);\n      return process.chdir(node);\n    }\n    rename(node, node2) {\n      this.trace(\"rename\", arguments);\n      return require(\"fs\").renameSync(node, node2);\n    }\n    read_directory(node) {\n      this.trace(\"read_directory\", arguments);\n      return require(\"fs\").readdirSync(node).reduce((out, item) => {\n        const subnode_fullpath = require(\"path\").resolve(node, item);\n        out[item] = require(\"fs\").lstatSync(subnode_fullpath).isFile() ? \"...\" : {};\n        return out;\n      }, {});\n    }\n    read_file(node) {\n      this.trace(\"read_file\", arguments);\n      return require(\"fs\").readFileSync(node).toString();\n    }\n    make_directory(node) {\n      this.trace(\"make_directory\", arguments);\n      return require(\"fs\").mkdirSync(node);\n    }\n    write_file(node, contents) {\n      this.trace(\"write_file\", arguments);\n      return require(\"fs\").writeFileSync(node, contents);\n    }\n    exists(node) {\n      this.trace(\"exists\", arguments);\n      return require(\"fs\").existsSync(node);\n    }\n    is_file(node) {\n      this.trace(\"is_file\", arguments);\n      return require(\"fs\").lstatSync(node).isFile();\n    }\n    is_directory(node) {\n      this.trace(\"is_directory\", arguments);\n      return require(\"fs\").lstatSync(node).isDirectory();\n    }\n    delete_file(node) {\n      this.trace(\"delete_file\", arguments);\n      return require(\"fs\").unlinkSync(node);\n    }\n    delete_directory(node) {\n      this.trace(\"delete_directory\", arguments);\n      return require(\"fs\").rmdirSync(node, { recursive: true });\n    }\n  }\n\n  const UFS_manager_for_localstorage = class extends UFS_manager_for_node {\n    constructor(storage_id = \"ufs_main_storage\") {\n      super();\n      this.storage_id = storage_id;\n      this.current_directory = this.environment === \"node\" ? process.cwd : \"/\";\n    }\n    trace(method, args = []) {\n      console.log(\"[ufs][ls-driver][\" + method + \"]\", Array.from(args).map(arg => typeof (arg) + \": \" + arg).join(\", \"));\n    }\n    get_persisted_data() {\n      this.trace(\"get_persisted_data\", arguments);\n      if (!(this.storage_id in localStorage)) {\n        localStorage[this.storage_id] = '{\"files\":{}}';\n      }\n      const data = JSON.parse(localStorage[this.storage_id]);\n      return data;\n    }\n    set_persisted_data(data) {\n      this.trace(\"set_persisted_data\", arguments);\n      localStorage[this.storage_id] = JSON.stringify(data);\n    }\n    remove_slash_end(txt) {\n      // this.trace(\"remove_slash_end\", arguments);\n      const txt2 = txt.replace(/\\/$/g, \"\");\n      if (txt2.length === 0) {\n        return \"/\";\n      }\n      return txt2;\n    }\n    remove_repeated_slahes(txt) {\n      // this.trace(\"remove_repeated_slahes\", arguments);\n      return txt.replace(/\\/(\\/)+/g, \"/\");\n    }\n    resolve_path(...args) {\n      this.trace(\"resolve_path\", arguments);\n      Validate_args: {\n        if (args.length === 0) {\n          throw new Error(\"Method «resolve_path» requires 1 or more parameters\");\n        }\n        for (let index_parameter = 0; index_parameter < args.length; index_parameter++) {\n          const arg = args[index_parameter];\n          if (typeof arg !== \"string\") {\n            throw new Error(\"Method «resolve_path» requires only strings as parameters (on index «\" + index_parameter + \"»)\");\n          }\n        }\n      }\n      let path_parts = [];\n      Format_path: {\n        const replace_last_slash_for_nothing = arg => this.remove_slash_end(arg);\n        path_parts = args.map(replace_last_slash_for_nothing);\n        if (!path_parts[0].startsWith(\"/\")) {\n          path_parts.unshift(this.current_directory.replace(/\\/$/g, \"\"));\n        }\n      }\n      let path_text = \"\";\n      Join_path: {\n        const replace_fist_slash_for_nothing = arg => arg.replace(/^\\//g, \"\");\n        for (let index_part = 0; index_part < path_parts.length; index_part++) {\n          const path_part = path_parts[index_part];\n          if (path_part.startsWith(\"/\")) {\n            path_text = path_part;\n          } else {\n            if (path_text !== \"/\") {\n              path_text += \"/\";\n            }\n            path_text += path_part.replace(replace_fist_slash_for_nothing);\n          }\n        }\n      }\n      Fix_slash_repetitions: {\n        path_text = this.remove_repeated_slahes(path_text);\n      }\n      Resolve_double_dots: {\n        const parts = path_text.split(\"/\");\n        const stack = [];\n        Iterating_parts:\n        for (const part of parts) {\n          if (part === \"\" || part === \".\") {\n            continue Iterating_parts;\n          } else if (part === \"..\") {\n            if (stack.length > 0) {\n              stack.pop();\n            }\n          } else {\n            stack.push(part);\n          }\n        }\n        path_text = \"/\" + stack.join(\"/\");\n      }\n      return path_text;\n    }\n    get_current_directory() {\n      this.trace(\"get_current_directory\", arguments);\n      return this.resolve_path(this.current_directory);\n    }\n    change_directory(node) {\n      this.trace(\"change_directory\", arguments);\n      const is_directory = this.exists(node);\n      if (!is_directory) {\n        throw new FilesystemError(\"Cannot «change_directory» because destination does not exist at: «\" + this.resolve_path(node) + \"»\");\n      }\n      this.current_directory = this.resolve_path(node);\n      return this.current_directory;\n    }\n    operate_on_node(node, callback, should_persist = true) {\n      this.trace(\"operate_on_node\", arguments);\n      const data = this.get_persisted_data();\n      const node_solved = this.resolve_path(node);\n      const node_parts = node_solved.split(\"/\").filter(p => p !== \"\");\n      const root = data.files;\n      const current_index = [\"data\"];\n      let pivot = root;\n      let output = undefined;\n      if (node_parts.length === 0) {\n        output = callback(data, \"files\", current_index);\n      } else {\n        for (let index_part = 0; index_part < node_parts.length; index_part++) {\n          const node_part = node_parts[index_part];\n          if (index_part === (node_parts.length - 1)) {\n            output = callback(pivot, node_part, current_index);\n          } else {\n            pivot = pivot[node_part];\n          }\n          current_index.push(node_part);\n        }\n      }\n      if (should_persist) {\n        this.set_persisted_data(data);\n      }\n      return output;\n    }\n    read_directory(node) {\n      this.trace(\"read_directory\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (!(last_property in pivot)) {\n          throw new FilesystemError(\"Cannot «read_directory» because node does not exist at: «\" + this.resolve_path(node) + \"»\");\n        }\n        if (typeof pivot[last_property] !== \"object\") {\n          throw new FilesystemError(\"Cannot «read_directory» because node is a file at: «\" + this.resolve_path(node) + \"»\");\n        }\n        return pivot[last_property];\n      });\n    }\n    read_file(node) {\n      this.trace(\"read_file\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (!(last_property in pivot)) {\n          throw new FilesystemError(\"Cannot «read_file» because node does not exist at: «\" + this.resolve_path(node) + \"»\");\n        }\n        if (typeof pivot[last_property] !== \"string\") {\n          throw new FilesystemError(\"Cannot «read_file» because node is a directory at: «\" + this.resolve_path(node) + \"»\");\n        }\n        return pivot[last_property];\n      });\n    }\n    make_directory(node) {\n      this.trace(\"make_directory\", arguments);\n      this.operate_on_node(node, (pivot, last_property, index) => {\n        if (last_property in pivot) {\n          throw new FilesystemError(\"Cannot «make_directory» because node already exists at: «\" + this.resolve_path(node) + \"»\");\n        }\n        pivot[last_property] = {};\n      });\n    }\n    write_file(node, contents) {\n      this.trace(\"write_file\", arguments);\n      this.operate_on_node(node, (pivot, last_property, index) => {\n        if (last_property in pivot) {\n          if (typeof pivot[last_property] !== \"string\") {\n            throw new FilesystemError(\"Cannot «write_file» because node is a directory at: «\" + this.resolve_path(node) + \"»\");\n          }\n        }\n        pivot[last_property] = contents;\n      });\n    }\n    exists(node) {\n      this.trace(\"exists\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (!(last_property in pivot)) {\n          return false;\n        }\n        return true;\n      }, false);\n    }\n    is_file(node) {\n      this.trace(\"is_file\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (!(last_property in pivot)) {\n          return false;\n        }\n        if (typeof pivot[last_property] !== \"string\") {\n          return false;\n        }\n        return true;\n      }, false);\n    }\n    is_directory(node) {\n      this.trace(\"is_directory\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (!(last_property in pivot)) {\n          return false;\n        }\n        if (typeof pivot[last_property] !== \"object\") {\n          return false;\n        }\n        return true;\n      }, false);\n    }\n    delete_file(node) {\n      this.trace(\"delete_file\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (typeof pivot[last_property] === \"undefined\") {\n          throw new FilesystemError(\"Cannot «delete_file» because node does not exist at: «\" + this.resolve_path(node) + \"»\");\n        }\n        if (typeof pivot[last_property] !== \"string\") {\n          throw new FilesystemError(\"Cannot «delete_file» because node is a directory at: «\" + this.resolve_path(node) + \"»\");\n        }\n        delete pivot[last_property];\n        return true;\n      }, true);\n    }\n    delete_directory(node) {\n      this.trace(\"delete_directory\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (typeof pivot[last_property] === \"undefined\") {\n          console.log(pivot);\n          console.log(last_property);\n          throw new FilesystemError(\"Cannot «delete_directory» because does not exists at: «\" + this.resolve_path(node) + \"»\");\n        }\n        if (typeof pivot[last_property] !== \"object\") {\n          throw new FilesystemError(\"Cannot «delete_directory» because node is a file at: «\" + this.resolve_path(node) + \"»\");\n        }\n        delete pivot[last_property];\n        return true;\n      }, true);\n    }\n    rename(node, node2) {\n      this.trace(\"rename\", arguments);\n      const last_name = this.resolve_path(node2).split(\"/\").filter(p => p !== \"\").pop();\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (typeof pivot[last_property] === \"undefined\") {\n          throw new FilesystemError(\"Cannot «rename» because does not exists at: «\" + this.resolve_path(node) + \"»\");\n        }\n        pivot[last_name] = pivot[last_property];\n        pivot[last_property] = undefined;\n        delete pivot[last_property];\n        return true;\n      }, true);\n    }\n\n  }\n\n  const UFS_manager_for_idb = class extends UFS_manager_for_localstorage {\n\n    constructor(db_name = \"ufs_db\") {\n      super();\n      this.db_name = db_name;\n      this.db = null;\n      this.current_directory = \"/\";\n    }\n\n    trace(method, args = []) {\n      const traceActivatedGlobally = (typeof Vue === \"undefined\") || (typeof Vue.prototype.$lsw === \"undefined\") || ((typeof Vue !== \"undefined\") && (typeof Vue.prototype.$lsw !== \"undefined\") && (Vue.prototype.$lsw.logger.$options.active));\n      // @INJECTION: from LSW\n      if(traceActivatedGlobally) {\n        console.log(\"[ufs][idb-driver][\" + method + \"]\", Array.from(args).map(arg => typeof (arg) + \": \" + arg).join(\", \"));\n      }\n    }\n\n    init() {\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.open(this.db_name, 1);\n        request.onupgradeneeded = (event) => {\n          let db = event.target.result;\n          if (!db.objectStoreNames.contains(\"ufs\")) {\n            let store = db.createObjectStore(\"ufs\", {\n              keyPath: \"id\",\n              autoIncrement: true,\n            });\n            store.createIndex(\"filepath\", \"filepath\", { unique: true });\n          }\n        };\n        request.onsuccess = (event) => {\n          this.db = event.target.result;\n          resolve();\n        };\n        request.onerror = (event) => reject(event.target.error);\n      });\n    }\n\n    _get_filename(somepath) {\n      return somepath.split(\"/\").filter(p => typeof (p) !== \"undefined\").pop();\n    }\n\n    isImmediateSubpathFrom(subpath, matchable) {\n      const matchablePos = matchable.length;\n      const coincidesParentPath = subpath.substr(0, matchablePos) === matchable;\n      if (!coincidesParentPath) return false;\n      const hasNoMoreSlashes = subpath.substr(matchablePos).indexOf(\"/\") === -1;\n      if (!hasNoMoreSlashes) return false;\n      return true;\n    }\n\n    read_directory(parentIdInput = \"/\") {\n      this.trace(\"read_directory\", arguments);\n      const parentId = this.resolve_path(parentIdInput);\n      return new Promise((resolve, reject) => {\n        The_previous_process: {\n          break The_previous_process;\n          const transaction = this.db.transaction(\"ufs\", \"readonly\");\n          const store = transaction.objectStore(\"ufs\");\n          const index = store.index(\"filepath\");\n          const request = index.getAll(parentId);\n          request.onsuccess = () => {\n            let result = {};\n            for (let item of request.result) {\n              result[item.name] = item.type === \"file\" ? \"...\" : {};\n            }\n            resolve(result);\n          };\n        }\n        const transaction = this.db.transaction(\"ufs\", 'readonly');\n        const objectStore = transaction.objectStore(\"ufs\");\n        const request = objectStore.openCursor(); // Usa cursor para recorrer la BD sin cargar todo en memoria\n        const results = [];\n        const matchableSubpath = (parentId === \"/\") ? parentId : (parentId + \"/\");\n        request.onsuccess = (event) => {\n          const cursor = event.target.result;\n          if (cursor) {\n            let isAccepted = false;\n            try {\n              isAccepted = cursor.value.filepath.startsWith(matchableSubpath);\n              isAccepted = isAccepted && this.isImmediateSubpathFrom(cursor.value.filepath, matchableSubpath);\n            } catch (error) {\n              console.error(\"Error arised from filter callback on «browsie.selectMany»\", error);\n            }\n            if (isAccepted) {\n              // Añade a la colección de salida\n              results.push(cursor.value);\n            }\n            cursor.continue(); // Avanza al siguiente registro\n          } else {\n            // Se formatean los resultados:\n            const formattedResults = {};\n            results.forEach(row => {\n              const rowName = this._get_filename(row.filepath);\n              formattedResults[rowName] = row.type === \"file\" ? \"...\" : {};\n            });\n            resolve(formattedResults);\n          }\n        };\n        request.onerror = () => reject(request.error);\n      });\n    }\n\n    read_file(nodeInput) {\n      this.trace(\"read_file\", arguments);\n      const node = this.resolve_path(nodeInput);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", \"readonly\");\n        const store = transaction.objectStore(\"ufs\");\n        const indexStore = store.index(\"filepath\");\n        const request = indexStore.get(node);\n        request.onsuccess = () => {\n          resolve(request.result ? request.result.content : null);\n        };\n        request.onerror = () => reject(request.error);\n      });\n    }\n\n    async write_file(nodeInput, contents) {\n      this.trace(\"write_file\", arguments);\n      const node = this.resolve_path(nodeInput);\n      const file = await this.$filepath(node);\n      return await new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", \"readwrite\");\n        const store = transaction.objectStore(\"ufs\");\n        const filedata = { filepath: node, type: \"file\", content: contents };\n        if (file) {\n          filedata.id = file.id;\n        }\n        store.put(filedata);\n        transaction.oncomplete = () => resolve();\n        transaction.onerror = () => reject(transaction.error);\n      });\n    }\n\n    async make_directory(nodeInput) {\n      this.trace(\"make_directory\", arguments);\n      const node = this.resolve_path(nodeInput);\n      return await new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", \"readwrite\");\n        const store = transaction.objectStore(\"ufs\");\n        store.put({ filepath: node, type: \"directory\" });\n        transaction.oncomplete = () => resolve();\n        transaction.onerror = () => reject(transaction.error);\n      });\n    }\n\n    exists(nodeInput) {\n      this.trace(\"exists\", arguments);\n      const node = this.resolve_path(nodeInput);\n      return new Promise((resolve) => {\n        const transaction = this.db.transaction(\"ufs\", \"readonly\");\n        const store = transaction.objectStore(\"ufs\");\n        const indexStore = store.index(\"filepath\");\n        const request = indexStore.get(node);\n        request.onsuccess = () => resolve(!!request.result);\n        request.onerror = () => resolve(false);\n      });\n    }\n\n    is_file(nodeInput) {\n      this.trace(\"is_file\", arguments);\n      const node = this.resolve_path(nodeInput);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", \"readonly\");\n        const store = transaction.objectStore(\"ufs\");\n        const indexStore = store.index(\"filepath\");\n        const request = indexStore.get(node);\n        request.onsuccess = () => resolve(request.result ? request.result.type === \"file\" : false);\n        request.onerror = () => reject(request.error);\n      });\n    }\n\n    is_directory(nodeInput) {\n      this.trace(\"is_directory\", arguments);\n      const node = this.resolve_path(nodeInput);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", \"readonly\");\n        const store = transaction.objectStore(\"ufs\");\n        const indexStore = store.index(\"filepath\");\n        const request = indexStore.get(node);\n        request.onsuccess = () => resolve(request.result ? request.result.type === \"directory\" : false);\n        request.onerror = () => reject(request.error);\n      });\n    }\n\n    delete_file(nodeInput) {\n      this.trace(\"delete_file\", arguments);\n      const node = this.resolve_path(nodeInput);\n      return this.$deleteMany(file => {\n        return (file.type === \"file\") && (file.filepath === node);\n      });\n    }\n\n    async delete_directory(nodeInput) {\n      this.trace(\"delete_directory\", arguments);\n      const node = this.resolve_path(nodeInput);\n      await this.$deleteMany(file => file.filepath.startsWith(node));\n      await this.$deleteMany(file => file.filepath === node);\n    }\n\n    $updateMany(filterCallback, expanderCallback) {\n      this.trace(\"$updateMany\", arguments);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", 'readwrite');\n        const objectStore = transaction.objectStore(\"ufs\");\n        const request = objectStore.openCursor();\n        let updatedCount = 0;\n        request.onsuccess = () => {\n          const cursor = request.result;\n          if (cursor) {\n            const isAccepted = filterCallback(cursor.value, cursor);\n            if (isAccepted) {\n              const expanderItem = expanderCallback({ ...cursor.value }, cursor);\n              const updatedItem = { ...cursor.value, ...expanderItem };\n              const updateRequest = cursor.update(updatedItem);\n              updateRequest.onsuccess = () => {\n                updatedCount++;\n              };\n            }\n            cursor.continue();\n          } else {\n            return resolve(updatedCount);\n          }\n        };\n        request.onerror = () => reject(transaction.error);\n      });\n    }\n\n    $deleteMany(filterCallback) {\n      this.trace(\"$deleteMany\", arguments);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", 'readwrite');\n        const objectStore = transaction.objectStore(\"ufs\");\n        const request = objectStore.openCursor();\n        let deletedCount = 0;\n        request.onsuccess = () => {\n          const cursor = request.result;\n          if (cursor) {\n            const isAccepted = filterCallback(cursor.value, cursor);\n            if (isAccepted) {\n              const deleteRequest = cursor.delete();\n              deleteRequest.onsuccess = () => {\n                deletedCount++;\n              };\n            }\n            cursor.continue();\n          } else {\n            return resolve(deletedCount);\n          }\n        };\n        request.onerror = () => reject(transaction.error);\n      });\n    }\n\n    rename(nodeInput, newName) {\n      this.trace(\"rename\", arguments);\n      const node = this.resolve_path(nodeInput);\n      const newNode = node.split(\"/\").slice(0, -1).concat(newName).join(\"/\") || \"/\";\n      const pathBegin = node.replace(/\\/$/g, \"\") + \"/\";\n      const newNodeBegin = newNode.replace(/\\/$/g, \"\") + \"/\";\n      console.log(\"Buscando nodos que empiecen por: «\" + pathBegin + \"»\");\n      const renameSubnodes = async () => {\n        const allSubnodes = await this.$selectMany(file => file.filepath.startsWith(pathBegin));\n        const allPromises = [];\n        for (let index = 0; index < allSubnodes.length; index++) {\n          const subnode = allSubnodes[index];\n          const newSubpath = subnode.filepath.replace(pathBegin, newNodeBegin);;\n          console.log(\"Reemplazando a:\", subnode.filepath, \"Por:\", newSubpath);\n          const subpromise = this.$update(subnode.id, { filepath: newSubpath });\n          allPromises.push(subpromise);\n        }\n        return await Promise.all(allPromises);\n      };\n      const renameNode = () => new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", \"readwrite\");\n        const store = transaction.objectStore(\"ufs\");\n        const indexStore = store.index(\"filepath\");\n        const request = indexStore.get(node);\n        request.onsuccess = () => {\n          if (!request.result) {\n            reject(new Error(\"Node not found\"));\n            return;\n          }\n          const data = request.result;\n          data.filepath = newNode;\n          store.put(data);\n          transaction.oncomplete = () => resolve();\n          transaction.onerror = () => reject(transaction.error);\n        };\n        request.onerror = () => reject(request.error);\n      });\n      return Promise.all([\n        renameNode().then(() => renameSubnodes()),\n      ]);\n    }\n\n    async $filepath(filepath) {\n      const selection = await this.$selectMany(file => file.filepath === filepath);\n      if (selection.length === 1) {\n        return selection[0];\n      } else if (selection.length > 1) {\n        return selection;\n      }\n      return null;\n    }\n\n    $selectMany(filterCallback) {\n      this.trace(\"$selectMany\", arguments);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", 'readonly');\n        const objectStore = transaction.objectStore(\"ufs\");\n        const request = objectStore.openCursor(); // Usa cursor para recorrer la BD sin cargar todo en memoria\n        const results = [];\n        request.onsuccess = (event) => {\n          const cursor = event.target.result;\n          if (cursor) {\n            let isAccepted = undefined;\n            try {\n              isAccepted = filterCallback(cursor.value);\n            } catch (error) {\n              console.error(\"Error arised from filter callback on «selectMany»\", error);\n            }\n            if (isAccepted) { // Aplica la función de filtro\n              results.push(cursor.value);\n            }\n            cursor.continue(); // Avanza al siguiente registro\n          } else {\n            resolve(results); // Se terminó el recorrido\n          }\n        };\n        request.onerror = () => reject(request.error);\n      });\n    }\n\n    $update(id, item) {\n      this.trace(\"$update\", arguments);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", 'readwrite');\n        const objectStore = transaction.objectStore(\"ufs\");\n        const request0 = objectStore.get(id);\n        request0.onsuccess = () => {\n          const originalState = request0.result;\n          if (!originalState) return reject(`No item found by id «${id}» on «$update»`);\n          const request = objectStore.put({ ...originalState, ...item, id });\n          request.onsuccess = () => resolve(request.result);\n          request.onerror = () => reject(request.error);\n        };\n        request0.onerror = () => reject(request0.error);\n      });\n    }\n\n  }\n\n  const api = {\n    node_driver: UFS_manager_for_node,\n    localstorage_driver: UFS_manager_for_localstorage,\n    idb_driver: UFS_manager_for_idb,\n    create(...args) {\n      const clazz = typeof global !== \"undefined\" ? UFS_manager_for_node : UFS_manager_for_localstorage;\n      return new clazz(...args);\n    },\n    driver(id) {\n      const driverId = id.toLowerCase() + \"_driver\";\n      if (!(driverId in api)) {\n        throw new Error(`Cannot find driver «${driverId}» on «UFS_manager.driver»`);\n      }\n      return {\n        create(...args) {\n          const clazz = api[driverId];\n          return new clazz(...args);\n        }\n      }\n    }\n  };\n\n  return api;\n",
      "$code.label": "UFS_manager class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-filesystem/ufs-v1.0.2.js",
      "$location": {
        "start": {
          "offset": 1025,
          "line": 38,
          "column": 1
        },
        "end": {
          "offset": 1055,
          "line": 39,
          "column": 1
        }
      },
      "INJECTION": "from LSW",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-filesystem/ufs-v1.0.2.js",
      "$location": {
        "start": {
          "offset": 13383,
          "line": 365,
          "column": 1
        },
        "end": {
          "offset": 13413,
          "line": 366,
          "column": 1
        }
      },
      "INJECTION": "from LSW",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-intruder/lsw-intruder.js",
      "$location": {
        "start": {
          "offset": 288,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 373,
          "line": 15,
          "column": 1
        }
      },
      "section": "Lsw Intruder API » LswIntruder class",
      "$code": "\n  const IntruderJob = class {\n\n    constructor(options = {}) {\n      Object.assign(this, options);\n    }\n\n  };\n\n  const LswIntruder = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    static defaultOptions = {\n      trace: (Vue?.prototype?.$lsw?.logger?.$options?.active ),\n    };\n\n    $trace(method, args) {\n      // @INJECTION: from LSW\n      const traceActivatedGlobally = (typeof Vue === \"undefined\") || (typeof Vue.prototype.$lsw === \"undefined\") || ((typeof Vue !== \"undefined\") && (typeof Vue.prototype.$lsw !== \"undefined\") && (Vue.prototype.$lsw.logger.$options.active));\n      if(this.$options.trace && traceActivatedGlobally) {\n        console.log(\"[trace][lsw-intruder] \" + method, Array.from(args));\n      }\n    }\n\n    constructor(options = {}) {\n      this.$jobs = {};\n      this.$options = Object.assign({}, this.constructor.defaultOptions, options);\n    }\n\n    addJob(options = {}) {\n      this.$trace(\"addJob\", []);\n      const {\n        id = LswRandomizer.getRandomString(7),\n        timeout = 0,\n        dialog = false\n      } = options;\n      $ensure({id},1).type(\"string\");\n      $ensure({timeout},1).type(\"number\");\n      $ensure({dialog},1).type(\"object\").to.have.keys([\"title\", \"template\"]);\n      const startDate = new Date();\n      const timeoutDate = new Date(startDate.getTime() + (timeout));\n      this.$jobs[id] = {\n        id,\n        timeout,\n        dialog,\n        state: \"created\",\n        createdAt: startDate,\n        firedAt: timeoutDate,\n      };\n      this.$jobs[id].timeoutId = setTimeout(() => {\n        this.startJob(id);\n      }, timeout);\n      return this.$jobs[id];\n    }\n\n    removeJob(id) {\n      this.$trace(\"removeJob\", []);\n      if(!(id in this.$jobs)) {\n        return false;\n      }\n      clearTimeout(this.$jobs[id].timeout);\n      delete this.$jobs[id];\n    }\n\n    startJob(id, parameters = []) {\n      this.$trace(\"startJob\", []);\n      const job = this.$jobs[id];\n      const isStarted = job.state === \"started\";\n      if(isStarted) {\n        throw new Error(`Job «${id}» is already started`);\n      }\n      if(!Vue.prototype.$lsw) {\n        throw new Error(`Job «${id}» could not find lsw api from Vue.prototype.$lsw`);\n      }\n      return Vue.prototype.$lsw.dialogs.open(job.dialog).finally(() => {\n        this.removeJob(id);\n      });\n    }\n\n  }\n\n  return LswIntruder;\n\n",
      "$code.label": "LswIntruder class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-intruder/lsw-intruder.js",
      "$location": {
        "start": {
          "offset": 714,
          "line": 35,
          "column": 1
        },
        "end": {
          "offset": 744,
          "line": 36,
          "column": 1
        }
      },
      "INJECTION": "from LSW",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-launcher/lsw-launchables.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 103,
          "line": 2,
          "column": 1
        }
      },
      "section": "Lsw Launcher API » LswLauncher global registry",
      "$code": "\nLswLauncher.global.register(\"dia\", \"🕓 Ahora\", (launchable) => LswLauncher.openDialog('<lsw-agenda context=\"calendario\" />', launchable.name));\nLswLauncher.global.register(\"base-de-datos\", \"📦 Base de datos\", (launchable) => LswLauncher.openDialog('<lsw-database-explorer/>', launchable.name));\nLswLauncher.global.register(\"sistema-de-ficheros\", \"📂 Sistema de ficheros\", (launchable) => LswLauncher.openDialog('<lsw-filesystem-explorer />', launchable.name));\nLswLauncher.global.register(\"binarios\", \"💣 Binarios\", (launchable) => LswLauncher.openDialog('<lsw-bin-directory />', launchable.name));\nLswLauncher.global.register(\"calendario\", \"📆 Calendario\", (launchable) => LswLauncher.openDialog('<lsw-agenda />', launchable.name));\nLswLauncher.global.register(\"notas\", \"💬 Notas\", (launchable) => LswLauncher.openDialog('<lsw-spontaneous-table-nota />', launchable.name));\nLswLauncher.global.register(\"nueva-nota\", \"💬➕ Nueva nota\", (launchable) => LswLauncher.openDialog('<lsw-spontaneous-form-nota />', launchable.name));\nLswLauncher.global.register(\"enciclopedia\", \"🔬 Enciclopedia\", (launchable) => LswLauncher.openDialog('<lsw-wiki />', launchable.name));\nLswLauncher.global.register(\"nuevo-artículo\", \"🔬➕ Nuevo artículo\", (launchable) => LswLauncher.openDialog('<lsw-spontaneous-form-articulo />', launchable.name));\nLswLauncher.global.register(\"inspector-de-js\", \"🪲 Inspector de JS\", (launchable) => LswLauncher.openDialog('<lsw-js-inspector />', launchable.name));\nLswLauncher.global.register(\"consola-de-js\", \"💻 Consola de JS\", () => LswConsoleHooker.toggleConsole());\nLswLauncher.global.register(\"datos-volátiles\", \"♨️ Datos volátiles\", (launchable) => LswLauncher.openDialog('<lsw-volatile-ui />', launchable.name));\nLswLauncher.global.register(\"tests-de-aplicación\", \"✅ Tests de aplicación\", (launchable) => LswLauncher.openDialog('<lsw-tests-page />', launchable.name));\nLswLauncher.global.register(\"emojis-picker\", \"🐱 Emojis\", (launchable) => LswLauncher.openDialog('<lsw-emojis-picker />', launchable.name));\nLswLauncher.global.register(\"configuraciones\", \"🔧 Configuraciones\", (launchable) => LswLauncher.openDialog('<lsw-configurations-page />', launchable.name));\nLswLauncher.global.register(\"trackeables\", \"📹 Trackeables\", (launchable) => LswLauncher.openDialog('<lsw-event-tracker />', launchable.name));\nLswLauncher.global.register(\"nueva-feature\", \"✨ Nueva feature\", (launchable) => LswLauncher.openDialog('<lsw-nueva-feature />', launchable.name));\n\n",
      "$code.label": "LswLauncher global registry",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-launcher/lsw-launcher.js",
      "$location": {
        "start": {
          "offset": 288,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 373,
          "line": 15,
          "column": 1
        }
      },
      "section": "Lsw Launcher API » LswLauncher class",
      "$code": "\n  class LswLauncher {\n\n    static openDialog(template, title = \"Diálogo del launcher\", otros = {}) {\n      return Vue.prototype.$lsw.dialogs.open({\n        title,\n        template: `<div class=\"pad_1\">${template}</div>`,\n        ...otros\n      });\n    }\n\n    programs = {};\n\n    register(id, name, callback) {\n      $ensure({ id },1).type(\"string\");\n      $ensure({ name },1).type(\"string\");\n      $ensure({ callback },1).type(\"function\");\n      this.programs[id] = { id, name, callback };\n    }\n\n    unregister(id) {\n      delete this.programs[id];\n    }\n\n    start(app, ...args) {\n      const isKnown = app in this.programs;\n      if(!isKnown) {\n        return Vue.prototype.$lsw.toasts.showError(new Error(`The app «${app}» is not known by the launcher on «LswLauncher.start»`));\n      }\n      const appMetadata = this.programs[app];\n      appMetadata.callback.call(this, appMetadata, ...args);\n    }\n\n  };\n\n  LswLauncher.global = new LswLauncher();\n\n  return LswLauncher;\n\n",
      "$code.label": "LswLauncher class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-lazy-loader/lazy-loads.js",
      "$location": {
        "start": {
          "offset": 288,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 377,
          "line": 15,
          "column": 1
        }
      },
      "section": "Lsw LazyLoader API » LswLazyLoads class",
      "$code": "  \n  LswLazyLoader.global.register({\n    alias: \"highlight.js:global\",\n    url: \"assets/lib/highlight/highlight.js\",\n    confirmer: () => typeof hljs !== \"undefined\",\n    getter: () => hljs,\n    type: \"scriptSrc\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"highlight.js:themes:default\",\n    url: \"assets/lib/highlight/styles/default.min.css\",\n    type: \"linkStylesheet\",\n    once: true,\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"highlight.js:themes:monokai\",\n    url: \"assets/lib/highlight/styles/monokai.min.css\",\n    type: \"linkStylesheet\",\n    once: true,\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"pegjs\",\n    url: \"assets/lib/pegjs/pegjs.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof pegjs !== \"undefined\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"beautifier\",\n    url: \"assets/lib/beautifier/beautifier.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof beautifier !== \"undefined\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"babel\",\n    url: \"assets/lib/babel/babel.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof Babel !== \"undefined\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"eruda\",\n    url: \"assets/lib/eruda/eruda.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof eruda !== \"undefined\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"jmespath\",\n    url: \"assets/lib/jmespath/jmespath.min.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof jmespath !== \"undefined\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"jquery\",\n    url: \"assets/lib/jquery/jquery-v3.7.1.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof jQuery !== \"undefined\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"qunit.js\",\n    url: \"assets/lib/qunit/qunit.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof QUnit !== \"undefined\",\n  });\n\n  LswLazyLoader.global.register({\n    alias: \"qunit.css\",\n    url: \"assets/lib/qunit/qunit.css\",\n    type: \"linkStylesheet\",\n    once: true,\n    confirmer: () => typeof QUnit !== \"undefined\",\n  });\n\n  LswLazyLoader.global.register({\n    alias: \"ejs\",\n    url: \"assets/lib/ejs/ejs.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof ejs !== \"undefined\",\n  });\n\n  LswLazyLoader.global.register({\n    alias: \"sqlite3\",\n    url: \"assets/lib/sqlite/sqlite3.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof sqlite3InitModule !== \"undefined\",\n  });\n\n  LswLazyLoader.global.register({\n    alias: \"lsw-sqlite\",\n    url: \"assets/lib/lsw-sqlite/lsw-sqlite.dist.js\",\n    type: \"scriptAsync\",\n    once: true,\n    confirmer: () => typeof LswSqlite !== \"undefined\",\n  });\n\n  class LswLazyLoads {\n\n    static loadHighlightJs() {\n      return Promise.all([\n        LswLazyLoader.global.load(\"highlight.js:global\"),\n        // LswLazyLoader.global.load(\"highlight.js:themes:default\"),\n        LswLazyLoader.global.load(\"highlight.js:themes:monokai\"),\n      ]).then(() => {\n        hljs.highlightAll();\n      });\n    }\n\n    static loadPegjs() {\n      return LswLazyLoader.global.load(\"pegjs\");\n    }\n\n    static loadBeautifier() {\n      return LswLazyLoader.global.load(\"beautifier\");\n    }\n\n    static loadHtml2Pdf() {\n      return LswLazyLoader.global.load(\"html2pdf\");\n    }\n\n    static loadBabel() {\n      return LswLazyLoader.global.load(\"babel\");\n    }\n\n    static loadEruda() {\n      return LswLazyLoader.global.load(\"eruda\");\n    }\n\n    static loadJmespath() {\n      return LswLazyLoader.global.load(\"jmespath\");\n    }\n\n    static loadJquery() {\n      return LswLazyLoader.global.load(\"jquery\");\n    }\n\n    static loadQunit() {\n      return Promise.all([\n        LswLazyLoader.global.load(\"jquery\"),\n        LswLazyLoader.global.load(\"qunit.css\"),\n        LswLazyLoader.global.load(\"qunit.js\"),\n      ]);\n    }\n\n    static loadEjs() {\n      return LswLazyLoader.global.load(\"ejs\");\n    }\n\n    static async loadSqlite() {\n      if(!(\"sqlite3\" in window)) {\n        await LswLazyLoader.global.load(\"sqlite3\");\n        const sqlite3 = await sqlite3InitModule();\n        Export_globally_sqlite3: {\n          window.sqlite3 = sqlite3;\n        }\n      }\n      if(!(\"LswSqlite\" in window)) {\n        await LswLazyLoader.global.load(\"lsw-sqlite\");\n      }\n      return LswSqlite;\n    }\n\n  };\n\n  return LswLazyLoads;\n\n",
      "$code.label": "LswLazyLoads class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-lazy-loader/lsw-lazy-loader.js",
      "$location": {
        "start": {
          "offset": 290,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 381,
          "line": 15,
          "column": 1
        }
      },
      "section": "Lsw LazyLoader API » LswLazyLoader class",
      "$code": "\n  const $defaultScope = {};\n\n  const UnsolvedLazyLoadModule = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n  };\n\n  const LswLazyLoader = class {\n\n    static UnsolvedLazyLoadModule = UnsolvedLazyLoadModule;\n\n    static global = new this();\n\n    constructor() {\n      this.$loads = {};\n      this.$alias = {};\n    }\n\n    register(options = {}) {\n      const url = options.url;\n      this.$loads[url] = Object.assign({}, {\n        alias: false,\n        scope: $defaultScope,\n        getter: options.getter || Vue.prototype.$noop,\n        confirmer: options.confirmer || Vue.prototype.$noop,\n        confirmation: true,\n        once: false,\n        onceDone: false,\n      }, options);\n      if (this.$loads[url].alias) {\n        this.$alias[this.$loads[url].alias] = url;\n      }\n    }\n\n    $solveAlias(urlOrAlias) {\n      const hasAlias = urlOrAlias in this.$alias;\n      if (hasAlias) {\n        return this.$alias[urlOrAlias];\n      }\n      return urlOrAlias;\n    }\n\n    $softRegister(url, options = {}) {\n      if (!this.hasLoaded(url)) {\n        this.register(url, options);\n      }\n    }\n\n    hasLoaded(url) {\n      return url in this.$loads;\n    }\n\n    $loadLocally(url) {\n      const options = this.$loads[url] || {};\n      const _getter = options.getter || Vue.prototype.$noop;\n      const _confirmer = options.confirmer || Vue.prototype.$noop;\n      const _confirmation = options.confirmation || Vue.prototype.$noop;\n      const _once = options.once || false;\n      const _onceDone = options.onceDone || false;\n      const currentGetterValue = (() => {\n        try {\n          return _getter();\n        } catch (error) {\n          return undefined;\n        }\n      })();\n      Kick_by_getter: {\n        const hasGetterOk = typeof currentGetterValue !== \"undefined\";\n        if (hasGetterOk) {\n          return currentGetterValue;\n        }\n      }\n      Kick_by_confirmer: {\n        const currentConfirmerValue = _confirmer();\n        const hasConfirmerOk = currentConfirmerValue === true;\n        if (hasConfirmerOk) {\n          return _confirmation;\n        }\n      }\n      Kick_by_once_flag: {\n        if(_once) {\n          if(_onceDone) {\n            return;\n          }\n        }\n      }\n      this.$loads[url].onceDone = true;\n      return this.constructor.UnsolvedLazyLoadModule.create(url);\n    }\n\n    loadScriptAsync(url) {\n      const value = this.$loadLocally(url);\n      if (!(value instanceof this.constructor.UnsolvedLazyLoadModule)) {\n        return value;\n      }\n      this.$softRegister(url, {});\n      const options = this.$loads[url];\n      const _scope = options.scope || $defaultScope;\n      return importer.scriptAsync(url, _scope);\n    }\n\n    loadScriptSrc(url) {\n      const value = this.$loadLocally(url);\n      if (!(value instanceof this.constructor.UnsolvedLazyLoadModule)) {\n        return value;\n      }\n      this.$softRegister(url, {});\n      const options = this.$loads[url];\n      const _scope = options.scope || $defaultScope;\n      return importer.scriptSrc(url, _scope);\n    }\n\n    loadScriptSrcModule(url) {\n      const value = this.$loadLocally(url);\n      if (!(value instanceof this.constructor.UnsolvedLazyLoadModule)) {\n        return value;\n      }\n      this.$softRegister(url, {});\n      const options = this.$loads[url];\n      const _scope = options.scope || $defaultScope;\n      return importer.scriptSrcModule(url, _scope);\n    }\n\n    loadLinkStylesheet(url) {\n      const value = this.$loadLocally(url);\n      if (!(value instanceof this.constructor.UnsolvedLazyLoadModule)) {\n        return value;\n      }\n      this.$softRegister(url, {});\n      const options = this.$loads[url];\n      const _scope = options.scope || $defaultScope;\n      return importer.linkStylesheet(url);\n    }\n\n    load(aliasOrUrl) {\n      const url = this.$solveAlias(aliasOrUrl);\n      const value = this.$loadLocally(url);\n      if (!(value instanceof this.constructor.UnsolvedLazyLoadModule)) {\n        return value;\n      }\n      this.$softRegister(url, {});\n      const options = this.$loads[url];\n      const _scope = options.scope || $defaultScope;\n      const _type = options.type || \"scriptSrc\";\n      if (!(_type in importer)) {\n        throw new Error(`Required «type» from «${url}» options to be a known method for $importer on «LswLazyLoader.load»`);\n      }\n      return importer[_type](url, _scope);\n    }\n\n  };\n\n  return LswLazyLoader;\n\n",
      "$code.label": "LswLazyLoader class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-lifecycle/lsw-lifecycle.js",
      "$location": {
        "start": {
          "offset": 288,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 379,
          "line": 15,
          "column": 1
        }
      },
      "section": "Lsw LswLifecycle API » LswLifecycle class",
      "$code": "\n  const cycle = LswCycler.from({\n\n    steps: [\n      \"onStarted\",\n      \"onInitialize\",\n      \"onInitialized\",\n      \"onBoot\",\n      \"onBooted\",\n      \"onLoadSchema\",\n      \"onSchemaLoaded\",\n      \"onLoadDatabase\",\n      \"onDatabaseLoaded\",\n      \"onLoadComponents\",\n      \"onComponentsLoaded\",\n      \"onLoadCordovaSupport\",\n      \"onCordovaSupportLoaded\",\n      \"onLoadModules\",\n      \"onModulesLoaded\",\n      \"onInstallModules\",\n      \"onModulesInstalled\",\n      \"onLoadApplication\",\n      \"onApplicationLoaded\",\n      \"onAllLoaded\",\n      \"onRunApplication\",\n      \"onApplicationDeployed\",\n      \"onFinished\",\n    ],\n\n    hooks: TriggersClass.create(),\n\n    $trace: function(method, args) {\n      if(Vue.prototype.$trace) {\n        Vue.prototype.$trace(\"lsw-app-lifecycle.\" + method, args);\n      }\n    },\n\n    onStarted: function () {\n      this.$trace(\"onStarted\", []);\n      return this.hooks.emit(\"app:started\");\n    },\n\n    onInitialize: function () {\n      this.$trace(\"onInitialize\", []);\n      return this.hooks.emit(\"app:initialize\");\n    },\n\n    onInitialized: function () {\n      this.$trace(\"onInitialized\", []);\n      return this.hooks.emit(\"app:initialized\");\n    },\n\n    onBoot: function () {\n      this.$trace(\"onBoot\", []);\n      return this.hooks.emit(\"app:boot\");\n    },\n\n    onBooted: function () {\n      this.$trace(\"onBooted\", []);\n      return this.hooks.emit(\"app:booted\");\n    },\n\n    onLoadModules: function () {\n      this.$trace(\"onLoadModules\", []);\n      if (!Vue.options.components.App) {\n        throw new Error(\"Required Vue.js (v2) component «App» to be defined on «LswLifecycle.onRunApplication» for hook «app:run_application»\");\n      }\n      return this.hooks.emit(\"app:load_modules\");\n    },\n\n    onModulesLoaded: function () {\n      this.$trace(\"onModulesLoaded\", []);\n      return this.hooks.emit(\"app:modules_loaded\");\n    },\n    onInstallModules: function () {\n      this.$trace(\"onInstallModules\", []);\n      return this.hooks.emit(\"app:install_modules\");\n    },\n    onModulesInstalled: function () {\n      this.$trace(\"onModulesInstalled\", []);\n      return this.hooks.emit(\"app:modules_installed\");\n    },\n    onLoadSchema: async function () {\n      this.$trace(\"onLoadSchema\", []);\n      let hasNeededTables = false;\n      Check_if_has_needed_tables: {\n        try {\n          const currentSchema = await LswDatabase.getSchema(\"lsw_default_database\");\n          const neededTables = [\n            \"Accion\",\n            \"Automensaje\",\n            \"Categoria_de_concepto\",\n            \"Concepto\",\n            \"Impresion_de_concepto\",\n            \"Limitador\",\n            \"Nota\",\n            \"Propagador_de_concepto\",\n            \"Propagador_prototipo\",\n            \"Lista\",\n            \"Recordatorio\",\n          ];\n          Iterating_needed_tables: {\n            const currentTables = Object.keys(currentSchema);\n            for(let index=0; index<neededTables.length; index++) {\n              const neededTable = neededTables[index];\n              const containsTable = currentTables.indexOf(neededTable) !== -1;\n              if(!containsTable) {\n                hasNeededTables = false;\n                break Iterating_needed_tables;\n              }\n            }\n            Confirm_it_contains_tables: {\n              hasNeededTables = true;\n            }\n          }\n        } catch (error) {\n          // @OK\n          console.log(\"Error:\", error);\n        }\n      }\n      if (!hasNeededTables) {\n        await LswDatabase.deleteDatabase(\"lsw_default_database\");\n      }\n      $lswSchema.loadSchemaByProxies(\"SchemaEntity\");\n      const databaseSchema = await $lswSchema.getDatabaseSchemaForLsw();\n      console.log(\"[*] Creating database from schema by proxies:\", \"\\n - \" + Object.keys(databaseSchema).join(\"\\n - \"));\n      await LswDatabase.createDatabase(\"lsw_default_database\", databaseSchema);\n      return await this.hooks.emit(\"app:load_schema\");\n    },\n    onSchemaLoaded: function () {\n      this.$trace(\"onSchemaLoaded\", []);\n      return this.hooks.emit(\"app:schema_loaded\");\n    },\n    onSeedDatabase: async function () {\n      this.$trace(\"onSeedDatabase\", []);\n      Fill_with_your_own_requirements: {\n        // @TOFILLIFNEEDED:\n      }\n      return await this.hooks.emit(\"app:seed_database\");\n    },\n    onDatabaseSeeded: async function () {\n      this.$trace(\"onDatabaseSeeded\", []);\n      Fill_with_your_own_requirements: {\n        // @TOFILLIFNEEDED:\n      }\n      return await this.hooks.emit(\"app:database_seeded\");\n    },\n    onLoadDatabase: async function () {\n      this.$trace(\"onLoadDatabase\", []);\n      Load_database_connection: {\n        Vue.prototype.$lsw.database = await LswDatabase.open(\"lsw_default_database\");\n        Vue.prototype.$lsw.database.setInnerSchema($lswSchema);\n      }\n      let hasNeededRows = false;\n      if(!hasNeededRows) {\n        await this.onSeedDatabase();\n        await this.onDatabaseSeeded();\n      }\n      return await this.hooks.emit(\"app:load_database\");\n    },\n    onDatabaseLoaded: function () {\n      this.$trace(\"onDatabaseLoaded\", []);\n      return this.hooks.emit(\"app:database_loaded\");\n    },\n    onLoadComponents: async function () {\n      this.$trace(\"onLoadComponents\", []);\n      Load_components: {\n        const allComponents = await Vue.prototype.$lsw.fs.read_directory(\"/kernel/components\");\n        const errores = [];\n        for(let componentId in allComponents) {\n          try {\n            await Vue.prototype.$lsw.fs.import_as_component(`/kernel/components/${componentId}/${componentId}`);\n          } catch (error) {\n            errores.push(error);\n          }\n        }\n        if(errores.length) {\n          console.log(\"[!] Errores en onLoadComponents:\");\n          console.log(errores);\n        }\n      }\n      return this.hooks.emit(\"app:load_components\");\n    },\n    onComponentsLoaded: function () {\n      this.$trace(\"onComponentsLoaded\", []);\n      return this.hooks.emit(\"app:components_loaded\");\n    },\n    onLoadCordovaSupport: async function() {\n      this.$trace(\"onLoadCordovaSupport\", []);\n      Try_to_download_cordova: {\n        await importer.scriptSrc(\"cordova.js\").then(() => {\n          console.log(\"[*] Cordova support loaded\");\n          this.hooks.register(\"app:application_mounted\", \"cordova_loaded:org.allnulled.lsw.mobile\", function() {\n            try {\n              Vue.prototype.$lsw.toasts.send({\n                title: \"Cordova was enabled\",\n                text: \"You can access Cordova APIs\"\n              });\n            } catch (error) {\n              console.error(error);\n            }\n          });\n          return true;\n        }).catch(error => {\n          console.error(error);\n          console.log(\"[!] Support for Cordova was dismissed\");\n          this.hooks.register(\"app:application_mounted\", \"cordova_loaded:org.allnulled.lsw.mobile\", function() {\n            try {\n              Vue.prototype.$lsw.toasts.send({\n                title: \"Cordova was not enabled\",\n                text: \"Cordova APIs are not accessible\"\n              });\n            } catch (error) {\n              console.error(error);\n            }\n          });\n          return false;\n        });\n      }\n      return await this.hooks.emit(\"app:load_cordova_support\");\n    },\n    onCordovaSupportLoaded: async function() {\n      this.$trace(\"onCordovaSupportLoaded\", []);\n      return await this.hooks.emit(\"app:cordova_support_loaded\");\n    },\n    onLoadApplication: function () {\n      this.$trace(\"onLoadApplication\", []);\n      return this.hooks.emit(\"app:load_application\");\n    },\n    onApplicationLoaded: function () {\n      this.$trace(\"onApplicationLoaded\", []);\n      return this.hooks.emit(\"app:application_loaded\");\n    },\n    onAllLoaded: function () {\n      this.$trace(\"onAllLoaded\", []);\n      return this.hooks.emit(\"app:all_loaded\");\n    },\n    onRunApplication: function() {\n      this.$trace(\"onRunApplication\", []);\n      if(!Vue.options.components.App) {\n        throw new Error(\"Required Vue.js (v2) component «App» to be defined on «LswLifecycle.onRunApplication» for hook «app:run_application»\");\n      }\n      const vueInstance = new Vue({\n        render: h => h(Vue.options.components.App),\n      }).$mount(\"#app\");\n      return this.hooks.emit(\"app:run_application\");\n    },\n    onApplicationDeployed: function () {\n      this.$trace(\"onApplicationDeployed\", []);\n      return this.hooks.emit(\"app:application_deployed\");\n    },\n    onFinished: function () {\n      this.$trace(\"onFinished\", []);\n      return this.hooks.emit(\"app:finished\");\n    },\n\n    loadModule: function (moduleId) {\n      this.$trace(\"loadModule\", []);\n      return Vue.prototype.$lsw.importer.scriptAsync(`modules/${moduleId}/load.js`);\n    },\n\n    loadSubmodule: function (moduleId, subpath) {\n      this.$trace(\"loadSubmodule\", []);\n      return Vue.prototype.$lsw.importer.scriptAsync(`modules/${moduleId}/${subpath}`);\n    },\n\n    onApplicationMounted: function() {\n      this.$trace(\"onApplicationMounted\", []);\n      return this.hooks.emit(\"app:application_mounted\");\n    },\n\n    start: function () { \n      this.$trace(\"start\", []);\n      return this.run(this.steps);\n    },\n\n  }, \"*\");\n\n  return cycle;\n  \n",
      "$code.label": "LswLifecycle class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-logger/superlogger.unbundled.js",
      "$location": {
        "start": {
          "offset": 377,
          "line": 17,
          "column": 3
        },
        "end": {
          "offset": 607,
          "line": 27,
          "column": 6
        }
      },
      "$section": "LswLogger API » Superlogger API »  Superlogger class",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "Superlogger",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-logger/superlogger.unbundled.js",
      "$location": {
        "start": {
          "offset": 608,
          "line": 28,
          "column": 1
        },
        "end": {
          "offset": 710,
          "line": 29,
          "column": 1
        }
      },
      "$section": "LswLogger API » Superlogger API »  Superlogger class",
      "$code": "  const Superlogger = class {\n\n    static create(id, options) {\n      return new this(id, options);\n    }\n\n    static levels = {\n      trace: 4,\n      debug: 3,\n      log: 2,\n      warn: 1,\n      error: 0,\n    };\n\n    static defaultOptions = {\n      // active: true,\n      active: false,\n      level: \"trace\"\n    };\n\n    static loggers = {};\n\n    static alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\n    static generateRandomString(len /* istanbul ignore next */  = 5) {\n      let out = \"\";\n      while(out.length < len) {\n        out += this.alphabet[Math.floor(Math.random() * this.alphabet.length - 1)];\n      }\n      return out;\n    }\n\n    constructor(idInput = false, options = {}) {\n      const id = idInput || this.constructor.generateRandomString(10);\n      if (typeof id !== \"string\") {\n        throw new Error(\"Required parameter «id» to be a string on «Superlogger.constructor»\");\n      }\n      if (id in this.constructor.loggers) {\n        throw new Error(\"Required parameter «id» to be a unique string on «Superlogger.constructor»\");\n      }\n      if (typeof options !== \"object\") {\n        throw new Error(\"Required parameter «options» to be an object on «Superlogger.constructor»\");\n      }\n      this.$id = id;\n      this.$options = Object.assign({}, this.constructor.defaultOptions, options);\n      this.$source = undefined;\n      this.$events = {};\n      this.$callbacks = {\n        before: undefined,\n        after: undefined,\n      };\n      this.resetEvents();\n      this.resetCallbacks();\n      this.constructor.loggers[id] = this;\n    }\n\n    activate() {\n      this.$options.active = true;\n    }\n\n    deactivate() {\n      this.$options.active = false;\n    }\n\n    setSource(source) {\n      this.source = source;\n    }\n\n    setLevel(level) {\n      if (!(level in this.constructor.levels)) {\n        throw new Error(\"Required parameter «level» to be a recognized level on «Superlogger.setLevel»\");\n      }\n      this.$options.level = this.constructor.levels[level];\n    }\n\n    setEvent(id, callback) {\n      this.$events[id] = callback;\n    }\n\n    resetEvents() {\n      this.$events = {\n        trace: undefined,\n        debug: undefined,\n        log: undefined,\n        warn: undefined,\n        error: undefined,\n      };\n    }\n\n    setBefore(callback) {\n      this.$callbacks.before = callback;\n    }\n\n    setAfter(callback) {\n      this.$callbacks.after = callback;\n    }\n\n    resetCallbacks() {\n      this.$callbacks = {\n        after: undefined,\n        before: undefined,\n      };\n    }\n\n    replacerFactory() {\n      const visited = new WeakMap();\n      return (key, value) => {\n        if (typeof value === \"function\") {\n          return \"[Function] \" + value.toString();\n        }\n        if (typeof value === \"object\" && value !== null) {\n          if (visited.has(value)) {\n            return \"[Circular]\";\n          }\n          visited.set(value, true);\n        } else /* istanbul ignore else */ {}\n        return value;\n      }\n    }\n\n    stringifyForDebugging(obj) {\n      return JSON.stringify(obj, this.replacerFactory(), 2);\n    }\n\n    stringifyForTracing(obj) {\n      if(typeof obj === \"object\") {\n        if(obj._isVue) {\n          return \"[Vue instance::\" + obj.$options.name + \"]\";\n        } else if(obj === window) {\n          return \"[Window instance]\";\n        }\n      }\n      return JSON.stringify(obj, this.replacerFactory(), 2);\n    }\n\n    $emit(event, args) {\n      if(!(event in this.$events)) {\n        return \"void::event not defined\";\n      }\n      const callback = this.$events[event];\n      if(typeof callback === \"undefined\") {\n        return \"void::callback not defined\";\n      }\n      return callback(this, args);\n    }\n\n    $log(levelId, elements, methodId = false) {\n      if(!(levelId in this.constructor.levels)) {\n        throw new Error(\"Required parameter «levelId» to be an identified level on «Superlogger.$log»\");\n      }\n      const level = this.constructor.levels[levelId];\n      if (!this.$options.active) {\n        return \"void::currently active=false state\";\n      }\n      if (this.$options.level < level) {\n        return \"void::level of tracing out of bounds\";\n      }\n      let message = `[${this.$id}][${levelId}]`;\n      if (methodId !== false) {\n        message += `[${methodId}]`;\n      }\n      for (let index = 0; index < elements.length; index++) {\n        const element = elements[index];\n        const stringification = typeof element === \"string\" ? element : this.stringifyForTracing(element);\n        message += \" \" + stringification;\n      }\n      Event_triggering: {\n        if(typeof this.$callbacks.before !== \"undefined\") {\n          this.$callbacks.before(message, this, levelId, elements, methodId);\n        }\n        console.log(message);\n        if(typeof this.$callbacks.after !== \"undefined\") {\n          this.$callbacks.after(message, this, levelId, elements, methodId);\n        }\n        this.$emit(levelId, {elements, methodId});\n      }\n    }\n\n    trace(methodId, ...data) {\n      return this.$log(\"trace\", data, methodId);\n    }\n\n    debug(...data) {\n      return this.$log(\"debug\", data);\n    }\n\n    log(...data) {\n      return this.$log(\"log\", data);\n    }\n\n    warn(...data) {\n      return this.$log(\"warn\", data);\n    }\n\n    error(...data) {\n      return this.$log(\"error\", data);\n    }\n\n  };\n",
      "$code.label": "Superlogger class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-proxifier/proxifier.unbundled.js",
      "$location": {
        "start": {
          "offset": 290,
          "line": 14,
          "column": 3
        },
        "end": {
          "offset": 506,
          "line": 24,
          "column": 6
        }
      },
      "$section": "LswProxifier API » LswProxifier class",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "LswProxifier",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-proxifier/proxifier.unbundled.js",
      "$location": {
        "start": {
          "offset": 507,
          "line": 25,
          "column": 1
        },
        "end": {
          "offset": 595,
          "line": 26,
          "column": 1
        }
      },
      "$section": "LswProxifier API » LswProxifier class",
      "$code": "  class BaseClass {\n    initialize(...args) {\n      const promise = this.onInitialize(...args);\n      if (promise instanceof Promise) {\n        return promise.then(output => {\n          return this;\n        });\n      }\n      return this;\n    }\n    onInitialize() {\n      return this;\n    }\n  }\n\n  const AbstractProxy = class {\n    constructor(value) {\n      this.value = value;\n    }\n  }\n  class AbstractVirtualizer extends AbstractProxy {}\n  class AbstractSchemaEntity extends AbstractProxy {\n    static toObject() {\n      return {\n        entityId: this.getEntityId(),\n        name: this.getName(),\n        version: this.getVersion(),\n        properties: this.getProperties(),\n        externalProperties: this.getExternalProperties(),\n        methods: this.getMethods(),\n        virtualizerId: this.getVirtualizerId(),\n        formSettings: this.getFormSettings(),\n        extraAttributes: this.getExtraAttributes(),\n      };\n    }\n    static getEntityId() {\n      throw new Error(`Required method «getEntityId» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getEntityId»`);\n    }\n    static getName() {\n      throw new Error(`Required method «getName» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getName»`);\n    }\n    static getVersion() {\n      throw new Error(`Required method «getVersion» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getVersion»`);\n    }\n    static getProperties() {\n      throw new Error(`Required method «getProperties» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getProperties»`);\n    }\n    static getExternalProperties() {\n      return {};\n    }\n    static getMethods() {\n      throw new Error(`Required method «getMethods» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getMethods»`);\n    }\n    static getVirtualizerId() {\n      throw new Error(`Required method «getVirtualizerId» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getVirtualizerId»`);\n    }\n    static getFormSettings() {\n      throw new Error(`Required method «getFormSettings» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getFormSettings»`);\n    }\n    static getExtraAttributes() {\n      throw new Error(`Required method «getExtraAttributes» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getExtraAttributes»`);\n    }\n  }\n  class AbstractItem { }\n  class AbstractList {\n    constructor(value) {\n      this.value = Array.isArray(value) ? value : [];\n    }\n    forEach(callback) {\n      this.value.forEach(callback);\n      return this;\n    }\n    filter(callback) {\n      this.value = this.value.filter(callback);\n      return this;\n    }\n    map(callback) {\n      this.value = this.value.map(callback);\n      return this;\n    }\n    reduce(callback, initialValue = []) {\n      this.value = this.value.reduce(callback, initialValue);\n      return this;\n    }\n    modify(callback) {\n      this.value = callback(this.value);\n      return this;\n    }\n    concat(...lists) {\n      this.value = this.value.concat(...lists);\n      return this;\n    }\n    onlyProp(prop) {\n      this.value = this.value.map(it => it[prop]);\n      return this;\n    }\n    onlyProps(props) {\n      this.value = this.value.map(it => {\n        const out = {};\n        props.forEach(prop => {\n          out[prop] = it[prop];\n        });\n        return out;\n      });\n      return this;\n    }\n    removeProp(prop) {\n      return this.removeProps([prop]);\n    }\n    removeProps(props) {\n      this.value = this.value.map(it => {\n        const out = {};\n        const keys = Object.keys(it).filter(prop => {\n          return props.indexOf(prop) === -1;\n        });\n        keys.forEach(key => {\n          out[key] = it[key];\n        });\n        return out;\n      });\n      return this;\n    }\n    deduplicate() {\n      const out = [];\n      this.value.forEach(it => {\n        if (out.indexOf(it) === -1) {\n          out.push(it);\n        }\n      });\n      this.value = out;\n      return this;\n    }\n    sort(callback) {\n      this.value = this.value.sort(callback);\n      return this;\n    }\n  };\n\n  class LswProxifier {\n    static create(...args) {\n      return new this(...args);\n    }\n    AbstractProxy = AbstractProxy;\n    AbstractSchemaEntity = AbstractSchemaEntity;\n    AbstractVirtualizer = AbstractVirtualizer;\n    AbstractItem = AbstractItem;\n    AbstractList = AbstractList;\n    constructor(mainInjection = {}) {\n      this.$definitions = {};\n      this.$mainInjection = mainInjection;\n      this.$splitterChar = \"@\";\n    }\n    define(name, classesDef) {\n      if(!(name in this.$definitions)) {\n        this.$definitions[name] = {};\n      }\n      if(typeof classesDef !== \"object\") {\n        throw new Error(`Required parameter «classesDef» to be a class on «LswProxifier.define»`)\n      }\n      const classesIds = Object.keys(classesDef);\n      for(let index=0; index<classesIds.length; index++) {\n        const classId = classesIds[index];\n        const classDef = classesDef[classId];\n        if(typeof classDef !== \"function\") {\n          throw new Error(`Required proxy class «${classId}» to be a class on «LswProxifier.define»`)\n        }\n      }\n      Object.assign(this.$definitions[name], classesDef);\n    }\n    find(selector) {\n      const [name, aspectId = false] = selector.split(this.$splitterChar);\n      if(!(name in this.$definitions)) {\n        throw new Error(`Could not find proxy classes from name «${name}» on «LswProxifier.find»`);\n      }\n      if(!aspectId) {\n        return this.$definitions[name];\n      }\n      if(!(aspectId in this.$definitions[name])) {\n        throw new Error(`Could not find proxy aspect «${aspectId}» from class «${name}» on «LswProxifier.find»`);\n      }\n      return this.$definitions[name][aspectId];\n    }\n    getFactory() {\n      return this.proxify.bind(this);\n    }\n    proxify(obj) {\n      return {\n        as: (typeSelector = \"\", proxyExtraArguments = []) => {\n          if(typeof typeSelector !== \"string\") {\n            throw new Error(`Required parameter «typeSelector» to be a string on «proxify(@).as(@)»`);\n          }\n          const [definitionId, aspectId = \"Item\"] = typeSelector.split(this.$splitterChar);\n          if(!(definitionId in this.$definitions)) {\n            throw new Error(`Required parameter «definitionId» [«${definitionId}»] to exist in «proxifier.$definitions» but it does not on «proxify(@).as(@)`);\n          }\n          if(!(aspectId in this.$definitions[definitionId])) {\n            throw new Error(`Required parameter «aspectId» [«${aspectId}»] to exist in «proxifier.$definitions[${JSON.stringify(definitionId)}]» but it does not on «proxify(@).as(@)`);\n          }\n          const proxyClass = this.$definitions[definitionId][aspectId];\n          const proxyInstance = new proxyClass(obj, ...proxyExtraArguments);\n          if(typeof this.$mainInjection === \"function\") {\n            this.$mainInjection(proxyInstance, proxyClass);\n          } else if(typeof this.$mainInjection === \"object\") {\n            Object.assign(proxyInstance, this.$mainInjection);\n          }\n          return proxyInstance;\n        }\n      };\n    }\n  };\n\n  LswProxifier.default = LswProxifier;\n\n  globalThis.$proxifier = LswProxifier.create();\n",
      "$code.label": "LswProxifier class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-randomizer/lsw-randomizer.js",
      "$location": {
        "start": {
          "offset": 293,
          "line": 15,
          "column": 3
        },
        "end": {
          "offset": 512,
          "line": 25,
          "column": 6
        }
      },
      "$section": "LswRandomizer API » LswRandomizer class",
      "type": "class",
      "extends": "Object",
      "vendor": "lsw",
      "namespace": "LswRandomizer",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-randomizer/lsw-randomizer.js",
      "$location": {
        "start": {
          "offset": 513,
          "line": 26,
          "column": 1
        },
        "end": {
          "offset": 604,
          "line": 27,
          "column": 1
        }
      },
      "$section": "LswRandomizer API » LswRandomizer class",
      "$code": "  const LswRandomizer = class {\n\n    static $defaultAlphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    static $defaultVocals = \"aeiou\";\n    static $defaultConsonants = \"bcdfghjklmnpqrstvwxyz\";\n\n    static getRandomIntegerBetween(start = 0, end = 100) {\n      const min = Math.ceil(Math.min(start, end));\n      const max = Math.floor(Math.max(start, end));\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    static getRandomString(len, alphabet = this.$defaultAlphabet) {\n      let out = \"\";\n      while (out.length < len) {\n        out += alphabet[Math.floor(Math.random() * alphabet.length)];\n      }\n      return out;\n    }\n\n    static getRandomConsonant(len = 1) {\n      return this.getRandomString(len, this.$defaultConsonants);\n    }\n\n    static getRandomVocal(len = 1) {\n      return this.getRandomString(len, this.$defaultVocals);\n    }\n\n    static getRandomWord(silabas = [2,3], capitalized = false) {\n      let salida = \"\";\n      let silabasCounter = 0;\n      if(!Array.isArray(silabas)) {\n        throw new Error(\"Required «silabas» to be an array on «LswRandomizer.getRandomWord»\");\n      }\n      const silabasLen = this.getRandomIntegerBetween(silabas[0], silabas[1]);\n      while(silabasCounter < silabasLen) {\n        silabasCounter++;\n        salida += this.getRandomConsonant();\n        salida += this.getRandomVocal();\n      }\n      if(capitalized) {\n        salida = salida.substr(0,1).toUpperCase() + salida.substr(1);\n      }\n      return salida;\n    }\n\n    static getRandomItem(list) {\n      return list[Math.floor(Math.random() * list.length)];\n    }\n\n    static getRandomObject(totalProps = [0, 10], listOf = false) {\n      let randomProps = totalProps;\n      if (Array.isArray(totalProps)) {\n        randomProps = this.getRandomIntegerBetween(...totalProps);\n      }\n      const buildRandomObject = () => {\n        const randomObject = {};\n        while (Object.keys(randomObject).length < randomProps) {\n          const key = this.getRandomString(5);\n          const value = this.getRandomString(10);\n          randomObject[key] = value;\n        }\n        return randomObject;\n      };\n      if (listOf === false) {\n        return buildRandomObject();\n      }\n      const randomList = [];\n      for(let index=0; index<listOf; index++) {\n        const randomObject = buildRandomObject();\n        randomList.push(randomObject);\n      }\n      return randomList;\n    }\n\n    static getRandomList(listOf = 10, totalProps = [0,10]) {\n      return this.getRandomObject(totalProps, listOf);\n    }\n\n    static getRandomTypedObject(props = [], listOf = false) {\n      const buildRandomObject = () => {\n        const randomObject = {};\n        for(let indexProp=0; indexProp<props.length; indexProp++) {\n          const key = props[indexProp];\n          const value = this.getRandomWord([2,5], true);\n          randomObject[key] = value;\n        }\n        return randomObject;\n      };\n      if (listOf === false) {\n        return buildRandomObject();\n      }\n      const randomList = [];\n      for(let index=0; index<listOf; index++) {\n        const randomObject = buildRandomObject();\n        randomList.push(randomObject);\n      }\n      return randomList;\n    }\n\n    static getRandomTypedList(listOf = 10, totalProps = [\"id\", \"name\", \"city\"]) {\n      return this.getRandomTypedObject(totalProps, listOf);\n    }\n\n  }\n\n  return LswRandomizer;\n",
      "$code.label": "LswRandomizer class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-reloader/reloadable.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 95,
          "line": 2,
          "column": 1
        }
      },
      "$section": "LswReloader API » LswReloadable injection",
      "$code": "const serverUrl = 'http://127.0.0.1';\nconst serverPort = 3000;\n\nif (process?.env?.NODE_ENV === \"test\") {\n  const socket = io(`${serverUrl}:${serverPort}`);\n  socket.on('refrescar', () => {\n    console.log('Recibida la señal de refrescar desde el servidor');\n    location.reload();\n  });\n}\n",
      "$code.label": "LswReloadable injection",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-returner/controlled-function.js",
      "$location": {
        "start": {
          "offset": 300,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 437,
          "line": 15,
          "column": 1
        }
      },
      "$section": "LswControlledFunction API » ControlledFunction API » ControlledFunction classes",
      "$code": "  const ReturnControl = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n\n  const MutateControl = class {\n    constructor(mutator = {}) {\n      this.mutator = mutator;\n    }\n  };\n\n  const ReturnController = class {\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor() {\n      this.results = new Map();\n      this.functions = new Map();\n      this.middlewares = [];\n      this.properties = new Map();\n    }\n\n    prehook(middleware) {\n      this.middlewares.unshift(middleware);\n      return this;\n    }\n\n    hook(middleware) {\n      this.middlewares.push(middleware);\n      return this;\n    }\n\n    unhook(middleware) {\n      this.middlewares = this.middlewares.filter(m => m !== middleware);\n      return this;\n    }\n\n    prop(properties = {}) {\n      Object.assign(this.properties, properties);\n      return this;\n    }\n\n    hasProp(id) {\n      return this.properties.has(id);\n    }\n\n    getProp(id, defaultValue = undefined) {\n      if (!this.properties.has(id)) {\n        return defaultValue;\n      }\n      return this.properties.get(id);\n    }\n\n    setProp(id, value) {\n      this.properties.set(id, value);\n      return this;\n    }\n\n    load(functions) {\n      this.functions = new Map(Object.entries(functions));\n      return this;\n    }\n\n    solved(name) {\n      return this.results.get(name);\n    }\n\n    pipe(outputName, functionNames, parameters = []) {\n      for (let fnName of functionNames) {\n        const fnCallback = this.functions.get(fnName);\n        if (fnCallback) {\n          const result = fnCallback(...parameters);\n          if (this.processResult(result, outputName)) {\n            return this.solved(outputName);\n          }\n        }\n        for (const middleware of this.middlewares) {\n          const result = middleware(this);\n          if (this.processResult(result, outputName)) {\n            return this.solved(outputName);\n          }\n        }\n      }\n      return null;\n    }\n\n    processResult(result, outputName) {\n      if (result instanceof ReturnControl) {\n        this.results.set(outputName, result.value);\n        return true;\n      } else if (result instanceof MutateControl) {\n        const mutator = result.mutator;\n        if (typeof mutator === \"function\") {\n          const mutatorResult = mutator(this);\n          if (typeof mutatorResult === \"object\") {\n            Object.assign(this.properties, mutatorResult);\n          } else if (mutatorResult !== undefined) {\n            throw new Error(\n              `MutateControl's function mutator must return an object or undefined, found: ${typeof mutatorResult}`\n            );\n          }\n        } else if (typeof mutator === \"object\") {\n          Object.assign(this, mutator);\n        } else {\n          throw new Error(\n            `MutateControl's mutator must be a function or object, found: ${typeof mutator}`\n          );\n        }\n      }\n      return false;\n    }\n\n    reset() {\n      this.results.clear();\n      this.properties.clear();\n      return this;\n    }\n  };\n\n  const ControlledFunction = {\n    MutateControl,\n    ReturnControl,\n    ReturnController,\n  };\n\n  ControlledFunction.default = ControlledFunction;\n\n  return ControlledFunction;\n",
      "$code.label": "ControlledFunction global",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-schema/lsw-schema.js",
      "$location": {
        "start": {
          "offset": 627,
          "line": 30,
          "column": 3
        },
        "end": {
          "offset": 807,
          "line": 38,
          "column": 6
        }
      },
      "$section": "Lsw Schema API » LswSchema class",
      "type": "Class",
      "vendor": "lsw",
      "namespace": "LswSchema",
      "source code": "La clase está definida así:\n",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-schema/lsw-schema.js",
      "$location": {
        "start": {
          "offset": 808,
          "line": 39,
          "column": 1
        },
        "end": {
          "offset": 887,
          "line": 40,
          "column": 1
        }
      },
      "section": "Lsw Schema API » LswSchema class",
      "$code": "  const LswSchema = class {\n\n    $trace(methodId, argsList) {\n      if(this.$options && this.$options.trace) {\n        console.log(\"[trace][lsw-schema][\" + methodId + \"] \" + argsList.length);\n      }\n    }\n\n    static Signature = LswSchemaSignature;\n\n    static createSignature(creatorCallback, creatorParameters, creatorScope) {\n      return this.Signature.create(creatorCallback, creatorParameters, creatorScope);\n    }\n\n    onValidateSchema(schema) {\n      this.$trace(\"onValidateSchema\", arguments);\n      // @OVERRIDABLE\n    }\n\n    onValidateTable(id, definition, schema) {\n      this.$trace(\"onValidateTable\", arguments);\n      // @OVERRIDABLE\n    }\n\n    onValidateColumn(id, definition, tableId, schema) {\n      this.$trace(\"onValidateColumn\", arguments);\n      // @OVERRIDABLE\n    }\n\n    onFusionateSchema(schema) {\n      this.$trace(\"onFusionateSchema\", arguments);\n      // @OVERRIDABLE\n    }\n\n    onFusionateTable(table, tableId, schema) {\n      this.$trace(\"onFusionateTable\", arguments);\n      // @OVERRIDABLE\n    }\n\n    onFusionateColumn(column, columnId, tableId, schema) {\n      this.$trace(\"onFusionateColumn\", arguments);\n      // @OVERRIDABLE\n    }\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor(options = {}) {\n      this.$cache = {\n        schemaForLsw: null\n      };\n      this.$schema = {\n        hasTables: {\n\n        }\n      };\n      this.$options = options;\n    }\n    \n    getDatabaseSchemaForLsw(refresh = false) {\n      this.$trace(\"getDatabaseSchemaForLsw\", arguments);\n      if(refresh) {\n        this.$cache.schemaForLsw = null;\n      }\n      if(this.$cache.schemaForLsw) {\n        return this.$cache.schemaForLsw;\n      }\n      const schemaForLsw = {};\n      for(let tableId in this.$schema.hasTables) {\n        const tableData = this.$schema.hasTables[tableId];\n        let tableSchema = [];\n        for(let columnId in tableData.hasColumns) {\n          const columnData = tableData.hasColumns[columnId];\n          const prefix = columnData.isUnique ? \"!\" : \"\";\n          tableSchema.push(prefix + columnId);\n        }\n        schemaForLsw[tableId] = tableSchema;\n      }\n      this.$cache.schemaForLsw = schemaForLsw;\n      return schemaForLsw;\n    }\n\n    loadSchemaByProxies(aspectId = \"SchemaEntity\") {\n      this.$trace(\"loadSchemaByProxies\", arguments);\n      const schema = this.getSchemaByProxies(aspectId);\n      return this.registerSchema(schema);\n    }\n\n    getSchemaByProxies(aspectId = \"SchemaEntity\") {\n      this.$trace(\"getSchemaByProxies\", arguments);\n      const allSchemaEntities = Object.values($proxifier.$definitions).filter(d => d[aspectId]).map(d => d[aspectId]);\n      const schemaTemp = new LswSchema();\n      for(let index=0; index<allSchemaEntities.length; index++) {\n        const SchemaEntityClass = allSchemaEntities[index];\n        const lswDatabaseSchema = this.adaptSchemaEntityToDatabaseSchema(SchemaEntityClass);\n        schemaTemp.registerSchema(lswDatabaseSchema);\n      }\n      return schemaTemp.$schema;\n    }\n\n    adaptSchemaEntityToDatabaseSchema(SchemaEntityClass) {\n      this.$trace(\"adaptSchemaEntityToDatabaseSchema\", arguments);\n      const schema = { hasTables: {} };\n      const data = SchemaEntityClass.toObject();\n      schema.hasTables[data.name] = {\n        ...data,\n        hasEntityId: SchemaEntityClass.getEntityId(),\n        hasColumns: data.properties,\n        hasExtraAttributes: data.extraAttributes,\n      };\n      return schema;\n    }\n\n    registerSchema(partialSchema = {}) {\n      this.$trace(\"registerSchema\", arguments);\n      if (typeof partialSchema !== \"object\") {\n        throw new Error(\"Required parameter «partialSchema» to be an object on «LswSchema.registerSchema»\");\n      }\n      this.$validateSchema(partialSchema);\n      this.$fusionateSchema(partialSchema);\n      return this;\n    }\n\n    $validateSchema(schema) {\n      this.$trace(\"$validateSchema\", arguments);\n      Native: {\n        this.$validateSchemaNative(schema);\n      }\n      Core_process: {\n        if (\"hasTables\" in schema) {\n          const tableIds = Object.keys(schema.hasTables);\n          Iterating_tables:\n          for (let indexTable = 0; indexTable < tableIds.length; indexTable++) {\n            const tableId = tableIds[indexTable];\n            const table = schema.hasTables[tableId];\n            this.$validateTableNative(table, tableId, schema);\n            if (!(\"hasColumns\" in table)) {\n              continue Iterating_tables;\n            }\n            const columnIds = Object.keys(table.hasColumns);\n            Iterating_columns:\n            for (let indexColumn = 0; indexColumn < columnIds.length; indexColumn++) {\n              const columnId = columnIds[indexColumn];\n              const column = table.hasColumns[columnId];\n              this.$validateColumnNative(column, columnId, tableId, schema);\n            }\n          }\n        }\n      }\n      User: {\n        this.onValidateSchema(schema);\n      }\n    }\n\n    $fusionateSchema(partialSchema) {\n      this.$trace(\"$fusionateSchema\", arguments);\n      const tableIds = Object.keys(partialSchema?.hasTables || {});\n      Debug_purposes: {\n        const columnIds = tableIds.map(tableId => Object.keys(partialSchema.hasTables[tableId].hasColumns || {}).map(columnId => [tableId, columnId].join(\".\")));\n        const tablesMessage = tableIds.length === 0 ? \"No tables to fusionate\" : \"Tables to fusionate:\\n - \" + tableIds.join(\"\\n - \");\n        const columnsMessage = columnIds.length === 0 ? \"No columns to fusionate\" : \"Columns to fusionate:\\n - \" + columnIds.join(\"\\n - \");\n        this.$trace(`[*] ${tablesMessage}`, []);\n        this.$trace(`[*] ${columnsMessage}`, []);\n      }\n      this.$fusionateSchemaNative(partialSchema);\n      Iterating_tables:\n      for (let indexTable = 0; indexTable < tableIds.length; indexTable++) {\n        const tableId = tableIds[indexTable];\n        const tableInfo = partialSchema.hasTables[tableId];\n        this.$fusionateTableNative(tableInfo, tableId, partialSchema);\n        const columnIds = Object.keys(tableInfo.columns || {});\n        Iterating_columns:\n        for (let indexColumn = 0; indexColumn < columnIds.length; indexColumn++) {\n          const columnId = columnIds[indexColumn];\n          const columnInfo = tableInfo.columns[columnId];\n          this.$fusionateColumnNative(columnInfo, columnId, tableId, partialSchema);\n        }\n      }\n    }\n\n    $validateSchemaNative(schema) {\n      this.$trace(\"$validateSchemaNative\", arguments);\n      Native: {\n        const ensureSchema = $ensure(schema).type(\"object\").to.have.key(\"hasTables\");\n        ensureSchema.its(\"hasTables\").type(\"object\");\n      }\n      User: {\n        this.onValidateSchema(schema);\n      }\n    }\n\n    $validateTableNative(definition, id, schema) {\n      this.$trace(\"$validateTableNative\", arguments);\n      Native: {\n        const ensureTable = $ensure(definition).type(\"object\").to.have.key(\"hasColumns\");\n        const ensureHasColumns = ensureTable.its(\"hasColumns\").type(\"object\");\n        const columnIds = Object.keys(ensureHasColumns.$subject);\n        for(let index=0; index<columnIds.length; index++) {\n          const columnId = columnIds[index];\n          const ensureColumn = ensureHasColumns.its(columnId).type(\"object\");\n          ensureColumn.its(\"isType\").type(\"string\");\n          ensureColumn.its(\"isUnique\").type([\"boolean\", \"undefined\"]);\n          ensureColumn.its(\"refersTo\").type([\"object\", \"undefined\", \"boolean\"]);\n          if(typeof ensureColumn.$subject.refersTo === \"object\") {\n            const ensureRefersTo = ensureColumn.its(\"refersTo\").type(\"object\");\n            ensureRefersTo.to.have.keys([\"entity\", \"property\"]);\n            ensureRefersTo.its(\"entity\").type(\"string\");\n            ensureRefersTo.its(\"property\").type(\"string\");\n          }\n          ensureColumn.its(\"isFormType\").type(\"string\");\n          ensureColumn.its(\"hasValidator\").type([\"string\", \"boolean\", \"function\", \"undefined\"]);\n          ensureColumn.its(\"hasFormatter\").type([\"string\", \"boolean\", \"function\", \"undefined\"]);\n          ensureColumn.its(\"hasLabel\").type([\"string\", \"boolean\", \"undefined\"]);\n          ensureColumn.its(\"hasDescription\").type([\"string\", \"boolean\", \"undefined\"]);\n          ensureColumn.its(\"hasPlaceholder\").type([\"string\", \"boolean\", \"undefined\"]);\n        }\n      }\n      User: {\n        this.onValidateTable(id, definition, schema);\n      }\n    }\n\n    $validateColumnNative(id, definition, tableId, schema) {\n      this.$trace(\"$validateColumnNative\", arguments);\n      Native: {\n        // !@OK: the validation is already made on the $validateTableNative\n      }\n      User: {\n        this.onValidateColumn(id, definition, tableId, schema);\n      }\n    }\n\n    $fusionateSchemaNative(partialSchema) {\n      this.$trace(\"$fusionateSchemaNative\", arguments);\n      Native_fusion: {\n        \n      }\n      User_fusion: {\n        this.onFusionateSchema(partialSchema);\n      }\n    }\n\n    $fusionateTableNative(tableInfo, tableId, partialSchema) {\n      this.$trace(\"$fusionateTableNative\", arguments);\n      Native_fusion: {\n        const isKnown = tableId in this.$schema.hasTables;\n        if(!isKnown) {\n          this.$schema.hasTables[tableId] = tableInfo;\n        } else {\n          throw new Error(`Schema cannot fusionate table «${tableId}» to schema for second time on «$fusionateTableNative»`);\n        }\n      }\n      User_fusion: {\n        this.onFusionateTable(tableInfo, tableId, partialSchema);\n      }\n    }\n\n    $fusionateColumnNative(columnInfo, columnId, tableId, partialSchema) {\n      this.$trace(\"$fusionateColumnNative\", arguments);\n      Native_fusion: {\n        const isKnown = columnId in this.$schema.hasTables[tableId].hasColumns;\n        if(!isKnown) {\n          this.$schema.hasTables[tableId].hasColumns[columnId] = columnInfo;\n        } else {\n          throw new Error(`Schema cannot fusionate column «${tableId}.${columnId}» to schema for second time on «$fusionateTableNative»`);\n        }\n      }\n      User_fusion: {\n        this.onFusionateColumn(columnInfo, columnId, tableId, partialSchema);\n      }\n    }\n\n  };\n  \n  // Last global injection for a unique main instance:\n  window.$lswSchema = LswSchema.create();\n",
      "$code.label": "LswSchema class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-tester/lsw-tester.js",
      "$location": {
        "start": {
          "offset": 282,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 375,
          "line": 15,
          "column": 1
        }
      },
      "$section": "LswTester API » LswTester classes and functions",
      "$code": "  const LswAssertion = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    $trace(method) {\n      this.$tester.$trace(method);\n    }\n\n    constructor(tester, submodule, result = undefined, message = undefined) {\n      this.$tester = tester;\n      this.$module = submodule;\n      this.$moduleId = submodule.id;\n      this.$result = result;\n      this.$message = message;\n    }\n\n    as(message = undefined) {\n      this.$trace(\"LswAssertion.as\");\n      this.$message = message;\n      return this;\n    }\n\n    that(result = undefined) {\n      this.$trace(\"LswAssertion.that\");\n      this.$result = result;\n      if(this.$result === true) {\n        this.$tester.hookedBy(\"onSuccessAssertion\", { tester: this.$tester, value: this.$module, assertionText: this.$message, assertionResult: this.$result });\n      } else {\n        this.$tester.hookedBy(\"onErrorAssertion\", { tester: this.$tester, value: this.$module, assertionText: this.$message, assertionResult: this.$result });\n      }\n    }\n\n  };\n\n  const createAssert = (tester, submodule) => {\n    return LswAssertion.create(tester, submodule);\n  };\n\n  const LswTester_BasicLayer = class {\n\n    async innerLoad() {\n      this.$trace(\"LswTester.innerLoad\");\n      return this.innerLoadTest(this.$composition, [], null);\n    }\n\n    innerCheckIsNotTyped(val, path) {\n      this.$trace(\"LswTester.innerCheckIsNotTyped\");\n      if (typeof val.fromType === \"string\") {\n        throw new Error(`Required test on index «${path.join(\".\")}» to not have property «fromType» resolved on «LswTester.innerCheckIsNotTyped»`);\n      }\n    }\n\n    innerTypeAsUrl(val, path) {\n      this.$trace(\"LswTester.innerTypeAsUrl\");\n      this.innerCheckIsNotTyped(val, path);\n      val.fromType = \"url\";\n    }\n\n    innerTypeAsFile(val, path) {\n      this.$trace(\"LswTester.innerTypeAsFile\");\n      this.innerCheckIsNotTyped(val, path);\n      val.fromType = \"file\";\n    }\n\n    innerTypeAsId(val, path) {\n      this.$trace(\"LswTester.innerTypeAsId\");\n      this.innerCheckIsNotTyped(val, path);\n      val.fromType = \"id\";\n    }\n\n    innerTypeAsCallback(val, path) {\n      this.$trace(\"LswTester.innerTypeAsCallback\");\n      this.innerCheckIsNotTyped(val, path);\n      val.fromType = \"callback\";\n    }\n\n    innerTypeAsCollection(val, path) {\n      this.$trace(\"LswTester.innerTypeAsCollection\");\n      this.innerCheckIsNotTyped(val, path);\n      val.fromType = \"collection\";\n    }\n\n    addDefinition(test, pathToTest = false) {\n      this.$trace(\"LswTester.addDefinition\");\n      if (pathToTest) {\n        test.path = pathToTest;\n      }\n      if (test.id in this.$definitions) {\n        throw new Error(`Required property «id» in test on index «${pathToTest.join(\".\")}» to be a non-duplicated id for «this.$definitions» on «LswTester.addDefinition»`);\n      }\n      this.$definitions[test.id] = test.path;\n    }\n\n    innerLoadTest(val, path, parent = null, parentIndex = []) {\n      this.$trace(\"LswTester.innerLoadTest\");\n      this.addDefinition(val, path);\n      if (val.fromUrl) {\n        this.innerTypeAsUrl(val, path);\n      }\n      if (val.fromFile) {\n        this.innerTypeAsFile(val, path);\n      }\n      if (val.fromId) {\n        this.innerTypeAsId(val, path);\n      }\n      if (val.fromCallback) {\n        this.innerTypeAsCallback(val, path);\n      }\n      if (val.fromCollection) {\n        this.innerTypeAsCollection(val, path);\n        for (let index = 0; index < val.fromCollection.length; index++) {\n          const subval = val.fromCollection[index];\n          this.innerLoadTest(subval, path.concat([\"fromCollection\", index]), val, path);\n        }\n      }\n    }\n\n    async innerRun() {\n      this.$trace(\"LswTester.innerRun\");\n      this.hookedBy(\"onStartTester\", []);\n      let results = new Error(`Tester «${this.$composition.id}» was not started yet`);\n      try {\n        results = await this.innerRunTests(this.$composition, [], null, [], []);\n        this.hookedBy(\"onSuccessTester\", [results]);\n      } catch (error) {\n        this.hookedBy(\"onErrorTester\", [error]);\n        results = results.concat([error]);\n      } finally {\n        this.hookedBy(\"onEndTester\", [results]);\n        return results;\n      }\n    }\n\n    innerHandleCallback(val, path, parent, parentIndex, accumulated) {\n      this.$trace(\"LswTester.innerHandleCallback\");\n      return val.fromCallback.call(this, {\n        $tester: this,\n        $test: val,\n        $testPath: path,\n        $testParent: parent,\n        $testParentPath: parentIndex,\n        $accumulated: accumulated,\n        assert: createAssert(this, val),\n      });\n    }\n\n    async innerHandleUrl(val, path, parent, parentIndex, accumulated) {\n      this.$trace(\"LswTester.innerHandleUrl\");\n      const testSource = await importer.text(val.fromUrl);\n      const testParameters = {\n        $tester: this,\n        $test: val,\n        $testPath: path,\n        $testParent: parent,\n        $testParentPath: parentIndex,\n        $accumulated: accumulated,\n        assert: createAssert(this, val),\n      };\n      const testCallback = LswUtils.createAsyncFunction(testSource, Object.keys(testParameters));\n      return await testCallback.call(this, ...Object.values(testParameters));\n    }\n\n    innerHandleFile(val, path, parent, parentIndex, accumulated) {\n      this.$trace(\"LswTester.innerHandleFile\");\n      return Vue.prototype.$lsw.fs.evaluateAsJavascriptFile(val.fromFile);\n    }\n\n    async innerRunTests(val, path, parent = null, parentIndex = [], accumulated = []) {\n      this.$trace(\"LswTester.innerRunTests\");\n      this.hookedBy(\"onStartModule\", { tester:this, value:val, path, parent, parentIndex, accumulated });\n      let reported = undefined;\n      RunningTest: {\n        try {\n          Manage_bad_inputs: {\n            if (typeof val !== \"object\") {\n              throw new Error(`[ERROR: LswTester complain x004006] Required type of test «${typeof val}» on index «${path.join(\".\")}» to be an object in order to process module as test by «LswTester» instance on «LswTester.innerRunTests»`);\n            }\n            if (val === null) {\n              break RunningTest;\n            }\n            if (!val.id) {\n              throw new Error(`[ERROR: LswTester complain x004001] Required test «${typeof val}» on index «${path.join(\".\")}» to have property «id» in order to process module as test by «LswTester» instance on «LswTester.innerRunTests»`);\n            }\n            if (typeof val.id !== \"string\") {\n              throw new Error(`[ERROR: LswTester complain x004002] Required test «${typeof val}» on index «${path.join(\".\")}» to have a string on property «id» in order to process module as test by «LswTester» instance on «LswTester.innerRunTests»`);\n            }\n            if (typeof val.fromType !== \"string\") {\n              throw new Error(`[ERROR: LswTester complain x004003] Required test «${typeof val}» on index «${path.join(\".\")}» to have a string on property «fromType» in order to process module as test by «LswTester» instance. This indicates that the previous step «LswTester.innerLoad» DID NOT (while it SHOULD, or SHOULD HAVE arised an error otherwise) mark this test module as a known type on «LswTester.innerRunTests»`);\n            }\n            const validTypes = [\"url\", \"file\", \"collection\", \"callback\"];\n            if (validTypes.indexOf(val.fromType) === -1) {\n              throw new Error(`[ERROR: LswTester complain x004008] Required test «${typeof val}» on index «${path.join(\".\")}» to have property «fromType» with a valid type instead of «${val.fromType}» in order to process module as test by «LswTester» instance. This indicates that the previous step «LswTester.innerLoad» DID NOT (while it SHOULD, or SHOULD HAVE arised an error otherwise) mark this test module as a known type on «LswTester.innerRunTests»`);\n            }\n          }\n          if (val.fromType === \"url\") {\n            reported = await this.innerHandleUrl(val, path, parent, parentIndex, accumulated);\n          } else if (val.fromType === \"callback\") {\n            reported = await this.innerHandleCallback(val, path, parent, parentIndex, accumulated);\n          } else if (val.fromType === \"file\") {\n            reported = await this.innerHandleFile(val, path, parent, parentIndex, accumulated);\n          } else if (val.fromType === \"collection\") {\n            const collection = val.fromCollection;\n            reported = [];\n            for (let index = 0; index < collection.length; index++) {\n              const item = collection[index];\n              try {\n                const result = await this.innerRunTests(item, path.concat([\"fromCollection\", index]), val, path, accumulated);\n                reported.push(result);\n              } catch (error) {\n                if (this.$options.continueOnErrors === false) {\n                  throw error;\n                }\n              }\n            }\n          }\n          this.hookedBy(\"onSuccessModule\", { tester:this, value:val, path, parent, parentIndex, accumulated });\n        } catch (error) {\n          this.$trace(`Error on test artifact «${val.id}» located at «${path.join(\".\")}» on LswTester instance`);\n          if (this.$options.printErrors === true) {\n            console.error(error);\n          }\n          this.hookedBy(\"onErrorModule\", { tester:this, value:val, error, path, parent, parentIndex, accumulated });\n          if (this.$options.continueOnErrors === false) {\n            throw error;\n          } else {\n            reported = error;\n          }\n        }\n      }\n      this.hookedBy(\"onEndModule\", { tester:this, value:val, path, parent, parentIndex, accumulated, reported });\n      if (path.length === 0) {\n        this.$result = reported\n      }\n      return reported;\n    }\n\n  }\n\n  const LswTester = class extends LswTester_BasicLayer {\n\n    static Assertion = LswAssertion;\n\n    static createAssertion(...args) {\n      return new this.Assertion(...args);\n    }\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    $trace(method) {\n      if (Vue?.prototype.$lsw?.logger?.$options.active) {\n        console.log(`[trace][lsw-tester][${method}]`);\n      }\n    }\n\n    static defaultOptions = {\n      continueOnErrors: false,\n      printErrors: true,\n      onAnything: false,\n      onStartTester: false,\n      onEndTester: false,\n      onSuccessTester: false,\n      onErrorTester: false,\n      onStartModule: false,\n      onFinishModule: false,\n      onSuccessModule: false,\n      onErrorModule: false,\n      onSuccessAssertion: false,\n      onErrorAssertion: false,\n    };\n\n    static noop() { }\n\n    constructor() {\n      super();\n      this.reset();\n    }\n\n    reset() {\n      this.$isLoaded = false;\n      this.$isExecuted = false;\n      this.$definitions = {};\n      this.$options = Object.assign({}, this.constructor.defaultOptions);\n      this.$composition = undefined;\n    }\n\n    hookedBy(callbackId, uniqueParameter = {}) {\n      this.$trace(\"LswTester.hookedBy\");\n      const isAnyEventCallback = typeof this.$options.onAnything === \"function\";\n      if (isAnyEventCallback) {\n        this.$options.onAnything.call(this, { eventType: callbackId }, uniqueParameter);\n      }\n      const isCallback = typeof this.$options[callbackId] === \"function\";\n      if (!isCallback) {\n        return false;\n      }\n      return this.$options[callbackId].call(this, uniqueParameter);\n    }\n\n    validateComposition(composition) {\n      this.$trace(\"LswTester.validateComposition\");\n      $ensure(composition).type(\"object\");\n    }\n\n    define(composition = {}) {\n      this.$trace(\"LswTester.define\");\n      if (typeof this.$composition !== \"undefined\") {\n        throw new Error(\"Required property «$composition» to not be defined before on «LswTester.define»\");\n      }\n      this.validateComposition(composition);\n      this.$composition = composition;\n      return this;\n    }\n\n    options(options) {\n      this.$trace(\"LswTester.options\");\n      this.$options = Object.assign({}, this.constructor.defaultOptions, options);\n      return this;\n    }\n\n    onAnything(callback) {\n      this.$trace(\"LswTester.onAnything\");\n      this.$options.onAnything = callback;\n      return this;\n    }\n\n    onStartTester(callback) {\n      this.$trace(\"LswTester.onStartTester\");\n      this.$options.onStartTester = callback;\n      return this;\n    }\n\n    onEndTester(callback) {\n      this.$trace(\"LswTester.onEndTester\");\n      this.$options.onEndTester = callback;\n      return this;\n    }\n\n    onSuccessTester(callback) {\n      this.$trace(\"LswTester.onSuccessTester\");\n      this.$options.onSuccessTester = callback;\n      return this;\n    }\n\n    onErrorTester(callback) {\n      this.$trace(\"LswTester.onErrorTester\");\n      this.$options.onErrorTester = callback;\n      return this;\n    }\n\n    onStartModule(callback) {\n      this.$trace(\"LswTester.onStartModule\");\n      this.$options.onStartModule = callback;\n      return this;\n    }\n\n    onFinishModule(callback) {\n      this.$trace(\"LswTester.onFinishModule\");\n      this.$options.onFinishModule = callback;\n      return this;\n    }\n\n    onSuccessModule(callback) {\n      this.$trace(\"LswTester.onSuccessModule\");\n      this.$options.onSuccessModule = callback;\n      return this;\n    }\n\n    onErrorModule(callback) {\n      this.$trace(\"LswTester.onErrorModule\");\n      this.$options.onErrorModule = callback;\n      return this;\n    }\n\n    onSuccessAssertion(callback) {\n      this.$trace(\"LswTester.onSuccessAssertion\");\n      this.$options.onSuccessAssertion = callback;\n      return this;\n    }\n\n    onErrorAssertion(callback) {\n      this.$trace(\"LswTester.onErrorAssertion\");\n      this.$options.onErrorAssertion = callback;\n      return this;\n    }\n\n    async load() {\n      this.$trace(\"LswTester.load\");\n      try {\n        await this.innerLoad();\n        this.$isLoaded = true;\n        return this;\n      } catch (error) {\n        console.error(\"[!] Failed «LswTester» on «load» phase with:\", error);\n        throw error;\n      }\n    }\n\n    async run(skipLoad = false) {\n      this.$trace(\"LswTester.run\");\n      try {\n        if(!skipLoad) {\n          await this.load();\n        }\n        await this.innerRun();\n        this.$isExecuted = true;\n      } catch (error) {\n        console.error(\"[!] Failed «LswTester» on «run» phase with:\", error);\n        throw error;\n      } finally {\n        return this;\n      }\n    }\n\n    getStatus() {\n      this.$trace(\"LswTester.getStatus\");\n      return this.$composition;\n    }\n\n  };\n\n  LswTester.global = LswTester.create();\n",
      "$code.label": "LswTester API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-tester/lsw-tests.js",
      "$location": {
        "start": {
          "offset": 280,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 370,
          "line": 15,
          "column": 1
        }
      },
      "$section": "LswTests API » LswTests classes and functions",
      "$code": "  \n  // Example of usage:\n  //* \n  LswTestRegistry.collect(\"Lsw Fifth Test\", async function (test) {\n    test(\"can wait 1 second\", async function () {\n      await new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve();\n        }, 1000);\n      });\n    });\n  });\n  //*/\n\n  return LswTestRegistry;\n",
      "$code.label": "LswTests API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-tester-prev/lsw-test-registry.js",
      "$location": {
        "start": {
          "offset": 296,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 407,
          "line": 15,
          "column": 1
        }
      },
      "$section": "LswTestRegistry API » LswTestRegistry classes and functions",
      "$code": "  const LswTestRegistry = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor() {\n      this.$tests = {};\n    }\n\n    define(id, callback) {\n      this.mustMiss(id);\n      this.$tests[id] = callback;\n    }\n\n    mustHave(id) {\n      if(typeof id !== \"string\") {\n        throw new Error(`Required parameter 1 «id=${id}» to be string in «$tests» on «LswTestRegistry.mustHave»`);\n      }\n      if(!(id in this.$tests)) {\n        throw new Error(`Required parameter 1 «id=${id}» to be an identifier in «$tests» on «LswTestRegistry.mustHave»`);\n      }\n    }\n\n    mustMiss(id) {\n      if(typeof id !== \"string\") {\n        throw new Error(`Required parameter 1 «id=${id}» to be string in «$tests» on «LswTestRegistry.mustMiss»`);\n      }\n      if(id in this.$tests) {\n        throw new Error(`Required parameter 1 «id=${id}» to NOT be an identifier in «$tests» on «LswTestRegistry.mustMiss»`);\n      }\n    }\n\n    pick(id) {\n      this.mustHave(id);\n      return this.$tests[id];\n    }\n\n    run(id) {\n      this.mustHave(id);\n      return this.$tests[id].call();\n    }\n\n    all() {\n      const allKeys = Object.keys(this.$tests);\n      const output = [];\n      for(let index=0; index<allKeys.length; index++) {\n        const key = allKeys[index];\n        const testCallback = this.$tests[key];\n        testCallback.$lswTestId = key;\n        output.push(testCallback);\n      }\n      return Object.values(this.$tests);\n    }\n\n    collect(id, testCallback) {\n      this.mustMiss(id);\n      const testSource = testCallback.toString();\n      const testFunction = new Function(`return LswTester.collection(${JSON.stringify(id)}, ${testSource});`)\n      this.$tests[id] = testFunction;\n      return {\n        [id]: testFunction.toString().length + \" chars\",\n      };\n    }\n\n  };\n\n  LswTestRegistry.defaultInstance = LswTestRegistry.create();\n\n  return LswTestRegistry.defaultInstance;\n",
      "$code.label": "LswTestRegistry API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-tester-prev/lsw-tester.js",
      "$location": {
        "start": {
          "offset": 282,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 375,
          "line": 15,
          "column": 1
        }
      },
      "$section": "LswTester API » LswTester classes and functions",
      "$code": "  const TestSettings = class {\n    static AVAILABLE_MODES = [\"normally\", \"never\", \"always\", \"only\"];\n    constructor(testObject) {\n      this.$test = testObject;\n    }\n    timeout(value = undefined) {\n      if(typeof value !== \"number\") {\n        throw new Error(`Required parameter 1 «value=${typeof value}» to be number on «TestSettings.mode»`)\n      }\n      this.$test.timeoutLimit = value;\n      return this;\n    }\n    mode(mode) {\n      if(this.constructor.AVAILABLE_MODES.indexOf(mode) === -1) {\n        throw new Error(`Required parameter 1 «mode=${mode}» to be one of: «${this.constructor.AVAILABLE_MODES.join(\"|\")}» on «TestSettings.mode»`)\n      }\n      this.$test.mode = mode;\n      return this;\n    }\n    onError(onErrorCallback) {\n      if(typeof onErrorCallback !== \"function\") {\n        throw new Error(`Required parameter 1 «onErrorCallback=${typeof onErrorCallback}» to be string on «TestSettings.onError»`)\n      }\n      this.$test.errorHandler = onErrorCallback;\n      return this;\n    }\n    onSuccess(onSuccessCallback) {\n      if(typeof onSuccessCallback !== \"function\") {\n        throw new Error(`Required parameter 1 «onSuccessCallback=${typeof onSuccessCallback}» to be string on «TestSettings.onError»`)\n      }\n      this.$test.successHandler = onSuccessCallback;\n      return this;\n    }\n  };\n\n  const LswTester = class {\n\n    static run(...args) {\n      return this.create(...args).run();\n    }\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    static STATES = {\n      DEFINED: \"defined\",\n      STARTED: \"started\",\n      PASSED: \"passed\",\n      FAILED: \"failed\",\n    }\n\n    static formatDate(dateObject = new Date()) {\n      const anio = (\"\" + (dateObject.getFullYear() ?? 0)).padStart(4, '0');\n      const mes = (\"\" + ((dateObject.getMonth() ?? 0) + 1)).padStart(2, '0');\n      const dia = (\"\" + (dateObject.getDate() ?? 0)).padStart(2, '0');\n      const hora = (\"\" + (dateObject.getHours() ?? 0)).padStart(2, '0');\n      const minuto = (\"\" + (dateObject.getMinutes() ?? 0)).padStart(2, '0');\n      const segundo = (\"\" + (dateObject.getSeconds() ?? 0)).padStart(2, '0');\n      const milisegundo = (\"\" + (dateObject.getMilliseconds() ?? 0)).padStart(3, '0');\n      const laHora = `${hora}:${minuto}:${segundo}.${milisegundo}`;\n      return `${anio}/${mes}/${dia} ${laHora}`;\n    }\n\n    static getTimeDifferenceBetweenDates(dateStr1, dateStr2) {\n      const date1 = new Date(dateStr1);\n      const date2 = new Date(dateStr2);\n      return date2 - date1;\n    }\n\n    static getDefaultOptions(overrider = {}) {\n      return Object.assign({}, {\n        trace: (Vue?.prototype?.$lsw?.logger?.$options?.active ),\n        successHandler: false,\n        errorHandler: false,\n        failureHandler: false,\n        finishHandler: false,\n      }, overrider);\n    };\n\n    constructor(id, callback, options = {}) {\n      if(typeof id !== \"string\") throw new Error(\"Required argument 1 to be string on «LswTester.constructor»\");\n      if(typeof callback !== \"function\") throw new Error(\"Required argument 2 to be function on «LswTester.constructor»\");\n      this.$options = this.constructor.getDefaultOptions(options);\n      this.$id = id;\n      this.$callback = callback;\n      this.$queue = [];\n      this.$state = {\n        testCollectionId: this.$id,\n        loaded: false,\n        createdAt: this.constructor.formatDate(),\n        startedAt: false,\n        finishedAt: false,\n        loadedAt: false,\n        timeoutLimit: 4000,\n        tests: {\n          ids: [],\n          all: [],\n        },\n      };\n      Validate_parameters: {\n        if(typeof this.$id !== \"string\") throw new Error(`Required parameter 1 «id=${typeof this.$id}» to be string on «LswTester.constructor»`);\n        if(typeof this.$callback !== \"function\") throw new Error(`Required parameter 2 «callback=${typeof this.$callback}» to be function on «LswTester.constructor»`);\n        if(typeof this.$options !== \"object\") throw new Error(`Required parameter 3 «options=${typeof this.$options}» to be object on «LswTester.constructor»`);\n        if(!Array.isArray(this.$queue)) throw new Error(`Required property «$queue=${typeof this.$queue}» to be object on «LswTester.constructor»`);\n        if(typeof this.$state !== \"object\") throw new Error(`Required property «$state=${typeof this.$state}» to be object on «LswTester.constructor»`);\n      }\n    }\n\n    $trace(method) {\n      if(this.$options.trace) {\n        console.log(`[trace][lsw-tester] ${method}`);\n      }\n    }\n\n    $createTestObject(id, action, attachedMode = \"normally\") {\n      this.$trace(\"$createTestObject\");\n      return {\n        id: id,\n        // Property «currently» can be: \"started\", \"passed\", \"failed\" or \"defined\".\n        currently: this.constructor.STATES.DEFINED,\n        took: undefined,\n        action: action,\n        mode: attachedMode,\n        successHandler: undefined,\n        errorHandler: undefined,\n        timeoutLimit: undefined,\n      };\n    }\n\n    $createItFunction() {\n      this.$trace(\"$createItFunction\");\n      let it2 = undefined;\n      // Cuidaico con esta variable porque si llamas al mismo «it» 2 veces, puede jugártela.\n      let testObject = undefined;\n      const it = function(id, action, attachedMode = \"normally\") {\n        Ensure_id_uniqueness: {\n          if(this.$state.tests.ids.indexOf(id) !== -1) {\n            console.log(this.$state.tests.ids);\n            throw new Error(`Required parameter 1 «id=${id}» to not be a repeated test identifier on «LswTester.it»`);\n          }\n        }\n        Append_test_object: {\n          testObject = this.$createTestObject(id, action, attachedMode);\n          this.$state.tests.ids.push(id);\n          this.$state.tests.all.push(testObject);\n        }\n        return it2;\n      };\n      it2 = it.bind(this);\n      it2.always = (id, action) => it2(id, action, \"always\");\n      it2.normally = (id, action) => it2(id, action, \"normally\");\n      it2.only = (id, action) => it2(id, action, \"only\");\n      it2.never = (id, action) => it2(id, action, \"never\");\n      it2.timeout = this.timeout.bind(this);\n      it2.onSuccess = this.onSuccess.bind(this);\n      it2.onError = this.onError.bind(this);\n      it2.onFailure = this.onFailure.bind(this);\n      return it2;\n    }\n\n    $handleLoadError(error) {\n      this.$trace(\"$handleLoadError\");\n      console.error(\"LswTester failed on «load» step:\", error);\n      throw error;\n    }\n\n    $handleRunError(error) {\n      this.$trace(\"$handleRunError\");\n      console.error(\"LswTester arised error on «run» step:\", error);\n      throw error;\n    }\n\n    $handleTestError(error, lastStartedTest) {\n      this.$trace(\"$handleTestError\");\n      By_tester_first: {\n        if(typeof this.$options.errorHandler === \"function\") {\n          const handlerFeedback = this.$options.errorHandler(error, lastStartedTest);\n          if(typeof handlerFeedback !== \"undefined\") {\n            return handlerFeedback;\n          }\n        }\n      }\n      By_test_second: {\n        if(typeof lastStartedTest.errorHandler === \"function\") {\n          const testHandlerFeedback = lastStartedTest.errorHandler(error, lastStartedTest);\n          if(typeof testHandlerFeedback !== \"undefined\") {\n            return testHandlerFeedback;\n          }\n        } else {\n          console.error(\"LswTester arised error on «test» step:\", error);\n          throw error;\n        }\n      }\n    }\n\n    $handleTestSuccess(lastStartedTest) {\n      this.$trace(\"$handleTestSuccess\");\n      By_tester_first: {\n        if(typeof this.$options.successHandler === \"function\") {\n          const handlerFeedback = this.$options.successHandler(lastStartedTest);\n          if(typeof handlerFeedback !== \"undefined\") {\n            return handlerFeedback;\n          }\n        }\n      }\n      By_test_second: {\n        if(typeof lastStartedTest.successHandler === \"function\") {\n          const testHandlerFeedback = lastStartedTest.successHandler(lastStartedTest);\n          if(typeof testHandlerFeedback !== \"undefined\") {\n            return testHandlerFeedback;\n          }\n        } else {\n          // @OK.\n        }\n      }\n      if(typeof lastStartedTest.successHandler === \"function\") {\n        return lastStartedTest.successHandler(lastStartedTest);\n      } else {\n        // @OK.\n      }\n    }\n\n    $handleTestTimeout(indexTest) {\n      const testObject = this.$state.tests.all[indexTest];\n      const isStarted = testObject.currently === this.constructor.STATES.STARTED;\n      if(isStarted) {\n        testObject.currently = this.constructor.STATES.FAILED;\n        testObject.failureReason = \"timed out\";\n      }\n    }\n\n    timeout(limit) {\n      this.$trace(\"timeout\");\n      this.$state.timeoutLimit = limit;\n    }\n\n    onSuccess(successHandler) {\n      this.$trace(\"onSuccess\");\n      this.$options.successHandler = successHandler;\n    }\n\n    onError(errorHandler) {\n      this.$trace(\"onError\");\n      this.$options.errorHandler = errorHandler;\n    }\n\n    onFailure(failureHandler) {\n      this.$trace(\"onFailure\");\n      this.$options.failureHandler = failureHandler;\n    }\n\n    async load(ignoreDuplication = false) {\n      this.$trace(\"load\");\n      try {\n        Validate_state_before_reloading_by_error: {\n          const wasLoadedBefore = typeof this.$state.loadedAt === \"string\";\n          const allowsDuplication = !ignoreDuplication;\n          if(wasLoadedBefore && !allowsDuplication) {\n            throw new Error(\"Cannot call «LswTester.load» more than once\");\n          }\n        }\n        this.$state.loadedAt = this.constructor.formatDate();\n        const it = this.$createItFunction();\n        await this.$callback(it);\n        this.$state.loaded = true;\n      } catch (error) {\n        this.$handleLoadError(error);\n      }\n    }\n\n    async run() {\n      this.$trace(\"run\");\n      try {\n        await this.load();\n        const testList = this.$state.tests.all;\n        const wasActivatedOnlyMode = this.$state.tests.all.reduce((out, testObject) => {\n          out = out || (testObject.mode === 'only');\n          return out;\n        }, false);\n        let lastStartedTest = undefined;\n        this.$state.startedAt = this.constructor.formatDate();\n        Executing_tests:\n        for(let indexTest=0; indexTest<testList.length; indexTest++) {\n          try {\n            const testObject = testList[indexTest];\n            lastStartedTest = testObject;\n            const {\n              id,\n              mode,\n              action,\n              currently,\n            } = testObject;\n            let testTimeoutId = undefined;\n            Ignore_by_mode: {\n              if(mode === \"never\") {\n                continue Executing_tests;\n              }\n              if(wasActivatedOnlyMode) {\n                if(mode === \"normally\") {\n                  continue Executing_tests;\n                }\n              }\n            }\n            Throw_on_state_conflict: {\n              if(currently !== this.constructor.STATES.DEFINED) {\n                throw new Error(`Cannot run test «${id}» because its state is «${currently}» on «LswTester.run»`);\n              }\n            }\n            Change_state_to_started: {\n              this.$state.tests.all[indexTest].currently = this.constructor.STATES.STARTED;\n              this.$state.tests.all[indexTest].startedAt = this.constructor.formatDate();\n            }\n            let testPromise = undefined;\n            Execute_test_and_reserve_promise: {\n              const testSettings = new TestSettings(testObject);\n              testPromise = action(testSettings);\n            }\n            Start_timeout_callback_to_fail_test: {\n              // Priorizamos el timeout del test al del tester:\n              const timeoutLimit = testObject.timeoutLimit || this.$state.timeoutLimit;\n              if((typeof timeoutLimit !== \"number\") || (timeoutLimit < 0)) {\n                break Start_timeout_callback_to_fail_test;\n              }\n              const timeoutHandler = () => {\n                this.$handleTestTimeout(indexTest);\n              };\n              testTimeoutId = setTimeout(timeoutHandler.bind(this), timeoutLimit);\n            }\n            Wait_for_test: {\n              await testPromise;\n            }\n            Check_state_before_confirm_test_is_passed: {\n              clearTimeout(testTimeoutId);\n              const currentState = this.$state.tests.all[indexTest].currently;\n              const isStarted = currentState === this.constructor.STATES.STARTED;\n              if(!isStarted) {\n                throw new Error(`Test «${id}» was already considered «${currentState}» and cannot promote it to «passed» on «LswTester.run»`);\n              }\n            }\n            Change_state_to_passed: {\n              this.$state.tests.all[indexTest].finishedAt = this.constructor.formatDate();\n              this.$state.tests.all[indexTest].currently = this.constructor.STATES.PASSED;\n              this.$state.tests.all[indexTest].took = this.constructor.getTimeDifferenceBetweenDates(this.$state.tests.all[indexTest].startedAt, this.$state.tests.all[indexTest].finishedAt);\n            }\n            Trigger_success_handler: {\n              await this.$handleTestSuccess(lastStartedTest);\n            }\n          } catch (error) {\n            let errorFeedback = undefined;\n            Change_state_to_failed: {\n              this.$state.tests.all[indexTest].finishedAt = this.constructor.formatDate();\n              this.$state.tests.all[indexTest].currently = this.constructor.STATES.FAILED;\n              this.$state.tests.all[indexTest].took = this.constructor.getTimeDifferenceBetweenDates(this.$state.tests.all[indexTest].startedAt, this.$state.tests.all[indexTest].finishedAt);\n              this.$state.tests.all[indexTest].failureReason = error instanceof Error ? `${error.name}: ${error.message}` : error;\n              console.log(error);\n            }\n            Trigger_error_handler: {\n              errorFeedback = await this.$handleTestError(error, lastStartedTest);\n            }\n            Interrupt_tests_if_handler_returns_0: {\n              if(errorFeedback === false) {\n                break Executing_tests;\n              }\n            }\n          }\n        }\n      } catch (error) {\n        this.$handleRunError(error);\n      } finally {\n        this.$state.finishedAt = this.constructor.formatDate();\n        if(typeof this.$options.finishHandler === \"function\") {\n          this.$options.finishHandler(this.getReport(), this);\n        }\n        return this;\n      }\n    }\n\n    getReport() {\n      this.$trace(\"getReport\");\n      let testResult = \"passed\";\n      for(let index=0; index<this.$state.tests.all.length; index++) {\n        const testObject = this.$state.tests.all[index];\n        const isOk = [\"passed\", \"defined\"].indexOf(testObject.currently) !== -1;\n        if(!isOk) {\n          testResult = testObject.currently;\n        }\n      }\n      const tookMilliseconds = this.constructor.getTimeDifferenceBetweenDates(this.$state.startedAt, this.$state.finishedAt);\n      return {\n        result: testResult,\n        took: tookMilliseconds,\n        ...this.$state,\n      };\n    }\n\n    getReportAsJson(compressed = false) {\n      this.$trace(\"getReportAsJson\");\n      const report = this.getReport();\n      if(!compressed) {\n        return JSON.stringify(report, null, 2);\n      } else {\n        return JSON.stringify(report);\n      }\n    }\n\n    static collection = this.run;\n\n  };\n",
      "$code.label": "LswTester API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-tester-prev/lsw-tests.js",
      "$location": {
        "start": {
          "offset": 280,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 370,
          "line": 15,
          "column": 1
        }
      },
      "$section": "LswTests API » LswTests classes and functions",
      "$code": "  \n  // Example of usage:\n  /* \n  LswTestRegistry.collect(\"Lsw Fifth Test\", async function (test) {\n    test(\"can wait 1 second\", async function () {\n      await new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve();\n        }, 1000);\n      });\n    });\n  });\n  //*/\n\n  return LswTestRegistry;\n",
      "$code.label": "LswTests API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-timer/lsw-timer.api.js",
      "$location": {
        "start": {
          "offset": 280,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 370,
          "line": 15,
          "column": 1
        }
      },
      "$section": "LswTimer API » LswTimer classes and functions",
      "$code": "  // exported to LswTimer\n  const LswTimer = {\n    utils: {},\n    parser: Timeformat_parser,\n  };\n\n  LswTimer.utils.formatHour = function (horaInput, minutoInput) {\n    const hora = (\"\" + horaInput).padStart(2, '0');\n    const minuto = (\"\" + minutoInput).padStart(2, '0');\n    return `${hora}:${minuto}`;\n  };\n\n  LswTimer.utils.formatDatestringFromDate = function (dateObject, setUntilDay = false, setMeridian = false, setSeconds = false, setOnlyHour = false, setMilliseconds = false) {\n    if (typeof dateObject === \"undefined\") {\n      return undefined;\n    }\n    const anio = (\"\" + (dateObject.getFullYear() ?? 0)).padStart(4, '0');\n    const mes = (\"\" + ((dateObject.getMonth() ?? 0) + 1)).padStart(2, '0');\n    const dia = (\"\" + (dateObject.getDate() ?? 0)).padStart(2, '0');\n    if (setUntilDay) {\n      return `${anio}/${mes}/${dia}`;\n    }\n    const hora = (\"\" + (dateObject.getHours() ?? 0)).padStart(2, '0');\n    const minuto = (\"\" + (dateObject.getMinutes() ?? 0)).padStart(2, '0');\n    const segundo = setSeconds ? (\"\" + (dateObject.getSeconds() ?? 0)).padStart(2, '0') : false;\n    let milisegundo = false;\n    if(setMilliseconds) {\n      milisegundo = dateObject.getMilliseconds();\n    }\n    const laHora = `${hora}:${minuto}${typeof segundo !== \"boolean\" ? (':' + segundo) : ''}${milisegundo ? '.' + milisegundo : ''}${setMeridian ? hora >= 12 ? 'pm' : 'am' : ''}`;\n    if (setOnlyHour) {\n      return laHora;\n    }\n    return `${anio}/${mes}/${dia} ${laHora}`;\n  };\n\n  LswTimer.utils.fromDateToDatestring = LswTimer.utils.formatDatestringFromDate;\n\n  LswTimer.utils.getDateFromMomentoText = function (momentoText, setMeridian = false) {\n    const momentoBrute = Timeformat_parser.parse(momentoText)[0];\n    const date = new Date();\n    if (momentoBrute.anio) {\n      date.setFullYear(momentoBrute.anio);\n      if (momentoBrute.mes === 0) {\n        throw new Error(\"Cannot set «mes» to «0» in momento text on «LswTimer.utils.getDateFromMomentoText»\");\n      }\n      date.setMonth((momentoBrute.mes - 1) || 0);\n      date.setDate(momentoBrute.dia || 0);\n    }\n    date.setHours(momentoBrute.hora || 0);\n    date.setMinutes(momentoBrute.minuto || 0);\n    date.setSeconds(momentoBrute.segundo || 0);\n    date.setMilliseconds(0);\n    return date;\n  };\n\n  LswTimer.utils.fromDatestringToDate = LswTimer.utils.getDateFromMomentoText;\n\n  LswTimer.utils.formatDatetimeFromMomento = function (momentoBrute, setMeridian = false) {\n    const momento = LswTimer.utils.toPlainObject(momentoBrute);\n    const anio = (\"\" + (momento.anio ?? 0)).padStart(4, '0');\n    const mes = (\"\" + (momento.mes ?? 0)).padStart(2, '0');\n    const dia = (\"\" + (momento.dia ?? 0)).padStart(2, '0');\n    const hora = (\"\" + (momento.hora ?? 0)).padStart(2, '0');\n    const minuto = (\"\" + (momento.minuto ?? 0)).padStart(2, '0');\n    return `${anio}/${mes}/${dia} ${hora}:${minuto}${setMeridian ? hora >= 12 ? 'pm' : 'am' : ''}`;\n  };\n\n  LswTimer.utils.formatHourFromMomento = function (momentoBrute, setMeridian = false) {\n    const momento = LswTimer.utils.toPlainObject(momentoBrute);\n    const hora = (\"\" + (momento.hora ?? 0)).padStart(2, '0');\n    const minuto = (\"\" + (momento.minuto ?? 0)).padStart(2, '0');\n    return `${hora}:${minuto}${setMeridian ? hora >= 12 ? 'pm' : 'am' : ''}`;\n  };\n\n  LswTimer.utils.formatHourFromMomentoCode = function (momentoCode, setMeridian = false) {\n    const momentoBruteList = Timeformat_parser.parse(momentoCode);\n    const momentoBrute = momentoBruteList[0];\n    const momento = LswTimer.utils.toPlainObject(momentoBrute);\n    const hora = (\"\" + (momento.hora ?? 0)).padStart(2, '0');\n    const minuto = (\"\" + (momento.minuto ?? 0)).padStart(2, '0');\n    return `${hora}:${minuto}${setMeridian ? hora >= 12 ? 'pm' : 'am' : ''}`;\n  };\n\n  LswTimer.utils.addDuracionToMomento = function (momentoBrute, duracion) {\n    const momentoFinal = {};\n    const duracionParsed = Timeformat_parser.parse(duracion)[0];\n    const props = [\"anio\", \"mes\", \"dia\", \"hora\", \"minuto\", \"segundo\"];\n    const propsInDuracion = [\"anios\", \"meses\", \"dias\", \"horas\", \"minutos\", \"segundos\"];\n    for (let index = 0; index < props.length; index++) {\n      const prop = props[index];\n      const propInDuracion = propsInDuracion[index];\n      const base = momentoBrute[prop] ?? 0;\n      const aggregated = duracionParsed[propInDuracion] ?? 0;\n      momentoFinal[prop] = base + aggregated;\n    }\n    return momentoFinal;\n  };\n\n  LswTimer.utils.toPlainObject = function (obj) {\n    const seen = new WeakSet();\n    return JSON.parse(JSON.stringify(obj, (key, value) => {\n      if (typeof value === \"object\" && value !== null) {\n        if (seen.has(value)) return undefined; // Ignora referencias circulares\n        seen.add(value);\n      }\n      return value;\n    }));\n  };\n\n  LswTimer.utils.isDurationOrThrow = function (text) {\n    const errorMessage = \"It must be a duration only, like 0y 0mon 0d 0h 0min 0s 0ms\";\n    try {\n      const ast = Timeformat_parser.parse(text);\n      const mainExpression = ast[0];\n      if (mainExpression.tipo !== \"Duracion\") {\n        throw new Error(`Expression of type «${mainExpression.tipo}» is not valid. ${errorMessage}`);\n      }\n    } catch (error) {\n      throw new Error(errorMessage);\n    }\n    return true;\n  };\n\n  LswTimer.utils.isDatetimeOrThrow = function (text) {\n    const errorMessage = \"It must be a datetime only, like 2025/01/01 00:00\";\n    try {\n      const ast = Timeformat_parser.parse(text);\n      const mainExpression = ast[0];\n      if (mainExpression.tipo !== \"FechaHora\") {\n        throw new Error(errorMessage);\n      }\n    } catch (error) {\n      throw new Error(errorMessage);\n    }\n    return true;\n  };\n\n  LswTimer.utils.isDateOrThrow = function (text) {\n    const errorMessage = \"It must be a date only, like 2025/01/01\";\n    try {\n      const ast = Timeformat_parser.parse(text);\n      const mainExpression = ast[0];\n      if (mainExpression.tipo !== \"SoloFecha\") {\n        throw new Error(errorMessage);\n      }\n    } catch (error) {\n      throw new Error(errorMessage);\n    }\n    return true;\n  };\n\n  LswTimer.utils.isHourOrThrow = function (text) {\n    const errorMessage = \"It must be an hour only, like 00:00 or 23:00\";\n    try {\n      const ast = Timeformat_parser.parse(text);\n      const mainExpression = ast[0];\n      if (mainExpression.tipo === \"Hora\") {\n        throw new Error(errorMessage);\n      }\n    } catch (error) {\n      throw new Error(errorMessage);\n    }\n    return true;\n  };\n\n  LswTimer.utils.formatDateToSpanish = function (date) {\n    const anio = date.getFullYear();\n    const month = date.getMonth();\n    const day = date.getDate();\n    const weekday = date.getDay();\n    const diaSemana = (() => {\n      if (weekday === 0) return \"Domingo\";\n      if (weekday === 1) return \"Lunes\";\n      if (weekday === 2) return \"Martes\";\n      if (weekday === 3) return \"Miércoles\";\n      if (weekday === 4) return \"Jueves\";\n      if (weekday === 5) return \"Viernes\";\n      if (weekday === 6) return \"Sábado\";\n    })();\n    const mes = (() => {\n      if (month === 0) return \"Enero\";\n      if (month === 1) return \"Febrero\";\n      if (month === 2) return \"Marzo\";\n      if (month === 3) return \"Abril\";\n      if (month === 4) return \"Mayo\";\n      if (month === 5) return \"Junio\";\n      if (month === 6) return \"Julio\";\n      if (month === 7) return \"Agosto\";\n      if (month === 8) return \"Septiembre\";\n      if (month === 9) return \"Octubre\";\n      if (month === 10) return \"Noviembre\";\n      if (month === 11) return \"Diciembre\";\n    })();\n    return `${diaSemana}, ${day} de ${mes} del ${anio}`;\n  }\n\n  LswTimer.utils.formatMomentoObjectToMomentoString = function (momento) {\n    let out = \"\";\n    const { anio = false, mes = false, dia = false, hora = false, minuto = false, segundo = false, milisegundo = false } = momento;\n    if (anio !== false) {\n      out += (\"\" + anio).padStart(4, '0');\n      out += \"/\";\n    }\n    if (mes !== false) {\n      out += (\"\" + mes).padStart(2, '0');\n      out += \"/\";\n    }\n    if (dia !== false) {\n      out += (\"\" + dia).padStart(2, '0');\n      out += \" \";\n    }\n    if (hora !== false) {\n      out += (\"\" + hora).padStart(2, '0');\n      out += \":\";\n    }\n    if (minuto !== false) {\n      out += (\"\" + minuto).padStart(2, '0');\n      out += \":\";\n    }\n    if (segundo !== false) {\n      out += (\"\" + segundo).padStart(2, '0');\n      out += \".\";\n    }\n    if (milisegundo !== false) {\n      out += (\"\" + milisegundo).padStart(3, '0');\n    }\n    return out.trim();\n  };\n\n  LswTimer.utils.areSameDayDates = function (date1, date2) {\n    const areSameYear = date1.getFullYear() === date2.getFullYear();\n    const areSameMonth = date1.getMonth() === date2.getMonth();\n    const areSameDate = date1.getDate() === date2.getDate();\n    const areSameDay = areSameYear && areSameMonth && areSameDate;\n    return areSameDay;\n  };\n\n  LswTimer.utils.extractHourFromDatestring = function (date) {\n    try {\n      return date.split(\" \")[1];\n    } catch (error) {\n      console.log(error);\n      return date;\n    }\n  };\n\n  LswTimer.utils.fromDateToHour = function (date, addSeconds = false) {\n    try {\n      const hora = date.getHours();\n      const minuto = date.getMinutes();\n      let out = \"\";\n      if (hora !== false) {\n        out += (\"\" + hora).padStart(2, '0');\n        out += \":\";\n      }\n      if (minuto !== false) {\n        out += (\"\" + minuto).padStart(2, '0');\n      }\n      if (addSeconds) {\n        const segundo = date.getSeconds();\n        out += \":\";\n        out += (\"\" + segundo).padStart(2, '0');\n      }\n      return out;\n    } catch (error) {\n      console.log(error);\n      return date;\n    }\n  };\n\n  LswTimer.utils.parseToNumberOrReturn = function (txt, defaultValue) {\n    const output = parseFloat(txt);\n    return isNaN(output) ? defaultValue : output;\n  };\n\n  LswTimer.utils.fromDurationstringToMilliseconds = function (durationString) {\n    const lines = Timeformat_parser.parse(durationString);\n    if (lines.length === 0) {\n      return 0;\n    } else if (lines.length !== 1) {\n      throw new Error(\"Only accepted 1 expression\")\n    }\n    const line = lines[0];\n    let ms = 0;\n    if (line.anios) {\n      ms += line.anios * 1000 * 60 * 60 * 24 * 365;\n    }\n    if (line.meses) {\n      ms += line.meses * 1000 * 60 * 60 * 24 * 30;\n    }\n    if (line.dias) {\n      ms += line.dias * 1000 * 60 * 60 * 24;\n    }\n    if (line.horas) {\n      ms += line.horas * 1000 * 60 * 60;\n    }\n    if (line.minutos) {\n      ms += line.minutos * 1000 * 60;\n    }\n    if (line.segundos) {\n      ms += line.segundos * 1000;\n    }\n    if (line.milisegundos) {\n      ms += line.milisegundos;\n    }\n    return ms;\n  };\n\n  LswTimer.utils.fromMillisecondsToDurationstring = function (ms) {\n    const units = {\n      y: 1000 * 60 * 60 * 24 * 365,\n      mon: 1000 * 60 * 60 * 24 * 30,\n      d: 1000 * 60 * 60 * 24,\n      h: 1000 * 60 * 60,\n      min: 1000 * 60,\n      s: 1000,\n      ms: 1\n    };\n    let remaining = ms;\n    const parts = [];\n    for (const [unit, value] of Object.entries(units)) {\n      const amount = Math.floor(remaining / value);\n      if (amount > 0) {\n        parts.push(`${amount}${unit}`);\n        remaining %= value;\n      }\n    }\n    return parts.join(' ');\n  };\n\n  LswTimer.utils.multiplyDuration = function (duration, multiplier) {\n    const operand = LswTimer.utils.parseToNumberOrReturn(multiplier, 0);\n    const durationMiliSource = LswTimer.utils.fromDurationstringToMilliseconds(duration);\n    const durationMiliDest = durationMiliSource * operand;\n    const durationDest = LswTimer.utils.fromMillisecondsToDurationstring(durationMiliDest);\n    return durationDest;\n  };\n\n  return LswTimer;\n",
      "$code.label": "LswTimer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-trigger/triggers-class.js",
      "$location": {
        "start": {
          "offset": 290,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 389,
          "line": 15,
          "column": 1
        }
      },
      "$section": "LswTriggers API » LswTriggers classes and functions",
      "$code": "  // exported to TriggersClass\n\n  class TriggerConcept {\n    constructor(anyzin) {\n      Object.assign(this, anyzin);\n    }\n  };\n\n  class TriggerParameters extends TriggerConcept {};\n  \n  class TriggerEvent extends TriggerConcept {};\n\n  class TriggersClass {\n\n    static Concept = TriggerConcept;\n\n    static Event = TriggerEvent;\n    \n    static Parameters = TriggerParameters;\n\n    static globMatch(patterns, list, wantsPatterns = false) {\n      const matches = new Set();\n\n      const regexes = patterns.map(pattern => {\n        let regexPattern = pattern\n          .replace(/[-/\\\\^$+?.()|[\\]{}]/g, \"\\\\$&\") // Escapa caracteres especiales\n          .replace(/\\*/g, \".*\")                 // '*' => cualquier cosa\n        return {\n          original: pattern,\n          expr: new RegExp(`^${regexPattern}$`),\n        };\n      });\n      for (const item of list) {\n        for (const regex of regexes) {\n          if (regex.expr.test(item)) {\n            if(!wantsPatterns) {\n              matches.add(item);\n            } else {\n              matches.add(regex.original);\n            }\n            break;\n          }\n        }\n      }\n\n      return Array.from(matches);\n    }\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    all = {};\n\n    findTriggerCollectionByEventAndId(event, id) {\n      return LswLifecycle.hooks.all[event].filter(trigger => trigger.id === id);\n    }\n\n    register(triggerNamePattern, triggerIdentifier, triggerCallback, triggerConfigurations = {}) {\n      const { priority = 0 } = triggerConfigurations; // Default priority is 0\n      if (!this.all[triggerNamePattern]) {\n        this.all[triggerNamePattern] = [];\n      }\n      \n      this.all[triggerNamePattern].push({\n        id: triggerIdentifier,\n        callback: triggerCallback,\n        priority,\n      });\n    }\n\n    async emit(triggerName, parameters = {}) {\n      let matchedTriggers = [];\n      const allPatterns = Object.keys(this.all);\n\n      // Encuentra patrones que coincidan con el nombre del evento\n      const matchedPatterns = this.constructor.globMatch(allPatterns, [triggerName], true);\n\n      // Agrega todos los eventos coincidentes a la lista de disparos\n      for (const pattern of matchedPatterns) {\n        matchedTriggers = matchedTriggers.concat(this.all[pattern] || []);\n      }\n\n      // Ordena por prioridad descendente\n      matchedTriggers.sort((a, b) => b.priority - a.priority);\n\n      // Ejecuta los callbacks en orden\n      const output = [];\n      for (const trigger of matchedTriggers) {\n        const eventObject = new TriggerEvent({ event: triggerName })\n        const parametersObject = new TriggerParameters(parameters);\n        const result = await trigger.callback(eventObject, parametersObject);\n        output.push(result);\n      }\n\n      return output;\n    }\n\n    unregister(triggerIdentifier) {\n      for (const pattern in this.all) {\n        this.all[pattern] = this.all[pattern].filter(\n          (trigger) => trigger.id !== triggerIdentifier\n        );\n        if (this.all[pattern].length === 0) {\n          delete this.all[pattern]; // Limpia patrones vacíos\n        }\n      }\n    }\n\n    reset() {\n      this.all = {};\n    }\n\n  }\n\n  TriggersClass.default = TriggersClass;\n\n  return TriggersClass;\n",
      "$code.label": "LswTriggers API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-typer/lsw-typer.api.js",
      "$location": {
        "start": {
          "offset": 282,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 356,
          "line": 15,
          "column": 1
        }
      },
      "$section": "LswTyper API » LswTyper class",
      "$code": "  class LswTyper {\n\n    static parse(jsontypedText) {\n      return LswTyperParser.parse(jsontypedText);\n    }\n\n    constructor(types = {}) {\n      this.$types = types;\n    }\n\n    define(typeId, typeCallback) {\n      this.$types[typeId] = typeCallback;\n    }\n\n    getTypeCallbackById(typeId) {\n      return this.$types[typeId] || null;\n    }\n\n    parse(jsontypedText) {\n      const ast = this.constructor.parse(jsontypedText);\n      const json = this.constructor.resolveTypes(ast, this.$types);\n      return JSON.parse(json);\n    }\n\n    static resolveTypes(input, reducers) {\n      return JSON.stringify(input, (key, value) => {\n        const isTyped = value && (typeof value === 'object') && (\"$value\" in value) && (\"$type\" in value);\n        // Filtramos los que no son type:\n        if (!isTyped) {\n          return value;\n        }\n        console.log(\"is typed:\", key, value);\n        const $types = Array.isArray(value.$type) ? value.$type : [value.$type];\n        Iterating_possible_types:\n        for(let index=0; index<$types.length; index++) {\n          const reducerId = $types[index];\n          // Filtramos los que cuyo $type no se encuentra entre los reducers:\n          if(!(reducerId in reducers)) {\n            console.log(\"Id not found:\", reducerId);\n            continue Iterating_possible_types;\n          }\n          console.log(\"Id reduceable:\", reducerId);\n          // Aplicamos el reducer pertinente...\n          const reducer = reducers[reducerId];\n          const result = reducer(value);\n          // Y si devuelven diferente de undefined...\n          console.log(\"Reduction:\", result);\n          if (typeof result !== \"undefined\") {\n            // Los retornamos.\n            return result;\n          }\n        }\n        // Y si no devolvemos lo normal.\n        return value;\n      }, 2);\n    }\n\n  }\n\n  globalThis.$lswTyper = new LswTyper();\n\n  return LswTyper;\n",
      "$code.label": "LswTyper API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-utils/lsw-utils.js",
      "$location": {
        "start": {
          "offset": 280,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 352,
          "line": 15,
          "column": 1
        }
      },
      "section": "Lsw Utils API » Lsw Utils global",
      "$code": "  const LswUtils = {};\n\n  LswUtils.hello = () => console.log(\"Hello!\");\n\n  ///////////////////////////////////////////////////////\n  // API de Excel: usa SheetJS\n  Object.assign(LswUtils, {\n    readFileAsArrayBuffer(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = event => resolve(event.target.result);\n        reader.onerror = error => reject(error);\n        reader.readAsArrayBuffer(file);\n      });\n    },\n    readFileAsText(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = event => resolve(event.target.result);\n        reader.onerror = error => reject(error);\n        reader.readAsText(file);\n      });\n    },\n    readFileAsBinaryString(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = event => resolve(event.target.result);\n        reader.onerror = error => reject(error);\n        reader.readAsBinaryString(file);\n      });\n    },\n    selectFile() {\n      return new Promise(resolve => {\n        const inputHtml = document.createElement(\"input\");\n        inputHtml.setAttribute(\"type\", \"file\");\n        inputHtml.setAttribute(\"accept\", \".ods,.xlsx,.xls,.csv\");\n        inputHtml.style.display = \"none\";\n        document.body.appendChild(inputHtml);\n        inputHtml.addEventListener(\"change\", event => {\n          try {\n            const file = event.target.files[0];\n            if (file) {\n              return resolve(file);\n            } else {\n              return resolve(undefined);\n            }\n          } catch (error) {\n            console.log(\"This should not happen :(\", error);\n          } finally {\n            inputHtml.remove();\n          }\n        });\n        inputHtml.click();\n      });\n    },\n    sheetToArray(sheet) {\n      // Obtener el rango de celdas activo de la hoja\n      const range = sheet['!ref']; // Ejemplo: 'A1:C3'\n      // Extraer las coordenadas de la celda inicial y final del rango\n      const [startCell, endCell] = range.split(':');\n      const startCol = startCell.match(/[A-Z]+/)[0]; // Columna de la primera celda (por ejemplo, 'A')\n      const startRow = parseInt(startCell.match(/\\d+/)[0], 10); // Fila de la primera celda (por ejemplo, 1)\n      const endCol = endCell.match(/[A-Z]+/)[0]; // Columna de la última celda (por ejemplo, 'C')\n      const endRow = parseInt(endCell.match(/\\d+/)[0], 10); // Fila de la última celda (por ejemplo, 3)\n      const data = [];\n      // Iterar sobre las filas y columnas dentro del rango\n      for (let row = startRow; row <= endRow; row++) {\n        const rowData = [];\n        for (let col = startCol.charCodeAt(0); col <= endCol.charCodeAt(0); col++) {\n          const cellAddress = String.fromCharCode(col) + row;\n          const cell = sheet[cellAddress]; // Obtener la celda\n          rowData.push(cell ? cell.v : null); // Si la celda existe, tomar su valor. Si no, agregar `null`\n        }\n        data.push(rowData); // Agregar la fila al array de datos\n      }\n      return data;\n    }\n  });\n\n  ///////////////////////////////////////////////////////\n  // API de Conductometria: usa API de Excel (so: SheetJS)\n  Object.assign(LswUtils, {\n    isDatePassed(date, time, currentDate = new Date()) {\n      const [day, month, year] = date.split(\"/\").map(Number);\n      const [hour, minute, second] = time.split(\":\").map(Number);\n      const targetDate = new Date(year, month - 1, day, hour, minute, second);\n      return currentDate > targetDate;\n    },\n    sheetToRegistros(sheet, asObjectIsOkay = false) {\n      const raw = this.sheetToArray(sheet);\n      const byDate = {};\n      let lastDate = undefined;\n      const currentDate = new Date();\n      Compact_by_date_using_last_date: {\n        for (let index = 0; index < raw.length; index++) {\n          const cells = raw[index];\n          const [time, content] = cells;\n          const isDate = time.match(/[0-9][0-9]\\/[0-9][0-9]\\/[0-9][0-9]/g);\n          if (isDate) {\n            if (!(time in byDate)) {\n              byDate[time] = {};\n            }\n            lastDate = time;\n          } else {\n            if (typeof content === \"string\") {\n              if (!(time in byDate[lastDate])) {\n                byDate[lastDate][time] = [];\n              }\n              Add_properties_to_hour: {\n              }\n              const items = content.split(\".\").filter(l => l !== \"\");\n              for (let indexItem = 0; indexItem < items.length; indexItem++) {\n                const item = items[indexItem];\n                const [name, details] = item.split(\":\").filter(l => l !== \"\");\n                let event = {};\n                Add_properties_to_event: {\n                  Object.assign(event, { name });\n                  Object.assign(event, details ? { details: details.trim() } : {});\n                }\n                byDate[lastDate][time].push(event);\n              }\n            }\n          }\n        }\n      }\n      if (asObjectIsOkay) {\n        return byDate;\n      }\n      const output = [];\n      Format_to_pure_array_to_avoid_confusions: {\n        const daysSorted = Object.keys(byDate).sort();\n        for (let index_day = 0; index_day < daysSorted.length; index_day++) {\n          const day_id = daysSorted[index_day];\n          const day_data = byDate[day_id];\n          const day_output = {\n            day: day_id,\n            hours: []\n          };\n          const hoursSorted = Object.keys(day_data).sort();\n          for (let index_hour = 0; index_hour < hoursSorted.length; index_hour++) {\n            const hour_id = hoursSorted[index_hour];\n            const hour_data = day_data[hour_id];\n            const hour_is_passed = this.isDatePassed(day_id, hour_id, currentDate);\n            const hour_is_current = hour_is_passed && (() => {\n              const [hours, minutes, seconds] = hour_id.split(\":\").map(Number);\n              const hour_next_id = [hours + 1, minutes, seconds].map(t => (\"\" + t).padStart(2, \"0\")).join(\":\");\n              console.log(hour_next_id);\n              return !this.isDatePassed(day_id, hour_next_id, currentDate);\n            })();\n            const hour_output = {\n              hour: hour_id,\n              events: [],\n              passed: hour_is_passed,\n              current: hour_is_current,\n            };\n            for (let index_item = 0; index_item < hour_data.length; index_item++) {\n              const item = hour_data[index_item];\n              hour_output.events.push(item);\n            }\n            day_output.hours.push(hour_output);\n          }\n          output.push(day_output);\n        }\n      }\n      return output;\n    },\n    async loadConductometriaByExcelFile() {\n      try {\n        const file = await this.selectFile();\n        const data = await this.readFileAsBinaryString(file);\n        const workbook = XLSX.read(data, { type: \"binary\", cellDates: false });\n        const sheet = workbook.Sheets[\"Tracking\"];\n        const registros = this.sheetToRegistros(sheet);\n        return { registros };\n      } catch (error) {\n        console.log(error);\n      }\n    },\n  });\n\n  // API de LSW:\n  LswUtils.toPlainObject = function (obj) {\n    const seen = new WeakSet();\n    return JSON.parse(JSON.stringify(obj, (key, value) => {\n      if (typeof value === \"object\" && value !== null) {\n        if (seen.has(value)) return undefined; // Ignora referencias circulares\n        seen.add(value);\n      }\n      return value;\n    }));\n  };\n\n\n  LswUtils.stringify = function (argInput, avoidedIndexes = [], currentLevel = 0, maxLevel = -1) {\n    const seen = new WeakSet();\n    return JSON.stringify(argInput, function (key, value) {\n      if (avoidedIndexes.indexOf(key) !== -1) {\n        return;\n      }\n      if (typeof value === \"object\") {\n        if (value === null) {\n          return null;\n        }\n        if (value.$el) {\n          return `[VueComponent:${value?.$options?.name}]`;\n        }\n        if (seen.has(value)) {\n          return \"[Circular]\";\n        }\n        if (value !== null) {\n          seen.add(value);\n        }\n      }\n      return value;\n    }, 2);\n  };\n\n  LswUtils.pluralizar = function (singular, plural, contexto, cantidad) {\n    return contexto.replace(\"%s\", cantidad === 1 ? singular : plural).replace(\"%i\", cantidad);\n  };\n\n  LswUtils.getRandomString = function (len = 10) {\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n    let out = \"\";\n    while (out.length < len) {\n      out += alphabet[Math.floor(Math.random() * alphabet.length)];\n    }\n    return out;\n  };\n\n  LswUtils.hello = function () {\n    console.log(\"hello\");\n  };\n\n  LswUtils.waitForMilliseconds = function (ms) {\n    return new Promise(resolve => {\n      setTimeout(resolve, ms);\n    });\n  };\n\n  LswUtils.toIntegerOr = function (txt, defaultValue = undefined) {\n    const val = parseInt(txt);\n    return isNaN(val) ? defaultValue : val;\n  };\n\n  LswUtils.toFloatOr = function (txt, defaultValue = undefined) {\n    const val = parseFloat(txt);\n    return isNaN(val) ? defaultValue : val;\n  };\n\n  LswUtils.splitStringOnce = function (text, splitter) {\n    if (typeof text !== \"string\") {\n      throw new Error(\"Required parameter «text» to be a string on «LswUtils.splitStringOnce»\");\n    }\n    if (typeof splitter !== \"string\") {\n      throw new Error(\"Required parameter «text» to be a string on «LswUtils.splitStringOnce»\");\n    }\n    const pos = text.indexOf(splitter);\n    if (pos === -1) return [undefined, text];\n    const parts = text.split(\"\");\n    return [[...parts].splice(0, pos).join(\"\"), [...parts].splice(pos + 1).join(\"\")];\n  };\n\n  LswUtils.reverseString = function (text) {\n    return text.split(\"\").reverse().join(\"\");\n  };\n\n  LswUtils.capitalize = function (text) {\n    return text.substr(0, 1).toUpperCase() + text.substr(1);\n  };\n\n  LswUtils.startThread = function (callback) {\n    setTimeout(callback, 0);\n  };\n\n  LswUtils.openAddNoteDialog = async function () {\n    const response = await Vue.prototype.$lsw.dialogs.open({\n      title: \"Nueva nota\",\n      template: `\n        <div class=\"pad_1 position_absolute top_0 right_0 left_0 bottom_0 flex_column\">\n          <div class=\"flex_1\">\n            <input class=\"width_100\" type=\"text\" v-model=\"value.tiene_fecha\" placeholder=\"Fecha de la nota\" ref=\"fecha\" />\n          </div>\n          <div class=\"flex_1 flex_row centered\" style=\"padding-top: 1px;\">\n            <div class=\"flex_1\">Estado: </div>\n            <select class=\"flex_100\" v-model=\"value.tiene_estado\">\n              <option value=\"creada\">Creada</option>\n              <option value=\"procesada\">Procesada</option>\n              <option value=\"dudosa\">Dudosa</option>\n              <option value=\"desestimada\">Desestimada</option>\n            </select>\n          </div>\n          <div class=\"flex_1\" style=\"padding-top: 2px;\">\n            <input class=\"width_100\" type=\"text\" v-model=\"value.tiene_categorias\" placeholder=\"categoría 1; categoria 2; categoria 3\" />\n          </div>\n          <div class=\"flex_100\" style=\"padding-top: 1px;\">\n            <textarea v-model=\"value.tiene_contenido\" spellcheck=\"false\" style=\"height: 100%;\" placeholder=\"Contenido de la nota. Acepta **markdown**, recuerda.\" ref=\"contenido\" />\n          </div>\n          <div class=\"flex_1\" style=\"padding-top: 2px;\">\n            <input class=\"width_100\" type=\"text\" v-model=\"value.tiene_titulo\" placeholder=\"Título de la nota\" ref=\"titulo\" />\n          </div>\n          <div class=\"flex_row pad_top_1\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 flex_row\">\n              <div class=\"pad_right_1\">\n                <button class=\"mini\" v-on:click=\"validate\">➕ Añadir</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      `,\n      factory: {\n        methods: {\n          validate() {\n            const isValidFecha = LswTimer.parser.parse(this.value.tiene_fecha);\n            const isValidContenido = this.value.tiene_contenido.trim() !== \"\";\n            const isValidTitulo = this.value.tiene_titulo.trim() !== \"\";\n            if (!isValidTitulo) {\n              window.alert(\"Necesita un título la nota.\");\n              return this.$refs.titulo.focus();\n            }\n            if (!isValidContenido) {\n              window.alert(\"Necesita un contenido la nota.\");\n              return this.$refs.contenido.focus();\n            }\n            if (!isValidFecha) {\n              window.alert(\"Necesita una fecha válida la nota.\");\n              return this.$refs.fecha.focus();\n            }\n            return this.accept();\n          }\n        },\n        data: {\n          value: {\n            tiene_fecha: LswTimer.utils.formatDatestringFromDate(new Date(), false, false, true),\n            tiene_titulo: \"\",\n            tiene_categorias: \"\",\n            tiene_contenido: \"\",\n            tiene_estado: \"creada\", // \"procesada\"\n          }\n        }\n      }\n    });\n    return response;\n  };\n\n  LswUtils.openAddArticuloDialog = async function () {\n    const response = await Vue.prototype.$lsw.dialogs.open({\n      title: \"Nuevo artículo\",\n      template: `\n        <div class=\"\">\n          <lsw-schema-based-form\n            :model=\"{\n              databaseId:'lsw_default_database',\n              tableId:'Articulo',\n              rowId: -1,\n            }\"\n            :on-submit=\"validate\"\n          />\n        </div>\n      `,\n      factory: {\n        methods: {\n          validate(value) {\n            console.log(\"Validating:\", value);\n            this.value = value;\n            const isValidFecha = LswTimer.parser.parse(this.value.tiene_fecha);\n            const isValidContenido = this.value.tiene_contenido.trim() !== \"\";\n            const isValidTitulo = this.value.tiene_titulo.trim() !== \"\";\n            if (!isValidTitulo) {\n              window.alert(\"Necesita un título la nota.\");\n              return this.$refs.titulo.focus();\n            }\n            if (!isValidContenido) {\n              window.alert(\"Necesita un contenido la nota.\");\n              return this.$refs.contenido.focus();\n            }\n            if (!isValidFecha) {\n              window.alert(\"Necesita una fecha válida la nota.\");\n              return this.$refs.fecha.focus();\n            }\n            return this.accept();\n          }\n        },\n        data: {\n          value: {\n            tiene_fecha: LswTimer.utils.formatDatestringFromDate(new Date(), false, false, true),\n            tiene_titulo: \"\",\n            tiene_categorias: \"\",\n            tiene_contenido: \"\",\n            tiene_estado: \"creada\", // \"procesada\"\n          }\n        }\n      }\n    });\n    return response;\n  };\n\n  LswUtils.createAsyncFunction = function (code, parameters = []) {\n    const AsyncFunction = (async function () { }).constructor;\n    const asyncFunction = new AsyncFunction(...parameters, code);\n    return asyncFunction;\n  };\n\n  LswUtils.createSyncFunction = function (code, parameters = []) {\n    const syncFunction = new Function(...parameters, code);\n    return syncFunction;\n  };\n\n  LswUtils.callSyncFunction = function (code, parameters = {}, scope = globalThis) {\n    const parameterKeys = Object.keys(parameters);\n    const parameterValues = Object.values(parameters);\n    const syncFunction = new Function(...parameterKeys, code);\n    return syncFunction.call(scope, ...parameterValues);\n  };\n\n  LswUtils.arrays = {};\n\n  LswUtils.extractFirstStringOr = function (txt, defaultValue = \"\") {\n    if (!txt.startsWith('\"')) return defaultValue;\n    const pos1 = txt.substr(1).indexOf('\"');\n    if (pos1 === -1) return defaultValue;\n    const pos = pos1 - 1;\n    const extractedSubstr = txt.substr(0, pos);\n    // // @OK: No escapamos, porque se entiende que no se va a usar ese string en el concepto nunca.\n    return JSON.parse(extractedSubstr);\n  };\n\n  LswUtils.uniquizeArray = function (list) {\n    const appeared = [];\n    for (let index = 0; index < list.length; index++) {\n      const item = list[index];\n      const pos = appeared.indexOf(item);\n      if (pos === -1) {\n        appeared.push(item);\n      }\n    }\n    return appeared;\n  };\n\n  LswUtils.arrays.uniquizeArray = LswUtils.uniquizeArray;\n\n  LswUtils.arrays.getMissingInFirst = function (a, b) {\n    const excludeds = [];\n    for (let index = 0; index < b.length; index++) {\n      const b_item = b[index];\n      const pos = a.indexOf(b_item);\n      if (pos === -1) {\n        excludeds.push(b_item);\n      }\n    }\n    return excludeds;\n  };\n\n  LswUtils.fromJsonToNatural = function (json, nivel = 0) {\n    // @CHATGPT:\n    const indent = '  '.repeat(nivel);\n    let texto = '';\n    if (Array.isArray(json)) {\n      texto += `${indent}Esta es una lista con ${json.length} elemento(s):\\n`;\n      json.forEach((item, index) => {\n        texto += `${indent}- Elemento ${index + 1}: `;\n        if (typeof item === 'object' && item !== null) {\n          texto += '\\n' + LswUtils.fromJsonToNatural(item, nivel + 1);\n        } else {\n          texto += `${LswUtils.naturalizeValue(item)}\\n`;\n        }\n      });\n    } else if (typeof json === 'object' && json !== null) {\n      const keys = Object.keys(json);\n      texto += `${indent}Este objeto tiene ${keys.length} propiedad(es):\\n`;\n      for (const key of keys) {\n        const valor = json[key];\n        texto += `${indent}- La propiedad \"${key}\" `;\n        if (typeof valor === 'object' && valor !== null) {\n          texto += `contiene:\\n` + LswUtils.fromJsonToNatural(valor, nivel + 1);\n        } else {\n          texto += `tiene ${LswUtils.naturalizeValue(valor)}.\\n`;\n        }\n      }\n    } else {\n      texto += `${indent}${LswUtils.naturalizeValue(json)}\\n`;\n    }\n    return texto;\n  };\n\n  LswUtils.naturalizeValue = function (valor) {\n    switch (typeof valor) {\n      case 'string':\n        return `un texto que dice \"${valor}\"`;\n      case 'number':\n        return `un número con valor ${valor}`;\n      case 'boolean':\n        return valor ? 'el valor verdadero' : 'el valor falso';\n      case 'object':\n        return valor === null ? 'un valor nulo' : 'un objeto';\n      default:\n        return 'un valor desconocido';\n    }\n  };\n\n  LswUtils.subtextualize = function(text, maxLength = 30) {\n    if(text.length <= maxLength) {\n      return text;\n    }\n    return text.substring(0, maxLength) + \"...\";\n  };\n\n  LswUtils.downloadFile = function (filename, filecontent) {\n    if (typeof window.cordova !== \"undefined\") {\n      LswUtils.debug(`Descargando fichero ${filename} (${filecontent.length}B) en entorno de Cordova app`);\n      const rutaFinal = cordova.file.externalRootDirectory + 'Download/';\n      LswUtils.debug(`Descargando en ruta final: ${rutaFinal}${filename}`);\n      window.resolveLocalFileSystemURL(rutaFinal, function (dir) {\n        dir.getFile(filename, { create: true }, function (file) {\n          file.createWriter(function (fileWriter) {\n            const blob = new Blob([filecontent], { type: \"text/plain\" });\n            fileWriter.write(blob);\n            LswUtils.debug(`Descarga efectuada con éxito en la carpeta convencional de descargas: ${rutaFinal}${filename}`);\n          }, LswUtils.debug);\n        });\n      }, LswUtils.debug);\n    } else {\n      LswUtils.debug(`Descargando fichero ${filename} (${filecontent.length}B) en entorno web`);\n      const blob = new Blob([filecontent], { type: \"text/plain\" });\n      const enlace = document.createElement(\"a\");\n      enlace.href = URL.createObjectURL(blob);\n      enlace.download = filename;\n      document.body.appendChild(enlace);\n      enlace.click();\n      document.body.removeChild(enlace);\n    }\n  };\n\n  LswUtils.extractPropertiesFrom = function (base, props = [], voidedProps = [], overridings = {}) {\n    const out = {};\n    for (let index = 0; index < props.length; index++) {\n      const propId = props[index];\n      if (propId in base) {\n        out[propId] = base[propId];\n      }\n    }\n    for (let index = 0; index < voidedProps.length; index++) {\n      const propId = voidedProps[index];\n      delete out[propId];\n    }\n    return Object.assign(out, overridings);\n  };\n\n  LswUtils.getUniqueItemsFromLists = function (...lists) {\n    const uniqueKeys = [];\n    for (let index = 0; index < lists.length; index++) {\n      const keys = lists[index];\n      for (let indexKey = 0; indexKey < keys.length; indexKey++) {\n        const key = keys[indexKey];\n        if (uniqueKeys.indexOf(key) === -1) {\n          uniqueKeys.push(key);\n        }\n      }\n    }\n    return uniqueKeys;\n  };\n\n  LswUtils.sortListByProperties = function (lista, props) {\n    return lista.sort((a, b) => {\n      for (let prop of props) {\n        let orden = 1;\n\n        if (prop.startsWith(\"!\")) {\n          orden = -1;\n          prop = prop.slice(1);\n        }\n\n        const valA = a[prop];\n        const valB = b[prop];\n\n        if (valA < valB) return -1 * orden;\n        if (valA > valB) return 1 * orden;\n      }\n      return 0;\n    });\n  };\n\n  LswUtils.parseAsJsonOrReturn = function (data, defaultValue = undefined) {\n    try {\n      return JSON.parse(data);\n    } catch (error) {\n      return defaultValue;\n    }\n  };\n\n  LswUtils.dehydrateFunction = function (f) {\n    return f.toString();\n  };\n\n  LswUtils.hydrateFunction = function (fSource) {\n    return new Function(fSource);\n  };\n\n  LswUtils.zeroIfNegative = function (numero) {\n    if (numero < 0) {\n      return 0;\n    }\n    return numero;\n  };\n\n  LswUtils.filterObject = function (obj, filterer) {\n    return Object.keys(obj).reduce((output, key, index) => {\n      const val = obj[key];\n      console.log(key, val, index, output);\n      const result = filterer(key, val, index, output);\n      if (result) {\n        output[key] = val;\n      }\n      return output;\n    }, {});\n  };\n\n  LswUtils.mapObject = function (obj, mapper, deleterValue = undefined) {\n    return Object.keys(obj).reduce((output, key, index) => {\n      const val = obj[key];\n      const result = mapper(key, val, index, output);\n      if (result !== deleterValue) {\n        output[key] = result;\n      }\n      return output;\n    }, {});\n  };\n\n  LswUtils.reduceObject = function (obj, reducer) {\n    return Object.keys(obj).reduce((output, key, index) => {\n      const val = obj[key];\n      return reducer(key, val, index, output);\n    }, {});\n  };\n\n  LswUtils.askForFileText = async function () {\n    return new Promise((resolve, reject) => {\n      const inputHtml = document.createElement(\"input\");\n      inputHtml.type = \"file\";\n      inputHtml.style.display = \"none\";\n      inputHtml.onchange = function () {\n        const file = event.target.files[0];\n        if (file) {\n          resolve(file);\n        } else {\n          reject(new Error(\"No file selected finally\"));\n        }\n        document.body.removeChild(inputHtml);\n      };\n      document.body.appendChild(inputHtml);\n      inputHtml.click();\n    }).then(file => {\n      return new Promise((resolve, reject) => {\n        const lector = new FileReader();\n        lector.onload = () => {\n          resolve(lector.result);\n        };\n        lector.readAsText(file);\n      });\n    });\n  };\n\n  LswUtils.padStart = function (txt, ...args) {\n    return (\"\" + txt).padStart(...args);\n  };\n\n  LswUtils.flattenObjects = function (list, options = {}) {\n    const {\n      keyMapper = false, // can be function or false\n      valueMapper = false, // can be function or false\n      duplicatedsStrategy = 'override', // can be \"override\" | \"error\"\n      nonFlattenablesStrategy = 'ignore', // can be \"ignore\" | \"error\"\n    } = options;\n    const output = {};\n    let totalKeys = 0;\n    for (let index = 0; index < list.length; index++) {\n      const item = list[index];\n      const isFlattenable = (typeof item === \"object\") && (item !== null);\n      if (isFlattenable) {\n        const allKeys = Object.keys(item);\n        for (let indexKey = 0; indexKey < allKeys.length; indexKey++) {\n          const key = allKeys[indexKey];\n          const isDuplicated = key in output;\n          if ((!isDuplicated) || (duplicatedsStrategy === 'override')) {\n            const finalKey = typeof keyMapper === 'function' ? keyMapper(key, totalKeys, indexKey, item, index, list) : key;\n            const finalValue = typeof valueMapper === 'function' ? valueMapper(item[key], totalKeys, indexKey, item, index, list) : item[key];\n            totalKeys++;\n            output[finalKey] = finalValue;\n          } else if (duplicatedsStrategy === 'error') {\n            throw new Error(`Required item on index «${index}» key «${key}» to not be duplicated on «LswUtils.flattenObjects»`);\n          } else {\n            throw new Error(`Unknown strategy for duplicateds «${duplicatedsStrategy}» on «LswUtils.flattenObjects»`);\n          }\n        }\n      } else if (nonFlattenablesStrategy === 'ignore') {\n        // @OK.\n      } else if (nonFlattenablesStrategy === 'error') {\n        throw new Error(`Required item on index «${index}=${typeof item}» to be flattenable on «LswUtils.flattenObjects»`);\n      } else {\n        throw new Error(`Unknown strategy for non-flattenables «${nonFlattenablesStrategy}» on «LswUtils.flattenObjects»`);\n      }\n    }\n    return output;\n  };\n\n  LswUtils.splitByUnicode = function (texto) {\n    const segmenter = new Intl.Segmenter('es', { granularity: 'grapheme' });\n    return Array.from(segmenter.segment(texto), s => s.segment);\n  };\n\n  LswUtils.copyToClipboard = function (texto) {\n    window.navigator.clipboard.writeText(texto);\n  };\n\n  LswUtils.debug = (...args) => LswDebugger.global.debug(...args);\n\n  Global_injection: {\n    window.kk = (...args) => Object.keys(...args);\n    window.dd = (...args) => LswDebugger.global.debug(...args);\n    window.ddd = (...args) => LswDebugger.global.debug(...args);\n  }\n\n",
      "$code.label": "LswUtils",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-utils/lsw-utils.js",
      "$location": {
        "start": {
          "offset": 16001,
          "line": 439,
          "column": 7
        },
        "end": {
          "offset": 16096,
          "line": 440,
          "column": 1
        }
      },
      "OK": "No escapamos, porque se entiende que no se va a usar ese string en el concepto nunca.",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-apps-viewer-button/lsw-apps-viewer-button.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 176,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswAppsViewerButton API » LswAppsViewerButton component",
      "$code": "Vue.component(\"LswAppsViewerButton\", {\n  template: $template,\n  props: {\n    viewer: {\n      type: Object,\n      required: true,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-apps-viewer-button.data\");\n    return {\n      isOpened: false,\n    };\n  },\n  methods: {\n    toggleOpen() {\n      this.$trace(\"lsw-apps-viewer-button.methods.toggleOpen\");\n      this.isOpened = !this.isOpened;\n    },\n    open() {\n      this.$trace(\"lsw-apps-viewer-button.methods.open\");\n      this.isOpened = true;\n    },\n    close() {\n      this.$trace(\"lsw-apps-viewer-button.methods.close\");\n      this.isOpened = false;\n    },\n    selectApplication(application) {\n      this.$trace(\"lsw-apps-viewer-button.methods.selectApplication\");\n      // console.log(this.viewer);\n      const isSame = this.viewer.selectedApplication === application;\n      if(!isSame) {\n        this.viewer.selectApplication(application);\n      } else {\n        // @NOTHING.\n      }\n      this.close();\n    },\n    openHomepage() {\n      this.selectApplication(\"homepage\");\n    },\n    openEventTracker() {\n      this.selectApplication(\"event-tracker\");\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-apps-viewer-button.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  },\n});\n",
      "$code.label": "LswAppsViewerButton API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-apps-viewer-panel/lsw-apps-viewer-panel.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 168,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswAppsViewer API » LswAppsViewerPanel component",
      "$code": "Vue.component(\"LswAppsViewerPanel\", {\n  template: $template,\n  props: {\n\n  },\n  data() {\n    this.$trace(\"lsw-apps-viewer-panel.data\");\n    return {\n      isOpened: false,\n      selectedApplication: 'despues', // 'antes', 'despues'\n      accionesAntes: false,\n      accionesDespues: false,\n      horaActual: LswTimer.utils.fromDateToHour(new Date()),\n    };\n  },\n  methods: {\n    selectApplication(section) {\n      this.$trace(\"lsw-apps-viewer-panel.methods.selectApplication\");\n      this.isOpened = false;\n      this.selectedApplication = undefined;\n      try {\n        Gestiona_casos_excepcionales: {\n          if(section === \"js consola\") {\n            // Activamos eruda en lugar de cambiar de pestaña:\n            return LswConsoleHooker.toggleConsole();\n          }\n        }\n        this.$lsw.dialogs.minimizeAll();\n        this.selectedApplication = section;\n        Cargas_segun_aplicacion: {\n          if ([\"antes\", \"despues\"].indexOf(section) !== -1) {\n            this.loadAcciones();\n          } else {\n            this.$forceUpdate(true);\n          }\n        }\n      } catch (error) {\n        console.error(error);\n        this.$lsw.toasts.showError(error);\n      } finally {\n        this.$nextTick(() => {\n          this.isOpened = true;\n        });\n      }\n    },\n    getSimboloEstadoAccion(estado) {\n      return (estado === \"completada\") ? \"💚\" :\n        (estado === \"pendiente\") ? \"❓\" :\n          (estado === \"fallida\") ? \"🔥\" : \"\";\n    },\n    async loadAcciones() {\n      this.$trace(\"lsw-apps-viewer-panel.methods.loadAcciones\");\n      const output = await this.$lsw.database.selectMany(\"Accion\");\n      const estaHora = (() => {\n        const d = new Date();\n        d.setMinutes(0);\n        return d;\n      })();\n      const accionesAntes = [];\n      const accionesDespues = [];\n      output.forEach(accion => {\n        try {\n          const dateAccion = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n          const areSameDay = LswTimer.utils.areSameDayDates(dateAccion, estaHora);\n          if (!areSameDay) return;\n          if (dateAccion >= estaHora) {\n            accionesDespues.push(accion);\n          } else {\n            accionesAntes.push(accion);\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      });\n      this.accionesAntes = accionesAntes.sort(this.getSorterOfAccionesAntes());\n      this.accionesDespues = accionesDespues.sort(this.getSorterOfAccionesDespues());\n      this.$forceUpdate(true);\n    },\n    getSorterOfAccionesAntes() {\n      this.$trace(\"lsw-apps-viewer-panel.methods.getSorterOfAccionesAntes\");\n      return function (accion1, accion2) {\n        let inicio1, inicio2;\n        try {\n          inicio1 = LswTimer.utils.fromDatestringToDate(accion1.tiene_inicio);\n        } catch (error) {\n          return 1;\n        }\n        try {\n          inicio2 = LswTimer.utils.fromDatestringToDate(accion2.tiene_inicio);\n        } catch (error) {\n          return -1;\n        }\n        const firstIsLower = inicio1 < inicio2;\n        return firstIsLower ? 1 : -1;\n      };\n    },\n    getSorterOfAccionesDespues() {\n      this.$trace(\"lsw-apps-viewer-panel.methods.getSorterOfAccionesDespues\");\n      return function (accion1, accion2) {\n        let inicio1, inicio2;\n        try {\n          inicio1 = LswTimer.utils.fromDatestringToDate(accion1.tiene_inicio);\n        } catch (error) {\n          return 1;\n        }\n        try {\n          inicio2 = LswTimer.utils.fromDatestringToDate(accion2.tiene_inicio);\n        } catch (error) {\n          return -1;\n        }\n        const firstIsLower = inicio1 <= inicio2;\n        return firstIsLower ? -1 : 1;\n      };\n    },\n    async alternarEstado(accion) {\n      this.$trace(\"lsw-apps-viewer-panel.methods.alternarEstado\");\n      const nextEstado = accion.tiene_estado === \"pendiente\" ? \"completada\" :\n        accion.tiene_estado === \"completada\" ? \"fallida\" : \"pendiente\";\n      await this.$lsw.database.update(\"Accion\", accion.id, {\n        ...accion,\n        tiene_estado: nextEstado\n      });\n      await this.loadAcciones();\n    },\n    async reloadPanel() {\n      this.$trace(\"lsw-apps-viewer-panel.methods.reloadPanel\");\n      await this.loadAcciones();\n    },\n    async openNotaUploader() {\n      this.$trace(\"lsw-apps-viewer-panel.methods.openNotaUploader\", arguments);\n      const response = await LswUtils.openAddNoteDialog();\n      if (typeof response !== \"object\") {\n        return;\n      }\n      await this.$lsw.database.insert(\"Nota\", response);\n    },\n    openWikiExplorer() {\n      this.$trace(\"lsw-windows-main-tab.methods.openWikiExplorer\", arguments);\n      this.$dialogs.open({\n        id: \"wiki-explorer-\" + LswRandomizer.getRandomString(5),\n        title: \"Wiki explorer\",\n        template: `<div class=\"pad_2\"><lsw-wiki /></div>`,\n      });\n    },\n    async openArticuloUploader() {\n      this.$trace(\"lsw-windows-main-tab.methods.openArticuloUploader\", arguments);\n      const response = await LswUtils.openAddArticuloDialog();\n      if (typeof response !== \"object\") {\n        return;\n      }\n      await this.$lsw.database.insert(\"Articulo\", response);\n    },\n    updateHoraActual() {\n      this.$trace(\"lsw-windows-main-tab.methods.updateHoraActual\", arguments);\n      this.horaActual = LswTimer.utils.fromDateToHour(new Date());\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-apps-viewer-panel.mounted\");\n      await this.loadAcciones();\n    } catch (error) {\n      console.log(error);\n    }\n  },\n});\n",
      "$code.label": "LswAppsViewerPanel API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-automensajes-viewer/lsw-automensajes-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 182,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswAutomensajesViewer API » LswAutomensajesViewer component",
      "$code": "Vue.component(\"LswAutomensajesViewer\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-automensajes-viewer.data\");\n    return {\n      isMounted: false,\n      automensajes: [],\n      selectedAutomensaje: undefined,\n      selectedFontsize: 12,\n      automessagingId: undefined,\n      automessagingSeconds: 0,\n      simboloActual: \"🕓\", // \"✴️\", // \"♠️\",\n      // simboloActual: LswRandomizer.getRandomItem(\"🌅🌄🌠🎇🎆🌇🌆🏙🌃🌌🌉🌁\".split(\"\")),\n      \n      // simboloActual: LswRandomizer.getRandomItem(\"🐶🐱🐵🐗🐴🐌🐜🌋🏭🏢🏬🏣🚀🛸🚁🎲🎯🎳✴️🗽🗼🛟🎱🐞🌝🌛🌜🌚🌕🌖🌗🌘🌑🌒🌓🌔🌙🌎🌍🌏🪐💫⭐️🌟✨⚡️☄️💥🔥🌪🌈🐉🐲🐦‍🔥🌵🎄🌲🌳🌴🪹🪺🪵🌱🌿🍀🍁🍄🍄‍🟫🌾💐🌷🪷🌹🥀🌺🎪🤹🤹‍♂️🤹‍♀️🎭🎨🎼🎹🥁🪘🪇🎷🎺🪗🎸🪕🎻🪈♟🎰🧩🚗🚕🚙🎬🎤🎧💧💦🫧☔️☂️🌊🍏🍎🍐🍊🍋🍋‍🟩🍌🍉🍇🍓🫐🍈🍒🍑🥭🍍🥥🥝🍅🍆🥑🥦🫛\".split(\"\")),\n    };\n  },\n  methods: {\n    procedureForPicas() {\n      this.$trace(\"LswAutomensajesViewer.methods.procedureForPicas\", []);\n      this.$lsw.dialogs.minimizeAll();\n      this.selectApplication(\"homepage\");\n    },\n    async loadAutomensajes() {\n      this.$trace(\"LswAutomensajesViewer.methods.loadAutomensajes\", []);\n      const automensajes = await this.$lsw.fs.evaluateAsDotenvFileOrReturn(\"/kernel/settings/automessages.env\", {});\n      this.automensajes = Object.keys(automensajes);\n    },\n    async sendAutomessage() {\n      this.$trace(\"LswAutomensajesViewer.methods.sendAutomessage\", []);\n      const availableAutomensajes = this.automensajes.filter(a => {\n        if(typeof this.selectedAutomensaje !== \"string\") return true;\n        return a !== this.selectedAutomensaje;\n      });\n      const nextAutomensaje = LswRandomizer.getRandomItem(availableAutomensajes);\n      const nextFontsize = this.calculateFontsize(nextAutomensaje);\n      this.selectedFontsize = nextFontsize;\n      this.selectedAutomensaje = nextAutomensaje;\n    },\n    calculateFontsize(text) {\n      this.$trace(\"LswAutomensajesViewer.methods.calculateFontsize\", []);\n      const textLength = text.length;\n      if(textLength < 10) {\n        return 18;\n      } else if(textLength < 20) {\n        return 16;\n      } else if(textLength < 30) {\n        return 14;\n      } else {\n        return 12;\n      }\n    },\n    async startAutomessaging() {\n      this.$trace(\"LswAutomensajesViewer.methods.startAutomessaging\", []);\n      await this.loadAutomensajes();\n      await this.sendAutomessage();\n      await this.continueAutomessaging();\n    },\n    async continueAutomessaging() {\n      this.$trace(\"LswAutomensajesViewer.methods.continueAutomessaging\", []);\n      clearTimeout(this.automessagingId);\n      this.automessagingSeconds = LswRandomizer.getRandomIntegerBetween(60,120);\n      this.automessagingId = setTimeout(() => this.sendAutomessage(), this.automessagingSeconds * 1000);\n    },\n    stopAutomessaging() {\n      this.$trace(\"LswAutomensajesViewer.methods.stopAutomessaging\");\n      clearTimeout(this.automessagingId);\n    },\n    async refreshAutomessaging() {\n      this.$trace(\"LswAutomensajesViewer.methods.refreshAutomessaging\", []);\n      this.stopAutomessaging();\n      this.startAutomessaging();\n      this.$window.changeBackgroundImage();\n    },\n    goToDesktop() {\n      this.$trace(\"LswAutomensajesViewer.methods.goToDesktop\", []);\n      this.$lsw.windows.hide();\n      this.$refs.appPanel.selectApplication(\"none\");\n    },\n    selectApplication(application) {\n      this.$trace(\"LswAutomensajesViewer.methods.selectApplication\", []);\n      this.$refs.appPanel.selectApplication(application);\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-automensajes-viewer.mounted\");\n      this.$window.$automensajesUi = this;\n      // this.startAutomessaging();\n      this.isMounted = true;\n      this.refreshAutomessaging();\n    } catch(error) {\n      console.log(error);\n    }\n  },\n  unmount() {\n    this.$trace(\"lsw-automensajes-viewer.unmount\");\n    this.stopAutomessaging();\n  }\n});\n",
      "$code.label": "LswAutomensajesViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-bars-graph/lsw-bars-graph.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 94,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswBarsGraph component",
      "$code": "Vue.component(\"LswBarsGraph\", {\n  template: $template,\n  props: {\n    sample: {\n      type: Object,\n      required: true,\n    },\n    keys: {\n      type: Array,\n      required: true,\n    },\n    negativeKeys: {\n      type: Array,\n      default: () => [],\n    },\n    propId: {\n      type: String,\n      default: () => false,\n    },\n    propOptions: {\n      type: String,\n      default: () => \"$options\",\n    },\n  },\n  data() {\n    this.$trace(\"lsw-bars-graph.data\");\n    const currentSample = LswBarsGraph.toSample(this.sample, this.propId, this.keys, this.propOptions);\n    return {\n      currentPropertyView: undefined,\n      currentSample,\n    };\n  },\n  methods: {\n    selectPropertyView(propIndex) {\n      this.$trace(\"lsw-bars-graph.methods.selectPropertyView\");\n      const isSame = this.currentPropertyView === propIndex;\n      this.currentPropertyView = isSame ? undefined : propIndex;\n    },\n    selectPropertyViewByName(propId) {\n      this.$trace(\"lsw-bars-graph.methods.selectPropertyView\");\n      const propIndex = this.keys.indexOf(propId);\n      if(propIndex === -1) return;\n      const isSame = this.currentPropertyView === propIndex;\n      this.currentPropertyView = isSame ? undefined : propIndex;\n    },\n    getColor(propId, value) {\n      this.$trace(\"lsw-bars-graph.methods.getColor\");\n      const polaridad = this.negativeKeys.indexOf(propId) === -1;\n      if(polaridad) {\n        if (value <= 20) {\n          return \"red\" ;\n        } else if (value <= 40) {\n          return \"violet\" ;\n        } else if (value <= 60) {\n          return \"white\";\n        } else if (value <= 80) {\n          return \"yellow\" ;\n        } else {\n          return \"lime\" ;\n        }\n      } else {\n        if (value <= 20) {\n          return \"lime\" ;\n        } else if (value <= 40) {\n          return \"yellow\" ;\n        } else if (value <= 60) {\n          return \"white\" ;\n        } else if (value <= 80) {\n          return \"violet\";\n        } else {\n          return \"red\" ;\n        }\n      }\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-bars-graph.mounted\");\n\n  },\n  unmount() {\n    this.$trace(\"lsw-bars-graph.unmounted\");\n  }\n});\n",
      "$code.label": "LswBarsGraph API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-bin-directory/lsw-bin-directory.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 100,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswBinDirectory component",
      "$code": "Vue.component(\"LswBinDirectory\", {\n  template: $template,\n  props: {\n    directory: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-bin-directory.data\");\n    return {\n      hasError: false,\n      isLoaded: false,\n      isAboutSearching: false,\n      searchText: \"\",\n      binaries: [],\n      binariesInSelection: [],\n      delayedTimeout: 0.7 * 1000,\n      delayedTimeoutId: undefined,\n    };\n  },\n  methods: {\n    async loadBinaries() {\n      this.$trace(\"lsw-bin-directory.methods.loadBinaries\");\n      try {\n        this.isLoaded = false;\n        const allBinaries = await this.$lsw.fs.$selectMany(it => {\n          return it.type === \"file\" && it.filepath.startsWith(\"/kernel/bin\") && it.filepath.endsWith(\".js\");\n        });\n        this.binaries = allBinaries;\n        await this.digestOutput();\n      } catch (error) {\n        this.$lsw.toasts.send({\n          title: \"No pudieron cargarse los binarios\",\n          text: 'Hubo un error al cargar los binarios'\n        });\n        console.error(`[!] Could not load bin-directory «${this.directory}» because:`, error);\n        this.hasError = error;\n      } finally {\n        this.isLoaded = true;\n      }\n    },\n    digestOutput() {\n      this.$trace(\"lsw-bin-directory.methods.digestOutput\");\n      return new Promise((resolve, reject) => {\n        let output = [];\n        try {\n          this.isAboutSearching = true;\n          Apply_search: {\n            if (this.searchText.trim() === \"\") {\n              output = this.binaries;\n              break Apply_search;\n            }\n            const loweredSearchText = this.searchText.toLowerCase();\n            for (let index = 0; index < this.binaries.length; index++) {\n              const binarie = this.binaries[index];\n              const hasMatch = binarie.filepath.toLowerCase().indexOf(loweredSearchText) !== -1;\n              if (hasMatch) {\n                output.push(binarie);\n              }\n            }\n          }\n          return resolve(output);\n        } catch (error) {\n          return reject(error);\n        } finally {\n          Export_results: {\n            this.isAboutSearching = false;\n            this.binariesInSelection = output;\n          }\n        }\n      });\n    },\n    digestDelayed() {\n      this.$trace(\"lsw-bin-directory.methods.digestDelayed\");\n      clearTimeout(this.delayedTimeoutId);\n      this.isAboutSearching = true;\n      this.delayedTimeoutId = setTimeout(this.digestOutput, this.delayedTimeout);\n    },\n    async executeBin(binarie) {\n      this.$trace(\"lsw-bin-directory.methods.executeBin\");\n      const asyncBin = LswUtils.createAsyncFunction(binarie.content);\n      try {\n        const output = await asyncBin.call(this);\n        Aqui_se_hookearia_pero_creo_que_no: {\n          console.log(output);\n        }\n        return output;\n      } catch (error) {\n        this.$lsw.toasts.sendError(error);\n      }\n    },\n    editBin(binarie) {\n      this.$trace(\"lsw-bin-directory.methods.editBin\");\n      this.$lsw.dialogs.open({\n        title: \"Editando binario\",\n        template: `<lsw-filesystem-explorer :opened-by=\"binarie.filepath\" :absolute-layout=\"true\" />`,\n        factory: { data: { binarie } },\n      });\n    },\n    openBinarios() {\n      this.$trace(\"lsw-bin-directory.methods.openBinarios\");\n      this.$lsw.dialogs.open({\n        title: \"Explorando binarios\",\n        template: `<lsw-filesystem-explorer opened-by=\"/kernel/bin\" :absolute-layout=\"true\" />`\n      });\n    },\n    formatFilepathForUser(txt) {\n      return txt.replace(this.directory, \"\").replace(/^\\//g, \"\").replace(/\\.js$/g, \"\");\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-bin-directory.mounted\");\n    this.loadBinaries();\n  },\n  unmount() {\n    this.$trace(\"lsw-bin-directory.unmounted\");\n    // @OK\n  }\n});\n",
      "$code.label": "LswBinDirectory API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-book-factory/lsw-book-factory.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 113,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Wiki API » LswBookFactory component",
      "$code": "Vue.component(\"LswBookFactory\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-book-factory.data\");\n    return {\n      titles: [],\n    };\n  },\n  methods: {\n    async loadTitles() {\n      this.$trace(\"lsw-book-factory.methods.loadTitles\");\n      const librosMap = await this.$lsw.fs.read_directory(\"/kernel/wiki/libros\");\n      this.titles = Object.keys(librosMap);\n      // await LswLazyLoads.loadEjs();\n    },\n    openLibrosDirectory() {\n      this.$trace(\"lsw-book-factory.methods.openLibrosDirectory\");\n      this.$lsw.dialogs.open({\n        title: \"Directorio de libros\",\n        template: `<lsw-filesystem-explorer opened-by=\"/kernel/wiki/libros\" />`,\n      });\n    },\n    editLibro(title) {\n      this.$trace(\"lsw-book-factory.methods.editLibro\");\n      this.$lsw.dialogs.open({\n        title: \"Editar libro\",\n        template: `<lsw-filesystem-explorer :opened-by=\"'/kernel/wiki/libros/' + title\" />`,\n        factory: {\n          data: {\n            title,\n          }\n        }\n      });\n    },\n    async openLibro(title) {\n      this.$trace(\"lsw-book-factory.methods.openLibro\");\n      const originalSource = await this.$lsw.fs.read_file(`/kernel/wiki/libros/${title}`);\n      const source = originalSource;\n      this.$lsw.dialogs.open({\n        title: \"Leer libro\",\n        template: `\n          <div class=\"pad_1\">\n            <lsw-markdown-viewer :source=\"source\" :activate-ejs=\"true\" />\n          </div>\n        `,\n        factory: {\n          data: {\n            source,\n          }\n        }\n      });\n    },\n  },\n  async mounted() {\n    this.$trace(\"lsw-book-factory.mounted\");\n    await this.loadTitles();\n  },\n  unmount() {\n    this.$trace(\"lsw-book-factory.unmount\");\n  }\n});\n",
      "$code.label": "LswBookFactory API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-book-library/lsw-book-library.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 113,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Wiki API » LswBookLibrary component",
      "$code": "Vue.component(\"LswBookLibrary\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-book-library.data\");\n    return {};\n  },\n  methods: {},\n  mounted() {\n    this.$trace(\"lsw-book-library.mounted\");\n  },\n  unmount() {\n    this.$trace(\"lsw-book-library.unmount\");\n  }\n});\n",
      "$code.label": "LswBookLibrary API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-calendario/lsw-calendario.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 116,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswCalendario API » LswCalendario component",
      "$code": "Vue.component(\"LswCalendario\", {\n  template: $template,\n  props: {\n    modo: {\n      type: String,\n      default: () => \"datetime\" // can be: date, time, datetime\n    },\n    valorInicial: {\n      type: [String, Date],\n      default: () => new Date()\n    },\n    alCambiarValor: {\n      type: Function,\n      default: () => { }\n    },\n    alIniciar: {\n      type: Function,\n      default: () => { }\n    },\n    accionesViewer: {\n      type: [Object, Boolean],\n      default: () => false\n    }\n  },\n  data() {\n    try {\n      this.$trace(\"lsw-calendario.data\");\n      const hoy = new Date();\n      const rightButtons = [];\n      if(this.accionesViewer) {\n        rightButtons.push({\n          text: \"➕🐾\",\n          event: this.openNewTaskDialog\n        });\n      }\n      if(this.accionesViewer) {\n        rightButtons.push({\n          text: \"🎲\",\n          event: this.openDayRandomizer\n        });\n      }\n      rightButtons.push({\n        text: \"🔎\",\n        event: this.openTimeLocator\n      });\n      return {\n        es_carga_inicial: true,\n        valor_inicial_adaptado: this.adaptar_valor_inicial(this.valorInicial),\n        es_solo_fecha: this.modo === \"date\",\n        es_solo_hora: this.modo === \"time\",\n        es_fecha_y_hora: this.modo === \"datetime\",\n        fecha_seleccionada: undefined,\n        celdas_del_mes_actual: undefined,\n        marcadores_del_mes: {},\n        hoy: hoy,\n        hora_actual: hoy.getHours(),\n        minuto_actual: hoy.getMinutes(),\n        dia_actual: hoy.getDate(),\n        mes_actual: hoy.getMonth(),\n        anio_actual: hoy.getFullYear(),\n        rightButtons,\n      };\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  },\n  methods: {\n    getValue() {\n      this.$trace(\"lsw-calendario.methods.getValue\");\n      return this.fecha_seleccionada;\n    },\n    async openNewTaskDialog() {\n      this.$trace(\"lsw-calendario.methods.openNewTaskDialog\");\n      if (this.accionesViewer) {\n        this.accionesViewer.openNewRowDialog();\n      }\n    },\n    async openDayRandomizer() {\n      this.$trace(\"lsw-calendario.methods.openDayRandomizer\");\n      if (this.accionesViewer) {\n        this.accionesViewer.randomizeDay();\n      }\n    },\n    async openTimeLocator() {\n      const localizacion = await this.$lsw.dialogs.open({\n        title: \"Localizador del calendario\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"pad_bottom_1\">Señala el día al que ir con formato «año/mes/día»:</div>\n            <div class=\"flex_row centered pad_bottom_1\">\n              <div class=\"flex_100\">\n                <input class=\"supermini width_100\" type=\"number\" v-model=\"value.year\" />\n              </div>\n              <div class=\"flex_1 pad_horizontal_1\">/</div>\n              <div class=\"flex_100\">\n                <input class=\"supermini width_100\" type=\"number\" v-model=\"value.month\" />\n              </div>\n              <div class=\"flex_1 pad_horizontal_1\">/</div>\n              <div class=\"flex_100\">\n                <input class=\"supermini width_100\" type=\"number\" v-model=\"value.day\" />\n              </div>\n            </div>\n            <div class=\"pad_bottom_1\">\n              <pre class=\"small_font\">{{ currentDateFormatted }}</pre>\n            </div>\n            <hr />\n            <div class=\"flex_row centered pad_bottom_1\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Ir a este día</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            value: {\n              year: this.fecha_seleccionada.getFullYear(),\n              month: this.fecha_seleccionada.getMonth(),\n              day: this.fecha_seleccionada.getDate(),\n            }\n          },\n          computed: {\n            currentDateFormatted() {\n              try {\n                const tempDate = new Date(`${this.value.year}/${this.value.month}/${this.value.day}`);\n                const result = tempDate.toDateString();\n                if (result === \"Invalid Date\") {\n                  throw new Error(\"La fecha formateada no es válida\");\n                }\n                return LswTimer.utils.formatDateToSpanish(tempDate);\n              } catch (error) {\n                return null;\n              }\n            }\n          }\n        }\n      });\n      if (typeof localizacion !== \"object\") {\n        return;\n      }\n      this.fecha_seleccionada = new Date(`${localizacion.year}/${localizacion.month}/${localizacion.day}`);\n    },\n    adaptar_valor_inicial(valor) {\n      this.$trace(\"lsw-calendario.methods.adaptar_valor_inicial\");\n      if (typeof valor === \"string\") {\n        try {\n          const resultado = LswTimer.utils.getDateFromMomentoText(valor);\n          console.log(\"FECHA ENTRADA:\", resultado);\n          return resultado;\n        } catch (error) {\n          console.error(\"Error parseando valor inicial de lsw-calendario:\", error);\n        }\n      }\n      return valor || new Date();\n    },\n    agregar_digito_de_hora(indice) {\n      this.$trace(\"lsw-calendario.methods.agregar_digito_de_hora\");\n      const value = this.obtener_digito_de_hora(indice);\n      const isInMaximum = ([3, 5].indexOf(indice) !== -1) ? value === 5 : ([1].indexOf(indice) !== -1) ? value === 2 : value === 9;\n      if (!isInMaximum) {\n        this.establecer_digito_de_hora(indice, value + 1);\n      }\n    },\n    quitar_digito_de_hora(indice) {\n      this.$trace(\"lsw-calendario.methods.quitar_digito_de_hora\");\n      const value = this.obtener_digito_de_hora(indice);\n      const isInMinimum = value === 0;\n      if (!isInMinimum) {\n        this.establecer_digito_de_hora(indice, value - 1);\n      }\n    },\n    obtener_digito_de_hora(indice, fecha = this.fecha_seleccionada) {\n      this.$trace(\"lsw-calendario.methods.obtener_digito_de_hora\");\n      if (indice === 1) {\n        return parseInt(this.espaciar_izquierda(fecha.getHours(), 2)[0]);\n      } else if (indice === 2) {\n        return parseInt(this.espaciar_izquierda(fecha.getHours(), 2)[1]);\n      } else if (indice === 3) {\n        return parseInt(this.espaciar_izquierda(fecha.getMinutes(), 2)[0]);\n      } else if (indice === 4) {\n        return parseInt(this.espaciar_izquierda(fecha.getMinutes(), 2)[1]);\n      } else if (indice === 5) {\n        return parseInt(this.espaciar_izquierda(fecha.getSeconds(), 2)[0]);\n      } else if (indice === 6) {\n        return parseInt(this.espaciar_izquierda(fecha.getSeconds(), 2)[1]);\n      } else {\n        throw new Error(\"No se reconoció el índice del dígito: \" + indice);\n      }\n    },\n    cambiar_posicion_en_texto(texto, posicion, valor) {\n      this.$trace(\"lsw-calendario.methods.cambiar_posicion_en_texto\");\n      const arr = (\"\" + texto).split(\"\");\n      arr[posicion] = valor;\n      return arr.join(\"\");\n    },\n    establecer_digito_de_hora(indice, valor) {\n      this.$trace(\"lsw-calendario.methods.establecer_digito_de_hora\");\n      console.log(indice, valor);\n      const fecha_clonada = new Date(this.fecha_seleccionada);\n      if (indice === 1) {\n        let horas = this.espaciar_izquierda(this.fecha_seleccionada.getHours(), 2);\n        horas = this.cambiar_posicion_en_texto(horas, 0, valor);\n        const horasInt = parseInt(horas);\n        if (horasInt > 23) return;\n        fecha_clonada.setHours(horasInt);\n      } else if (indice === 2) {\n        let horas = this.espaciar_izquierda(this.fecha_seleccionada.getHours(), 2);\n        horas = this.cambiar_posicion_en_texto(horas, 1, valor);\n        const horasInt = parseInt(horas);\n        if (horasInt > 23) return;\n        fecha_clonada.setHours(horasInt);\n      } else if (indice === 3) {\n        let minutos = this.espaciar_izquierda(this.fecha_seleccionada.getMinutes(), 2);\n        minutos = this.cambiar_posicion_en_texto(minutos, 0, valor);\n        const minutosInt = parseInt(minutos);\n        if (minutosInt > 59) return;\n        fecha_clonada.setMinutes(minutosInt);\n      } else if (indice === 4) {\n        let minutos = this.espaciar_izquierda(this.fecha_seleccionada.getMinutes(), 2);\n        minutos = this.cambiar_posicion_en_texto(minutos, 1, valor);\n        const minutosInt = parseInt(minutos);\n        if (minutosInt > 59) return;\n        fecha_clonada.setMinutes(minutosInt);\n      } else if (indice === 5) {\n        // @OK\n      } else if (indice === 6) {\n        // @OK\n      } else {\n        throw new Error(\"No se reconoció el índice del dígito: \" + indice);\n      }\n      console.log(fecha_clonada);\n      this.fecha_seleccionada = fecha_clonada;\n      this.actualizar_fecha_seleccionada(true);\n    },\n    ir_a_mes_anterior() {\n      this.$trace(\"lsw-calendario.methods.ir_a_mes_anterior\");\n      try {\n        const nueva_fecha = new Date(this.fecha_seleccionada);\n        this.fecha_seleccionada = new Date(nueva_fecha.getFullYear(), nueva_fecha.getMonth() - 1, 1);\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n\n    },\n    ir_a_mes_siguiente() {\n      this.$trace(\"lsw-calendario.methods.ir_a_mes_siguiente\");\n      try {\n        const nueva_fecha = new Date(this.fecha_seleccionada);\n        this.fecha_seleccionada = new Date(nueva_fecha.getFullYear(), nueva_fecha.getMonth() + 1, 1);\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n\n    },\n    seleccionar_dia(dia) {\n      this.$trace(\"lsw-calendario.methods.seleccionar_dia\");\n      try {\n        this.fecha_seleccionada = dia;\n        this.actualizar_fecha_seleccionada(true);\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n\n    },\n    espaciar_izquierda(texto,\n      longitud,\n      relleno = \"0\") {\n      this.$trace(\"lsw-calendario.methods.espaciar_izquierda\");\n      try {\n        let salida = \"\" + texto;\n        while (salida.length < longitud) {\n          salida = relleno + salida;\n        }\n        return salida;\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n\n    },\n    obtener_fecha_formateada(fecha) {\n      this.$trace(\"lsw-calendario.methods.obtener_fecha_formateada\");\n      try {\n        if (!(fecha instanceof Date)) {\n          console.log(fecha);\n          throw new Error(\"Required parameter «fecha» to be a Date on «LswCalendario.methods.obtener_fecha_formateada»\");\n        }\n        let formato = \"\";\n        formato += (() => {\n          try {\n            if (fecha.getDay() === 0) {\n              return \"Domingo\";\n            }\n            if (fecha.getDay() === 1) {\n              return \"Lunes\";\n            }\n            if (fecha.getDay() === 2) {\n              return \"Martes\";\n            }\n            if (fecha.getDay() === 3) {\n              return \"Miércoles\";\n            }\n            if (fecha.getDay() === 4) {\n              return \"Jueves\";\n            }\n            if (fecha.getDay() === 5) {\n              return \"Viernes\";\n            }\n            if (fecha.getDay() === 6) {\n              return \"Sábado\";\n            }\n          } catch (error) {\n            console.log(error);\n            throw error;\n          }\n        })();\n        formato += \", \";\n        formato += fecha.getDate();\n        formato += \" de \";\n        formato += (() => {\n          try {\n            if (fecha.getMonth() === 0) {\n              return \"Enero\";\n            }\n            if (fecha.getMonth() === 1) {\n              return \"Febrero\";\n            }\n            if (fecha.getMonth() === 2) {\n              return \"Marzo\";\n            }\n            if (fecha.getMonth() === 3) {\n              return \"Abril\";\n            }\n            if (fecha.getMonth() === 4) {\n              return \"Mayo\";\n            }\n            if (fecha.getMonth() === 5) {\n              return \"Junio\";\n            }\n            if (fecha.getMonth() === 6) {\n              return \"Julio\";\n            }\n            if (fecha.getMonth() === 7) {\n              return \"Agosto\";\n            }\n            if (fecha.getMonth() === 8) {\n              return \"Septiembre\";\n            }\n            if (fecha.getMonth() === 9) {\n              return \"Octubre\";\n            }\n            if (fecha.getMonth() === 10) {\n              return \"Noviembre\";\n            }\n            if (fecha.getMonth() === 11) {\n              return \"Diciembre\";\n            }\n          } catch (error) {\n            console.log(error);\n            throw error;\n          }\n        })();\n        formato += \" de \";\n        formato += fecha.getFullYear();\n        return formato;\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n\n    },\n    actualizar_calendario(nuevo_valor = this.fecha_seleccionada) {\n      this.$trace(\"lsw-calendario.methods.actualizar_calendario\");\n      try {\n        const dias = [];\n        const dia_1_del_mes = new Date(nuevo_valor);\n        dia_1_del_mes.setDate(1);\n        dia_1_del_mes.setHours(0);\n        dia_1_del_mes.setMinutes(0);\n        dia_1_del_mes.setSeconds(0);\n        dia_1_del_mes.setMilliseconds(0);\n        const dias_antes_de_entrar_en_el_mes = (() => {\n          try {\n            const dia_de_semana = dia_1_del_mes.getDay();\n            if (dia_de_semana === 0) {\n              return 6;\n            }\n            if (dia_de_semana === 1) {\n              return 0;\n            }\n            if (dia_de_semana === 2) {\n              return 1;\n            }\n            if (dia_de_semana === 3) {\n              return 2;\n            }\n            if (dia_de_semana === 4) {\n              return 3;\n            }\n            if (dia_de_semana === 5) {\n              return 4;\n            }\n            if (dia_de_semana === 6) {\n              return 5;\n            }\n          } catch (error) {\n            console.log(error);\n            throw error;\n          }\n        })();\n        const celdas_vacias_anteriores = new Array(dias_antes_de_entrar_en_el_mes);\n        let dia_final_del_mes = undefined;\n        Logica_anterior: {\n          dia_final_del_mes = new Date(nuevo_valor);\n          dia_final_del_mes.setMonth(dia_final_del_mes.getMonth() + 1);\n          dia_final_del_mes.setDate(1);\n          dia_final_del_mes.setDate(dia_final_del_mes.getDate() - 1);\n        }\n        Logica_chatgpt: {\n          dia_final_del_mes = new Date(nuevo_valor.getFullYear(), nuevo_valor.getMonth() + 1, 0);\n        }\n        const numero_final_de_mes = dia_final_del_mes.getDate();\n        let fila_actual = celdas_vacias_anteriores;\n        for (let index = 1; index <= numero_final_de_mes; index++) {\n          const nueva_fecha = new Date(dia_1_del_mes);\n          nueva_fecha.setDate(index);\n          fila_actual.push(nueva_fecha);\n          if (nueva_fecha.getDay() === 0) {\n            dias.push(fila_actual);\n            fila_actual = [];\n          }\n        }\n        if (fila_actual.length) {\n          dias.push(fila_actual);\n        }\n        this.celdas_del_mes_actual = dias;\n        this.propagar_cambio();\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    },\n    actualizar_fecha_seleccionada(con_propagacion = true, fecha_seleccionada = this.fecha_seleccionada) {\n      this.$trace(\"lsw-calendario.methods.actualizar_fecha_seleccionada\");\n      if (con_propagacion) {\n        const clon_fecha = new Date(fecha_seleccionada);\n        this.fecha_seleccionada = clon_fecha;\n      }\n    },\n    propagar_cambio() {\n      this.$trace(\"lsw-calendario.methods.propagar_cambio\");\n      if (typeof this.alCambiarValor === \"function\") {\n        // Si es carga inicial, no propagamos el evento:\n        if (this.es_carga_inicial) {\n          return;\n        }\n        this.alCambiarValor(this.fecha_seleccionada, this);\n      }\n    },\n    obtener_expresion_de_hora(fecha = this.fecha_seleccionada) {\n      this.$trace(\"lsw-calendario.methods.obtener_expresion_de_hora\");\n      let hours = fecha.getHours();\n      let minutes = fecha.getMinutes();\n      let seconds = fecha.getSeconds();\n      hours = this.espaciar_izquierda(hours, 2, \"0\");\n      minutes = this.espaciar_izquierda(minutes, 2, \"0\");\n      seconds = this.espaciar_izquierda(seconds, 2, \"0\");\n      return `${hours}:${minutes}:${seconds}`;\n    },\n    establecer_marcadores_del_mes(marcadores_del_mes) {\n      this.$trace(\"lsw-calendario.methods.establecer_marcadores_del_mes\");\n      this.marcadores_del_mes = marcadores_del_mes;\n    },\n    establecer_hora_directamente(hora, minutos = 0) {\n      this.$trace(\"lsw-calendario.methods.establecer_hora_directamente\");\n      this.fecha_seleccionada.setHours(hora);\n      this.fecha_seleccionada.setMinutes(minutos);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n    increaseHora(horas_aniadidos) {\n      this.$trace(\"lsw-calendario.methods.increaseHora\");\n      const horas_actuales = this.fecha_seleccionada.getHours();\n      this.fecha_seleccionada.setHours(horas_actuales + horas_aniadidos);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n    increaseMinuto(minutos_aniadidos) {\n      this.$trace(\"lsw-calendario.methods.increaseMinuto\");\n      const minutos_actuales = this.fecha_seleccionada.getMinutes();\n      this.fecha_seleccionada.setMinutes(minutos_actuales + minutos_aniadidos);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n    setHora(horas) {\n      this.$trace(\"lsw-calendario.methods.setHora\");\n      this.fecha_seleccionada.setHours(horas);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n    setMinuto(minutos) {\n      this.$trace(\"lsw-calendario.methods.setMinuto\");\n      this.fecha_seleccionada.setMinutes(minutos);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n    askHora() {\n      this.$trace(\"lsw-calendario.methods.askHora\");\n      const hora = window.prompt(\"Qué hora quieres poner?\", this.fecha_seleccionada.getHours());\n      if (typeof hora !== \"string\") return;\n      this.fecha_seleccionada.setHours(hora);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n    askMinuto() {\n      this.$trace(\"lsw-calendario.methods.askMinuto\");\n      const minuto = window.prompt(\"Qué minuto quieres poner?\", this.fecha_seleccionada.getMinutes());\n      if (typeof minuto !== \"string\") return;\n      this.fecha_seleccionada.setMinutes(minuto);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n  },\n  watch: {\n    fecha_seleccionada(nuevo_valor) {\n      this.$trace(\"lsw-calendario.watch.fecha_seleccionada\");\n      this.hora_actual = nuevo_valor.getHours();\n      this.minuto_actual = nuevo_valor.getMinutes();\n      this.actualizar_calendario(nuevo_valor);\n    },\n  },\n  mounted() {\n    this.$trace(\"lsw-calendario.mounted\");\n    try {\n      this.fecha_seleccionada = this.valor_inicial_adaptado;\n      this.$nextTick(() => {\n        this.es_carga_inicial = false;\n      });\n      if (this.alIniciar) {\n        this.alIniciar(this.fecha_seleccionada, this);\n      }\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n});\n",
      "$code.label": "LswCalendario API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-clocktime-picker/lsw-clocktime-picker.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 133,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Clocktime Picker API » LswClocktimePicker component",
      "$code": "// Change this component at your convenience:\nVue.component(\"LswClocktimePicker\", {\n  template: $template,\n  props: {\n    onChange: {\n      type: Function,\n      default: () => { },\n    },\n    initialHour: {\n      type: [String, Number],\n      default: () => \"00\"\n    },\n    initialMinute: {\n      type: [String, Number],\n      default: () => \"00\"\n    }\n  },\n  data() {\n    this.$trace(\"lsw-clocktime-picker.data\");\n    return {\n      isSelected: 'none',\n      hour_picked: this.initialHour,\n      minute_picked: this.initialMinute,\n    };\n  },\n  methods: {\n    toggleSelection(part) {\n      this.$trace(\"lsw-clocktime-picker.methods.toggleSelection\");\n      if (this.isSelected === part) {\n        this.isSelected = \"none\";\n      } else {\n        this.isSelected = part;\n      }\n    },\n    selectHour(hour) {\n      this.$trace(\"lsw-clocktime-picker.methods.selectHour\");\n      this.hour_picked = hour;\n    },\n    selectMinute(minute) {\n      this.$trace(\"lsw-clocktime-picker.methods.selectMinute\");\n      this.minute_picked = minute;\n    },\n    increaseHour(increment = 1) {\n      this.$trace(\"lsw-clocktime-picker.methods.increaseHour\");\n      if(increment < 0) {\n        if(parseInt(\"\" + this.hour_picked) === 0) {\n          return;\n        }\n      } else if(increment > 0) {\n        if(parseInt(\"\" + this.hour_picked) === 23) {\n          return;\n        }\n      }\n      this.hour_picked = (\"\" + (parseInt(this.hour_picked) + increment)).padStart(2, \"0\");\n    },\n    async specifyHour() {\n      this.$trace(\"lsw-clocktime-picker.methods.specifyHour\");\n      const hours = await this.$lsw.dialogs.open({\n        title: \"Selecciona la hora exacta\",\n        template: `\n          <div class=\"pad_1\">\n            <input class=\"supermini width_100\" type=\"text\" placeholder=\"Pon la hora exacta aquí\" v-model=\"value\" />\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `\n      });\n      if(hours === -1) return;\n      this.hour_picked = hours;\n    },\n    increaseMinute(increment = 1) {\n      this.$trace(\"lsw-clocktime-picker.methods.increaseMinute\");\n      if(increment < 0) {\n        if(parseInt(\"\" + this.minute_picked) === 0) {\n          return;\n        }\n      } else if(increment > 0) {\n        if(parseInt(\"\" + this.minute_picked) === 59) {\n          return;\n        }\n      }\n      this.minute_picked = (\"\" + (parseInt(this.minute_picked) + increment)).padStart(2, \"0\");\n    },\n    async specifyMinute() {\n      this.$trace(\"lsw-clocktime-picker.methods.specifyMinute\");\n      const minutes = await this.$lsw.dialogs.open({\n        title: \"Selecciona el minuto exacto\",\n        template: `\n          <div class=\"pad_1\">\n            <input class=\"supermini width_100\" type=\"text\" placeholder=\"Pon el minuto exacto aquí\" v-model=\"value\" />\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `\n      });\n      if(minutes === -1) return;\n      this.minute_picked = minutes;\n    },\n    triggerChange() {\n      this.onChange({\n        hour: parseInt(this.hour_picked),\n        minute: parseInt(this.minute_picked)\n      });\n    }\n  },\n  watch: {\n    hour_picked() {\n      this.triggerChange();\n    },\n    minute_picked() {\n      this.triggerChange();\n    },\n  },\n  mounted() {\n    this.$trace(\"lsw-clocktime-picker.mounted\");\n  },\n  unmount() {\n    this.$trace(\"lsw-clocktime-picker.unmounted\");\n  }\n});\n",
      "$code.label": "LswClocktimePicker API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-clockwatcher/lsw-clockwatcher.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 118,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Windows API » LswClockwatcher component",
      "$code": "// Change this component at your convenience:\nVue.component(\"LswClockwatcher\", {\n  template: $template,\n  props: {\n    viewer: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    this.$trace(\"lsw-clockwatcher.data\");\n    return {\n      currentDate: new Date(),\n      currentMessage: false,\n    };\n  },\n  methods: {\n    onClick(event) {\n      this.$trace(\"lsw-clockwatcher.methods.onClick\");\n      this.viewer.toggleState();\n    },\n    startTimer() {\n      this.$trace(\"lsw-clockwatcher.methods.startTimer\");\n      this.timerId = setTimeout(() => {\n        this.currentDate = new Date();\n        this.startTimer();\n      }, 1000 * 60);\n    },\n    stopTimer() {\n      this.$trace(\"lsw-clockwatcher.methods.stopTimer\");\n      clearTimeout(this.timerId);\n    },\n    async loadMessage() {\n      this.$trace(\"lsw-clockwatcher.methods.loadMessage\");\n      try {\n        const userPreferences = await this.$lsw.fs.evaluateAsDotenvFileOrReturn('/kernel/settings/user.env', {});\n        const clockMessage = userPreferences[\"app.clock_message\"] || false;\n        this.currentMessage = clockMessage;\n      } catch (error) {\n        // @OK.\n        console.error(\"[!] Could not load preference «app.clock_message» from clockwatcher:\", error);\n      }\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-clockwatcher.mounted\");\n    this.startTimer();\n    this.loadMessage();\n  },\n  unmount() {\n    this.$trace(\"lsw-clockwatcher.unmounted\");\n    this.stopTimer();\n  }\n});\n",
      "$code.label": "LswClockwatcher API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-code-viewer/lsw-code-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 114,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Windows API » LswCodeViewer component",
      "$code": "Vue.component(\"LswCodeViewer\", {\n  template: $template,\n  props: {\n    code: {\n      type: String,\n      required: () => true,\n    },\n    language: {\n      type: String,\n      required: () => true,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-code-viewer.data\");\n    return {\n      isLoaded: false,\n      fontsize: 10,\n    };\n  },\n  methods: {\n    increaseFontsize(q = 1) {\n      this.$trace(\"lsw-code-viewer.methods.increaseFontsize\");\n      this.fontsize += q;\n    },\n    async loadHighlightJs(event) {\n      this.$trace(\"lsw-code-viewer.methods.loadHighlightJs\");\n      await LswLazyLoads.loadHighlightJs();\n      this.isLoaded = true;\n    },\n  },\n  mounted() {\n    this.$trace(\"lsw-code-viewer.mounter\");\n    this.loadHighlightJs();\n  },\n  unmount() {\n    this.$trace(\"lsw-code-viewer.mounter\");\n  }\n});\n",
      "$code.label": "LswCodeViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
      "$location": {
        "start": {
          "offset": 298,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 440,
          "line": 15,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswConductometria API » LswConductometria class",
      "$code": "  const LswConductometria = class {\n\n    static create(...args) {\n      Vue.prototype.$trace(\"LswConductometria.create\");\n      return new this(...args);\n    }\n\n    constructor(component = false) {\n      Vue.prototype.$trace(\"lswConductometria.constructor\");\n      this.$component = component;\n    }\n\n    async reload() {\n      Vue.prototype.$trace(\"lswConductometria.reload\");\n      const virtualization = LswConductometriaVirtualization.create(this.$component);\n      await virtualization.$resetVirtualTables();\n      await virtualization.$reloadProtolangScriptBoot();\n      await virtualization.$virtualizePropagations();\n    }\n\n  }\n\n  const LswConductometriaVirtualization = class {\n\n    static create(...args) {\n      Vue.prototype.$trace(\"LswConductometriaVirtualization.create\");\n      return new this(...args);\n    }\n\n    constructor(component) {\n      this.$component = component;\n    }\n\n    reportErrorFromComponent(error) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.reportErrorFromComponent\");\n      this.DEBUG(\"Lsw-cond-virt.reportErrorFromComponent\");\n      console.log(error);\n      if (this.$component && (typeof this.$component.addError === \"function\")) {\n        this.$component.addError(error);\n      }\n    }\n\n    async $resetVirtualTables() {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$resetVirtualTables\");\n      this.DEBUG(\"Lsw-cond-virt.$resetVirtualTables\");\n      await Vue.prototype.$lsw.database.deleteMany(\"Accion_virtual\", it => true);\n      await Vue.prototype.$lsw.database.deleteMany(\"Propagador_prototipo\", it => true);\n      await Vue.prototype.$lsw.database.deleteMany(\"Propagador_de_concepto\", it => true);\n    }\n\n    async $reloadProtolangScriptBoot() {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$reloadProtolangScriptBoot\");\n      this.DEBUG(\"Lsw-cond-virt.$reloadProtolangScriptBoot\");\n      const protoSource = await Vue.prototype.$lsw.fs.read_file(\"/kernel/agenda/proto/boot.proto\");\n      return await this.$evaluateProtolangScript(protoSource, {\n        sourcePath: \"/kernel/agenda/script/boot.proto\"\n      });\n    }\n\n    async $evaluateProtolangScript(source, parameters) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$evaluateProtolangScript\");\n      this.DEBUG(\"Lsw-cond-virt.$evaluateProtolangScript\");\n      const ast = Vue.prototype.$lsw.parsers.proto.parse(source, {\n        options: parameters\n      });\n      for (let index = 0; index < ast.length; index++) {\n        const sentence = ast[index];\n        if (sentence.type === \"inc\") {\n          await this.$evaluateInclude(sentence);\n        } else if (sentence.type === \"def\") {\n          await this.$evaluateDefine(sentence);\n        } else if (sentence.type === \"fun\") {\n          await this.$evaluateFunction(sentence);\n        } else if (sentence.type === \"rel\") {\n          await this.$evaluateRelation(sentence);\n        }\n      }\n    }\n\n    async $evaluateInclude(sentence) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$evaluateInclude\");\n      this.DEBUG(\"Lsw-cond-virt.$evaluateInclude\");\n      this.DEBUG(sentence);\n      let isFile = undefined;\n      let isDirectory = undefined;\n      const allFiles = [];\n      const filepath = sentence.path;\n      Read_node: {\n        this.DEBUG(\"read node\");\n        isFile = await Vue.prototype.$lsw.fs.is_file(filepath);\n        isDirectory = await Vue.prototype.$lsw.fs.is_directory(filepath);;\n        if (isFile) {\n          Vue.prototype.$trace(\"[*] Reading file: \", filepath);\n          this.DEBUG(\"[*] Reading file: \", filepath);\n          const contents = await Vue.prototype.$lsw.fs.read_file(filepath);\n          allFiles.push({\n            incBy: sentence,\n            file: filepath,\n            contents: contents\n          });\n        } else if (isDirectory) {\n          Vue.prototype.$trace(\"[*] Reading directory: \", filepath);\n          this.DEBUG(\"[*] Reading directory: \", filepath);\n          const subfilesMap = await Vue.prototype.$lsw.fs.read_directory(filepath);\n          const subfiles = Object.keys(subfilesMap);\n          Iterating_subfiles:\n          for (let indexSubfile = 0; indexSubfile < subfiles.length; indexSubfile++) {\n            const subfile = subfiles[indexSubfile];\n            this.DEBUG(\"iterating subfile:\", subfile);\n            const subfilepath = Vue.prototype.$lsw.fs.resolve_path(filepath, subfile);\n            const is_file = await Vue.prototype.$lsw.fs.is_file(subfilepath);\n            if (!is_file) {\n              continue Iterating_subfiles;\n            }\n            Vue.prototype.$trace(\"[*] Reading subfile: \", subfilepath);\n            this.DEBUG(\"[*] Reading subfile: \", subfilepath);\n            const filecontents = await Vue.prototype.$lsw.fs.read_file(subfilepath);\n            allFiles.push({\n              incBy: sentence,\n              file: subfilepath,\n              contents: filecontents\n            });\n          }\n        } else {\n          throw new Error(`File does not exits «${filepath}» on «lswConductometriaVirtualization.$evaluateInclude»`);\n        }\n      }\n      Vue.prototype.$trace(\"[*] Evaluating all subfiles:\", allFiles);\n      this.DEBUG(\"[*] Evaluating all subfiles:\", allFiles);\n      Evaluate_subnodes: {\n        for (let indexFile = 0; indexFile < allFiles.length; indexFile++) {\n          const metafile = allFiles[indexFile];\n          const file = metafile.file;\n          const contents = metafile.contents;\n          await this.$evaluateProtolangScript(contents, {\n            sourcePath: file\n          });\n        }\n      }\n    }\n\n    async $evaluateDefine(sentence) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$evaluateDefine\");\n      this.DEBUG(\"Lsw-cond-virt.$evaluateDefine\");\n      const { names } = sentence;\n      // @DONE: insertar names en Concepto\n      Iterating_names:\n      for (let index = 0; index < names.length; index++) {\n        const name = names[index];\n        this.DEBUG(\"in name:\", name);\n        try {\n          await Vue.prototype.$lsw.database.insert(\"Concepto\", {\n            tiene_nombre: name,\n          });\n        } catch (error) {\n          if (error.message === \"Error on «browsie.insert» operation over store «Concepto»: A mutation operation in the transaction failed because a constraint was not satisfied.\") {\n            continue Iterating_names;\n          }\n          await this.reportErrorFromComponent(error);\n        }\n      }\n    }\n\n    async $evaluateFunction(sentence) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$evaluateFunction\");\n      this.DEBUG(\"Lsw-cond-virt.$evaluateFunction\");\n      const { name, params, code } = sentence;\n      // @DONE: insertar name+params+code en Propagador_prototipo\n      try {\n        this.DEBUG(\"inserting prototipo:\", name);\n        await Vue.prototype.$lsw.database.insert(\"Propagador_prototipo\", {\n          tiene_nombre: name,\n          tiene_parametros: JSON.stringify(params),\n          tiene_funcion: code,\n        });\n      } catch (error) {\n        await this.reportErrorFromComponent(error);\n      }\n    }\n\n    async $evaluateRelation(sentence) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$evaluateRelation\");\n      this.DEBUG(\"Lsw-cond-virt.$evaluateRelation\");\n      const { name, effects, triggers } = sentence;\n      Iterating_effects:\n      for (let indexEffect = 0; indexEffect < effects.length; indexEffect++) {\n        const effect = effects[indexEffect];\n        const { consecuencia, ratio, argumentos } = effect;\n        this.DEBUG(\"inserting propagador:\", name);\n        await Vue.prototype.$lsw.database.insert(\"Propagador_de_concepto\", {\n          tiene_propagador_prototipo: \"multiplicador\",\n          tiene_concepto_disparador: name,\n          tiene_concepto_destino: consecuencia,\n          tiene_parametros_extra: ratio + (argumentos ? (\", \" + argumentos) : ''),\n          tiene_codigo: null,\n        });\n      }\n      Iterating_triggers:\n      for (let indexTrigger = 0; indexTrigger < triggers.length; indexTrigger++) {\n        const trigger = triggers[indexTrigger];\n        if (trigger.type === \"trigger by prototype\") {\n          const { prototipo, conceptos, argumentos } = trigger;\n          if (conceptos) {\n            for (let index = 0; index < conceptos.length; index++) {\n              const concepto = conceptos[index];\n              Insertar_propagador_con_consecuencia: {\n                await Vue.prototype.$lsw.database.insert(\"Propagador_de_concepto\", {\n                  tiene_propagador_prototipo: prototipo,\n                  tiene_concepto_disparador: name,\n                  tiene_concepto_destino: concepto,\n                  tiene_parametros_extra: argumentos,\n                  tiene_codigo: null,\n                });\n              }\n            }\n          } else {\n            Insertar_propagador_por_llamada: {\n              await Vue.prototype.$lsw.database.insert(\"Propagador_de_concepto\", {\n                tiene_propagador_prototipo: prototipo,\n                tiene_concepto_disparador: name,\n                tiene_concepto_destino: null,\n                tiene_parametros_extra: argumentos,\n                tiene_codigo: null,\n              });\n            }\n          }\n        } else if (trigger.type === \"trigger by code\") {\n          Insertar_propagador_por_codigo_directo: {\n            await Vue.prototype.$lsw.database.insert(\"Propagador_de_concepto\", {\n              tiene_propagador_prototipo: null,\n              tiene_concepto_disparador: name,\n              tiene_concepto_destino: null,\n              tiene_parametros_extra: null,\n              tiene_codigo: trigger.code\n            });\n          }\n        }\n      }\n    }\n\n    $toJsExtension(txt) {\n      return txt.replace(/\\.js$/g, \"\") + \".js\";\n    }\n\n    async $virtualizePropagations() {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$virtualizePropagations\");\n      this.DEBUG(\"Lsw-cond-virt.$virtualizePropagations\");\n      const accionesReales = await Vue.prototype.$lsw.database.selectMany(\"Accion\", accion => true);\n      // console.log(\"Acciones reales\", accionesReales);\n      const errorOptions = {\n        timeout: 1000 * 10\n      };\n      Iterando_acciones_reales:\n      for (let indexAccionReal = 0; indexAccionReal < accionesReales.length; indexAccionReal++) {\n        const accionReal = accionesReales[indexAccionReal];\n        Virtualizar_accion_real: {\n          await this.addVirtualAction(accionReal);\n        }\n      }\n    }\n\n    $showError(error, options = {}, propagate = false, log = true) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$showError\");\n      this.DEBUG(\"Lsw-cond-virt.$showError\");\n      try {\n        this.$component.showError(error, options, propagate, log);\n      } catch (error) {\n        console.log(\"[!] Could not notify to vue component about this previous error\");\n      }\n      if (propagate) {\n        throw error;\n      }\n    }\n\n    async addVirtualAction(accion_inicial) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.addVirtualAction\");\n      this.DEBUG(\"Lsw-cond-virt.addVirtualAction\");\n      Validaciones_minimas: {\n        break Validaciones_minimas;\n        const ensure1 = $ensure({ accion_inicial }, 1).type(\"object\").to.have.keys([\"en_concepto\", \"tiene_inicio\", \"tiene_duracion\"]);\n        ensure1.its(\"en_concepto\").type(\"string\");\n        ensure1.its(\"tiene_inicio\").type(\"string\").its(\"length\").to.be.greaterThan(0);\n        ensure1.its(\"tiene_duracion\").type(\"string\").its(\"length\").to.be.greaterThan(0);\n      }\n      Filtramos_los_estados_no_completados: {\n        if (accion_inicial.tiene_estado === 'pendiente') {\n          return \"IGNORED BECAUSE OF STATE PENDING\";\n        }\n        if (accion_inicial.tiene_estado === 'fallida') {\n          return \"IGNORED BECAUSE OF STATE FAILED\";\n        }\n      }\n      let conc_inicial = accion_inicial.en_concepto;\n      let asoc_propags = false;\n      let asoc_proto_ids = false;\n      let asoc_protos_found = false;\n      let asoc_proto_ids_found = false;\n      let asoc_proto_ids_missing = false;\n      let asoc_protos_as_map = false;\n      Insertar_accion_virtual: {\n        await Vue.prototype.$lsw.database.insert(\"Accion_virtual\", accion_inicial);\n      }\n      Extraer_propags: {\n        asoc_propags = await Vue.prototype.$lsw.database.selectMany(\"Propagador_de_concepto\", propag => {\n          return propag.tiene_concepto_disparador === conc_inicial;\n        });\n        if (!asoc_propags) {\n          return \"NO ASSOCIATED PROPAGATORS FOUND\";\n        }\n      }\n      Extraer_protos: {\n        asoc_proto_ids = LswUtils.uniquizeArray(asoc_propags.map(propag => {\n          return propag.tiene_propagador_prototipo;\n        }));\n        asoc_protos_found = await Vue.prototype.$lsw.database.selectMany(\"Propagador_prototipo\", proto_it => {\n          return asoc_proto_ids.indexOf(proto_it.tiene_nombre) !== -1;\n        });\n        asoc_proto_ids_found = LswUtils.arrays.uniquizeArray(asoc_protos_found.map(proto_it => proto_it.tiene_nombre));\n        asoc_proto_ids_missing = LswUtils.arrays.getMissingInFirst(asoc_proto_ids_found, asoc_proto_ids);\n        asoc_protos_as_map = asoc_protos_found.reduce((out, proto_it) => {\n          const nombre = proto_it.tiene_nombre;\n          out[nombre] = proto_it;\n          return out;\n        }, {});\n        if (asoc_proto_ids_missing.length) {\n          this.$showError(new Error(\"[!] Cuidado: no se encontraron los siguientes «Propagador_prototipo»: \" + asoc_proto_ids_missing.join(\", \")));\n        }\n      }\n      let propagation_molecule = {};\n      Resolver_propags_con_protos_y_propagar: {\n        for (let index_propag = 0; index_propag < asoc_propags.length; index_propag++) {\n          const propag = asoc_propags[index_propag];\n          const proto_id = propag.tiene_propagador_prototipo;\n          const proto_it = asoc_protos_as_map[proto_id];\n          try {\n            await this.$propagateVirtualAction(accion_inicial, propag, proto_it);\n          } catch (error) {\n            this.$showError(error);\n          }\n        }\n      }\n    }\n\n    async $propagateVirtualAction(accion, propagador_de_concepto, propagador_prototipo = false) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$propagateVirtualAction\");\n      this.DEBUG(\"Lsw-cond-virt.$propagateVirtualAction\");\n      try {\n        let concepto_origen = undefined;\n        let concepto_destino = undefined;\n        let funcion_propagadora = undefined;\n        let funcion_propagadora_parametros = [];\n        let funcion_propagadora_ambito = this;\n        Validaciones_minimas: {\n          this.DEBUG(\"Lsw-cond-virt.$propagateVirtualAction::Validaciones_minimas\");\n          const ensure1 = $ensure({ accion }, 1).type(\"object\")\n          ensure1.its(\"en_concepto\").type(\"string\");\n          ensure1.its(\"tiene_inicio\").type(\"string\").its(\"length\").to.be.greaterThan(0);\n          ensure1.its(\"tiene_duracion\").type(\"string\").its(\"length\").to.be.greaterThan(0);\n          const ensure2 = $ensure({ propagador_de_concepto }, 1).type(\"object\");\n          const ensure3 = $ensure({ propagador_prototipo }, 1).type([\"object\", \"boolean\"]);\n          // console.log(\"propagador_prototipo\", propagador_prototipo);\n        }\n        const {\n          tiene_nombre,     // un texto\n          tiene_funcion,    // un JavaScript (cuerpo de función)\n          tiene_parametros: tiene_parametros_prototipo, // un JSON bi-array\n        } = propagador_prototipo;\n        const {\n          tiene_propagador_prototipo,  // un Propagador_prototipo.tiene_nombre\n          tiene_concepto_disparador,       // un Concepto.tiene_nombre\n          tiene_concepto_destino,      // un Concepto.tiene_nombre\n          tiene_parametros: tiene_parametros_asociado, // un JSON bi-array\n          tiene_parametros_extra,      // un JavaScript (solo parámetros)\n          tiene_codigo,                // un JavaScript (cuerpo de función)\n        } = propagador_de_concepto;\n        Extraemos_conceptos: {\n          this.DEBUG(\"Lsw-cond-virt.$propagateVirtualAction::Extraemos_conceptos\");\n          const conceptos_origen_matched = await Vue.prototype.$lsw.database.selectMany(\"Concepto\", conc => conc.tiene_nombre === tiene_concepto_disparador);\n          concepto_origen = conceptos_origen_matched[0] || undefined;\n          const conceptos_destino_matched = await Vue.prototype.$lsw.database.selectMany(\"Concepto\", conc => conc.tiene_nombre === tiene_concepto_destino);\n          concepto_destino = conceptos_destino_matched[0] || undefined;\n        }\n        Check_point: {\n          // console.log(\"accion\", accion);\n          // console.log(\"concepto_origen\", concepto_origen);\n          // console.log(\"concepto_destino\", concepto_destino);\n          // console.log(\"funcion_propagadora\", funcion_propagadora);\n          // console.log(\"funcion_propagadora_parametros\", funcion_propagadora_parametros);\n          // console.log(\"funcion_propagadora_ambito\", funcion_propagadora_ambito);\n          // console.log(\"CHECKPOINT!\");\n        }\n        let propagacion_resultado = {};\n        Fabricamos_la_funcion_propagadora_y_la_llamamos: {\n          this.DEBUG(\"Lsw-cond-virt.$propagateVirtualAction::Fabricamos_la_funcion_propagadora_y_la_llamamos\");\n          const propagacion_params = (() => {\n            try {\n              return JSON.parse(tiene_parametros_prototipo);\n            } catch (error) {\n              return [];\n            }\n          })();\n          const propagacion_source = tiene_funcion;\n          if (!propagacion_source) {\n            break Fabricamos_la_funcion_propagadora_y_la_llamamos;\n          }\n          const propagacion_callback = LswUtils.createAsyncFunction(propagacion_source, propagacion_params);\n          if (!propagacion_callback) {\n            break Fabricamos_la_funcion_propagadora_y_la_llamamos;\n          }\n          this.$debugEvaluation(propagacion_callback.toString(), \"$propagateVirtualAction\")\n          try {\n            const propagacion_context = {\n              accion,\n              propagador_de_concepto,\n              propagador_prototipo\n            };\n            const propagacion_callback_wrapper = LswUtils.createSyncFunction(`return propagacion_callback(propagacion_context, ${tiene_parametros_asociado || \"{}\"}, ${tiene_parametros_extra || \"undefined\"})`, [\n              \"propagacion_context\",\n              \"propagacion_callback\",\n            ]);\n            this.$debugEvaluation(propagacion_callback_wrapper.toString(), \"$propagateVirtualAction\")\n            propagacion_resultado = await propagacion_callback_wrapper.call(this, propagacion_context, propagacion_callback);\n          } catch (error) {\n            this.$showError(error);\n          }\n        }\n        let accionVirtual = undefined;\n        Fabricamos_nueva_accion: {\n          this.DEBUG(\"Lsw-cond-virt.$propagateVirtualAction::Fabricamos_nueva_accion\");\n          if (!concepto_destino?.tiene_nombre) {\n            return \"NO TIENE CONCEPTO DESTINO\";\n          }\n          if (!concepto_origen?.tiene_nombre) {\n            return \"NO TIENE CONCEPTO ORIGEN\";\n          }\n          accionVirtual = this.createDefaultAction({\n            en_concepto: concepto_destino.tiene_nombre,\n            desde_concepto: concepto_origen.tiene_nombre,\n            tiene_estado: \"propagada\",\n            tiene_inicio: accion.tiene_inicio,\n            tiene_duracion: accion.tiene_duracion,\n            tiene_accion_anterior: accion.id,\n            tiene_accion_origen: undefined,\n            viene_de_propagador_de_concepto: propagador_de_concepto.id,\n            viene_de_propagador_prototipo: propagador_prototipo.tiene_nombre,\n            ...propagacion_resultado\n          });\n        }\n        Insertamos_accion_en_virtuales: {\n          this.DEBUG(\"Lsw-cond-virt.$propagateVirtualAction::Insertamos_accion_en_virtuales\");\n          this.DEBUG(accionVirtual);\n          await this.addVirtualAction(accionVirtual);\n        }\n        // @TODO: fabricar la función propagadora y enchufarla.\n        // @TODO: fabricar la función propagadora y enchufarla.\n        // @TODO: fabricar la función propagadora y enchufarla.\n        // @TODO: fabricar la función propagadora y enchufarla.\n        // @TODO: fabricar la función propagadora y enchufarla.\n      } catch (error) {\n        this.$showError(error);\n      }\n    }\n\n    $debugEvaluation(jsCode, traceId) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$debugEvaluation\");\n      this.DEBUG(\"Lsw-cond-virt.$debugEvaluation\");\n      console.log(\"[*] Evaluating js from: \" + traceId);\n      console.log(jsCode);\n    }\n\n    createDefaultAction(overwrites = {}) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.createDefaultAction\");\n      this.DEBUG(\"Lsw-cond-virt.createDefaultAction\");\n      return Object.assign({\n        en_concepto: \"?\",\n        tiene_inicio: LswTimer.utils.fromDateToDatestring(new Date()),\n        tiene_duracion: \"1min\",\n      }, overwrites);\n    }\n\n    DEBUG(...args) {\n      console.log(...args);\n    }\n\n  }\n\n  return LswConductometria;\n",
      "$code.label": "LswConductometria API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
      "$location": {
        "start": {
          "offset": 6216,
          "line": 160,
          "column": 1
        },
        "end": {
          "offset": 6259,
          "line": 161,
          "column": 1
        }
      },
      "DONE": "insertar names en Concepto",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
      "$location": {
        "start": {
          "offset": 7098,
          "line": 182,
          "column": 1
        },
        "end": {
          "offset": 7164,
          "line": 183,
          "column": 1
        }
      },
      "DONE": "insertar name+params+code en Propagador_prototipo",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
      "$location": {
        "start": {
          "offset": 20369,
          "line": 468,
          "column": 1
        },
        "end": {
          "offset": 20433,
          "line": 469,
          "column": 1
        }
      },
      "TODO": "fabricar la función propagadora y enchufarla.",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
      "$location": {
        "start": {
          "offset": 20433,
          "line": 469,
          "column": 1
        },
        "end": {
          "offset": 20497,
          "line": 470,
          "column": 1
        }
      },
      "TODO": "fabricar la función propagadora y enchufarla.",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
      "$location": {
        "start": {
          "offset": 20497,
          "line": 470,
          "column": 1
        },
        "end": {
          "offset": 20561,
          "line": 471,
          "column": 1
        }
      },
      "TODO": "fabricar la función propagadora y enchufarla.",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
      "$location": {
        "start": {
          "offset": 20561,
          "line": 471,
          "column": 1
        },
        "end": {
          "offset": 20625,
          "line": 472,
          "column": 1
        }
      },
      "TODO": "fabricar la función propagadora y enchufarla.",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
      "$location": {
        "start": {
          "offset": 20625,
          "line": 472,
          "column": 1
        },
        "end": {
          "offset": 20689,
          "line": 473,
          "column": 1
        }
      },
      "TODO": "fabricar la función propagadora y enchufarla.",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 144,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswConductometria API » LswConductometria component",
      "$code": "Vue.component(\"LswConductometria\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-conductometria.data\");\n    return {\n      isLoaded: false,\n      reportes: [],\n    };\n  },\n  methods: {\n    async reloadEverything() {\n      this.$trace(\"lsw-conductometria.methods.reloadEverything\");\n      this.isLoaded = null;\n      const files = await this.$lsw.fs.read_directory(\"/kernel/agenda/report\");\n      this.reportes = Object.keys(files);\n      Reload_conductometria_fully: {\n        await this.$lsw.conductometria.reload(this);\n      }\n      this.isLoaded = true;\n    },\n    goToReports() {\n      this.$trace(\"lsw-conductometria.methods.goToReports\");\n      this.$lsw.dialogs.open({\n        id: 'ver-reportes',\n        title: \"Reportes de conductometría\",\n        template: `\n          <lsw-filesystem-explorer opened-by=\"/kernel/agenda/report/\" :absolute-layout=\"true\" />\n        `\n      });\n    },\n    goToScripts() {\n      this.$trace(\"lsw-conductometria.methods.goToScripts\");\n      this.$lsw.dialogs.open({\n        id: 'ver-script',\n        title: \"Scripts de conductometría\",\n        template: `\n          <lsw-filesystem-explorer opened-by=\"/kernel/agenda/proto\" :absolute-layout=\"true\" />\n        `\n      });\n    },\n    async editReport(reporte) {\n      this.$trace(\"lsw-conductometria.methods.editReport\");\n      this.$lsw.dialogs.open({\n        title: \"Editar reporte \" + reporte,\n        template: `\n          <lsw-filesystem-explorer\n            :opened-by=\"'/kernel/agenda/report/' + reporte\"\n            :absolute-layout=\"true\" />\n        `,\n        factory: {\n          data: { reporte }\n        }\n      });\n    },\n    openReport(reporteId) {\n      this.$trace(\"lsw-conductometria.methods.openReport\");\n      this.$lsw.dialogs.open({\n        title: \"Reproducir reporte \" + reporteId,\n        template: `\n          <lsw-conductometria-report :report-id=\"'/kernel/agenda/report/' + reporteId\" />\n        `,\n        factory: {\n          data: { reporteId }\n        }\n      });\n    },\n    showError(error, ...args) {\n      Vue.prototype.$lsw.toasts.showError(error, ...args);\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-conductometria.mounted\");\n      this.$lsw.conductometria = LswConductometria.create(this);\n    } catch(error) {\n      this.$lsw.toasts.showError(error);\n    }\n  }\n});\n",
      "$code.label": "LswConductometria API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria-report/lsw-conductometria-report.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 176,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswConductometriaReport API » LswConductometriaReport API » LswConductometriaReport component",
      "$code": "Vue.component(\"LswConductometriaReport\", {\n  name: \"LswConductometriaReport\",\n  template: $template,\n  props: {\n    reportId: {\n      type: String,\n      required: true,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-conductometria-report.data\");\n    return {\n      isLoaded: false,\n      report: false,\n    };\n  },\n  methods: {\n    async loadReport() {\n      this.$trace(\"lsw-conductometria-report.methods.loadReport\");\n      this.isLoaded = false;\n      const reportSource = await this.$lsw.fs.read_file(this.reportId);\n      const reportInstance = LswConductometriaReport.create(reportSource, this);\n      const report = await reportInstance.buildReport();\n      this.report = report;\n      this.$nextTick(() => {this.isLoaded = true;});\n    },\n    goToReportTitle(reportIndex) {\n      this.$trace(\"lsw-conductometria-report.methods.loadReport\");\n      const presuntReportTitle = this.$refs[\"report_\" + reportIndex];\n      try {\n        presuntReportTitle[0].$el.scrollIntoView();\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    async openReportSource() {\n      this.$trace(\"lsw-conductometria-report.methods.openReportSource\");\n      await this.$lsw.dialogs.open({\n        title: \"Editar reporte\",\n        template: `\n          <lsw-filesystem-explorer :opened-by=\"reportId\" :absolute-layout=\"true\" />\n        `,\n        factory: {\n          data: {\n            reportId: this.reportId\n          }\n        }\n      });\n    },\n  },\n  watch: {\n\n  },\n  computed: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-conductometria-report.mounted\");\n      await this.loadReport();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswConductometriaReport API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-configurations-page/lsw-configurations-page.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 112,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswConfigurationsPage component",
      "$code": "// Change this component at your convenience:\nVue.component(\"LswConfigurationsPage\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-configurations-page.data\", arguments);\n    return {\n      isDebuggerLoaded: true,\n      selectedSection: \"preferencias\", // puede ser: datos, preferencias\n      currentBackup: false,\n    };\n  },\n  methods: {\n    async showCurrentBackup() {\n      this.$trace(\"lsw-configurations-page.methods.toggleCurrentBackup\");\n      const currentBackup = await this.$lsw.backuper.getLastBackup();\n      this.$lsw.dialogs.open({\n        title: \"Ver copia de seguridad actual\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"flex_row pad_bottom_1\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"copySource\">📃 Copiar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"downloadSource\">📥 Descargar</button>\n              </div>\n            </div>\n            <pre class=\"codeblock\">{{ source }}</pre>\n          </div>\n        `,\n        factory: {\n          data: {\n            source: JSON.stringify(currentBackup, null, 2),\n          },\n          methods: {\n            copySource() {\n              this.$trace(\"lsw-configurations-page.methods.copySource\");\n              this.$window.navigator.clipboard.writeText(this.source);\n              this.$lsw.toasts.send({\n                title: \"Texto copiado\",\n                text: \"El texto fue copiado al portapapeles.\"\n              });\n            },\n            downloadSource() {\n              this.$trace(\"lsw-configurations-page.methods.downloadSource\");\n              LswUtils.downloadFile(\"lsw-backup.json\", this.source);\n            },\n          }\n        }\n      });\n    },\n    async deleteCurrentBackup() {\n      this.$trace(\"lsw-configurations-page.methods.deleteCurrentBackup\");\n      const confirmation = await this.$lsw.dialogs.open({\n        title: \"Eliminar copia de seguridad actual\",\n        template: `\n          <div class=\"pad_top_1 pad_left_1\">\n            <div>¿Seguro que quieres eliminar la copia de seguridad actual?</div>\n            <hr />\n            <div class=\"flex_row centered text_align_right\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini danger_button\" v-on:click=\"accept\">Eliminar igual</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {},\n      });\n      if(confirmation !== true) {\n        return;\n      }\n      return this.$lsw.backuper.deleteLastBackup();\n    },\n    selectSection(seccion) {\n      this.$trace(\"lsw-configurations-page.methods.selectSection\");\n      this.selectSection = seccion;\n    },\n    async startExportarAJsonFile() {\n      this.$trace(\"lsw-configurations-page.methods.startExportarAJsonFile\");\n      const allData = await LswDatabase.exportDatabase(\"lsw_default_database\");\n      const minuteUid = LswTimer.utils.formatDatestringFromDate(new Date()).replace(/\\/|-|:|\\.| /g, \".\");\n      this.$lsw.utils.downloadFile(`lsw_default_database.${minuteUid}.json`, JSON.stringify(allData, null, 2));\n    },\n    async startExportarAJson() {\n      this.$trace(\"lsw-configurations-page.methods.startExportarAJson\");\n      const allData = await LswDatabase.exportDatabase(\"lsw_default_database\");\n      this.$dialogs.open({\n        title: \"Exportar base de datos a JSON\",\n        template: `<div class=\"pad_1\">\n          <div class=\"flex_row centered\">\n            <div class=\"flex_100 pad_1\">Exportación a JSON:</div>\n            <div class=\"flex_1 pad_1\">\n              <button class=\"supermini nowrap\" v-on:click=\"copyToClipboard\">Copiar</button>\n            </div>\n          </div>\n          <textarea class=\"width_100\" style=\"min-height: 220px;\" v-model=\"jsonData\" disabled=\"true\"></textarea>\n          <hr />\n          <div class=\"pad_1 text_align_right\">\n            <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n          </div>\n        </div>`,\n        factory: {\n          data: {\n            jsonData: JSON.stringify(allData, null, 2),\n          },\n          methods: {\n            copyToClipboard() {\n              this.$trace(\"Dialogo.exportar_a_json.methods.copyToClipboard\");\n              this.$window.navigator.clipboard.writeText(this.jsonData);\n              this.$lsw.toasts.send({\n                title: \"¡Texto copiado!\",\n                text: \"El texto fue copiado con éxito.\"\n              });\n            }\n          }\n        }\n      })\n    },\n    async startImportarDeJsonFile() {\n      this.$trace(\"lsw-configurations-page.methods.startImportarDeJsonFile\");\n      // @TODO: importar texto de un JSON file con un input type file y tol royo.\n      let data = await LswUtils.askForFileText();\n      try {\n        console.log(data);\n        data = JSON.parse(data);\n      } catch (error) {\n        return this.$lsw.toasts.showError(error);\n      }\n      const confirmacion = await this.$lsw.dialogs.open({\n        title: \"Importación de JSON\",\n        template: `\n          <div class=\"pad_1\">\n            <div>Estás a punto de importar los siguientes datos a la base de datos:</div>\n            <pre style=\"max-height: 400px; overflow: scroll; font-size: 10px;\">{{ datos }}</pre>\n            <div class=\"flex_row\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1 pad_top_1\">\n                <button class=\"danger_button supermini\" v-on:click=\"accept\">Importar igualmente</button>\n              </div>\n              <div class=\"flex_1 pad_left_1 pad_top_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            datos: data,\n          }\n        }\n      });\n      if(confirmacion <= 0) {\n        return false;\n      }\n      // @OK:\n      return;\n      await LswDatabase.importToDatabase(\"lsw_default_database\", data);\n      return this.$lsw.toasts.send({\n        title: \"👍 Importación completada\",\n        text: `La importación fue un éxito.`\n      });\n    },\n    async startImportarDeJson() {\n      this.$trace(\"lsw-configurations-page.methods.startImportarDeJson\");\n      const resultado = await this.$dialogs.open({\n        title: \"Importar JSON a base de datos\",\n        template: `<div class=\"pad_1\">\n          <div class=\"flex_row centered\">\n            <div class=\"flex_100 pad_1\">Importación de JSON:</div>\n          </div>\n          <textarea class=\"width_100\" style=\"min-height: 220px;\" v-model=\"value.importation\" placeholder=\"Por ejemplo: {NombreDeStore:[{},{},{}]}\"></textarea>\n          <hr />\n          <div class=\"pad_1 text_align_right\">\n            <button class=\"supermini danger_button\" v-on:click=\"sendForm\">Importar</button>\n            <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n          </div>\n        </div>`,\n        factory: {\n          data: {\n            value: {\n              importation: \"\",\n            }\n          },\n          methods: {\n            sendForm() {\n              this.$trace(\"Dialogo.importar_de_json.methods.sendForm\");\n              this.validateImportation();\n              return this.accept();\n            },\n            validateImportation() {\n              this.$trace(\"Dialogo.importar_de_json.methods.validateImportation\");\n              try {\n                JSON.parse(this.value.importation);\n              } catch (error) {\n                this.$lsw.toasts.send({\n                  title: \"⛔️ Error al parsear JSON\",\n                  text: `La importación se interrumpió.`\n                });\n                throw error;\n              }\n            }\n          }\n        }\n      });\n      if(typeof resultado !== \"object\") {\n        return false;\n      }\n      let data = undefined;\n      try {\n        data = JSON.parse(resultado.importation);\n      } catch (error) {\n        return this.$lsw.toasts.send({\n          title: \"⛔️ Error al parsear JSON\",\n          text: `La importación falló.`\n        });\n      }\n      // @OK:\n      await LswDatabase.importToDatabase(\"lsw_default_database\", data);\n      return this.$lsw.toasts.send({\n        title: \"👍 Importación completada\",\n        text: `La importación fue un éxito.`\n      });\n    },\n    async startResetearBaseDeDatos() {\n      this.$trace(\"lsw-configurations-page.methods.startResetearBaseDeDatos\");\n      const confirmation = await this.$dialogs.open({\n        title: \"Resetear la base de datos\",\n        template: `<div class=\"pad_1\">\n          <div class=\"text_align_center\" style=\"min-height: 90px;\">\n            <div class=\"pad_1 font_weight_bold\">¡CUIDADO!</div>\n            <div class=\"pad_1 pad_top_0\">¿Seguro que quieres resetear la base de datos?</div>\n            <div class=\"pad_1 pad_top_0\">Considera que perderás todos los datos.</div>\n          </div>\n          <hr />\n          <div class=\"pad_1 text_align_right\">\n            <button class=\"supermini danger_button\" v-on:click=\"accept\">Aceptar</button>\n            <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n          </div>\n        </div>`,\n        factory: {\n          data: { value: {} },\n          methods: {}\n        }\n      });\n      if(typeof confirmation !== \"object\") return;\n      await this.$lsw.database.close();\n      await LswDatabase.deleteDatabase(\"lsw_default_database\");\n      this.$window.location.reload();\n    },\n    startConfigureBackgrounds() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureBackgrounds\");\n      this.$dialogs.open({\n        title: \"Configurar fondos de pantalla\",\n        template: `<lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/settings/backgrounds.env\" />`,\n      });\n    },\n    startConfigureAutomessages() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureAutomessages\");\n      this.$dialogs.open({\n        title: \"Configurar automensajes\",\n        template: `<lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/settings/automessages.env\" />`,\n      });\n    },\n    startConfigureRutiner() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureRutiner\");\n      this.$dialogs.open({\n        title: \"Configurar mensaje rutinario\",\n        template: `<lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/settings/rutiner.md\" />`,\n      });\n    },\n    startConfigureRutinerTimeout() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureRutinerTimeout\");\n      return LswDomIrruptor.configurarRutinerTimeout();\n    },\n    startConfigureRandomizables() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureRandomizables\");\n      this.$dialogs.open({\n        title: \"Configurar acciones randomizables\",\n        template: `<lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/settings/randomizables.env\" />`,\n      });\n    },\n    startConfigureUserIdentity() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureUserIdentity\");\n      this.$dialogs.open({\n        title: \"Configurar identidad de usuario\",\n        template: `<lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/settings/user.env\" />`,\n      });\n    },\n    startCodeReference() {\n      this.$trace(\"lsw-configurations-page.methods.startCodeReference\");\n      this.$window.open(\"https://allnulled.github.io/lsw-one/reference\", \"_blank\");\n    },\n    startGithubHomepage() {\n      this.$trace(\"lsw-configurations-page.methods.startGithubHomepage\");\n      this.$window.open(\"https://github.com/allnulled/lsw-one\", \"_blank\");\n    },\n    async saveBackup() {\n      this.$trace(\"lsw-configurations-page.methods.saveBackup\");\n      const allData = await LswDatabase.exportDatabase(\"lsw_default_database\");\n      await this.$lsw.backuper.setLastBackup(allData);\n      await this.$lsw.toasts.send({\n        title: \"Backup exportado\",\n        text: \"La copia de seguridad fue exportada con el estado actual con éxito.\"\n      });\n    },\n    async loadBackup() {\n      this.$trace(\"lsw-configurations-page.methods.loadBackup\");\n      // @TODO: esta función no está terminada.\n      const respuesta = await this.$lsw.dialogs.open({\n        title: \"Importar copia de seguridad\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"\">¿Seguro que quieres importar la actual copia de seguridad?</div>\n            <hr />\n            <div class=\"text_align_right\">\n              <button class=\"supermini danger_button\" v-on:click=\"() => accept(true)\">Sí, importar</button>\n              <button class=\"supermini\" v-on:click=\"close\">Cancelar</button>\n            </div>\n          </div>\n        `\n      });\n      if(respuesta !== true) return;\n      const backupData = await this.$lsw.backuper.getLastBackup();\n      try {\n        for(const tableId in backupData) {\n          const tableRows = backupData[tableId];\n          await this.$lsw.database.insertMany(tableId, tableRows);\n        }\n      } catch (error) {\n        console.log(error);\n        return await this.$lsw.toasts.send({\n          title: \"Backup con errores\",\n          text: \"La copia de seguridad tuvo errores de importación: \" + error.message,\n          background: \"rgba(212, 74, 74, 0.62)\",\n        });\n      }\n      await this.$lsw.toasts.send({\n        title: \"Backup importado\",\n        text: \"La copia de seguridad fue importada al estado actual con éxito.\"\n      });\n    },\n    toggleTracer() {\n      this.$trace(\"lsw-configurations-page.methods.toggleTracer\");\n      this.isDebuggerLoaded = false;\n      const isActive = this.$lsw.logger.$options.active;\n      if(isActive) {\n        this.$lsw.logger.deactivate();\n      } else {\n        this.$lsw.logger.activate();\n      }\n      setTimeout(() => {\n        this.isDebuggerLoaded = true;\n      }, 1);\n    },\n    startConfigureBoot() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureBoot\");\n      this.$dialogs.open({\n        title: \"Configurar arranque\",\n        template: `<lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/boot.js\" />`,\n      });\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-configurations-page.mounter\");\n    \n  },\n});\n",
      "$code.label": "LswConfigurationsPage API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-configurations-page/lsw-configurations-page.js",
      "$location": {
        "start": {
          "offset": 5047,
          "line": 130,
          "column": 1
        },
        "end": {
          "offset": 5129,
          "line": 131,
          "column": 1
        }
      },
      "TODO": "importar texto de un JSON file con un input type file y tol royo.",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-configurations-page/lsw-configurations-page.js",
      "$location": {
        "start": {
          "offset": 12489,
          "line": 317,
          "column": 1
        },
        "end": {
          "offset": 12537,
          "line": 318,
          "column": 1
        }
      },
      "TODO": "esta función no está terminada.",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-console-hooker/console-hooker-api.js",
      "$location": {
        "start": {
          "offset": 290,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 411,
          "line": 15,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswConsoleHooker API » LswConsoleHooker API",
      "$code": "  class ConsoleHooker {\n\n    static extractProps(obj, props = []) {\n      const out = {};\n      for(let index=0; index<props.length; index++) {\n        const prop = props[index];\n        out[prop] = obj[prop].bind(obj);\n      }\n      return out;\n    }\n\n    constructor(outputElementId) {\n      this.originalConsole = { ...console }; // Guardar los métodos originales\n      this.outputElementId = outputElementId;\n      this.isHooked = false;\n      this.hookConsole();\n      this.messageCounter = 0;\n    }\n\n    HOOKED_METHODS = [\n      \"log\",\n      \"info\",\n      \"warn\",\n      \"error\",\n      \"debug\",\n    ];\n\n    hookConsole() {\n      if(this.isHooked) {\n        return;\n      }\n      this.HOOKED_METHODS.forEach(method => {\n        if (typeof console[method] === 'function') {\n          console[method] = (...args) => {\n            this.writeToHtml(method, args);\n            this.originalConsole[method](...args); // Llamar al método original\n          };\n        }\n      });\n      this.isHooked = true;\n    }\n\n    formatError(error) {\n      let errorMessage = \"\";\n      errorMessage += \"Error: \" + error.name + \": \" + error.message;\n      if (error.location) {\n        errorMessage += JSON.stringify({\n          found: error.found,\n          expected: error.expected,\n          location: error.location\n        }, null, 2);\n      }\n      return errorMessage;\n    }\n\n    consoleReducer() {\n      return (arg) => {\n        if (typeof arg === 'object') {\n          if (arg instanceof Error) {\n            return this.formatError(arg);\n          } else {\n            const seen = new WeakSet();\n            return JSON.stringify(arg, function (key, value) {\n              if (typeof value === \"object\") {\n                if (seen.has(value)) {\n                  return \"[Circular]\";\n                }\n                if (value !== null) {\n                  seen.add(value);\n                }\n              }\n              return value;\n            }, 2);\n          }\n        } else {\n          return arg;\n        }\n      };\n    }\n\n    writeToHtml(method, args) {\n      // Do not log from this method or it becomes recursive:\n      const message = document.createElement('div');\n      message.className = `console-${method}`;\n      message.textContent = `[${this.messageCounter++}] ${args.map(this.consoleReducer()).join(' ')}`;\n      const outputElement = document.getElementById(this.outputElementId);\n      if (!outputElement) {\n        // console.log(\"no console hooker output element found\");\n        return;\n      }\n      const subnodes = outputElement.children;\n      const subnodesLength = outputElement.children.length;\n      const hasMoreThan100 = outputElement.children.length > 100;\n      if (hasMoreThan100) {\n        for (let index = subnodes.length - 1; index > 50; index--) {\n          const subnode = subnodes[index];\n          subnode.remove();\n        }\n      }\n      const parent = outputElement;\n      parent.insertBefore(message, parent.firstChild);\n    }\n\n    restoreConsole() {\n      if(!this.isHooked) {\n        return;\n      }\n      this.HOOKED_METHODS.forEach(method => {\n        console[method] = this.originalConsole[method];\n      });\n      this.isHooked = false;\n    }\n  }\n\n  ConsoleHooker.default = ConsoleHooker;\n\n  return ConsoleHooker;\n",
      "$code.label": "LswConsoleHooker API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-console-hooker/console-hooker.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 125,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswConsoleHooker API » LswConsoleHooker component",
      "$code": "Vue.component(\"LswConsoleHooker\", {\n  template: $template,\n  props: {},\n  data() {\n    return {\n\n    }\n  },\n  methods: {\n\n    async loadEruda() {\n      this.$trace(\"console-hooker.methods.loadEruda\");\n      await LswLazyLoads.loadEruda();\n    },\n\n    async toggleConsole() {\n      this.$trace(\"console-hooker.methods.toggleConsole\");\n      if (typeof eruda === \"undefined\") {\n        await this.loadEruda();\n        eruda.init({\n          container: this.$refs.console_hooker_box,\n        });\n        eruda.show();\n      } else {\n        const isShowing = eruda._$el.find(\".eruda-dev-tools\").css(\"display\") === \"block\";\n        if (isShowing) {\n          eruda.hide();\n        } else {\n          eruda.show();\n        }\n      }\n    },\n\n  },\n  mounted() {\n    this.$trace(\"console-hooker.mounted\");\n    Exportar_consola: {\n      Vue.prototype.$consoleHooker = this;\n      this.$window.LswConsoleHooker = this;\n    }\n  },\n  unmounted() {\n\n  }\n});\n",
      "$code.label": "LswConsoleHooker API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-data-printer-button/lsw-data-printer-button.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 110,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswDataPrinterButton component",
      "$code": "Vue.component(\"LswDataPrinterButton\", {\n  template: $template,\n  props: {\n    input: {\n      type: [Object, String, Boolean, Number, Function],\n      default: () => false,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-data-printer-button.data\");\n    return {\n      inputType: typeof(this.input),\n      formatType: undefined,\n    };\n  },\n  methods: {\n    async openViewer() {\n      this.$trace(\"lsw-data-printer-button.methods.openViewer\");\n      let input = this.input;\n      if(this.inputType === \"function\") {\n        input = await this.input();\n      }\n      this.formatType = typeof input;\n      this.$lsw.dialogs.open({\n        title: \"Impresión de «\" + this.formatType + \"»\",\n        template: `\n          <lsw-data-printer-report :input=\"input\" />\n        `,\n        factory: { data: { input } },\n      });\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-data-printer-button.mounted\");\n    \n  },\n  unmounted() {\n    this.$trace(\"lsw-data-printer-button.unmounted\");\n    \n  }\n});\n",
      "$code.label": "LswDataPrinterButton API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-data-printer-report/lsw-data-printer-report.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 110,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswDataPrinterReport component",
      "$code": "Vue.component(\"LswDataPrinterReport\", {\n  template: $template,\n  props: {\n    input: {\n      type: [Object, String, Boolean, Number],\n      default: () => false,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-data-printer-report.data\");\n    const inputType = typeof(this.input);\n    const availableOptions = (() => {\n      switch(inputType) {\n        case \"string\":\n          return [\"Crudo\", \"Markdown\", \"Solo texto plano\"];\n        default:\n          return [\"Crudo\", \"Natural\"];\n      }\n    })();\n    return {\n      availableOptions,\n      selectedSection: \"Crudo\",\n      inputType,\n    };\n  },\n  methods: {\n    copyCrude() {\n      this.$trace(\"lsw-data-printer-report.methods.copyCrude\");\n      const json = JSON.stringify(this.input, null, 2);\n      this.$window.navigator.clipboard.writeText(json);\n      this.$lsw.toasts.send({\n        title: \"Texto copiado correctamente!\"\n      });\n    },\n    askForFilename() {\n      return this.$lsw.dialogs.open({\n        title: \"Descargar en fichero\",\n        template: `\n          <div class=\"pad_1\">\n            <div>¿Qué nombre de fichero quieres para la descarga?</div>\n            <input class=\"width_100 margin_top_1\" type=\"text\" v-model=\"value\" />\n            <hr />\n            <div class=\"flex_row centered pad_1\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Descargar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: { data: { value: \"\" } },\n      });\n    },\n    async downloadCrude() {\n      this.$trace(\"lsw-data-printer-report.methods.downloadCrude\");\n      const filename = await this.askForFilename();\n      if(filename === -1) return;\n      LswUtils.downloadFile(filename, JSON.stringify(this.input, null, 2));\n    },\n    copyNatural() {\n      this.$trace(\"lsw-data-printer-report.methods.copyNatural\");\n      const text = this.inputNatural;\n      this.$window.navigator.clipboard.writeText(text);\n      this.$lsw.toasts.send({\n        title: \"Texto copiado correctamente!\"\n      });\n    },\n    async downloadNatural() {\n      this.$trace(\"lsw-data-printer-report.methods.downloadNatural\");\n      const filename = await this.askForFilename();\n      if(filename === -1) return;\n      LswUtils.downloadFile(filename, this.inputNatural);\n    },\n    copyMarkdown() {\n      this.$trace(\"lsw-data-printer-report.methods.copyMarkdown\");\n      const text = this.inputMarkdown;\n      this.$window.navigator.clipboard.writeText(text);\n      this.$lsw.toasts.send({\n        title: \"Texto copiado correctamente!\"\n      });\n    },\n    async downloadMarkdown() {\n      this.$trace(\"lsw-data-printer-report.methods.downloadMarkdown\");\n      const filename = await this.askForFilename();\n      if(filename === -1) return;\n      LswUtils.downloadFile(filename, this.inputMarkdown);\n    },\n    copyHtml() {\n      this.$trace(\"lsw-data-printer-report.methods.copyHtml\");\n      const text = this.inputHtml;\n      this.$window.navigator.clipboard.writeText(text);\n      this.$lsw.toasts.send({\n        title: \"Texto copiado correctamente!\"\n      });\n    },\n    async downloadHtml() {\n      this.$trace(\"lsw-data-printer-report.methods.downloadHtml\");\n      return this.$window.alert(\"Exportación a HTML no disponible. xD\");\n      const filename = await this.askForFilename();\n    },\n    copyPlain() {\n      this.$trace(\"lsw-data-printer-report.methods.copyPlain\");\n      const text = this.inputPlain;\n      this.$window.navigator.clipboard.writeText(text);\n      this.$lsw.toasts.send({\n        title: \"Texto copiado correctamente!\"\n      });\n    },\n    async downloadPlain() {\n      this.$trace(\"lsw-data-printer-report.methods.downloadPlain\");\n      const filename = await this.askForFilename();\n      if(filename === -1) return;\n      LswUtils.downloadFile(filename, this.inputPlain);\n    }\n  },\n  computed: {\n    inputNatural() {\n      this.$trace(\"lsw-data-printer-report.computed.inputNatural\");\n      return LswUtils.fromJsonToNatural(this.input);\n    },\n    inputMarkdown() {\n      this.$trace(\"lsw-data-printer-report.computed.inputMarkdown\");\n      return LswMarkdown.global.parse(this.input);\n    },\n    inputPlain() {\n      this.$trace(\"lsw-data-printer-report.computed.inputPlain\");\n      return LswDom.extractPlaintextFromHtmltext(this.inputMarkdown);\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-data-printer-report.mounted\");\n    \n  },\n  unmounted() {\n    this.$trace(\"lsw-data-printer-report.unmounted\");\n    \n  }\n});\n",
      "$code.label": "LswDataPrinterReport API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-debugger/lsw-debugger.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 92,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswDebugger component",
      "$code": "Vue.component(\"LswDebugger\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-error-box.data\");\n    return {\n      currentMessages: [],\n    };\n  },\n  methods: {\n    debug(data, options = {}) {\n      this.$trace(\"lsw-debugger.methods.debug\");\n      const id = options.id || LswRandomizer.getRandomString(10);\n      const timeout = options.timeout || 3000;\n      const timeoutId = setTimeout(() => {\n        const pos = this.currentMessages.findIndex(it => it.id === id);\n        if(pos === -1) return;\n        this.currentMessages.splice(pos, 1);\n        this.$forceUpdate(true);\n      }, timeout);\n      this.currentMessages.unshift({\n        id,\n        data: data,\n        options,\n        timeout,\n        timeoutId,\n        created_at: LswTimer.utils.fromDateToDatestring(new Date(), 0, 0, 1, 0, 1),\n      });\n    },\n    clearMessages() {\n      this.$trace(\"lsw-debugger.methods.clearMessages\");\n      this.currentMessages = [];\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-error-box.mounted\");\n      LswDebugger.global = LswDebugger.create(this);\n      this.$debugger = LswDebugger.global;\n      this.$lsw.debugger = LswDebugger.global;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswDebugger API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-dialogs/lsw-dialogs.js",
      "$location": {
        "start": {
          "offset": 16,
          "line": 3,
          "column": 1
        },
        "end": {
          "offset": 137,
          "line": 4,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswDialogs API » LswDialogs classes and functions",
      "$code": "  const defaultDialogFactory = () => {\n    return {\n      props: {},\n      data() {\n        return {};\n      },\n      methods: {},\n      mounted() { },\n    };\n  };\n\n  class Dialog {\n    static fromIdToComponentName(id) {\n      return \"lsw-dialog-\" + id;\n    }\n    constructor(info = {}) {\n      Object.assign(this, info);\n      Validations: {\n        if (typeof this.id !== \"string\") {\n          throw new Error(`Required parameter «dialog.id» to be a string on «Dialog.constructor»`);\n        }\n        if (typeof this.name !== \"string\") {\n          throw new Error(`Required parameter «dialog.name» to be a string on «Dialog.constructor»`);\n        }\n        if (typeof this.priority !== \"number\") {\n          throw new Error(`Required parameter «dialog.priority» to be a number on «Dialog.constructor»`);\n        }\n        if (typeof this.component !== \"object\") {\n          throw new Error(`Required parameter «dialog.component» to be an object on «Dialog.constructor»`);\n        }\n        if (typeof this.promiser !== \"object\") {\n          throw new Error(`Required parameter «dialog.promiser» to be an object on «Dialog.constructor»`);\n        }\n        if (!(this.promiser.promise instanceof Promise)) {\n          throw new Error(`Required parameter «dialog.promiser.promise» to be an instance of Promise on «Dialog.constructor»`);\n        }\n        if (typeof this.promiser.resolve !== \"function\") {\n          throw new Error(`Required parameter «dialog.promiser.resolve» to be an function on «Dialog.constructor»`);\n        }\n        if (typeof this.promiser.reject !== \"function\") {\n          throw new Error(`Required parameter «dialog.promiser.reject» to be an function on «Dialog.constructor»`);\n        }\n        if (typeof this.acceptButton !== \"object\") {\n          this.acceptButton = false;\n        }\n        if (typeof this.cancelButton !== \"object\") {\n          this.cancelButton = false;\n        }\n      }\n    }\n  }\n\n  const closeSubdialogsHook = function (id, lswDialogs) {\n    const ids = Object.keys(lswDialogs.opened);\n    for (let index_dialog = 0; index_dialog < ids.length; index_dialog++) {\n      const idOpened = ids[index_dialog];\n      const idParent = lswDialogs.opened[idOpened].parentId;\n      if (idParent === id) {\n        lswDialogs.close(idOpened);\n      }\n    }\n  };\n\n  Vue.component(\"LswDialogs\", {\n    name: \"LswDialogs\",\n    template: $template,\n    props: {\n      asWindows: {\n        type: Boolean,\n        default: () => false\n      }\n    },\n    data() {\n      this.$trace(\"lsw-dialogs.data\", []);\n      return {\n        enabledWindowsSystem: this.asWindows,\n        opened: {},\n        openedLength: 0,\n        notMinimizedLength: 0,\n        hookOnOpen: undefined,\n        hookOnClose: closeSubdialogsHook,\n      };\n    },\n    watch: {\n      opened(newValue) {\n        this.$trace(\"lsw-dialogs.watch.opened\", []);\n        this.openedLength = (typeof newValue !== \"object\") ? 0 : Object.keys(newValue).length;\n        this._refreshMinimizedLength(newValue);\n      }\n    },\n    methods: {\n      open(parametricObject = {}) {\n        this.$trace(\"lsw-dialogs.methods.open\", []);\n        if (typeof parametricObject !== \"object\") {\n          throw new Error(`Required argument «parametricObject» to be an object on «LswDialogs.methods.open»`);\n        }\n        const {\n          template,\n          title = \"\",\n          // @OK: El ID debería ser único o no se abrirán las duplicadas.\n          // @PERO: Pero por algo lo tenía así también y no recuerdo.\n          id = LswRandomizer.getRandomString(10),\n          priority = 500,\n          factory = defaultDialogFactory,\n          parentId = undefined,\n          created_at = new Date()\n        } = parametricObject;\n        const componentInfo = {};\n        if (typeof id !== \"string\") {\n          throw new Error(`Required parameter «id» to be a string on «LswDialogs.methods.open»`);\n        }\n        if (id in this.opened) {\n          return this.maximize(id);\n          // throw new Error(`Cannot open dialog «${id}» because it is already opened on «LswDialogs.methods.open»`);\n        }\n        if (typeof template !== \"string\") {\n          throw new Error(`Required parameter «template» to be a string on «LswDialogs.methods.open»`);\n        }\n        if (typeof factory === \"object\") {\n          // @OK\n        } else if (typeof factory !== \"function\") {\n          throw new Error(`Required parameter «factory» to be an object or a function on «LswDialogs.methods.open»`);\n        }\n        if (typeof priority !== \"number\") {\n          throw new Error(`Required parameter «priority» to be a number on «LswDialogs.methods.open»`);\n        }\n        const dialogComponentInput = typeof factory === \"function\" ? factory() : factory;\n        const dialogComponentData = (() => {\n          if (typeof dialogComponentInput.data === \"undefined\") {\n            return function () { return {}; };\n          } else if (typeof dialogComponentInput.data === \"object\") {\n            return function () { return dialogComponentInput.data };\n          } else if (typeof dialogComponentInput.data === \"function\") {\n            return dialogComponentInput.data;\n          } else {\n            console.log(dialogComponentInput.data);\n            throw new Error(\"Required parameter «data» returned by «factory» to be an object, a function or empty on «LswDialogs.methods.open»\");\n          }\n        })();\n        const scopifyMethods = function (obj, scope) {\n          return Object.keys(obj).reduce((out, k) => {\n            const v = obj[k];\n            if (typeof v !== \"function\") {\n              out[k] = v;\n            } else {\n              out[k] = v.bind(scope);\n            }\n            return out;\n          }, {});\n        };\n        // 1) Este es para el Vue.component:\n        const componentId = Dialog.fromIdToComponentName(id);\n        const dialogComponent = Object.assign({}, dialogComponentInput, {\n          name: componentId,\n          template,\n          data(component, ...args) {\n            this.$trace(`lsw-dialogs.[${componentId}].data`, []);\n            const preData = dialogComponentData.call(this);\n            if (typeof preData.value === \"undefined\") {\n              preData.value = \"\";\n            };\n            // console.log(\"El data del nuevo componente dialog:\", preData);\n            dialogComponentInput.watch = scopifyMethods(dialogComponentInput.watch || {}, component);\n            dialogComponentInput.computed = scopifyMethods(dialogComponentInput.computed || {}, component);\n            dialogComponentInput.methods = scopifyMethods(dialogComponentInput.methods || {}, component);\n            return preData;\n          },\n          watch: (dialogComponentInput.watch || {}),\n          computed: (dialogComponentInput.computed || {}),\n          methods: {\n            getValue() {\n              this.$trace(`lsw-dialogs.[${componentId}].methods.getValue`, []);\n              return JSON.parse(JSON.stringify(this.value));\n            },\n            accept(solution = undefined, ...args) {\n              this.$trace(`lsw-dialogs.[${componentId}].methods.accept`, [solution, ...args]);\n              if (solution instanceof Event) {\n                return this.$dialogs.resolve(id, this.getValue()).close(id);\n              }\n              return this.$dialogs.resolve(id, typeof solution !== \"undefined\" ? solution : this.getValue()).close(id);\n            },\n            cancel(...args) {\n              this.$trace(\"lsw-dialogs.[${componentId}].methods.cancel\", args);\n              return this.$dialogs.resolve(id, -1).close(id);\n            },\n            abort(error = undefined, ...args) {\n              this.$trace(`lsw-dialogs.[${componentId}].methods.abort`, [error, ...args]);\n              if (solution instanceof Event) {\n                return this.$dialogs.reject(id, new Error(\"Aborted dialog error\")).close(id);\n              }\n              return this.$dialogs.reject(id, error).close(id);\n            },\n            close(...args) {\n              this.$trace(`lsw-dialogs.[${componentId}].methods.close`, args);\n              return this.$dialogs.resolve(id, -2).close(id);\n            },\n            ...(dialogComponentInput.methods || {})\n          }\n        });\n        Define_component: {\n          Vue.component(dialogComponent.name, dialogComponent);\n        }\n        // 1) Este es para el this.$dialogs:\n        const dialogDefinition = Object.assign({}, {\n          ...parametricObject,\n          id,\n          title,\n          name: dialogComponent.name,\n          component: dialogComponent,\n          priority,\n          minimized: false,\n          parentId,\n          created_at,\n          promiser: Promise.withResolvers(),\n        });\n        const dialogInstance = new Dialog(dialogDefinition);\n        // console.log(\"Definición final del dialogo\", dialogInstance);\n        Define_dialog: {\n          this.opened = Object.assign({}, this.opened, {\n            [id]: dialogInstance\n          });\n        }\n        if (typeof this.hookOnOpen === \"function\") {\n          this.hookOnOpen(this.opened[id], id, this);\n        }\n        return this.opened[id].promiser.promise;\n      },\n      resolve(id, solution, ...args) {\n        this.$trace(\"lsw-dialogs.methods.resolve\", [id, solution, ...args]);\n        if (typeof id !== \"string\") {\n          throw new Error(\"Required parameter «id» (argument:1) to be a string on «LswDialogs.resolve»\");\n        }\n        if (!(id in this.opened)) {\n          throw new Error(`Cannot resolve dialog «${id}» because it is not opened on «LswDialogs.resolve»`);\n        }\n        this.opened[id].promiser.resolve(solution);\n        return {\n          close: () => this.close(id)\n        };\n      },\n      reject(id, error, ...args) {\n        this.$trace(\"lsw-dialogs.methods.reject\", [id, error, ...args]);\n        if (typeof id !== \"string\") {\n          throw new Error(\"Required parameter «id» (argument:1) to be a string on «LswDialogs.reject»\");\n        }\n        if (!(id in this.opened)) {\n          throw new Error(`Cannot reject dialog «${id}» because it is not opened on «LswDialogs.reject»`);\n        }\n        this.opened[id].promiser.reject(error);\n        return {\n          close: () => this.close(id)\n        };\n      },\n      close(id, ...args) {\n        this.$trace(\"lsw-dialogs.methods.close\", [id, ...args]);\n        if (typeof id !== \"string\") {\n          throw new Error(\"Required parameter «id» (argument:1) to be a string on «LswDialogs.close»\");\n        }\n        if (!(id in this.opened)) {\n          throw new Error(`Cannot close dialog «${id}» because it is not opened on «LswDialogs.close»`);\n        }\n        let promiseOfDialog = undefined;\n        Undefine_component: {\n          const dialogName = Dialog.fromIdToComponentName(id);\n          delete Vue.options.components[dialogName];\n        }\n        Undefine_dialog: {\n          Solve_promise_if_not_already: {\n            if (this.opened[id].promiser.promise.state === \"pending\") {\n              this.opened[id].promiser.resolve(-3);\n            }\n          }\n          promiseOfDialog = this.opened[id].promiser.promise;\n          delete this.opened[id];\n          this.opened = Object.assign({}, this.opened);\n        }\n        if (typeof this.hookOnClose === \"function\") {\n          this.hookOnClose(id, this);\n        }\n        return promiseOfDialog;\n        // this.$forceUpdate(true);\n      },\n      minimize(id, ...args) {\n        this.$trace(\"lsw-dialogs.methods.minimize\", [id, ...args]);\n        if (typeof id !== \"string\") {\n          throw new Error(\"Required parameter «id» (argument:1) to be a string on «LswDialogs.minimize»\");\n        }\n        if (!(id in this.opened)) {\n          throw new Error(`Cannot minimize dialog «${id}» because it is not opened on «LswDialogs.minimize»`);\n        }\n        this.opened[id].minimized = true;\n        this._refreshMinimizedLength(this.opened);\n      },\n      minimizeAll() {\n        this.$trace(\"lsw-dialogs.methods.minimizeAll\");\n        for(let id in this.opened) {\n          this.opened[id].minimized = true;\n        }\n        Also_main_tab_if_exists: {\n          const windowsViewer = this?.$lsw?.windowsViewer;\n          if(windowsViewer) {\n            windowsViewer.hide();\n          }\n        }\n        this._refreshMinimizedLength(this.opened);\n      },\n      maximize(id, ...args) {\n        this.$trace(\"lsw-dialogs.methods.maximize\", [id, ...args]);\n        if (typeof id !== \"string\") {\n          throw new Error(\"Required parameter «id» (argument:1) to be a string on «LswDialogs.maximize»\");\n        }\n        if (!(id in this.opened)) {\n          console.log(this.opened);\n          console.log(id);\n          console.log(Object.keys(this.opened)[0] === id);\n          throw new Error(`Cannot maximize dialog «${id}» because it is not opened on «LswDialogs.maximize»`);\n        }\n        Iterating_dialogs:\n        for (let dialogId in this.opened) {\n          if (id === dialogId) {\n            continue Iterating_dialogs;\n          }\n          const dialogData = this.opened[dialogId];\n          const currentPriority = parseInt(dialogData.priority);\n          this.opened[dialogId].priority = currentPriority - 1;\n        }\n        this.opened[id].priority = 500;\n        this.opened[id].minimized = false;\n        this._refreshMinimizedLength();\n      },\n      _refreshMinimizedLength(newValue = this.opened, ...args) {\n        this.$trace(\"lsw-dialogs.methods._refreshMinimizedLength\", []);\n        this.notMinimizedLength = Object.keys(newValue).reduce((out, k) => {\n          const v = newValue[k];\n          if (v.minimized === false) {\n            out++;\n          }\n          return out;\n        }, 0);\n        this.$forceUpdate(true);\n      },\n      goHome(...args) {\n        this.$trace(\"lsw-dialogs.methods.goHome\", []);\n        this.$window.LswWindows.show();\n      },\n      onOpen(callback, ...args) {\n        this.$trace(\"lsw-dialogs.methods.onOpen\", []);\n        this.hookOnOpen = callback;\n      },\n      onClose(callback, ...args) {\n        this.$trace(\"lsw-dialogs.methods.onClose\", []);\n        this.hookOnClose = callback;\n      }\n    },\n    mounted(...args) {\n      this.$trace(\"lsw-dialogs.mounted\", []);\n      if(Vue.prototype.$dialogs) {\n        throw new Error(\"Cannot install «lsw-dialogs» as global on «Vue.prototype.$dialogs» because it is another instance mounted on «LswDialogs.mounted»\");\n      }\n      Vue.prototype.$dialogs = this;\n      Vue.prototype.$lsw.dialogs = this;\n      window.LswDialogs = this;\n      // console.log(\"[*] LswDialogs mounted.\");\n    }\n  });\n",
      "$code.label": "LswDialogs API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-dialogs/lsw-dialogs.js",
      "$location": {
        "start": {
          "offset": 3492,
          "line": 103,
          "column": 1
        },
        "end": {
          "offset": 3566,
          "line": 104,
          "column": 1
        }
      },
      "OK": "El ID debería ser único o no se abrirán las duplicadas.",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-dialogs/lsw-dialogs.js",
      "$location": {
        "start": {
          "offset": 3566,
          "line": 104,
          "column": 1
        },
        "end": {
          "offset": 3636,
          "line": 105,
          "column": 1
        }
      },
      "PERO": "Pero por algo lo tenía así también y no recuerdo.",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-emojis-picker/lsw-emojis-picker.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 100,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswEmojisPicker component",
      "$code": "window.ALL_EMOJIS = LswUtils.splitByUnicode(\"✢✣✤✥✦✧★☆✯✡︎✩✪✫✬✭✮✶✷✵✸✹→⇒⟹⇨⇾➾⇢☛☞➔➜➙➛➝➞♠︎♣︎♥︎♦︎♤♧♡♢♚♛♜♝♞♟♔♕♖♗♘♙⚀⚁⚂⚃⚄⚅🂠⚈⚉⚆⚇𓀀𓀁𓀂𓀃𓀄𓀅𓀆𓀇𓀈𓀉𓀊𓀋𓀌𓀍𓀎𓀏𓀐𓀑𓀒𓀓𓀔𓀕𓀖𓀗𓀘𓀙𓀚𓀛𓀜𓀝😀😃😄😁😆😅😂🤣🥲🥹☺️😊😇🙂🙃😉😌😍🥰😘😗😙😚😋😛😝😜🤪🤨🧐🤓😎🥸🤩🥳🙂‍↕️😏😒🙂‍↔️😞😔😟😕🙁☹️😣😖😫😩🥺😢😭😮‍💨😤😠😡🤬🤯😳🥵🥶😱😨😰😥😓🫣🤗🫡🤔🫢🤭🤫🤥😶😶‍🌫️😐😑😬🫨🫠🙄😯😦😧😮😲🥱😴🤤😪😵😵‍💫🫥🤐🥴🤢🤮🤧😷🤒🤕🤑🤠😈👿👹👺🤡💩👻💀☠️👽👾🤖🎃😺😸😹😻😼😽🙀😿😾👋🤚🖐✋🖖👌🤌🤏✌️🤞🫰🤟🤘🤙🫵🫱🫲🫸🫷🫳🫴👈👉👆🖕👇☝️👍👎✊👊🤛🤜👏🫶🙌👐🤲🤝🙏✍️💅🤳💪🦾🦵🦿🦶👣👂🦻👃🫀🫁🧠🦷🦴👀👁👅👄🫦💋🩸 🐶🐱🐭🐹🐰🦊🐻🐼🐻‍❄️🐨🐯🦁🐮🐷🐽🐸🐵🙈🙉🙊🐒🐔🐧🐦🐦‍⬛🐤🐣🐥🦆🦅🦉🦇🐺🐗🐴🦄🐝🪱🐛🦋🐌🐞🐜🪰🪲🪳🦟🦗🕷🕸🦂🐢🐍🦎🦖🦕🐙🦑🦐🦞🦀🪼🪸🐡🐠🐟🐬🐳🐋🦈🐊🐅🐆🦓🫏🦍🦧🦣🐘🦛🦏🐪🐫🦒🦘🦬🐃🐂🐄🐎🐖🐏🐑🦙🐐🦌🫎🐕🐩🦮🐕‍🦺🐈🐈‍⬛🪽🪶🐓🦃🦤🦚🦜🦢🪿🦩🕊🐇🦝🦨🦡🦫🦦🦥🐁🐀🐿🦔🐾🐉🐲🐦‍🔥🌵🎄🌲🌳🌴🪹🪺🪵🌱🌿☘️🍀🎍🪴🎋🍃🍂🍁🍄🍄‍🟫🐚🪨🌾💐🌷🪷🌹🥀🌺🌸🪻🌼🌻🌞🌝🌛🌜🌚🌕🌖🌗🌘🌑🌒🌓🌔🌙🌎🌍🌏🪐💫⭐️🌟✨⚡️☄️💥🔥🌪🌈☀️🌤⛅️🌥☁️🌦🌧⛈🌩🌨❄️☃️⛄️🌬💨💧💦🫧☔️☂️🌊🍏🍎🍐🍊🍋🍋‍🟩🍌🍉🍇🍓🫐🍈🍒🍑🥭🍍🥥🥝🍅🍆🥑🥦🫛🥬🥒🌶🫑🌽🥕🫒🧄🧅🫚🥔🍠🫘🥐🥯🍞🥖🥨🧀🥚🍳🧈🥞🧇🥓🥩🍗🍖🦴🌭🍔🍟🍕🫓🥪🥙🧆🌮🌯🫔🥗🥘🫕🥫🍝🍜🍲🍛🍣🍱🥟🦪🍤🍙🍚🍘🍥🥠🥮🍢🍡🍧🍨🍦🥧🧁🍰🎂🍮🍭🍬🍫🍿🍩🍪🌰🥜🍯🥛🍼🫖☕️🍵🧃🥤🧋🫙🍶🍺🍻🥂🍷🫗🥃🍸🍹🧉🍾🧊🥄🍴🍽🥣🥡🥢🧂⚽️🏀🏈⚾️🥎🎾🏐🏉🥏🎱🪀🏓🏸🏒🏑🥍🏏🪃🥅⛳️🪁🏹🎣🤿🥊🥋🎽🛹🛼🛷⛸🥌🎿🏆🥇🥈🥉🏅🎖🏵🎗🎫🎟🎪🤹🤹‍♂️🤹‍♀️🎭🩰🎨🎬🎤🎧🎼🎹🥁🪘🪇🎷🎺🪗🎸🪕🎻🪈🎲♟🎯🎳🎮🎰🧩🚗🚕🚙🚌🚎🏎🚓🚑🚒🚐🛻🚚🚛🚜🦯🦽🦼🛴🚲🛵🏍🛺🚨🚔🚍🚘🚖🛞🚡🚠🚟🚃🚋🚞🚝🚄🚅🚈🚂🚆🚇🚊🚉✈️🛫🛬🛩💺🛰🚀🛸🚁🛶⛵️🚤🛥🛳⛴🚢⚓️🛟🪝⛽️🚧🚦🚥🚏🗺🗿🗽🗼🏰🏯🏟🎡🎢🛝🎠⛲️⛱🏖🏝🏜🌋⛰🏔🗻🏕⛺️🛖🏠🏡🏘🏚🏗🏭🏢🏬🏣🏤🏥🏦🏨🏪🏫🏩💒🏛⛪️🕌🕍🛕🕋⛩🛤🛣🗾🎑🏞🌅🌄🌠🎇🎆🌇🌆🏙🌃🌌🌉🌁⌚️📱📲💻⌨️🖥🖨🖱🖲🕹🗜💽💾💿📀📼📷📸📹🎥📽🎞📞☎️📟📠📺📻🎙🎚🎛🧭⏱⏲⏰🕰⌛️⏳📡🔋🪫🔌💡🔦🕯🪔🧯🛢🛍️💸💵💴💶💷🪙💰💳💎⚖️🪮🪜🧰🪛🔧🔨⚒🛠⛏🪚🔩⚙️🪤🧱⛓⛓️‍💥🧲🔫💣🧨🪓🔪🗡⚔️🛡🚬⚰️🪦⚱️🏺🔮📿🧿🪬💈⚗️🔭🔬🕳🩹🩺🩻🩼💊💉🩸🧬🦠🧫🧪🌡🧹🪠🧺🧻🚽🚰🚿🛁🛀🧼🪥🪒🧽🪣🧴🛎🔑🗝🚪🪑🛋🛏🛌🧸🪆🖼🪞🪟🛍🛒🎁🎈🎏🎀🪄🪅🎊🎉🪩🎎🏮🎐🧧✉️📩📨📧💌📥📤📦🏷🪧📪📫📬📭📮📯📜📃📄📑🧾📊📈📉🗒🗓📆📅🗑🪪📇🗃🗳🗄📋📁📂🗂🗞📰📓📔📒📕📗📘📙📚📖🔖🧷🔗📎🖇📐📏🧮📌📍✂️🖊🖋✒️🖌🖍📝✏️🔍🔎🔏🔐🔒🔓❤️🩷🧡💛💚💙🩵💜🖤🩶🤍🤎❤️‍🔥❤️‍🩹💔❣️💕💞💓💗💖💘💝💟☮️✝️☪️🪯🕉☸️✡️🔯🕎☯️☦️🛐⛎♈️♉️♊️♋️♌️♍️♎️♏️♐️♑️♒️♓️🆔⚛️🉑☢️☣️📴📳🈶🈚️🈸🈺🈷️✴️🆚💮🉐㊙️㊗️🈴🈵🈹🈲🅰️🅱️🆎🆑🅾️🆘❌⭕️🛑⛔️📛🚫💯💢♨️🚷🚯🚳🚱🔞📵🚭❗️❕❓❔‼️⁉️🔅🔆〽️⚠️🚸🔱⚜️🔰♻️✅🈯️💹❇️✳️❎🌐💠Ⓜ️🌀💤🏧🚾♿️🅿️🛗🈳🈂️🛂🛃🛄🛅🚹🚺🚼⚧🚻🚮🎦🛜📶🈁🔣ℹ️🔤🔡🔠🆖🆗🆙🆒🆕🆓0️⃣1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟🔢#️⃣*️⃣⏏️▶️⏸⏯⏹⏺⏭⏮⏩⏪⏫⏬◀️🔼🔽➡️⬅️⬆️⬇️↗️↘️↙️↖️↕️↔️↪️↩️⤴️⤵️🔀🔁🔂🔄🔃🎵🎶➕➖➗✖️🟰♾💲💱™️©️®️〰️➰➿🔚🔙🔛🔝🔜✔️☑️🔘🔴🟠🟡🟢🔵🟣⚫️⚪️🟤🔺🔻🔸🔹🔶🔷🔳🔲▪️▫️◾️◽️◼️◻️🟥🟧🟨🟩🟦🟪⬛️⬜️🟫🔈🔇🔉🔊🔔🔕📣📢💬💭♠️♣️♥️♦️🃏🎴🕐🕑🕒🕓🕔🕕🕖🕗🕘🕙🕚🕛🕜🕝🕞🕟🕠🕡🕢🕣🕤🕥🕦🕧\").reverse();\n\nVue.component(\"LswEmojisPicker\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-emojis-picker.data\");\n    return {\n      pickedText: \"\",\n      allEmojis: window.ALL_EMOJIS,\n    };\n  },\n  methods: {\n    pickEmoji(emoji) {\n      this.$trace(\"lsw-emojis-picker.methods.pickEmoji\");\n      this.pickedText += emoji;\n    },\n    copyText() {\n      this.$trace(\"lsw-emojis-picker.methods.copyText\");\n      LswUtils.copyToClipboard(this.pickedText);\n      this.$lsw.toasts.send({\n        title: \"Emojis copiados\",\n        text: \"Los emojis están ahora en tu ctrl + v\",\n      });\n    },\n    clearText() {\n      this.$trace(\"lsw-emojis-picker.methods.clearText\");\n      this.pickedText = \"\";\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-emojis-picker.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswEmojisPicker API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-error-box/lsw-error-box.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 92,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswErrorBox component",
      "$code": "Vue.component(\"LswErrorBox\", {\n  template: $template,\n  props: {\n    error: {\n      type: [Object, Boolean],\n      default: () => false,\n    },\n    onClearError: {\n      type: [Function, Boolean],\n      default: () => false,\n    },\n    context: {\n      type: String,\n      default: () => {},\n    }\n  },\n  data() {\n    this.$trace(\"lsw-error-box.data\");\n    return {\n      isShowingTrace: false,\n    };\n  },\n  methods: {\n    toggleTrace() {\n      this.$trace(\"lsw-error-box.methods.toggleTrace\");\n      this.isShowingTrace = !this.isShowingTrace;\n    },\n    clearError() {\n      this.$trace(\"lsw-error-box.methods.clearError\");\n      this.onClearError();\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-error-box.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswErrorBox API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-event-tracker/lsw-event-tracker.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 100,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswEventTracker component",
      "$code": "Vue.component(\"LswEventTracker\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-event-tracker.data\");\n    return {\n      isLoaded: false,\n      isSearching: true,\n      allTrackables: [],\n      trackables: false,\n      searchText: \"\",\n      digestTimeout: 1000,\n      digestTimeoutId: undefined,\n    };\n  },\n  methods: {\n    async loadTrackables() {\n      this.$trace(\"lsw-event-tracker.methods.loadTrackables\");\n      this.isLoaded = false;\n      try {\n        let trackableIds = undefined;\n        Get_trackables: {\n          trackableIds = await this.$lsw.fs.evaluateAsDotenvListFileOrReturn(\"/kernel/settings/trackables.env\", []);\n        }\n        let trackedData = {};\n        Count_trackables: {\n          const accionesTrackeadas = await this.$lsw.database.selectMany(\"Accion\", it => {\n            return trackableIds.indexOf(it.en_concepto) !== -1;\n          });\n          for(let indexTrackables=0; indexTrackables<trackableIds.length; indexTrackables++) {\n            const trackableId = trackableIds[indexTrackables];\n            trackedData[trackableId] = [];\n            for(let indexTrackeadas=0; indexTrackeadas<accionesTrackeadas.length; indexTrackeadas++) {\n              const accion = accionesTrackeadas[indexTrackeadas];\n              if(accion.en_concepto === trackableId) {\n                trackedData[trackableId].push(accion);\n              }\n            }\n          }\n        }\n        this.allTrackables = trackedData;\n        this.digestOutput();\n      } catch (error) {\n        this.$lsw.toasts.sendError(error);\n      }\n    },\n    digestDelayed() {\n      this.$trace(\"lsw-event-tracker.methods.digestDelayed\");\n      clearTimeout(this.digestTimeoutId);\n      setTimeout(() => {\n        this.digestOutput();\n      }, this.digestTimeout);\n    },\n    digestOutput() {\n      this.$trace(\"lsw-event-tracker.methods.digestOutput\");\n      clearTimeout(this.digestTimeoutId);\n      this.isSearching = true;\n      setTimeout(() => {\n        if(this.searchText.trim() === \"\") {\n          this.trackables = this.allTrackables;\n        } else {\n          this.trackables = LswUtils.filterObject(this.allTrackables, (key, val) => {\n            return key.toLowerCase().indexOf(this.searchText.toLowerCase()) !== -1;\n          });\n        }\n        this.isLoaded = true;\n        this.isSearching = false;\n      }, 0);\n    },\n    editTrackables() {\n      this.$trace(\"lsw-event-tracker.methods.editTrackables\");\n      this.$lsw.dialogs.open({\n        title: \"Editar trackeables\",\n        template: `\n          <lsw-filesystem-explorer\n            opened-by=\"/kernel/settings/trackables.env\"\n            :absolute-layout=\"true\"\n          />\n        `,\n      });\n    },\n    async deleteTrackable(trackableId) {\n      this.$trace(\"lsw-event-tracker.methods.deleteTrackable\");\n      const eventos = await this.$lsw.database.selectMany(\"Accion\", it => {\n        return (it.tiene_estado === \"trackeada\") && (it.en_concepto === trackableId);\n      });\n      const eventosOrdenados = eventos.sort((e1, e2) => {\n        return e1.tiene_inicio > e2.tiene_inicio ? -1 : 1;\n      });\n      const evento = eventosOrdenados[0] || false;\n      if(!evento) {\n        return;\n      }\n      const respuesta = await this.$lsw.dialogs.open({\n        title: \"Eliminar último evento trackeada\",\n        template: `\n          <div class=\"pad_1\">\n            <div>¿Seguro que quieres eliminar el evento trackeada?</div>\n            <pre class=\"codeblock\">{{ evento }}</pre>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini danger_button\"\n                  v-on:click=\"() => accept(true)\">Eliminar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\"\n                  v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: { data: { evento } }\n      });\n      if(respuesta !== true) {\n        console.log(respuesta);\n        return;\n      }\n      await this.$lsw.database.delete(\"Accion\", evento.id);\n      this.$lsw.toasts.send({\n        title: \"Evento eliminado correctamente\",\n        text: \"El último evento asociado fue eliminado\",\n      });\n      this.loadTrackables();\n    },\n    async addTrackableWithComment(trackableId) {\n      this.$trace(\"lsw-event-tracker.methods.addTrackableWithComment\");\n      const comentario = await this.$lsw.dialogs.open({\n        title: \"Comentario adjunto a evento\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"pad_bottom_1\">\n              Comentario a adjuntar en el evento:\n            </div>\n            <div class=\"pad_bottom_1\">\n              <textarea class=\"width_100\" v-model=\"value\" spellcheck=\"false\" />\n            </div>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Añadir trackeo</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `\n      });\n      if(typeof comentario !== \"string\") return;\n      await this.$lsw.database.insert(\"Accion\", {\n        en_concepto: trackableId,\n        tiene_estado: \"trackeada\",\n        tiene_inicio: LswTimer.utils.fromDateToDatestring(new Date()),\n        tiene_duracion: \"1min\",\n        tiene_parametros: \"\",\n        tiene_resultados: \"\",\n        tiene_comentarios: comentario,\n      });\n      this.$lsw.toasts.send({\n        title: \"Evento añadido correctamente\",\n        text: \"Con comentario adjunto\",\n      });\n      this.loadTrackables();\n    },\n    async addTrackable(trackableId) {\n      this.$trace(\"lsw-event-tracker.methods.addTrackable\");\n      await this.$lsw.database.insert(\"Accion\", {\n        en_concepto: trackableId,\n        tiene_estado: \"trackeada\",\n        tiene_inicio: LswTimer.utils.fromDateToDatestring(new Date()),\n        tiene_duracion: \"1min\",\n        tiene_parametros: \"\",\n        tiene_resultados: \"\",\n        tiene_comentarios: \"\",\n      });\n      this.loadTrackables();\n      this.$lsw.toasts.send({\n        title: \"Evento añadido correctamente\",\n        text: \"Sin comentario adjunto\",\n      });\n    },\n    async insertTrackable() {\n      this.$trace(\"lsw-event-tracker.methods.insertTrackable\");\n      const trackableId = this.searchText;\n      if(trackableId.trim() === \"\") {\n        return;\n      }\n      const trackableIds = await this.$lsw.fs.evaluateAsDotenvListFileOrReturn(\"/kernel/settings/trackables.env\", []);\n      const pos = trackableIds.indexOf(trackableId);\n      if(pos !== -1) {\n        this.$lsw.toasts.send({\n          title: \"Este trackable ya existe\",\n          text: \"No se insertó porque ya existe.\",\n        });\n      } else {\n        const previousContent = await this.$lsw.fs.read_file(\"/kernel/settings/trackables.env\");\n        const lastContent = previousContent.trim() + \"\\n\" + trackableId;\n        await this.$lsw.fs.write_file(\"/kernel/settings/trackables.env\", lastContent);\n        this.$lsw.toasts.send({\n          title: \"Trackable insertado correctamente\",\n          text: \"\",\n        });\n        this.loadTrackables();\n      }\n    },\n    clearSearchText() {\n      this.$trace(\"lsw-event-tracker.watch.clearSearchText\");\n      this.searchText = \"\";\n      this.digestOutput();\n    }\n  },\n  watch: {\n    searchText() {\n      this.$trace(\"lsw-event-tracker.watch.searchText\");\n      this.digestDelayed();\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-event-tracker.mounted\");\n    this.loadTrackables();\n  },\n  unmounted() {\n    this.$trace(\"lsw-event-tracker.unmounted\");\n    \n  }\n});\n",
      "$code.label": "LswEventTracker API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-fast-datetime-control/lsw-fast-datetime-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 173,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswFastDateControl API » LswFastDateControl component",
      "$code": "Vue.component(\"LswFastDatetimeControl\", {\n  template: $template,\n  props: {\n    mode: {\n      type: String,\n      default: () => \"datetime\", // can also be: \"date\"\n    },\n    initialValue: {\n      type: [Date, String],\n      default: null,\n    },\n    onChangeDate: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  data() {\n    this.$trace(\"lsw-fast-datetime-control.data\");\n    return {\n      value: this.adaptDate(this.initialValue || new Date()),\n      isEditable: false,\n    };\n  },\n  methods: {\n    adaptDate(dateInput) {\n      this.$trace(\"lsw-fast-date-control.methods.adaptDate\");\n      if(dateInput instanceof Date) {\n        return LswTimer.utils.fromDateToDatestring(dateInput, this.mode === \"date\");\n      }\n      return dateInput;\n    },\n    getValue() {\n      this.$trace(\"lsw-fast-date-control.methods.getValue\");\n      return this.value;\n    },\n    toggleEditable() {\n      this.$trace(\"lsw-fast-datetime-control.methods.toggleEditable\");\n      this.isEditable = !this.isEditable;\n    },\n    showEditable() {\n      this.$trace(\"lsw-fast-datetime-control.methods.showEditable\");\n      this.isEditable = true;\n    },\n    hideEditable() {\n      this.$trace(\"lsw-fast-datetime-control.methods.hideEditable\");\n      this.isEditable = false;\n    },\n    setValue(v) {\n      this.$trace(\"lsw-fast-datetime-control.methods.propagateValue\");\n      this.value = this.adaptDate(v);\n      this.onChangeDate(this.value, this);\n      this.hideEditable();\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-fast-datetime-control.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswFastDateControl API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-goals-records-viewer/lsw-goals-records-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 112,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswGoalsRecordsViewer component",
      "$code": "Vue.component(\"LswGoalsRecordsViewer\", {\n  template: $template,\n  props: {\n\n  },\n  data() {\n    this.$trace(\"lsw-goals-records-viewer.data\");\n    return {\n      isLoaded: false,\n      isShowingGoals: true,\n      records: false,\n      selectedGoals: [],\n      availableGoals: [],\n    };\n  },\n  methods: {\n    async loadRecords() {\n      this.$trace(\"lsw-goals-records-viewer.methods.loadRecords\");\n      this.isLoaded = false;\n      try {\n        const recordsFiles = await this.$lsw.fs.read_directory(\"/kernel/goals/records\");\n        const recordDays = Object.keys(recordsFiles).map(file => file.replace(/\\.json$/g, \"\"));\n        const allRecords = [];\n        const allGoalConcepts = [];\n        const errors = [];\n        for (let index = 0; index < recordDays.length; index++) {\n          const recordDay = recordDays[index];\n          try {\n            const recordPath = `/kernel/goals/records/${recordDay}.json`;\n            const recordJson = await this.$lsw.fs.read_file(recordPath);\n            const recordData = JSON.parse(recordJson);\n            allRecords.push(recordData);\n            for(let indexGoals=0; indexGoals<recordData.goals.length; indexGoals++) {\n              const goal = recordData.goals[indexGoals];\n              try {\n                const goalId = goal.originalConcept;\n                const goalPos = allGoalConcepts.indexOf(goalId);\n                if(goalPos === -1) {\n                  allGoalConcepts.push(goalId);\n                }\n              } catch (error) {\n                // @BADLUCK\n              }\n            }\n          } catch (error) {\n            console.log(error);\n            error.message = `(${recordDay}) ` + error.message;\n            error.fileOrigin = recordDay;\n            errors.push(error);\n          }\n        }\n        if (errors.length) {\n          console.log(errors);\n          this.$lsw.toasts.send({\n            title: `Hubo ${errors.length} errores cargando los records`,\n            text: \"Errores en: \" + errors.map(err => err.fileOrigin).join(\", \"),\n          });\n          return;\n        }\n        this.records = allRecords;\n        this.availableGoals = allGoalConcepts;\n      } catch (error) {\n        console.log(error);\n      }\n      this.isLoaded = true;\n    },\n    toggleGoals() {\n      this.$trace(\"lsw-goals-records-viewer.methods.toggleGoals\");\n      this.isShowingGoals = !this.isShowingGoals;\n    },\n    toggleAllSelectedGoals() {\n      this.$trace(\"lsw-goals-records-viewer.methods.toggleAllSelectedGoals\");\n      if(this.selectedGoals.length) {\n        this.selectedGoals = [];\n      } else {\n        this.selectedGoals = [].concat(this.availableGoals);\n      }\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-goals-records-viewer.mounted\");\n    this.loadRecords();\n  },\n  unmounted() {\n    this.$trace(\"lsw-goals-records-viewer.unmounted\");\n  }\n});\n",
      "$code.label": "LswGoalsRecordsViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-goals-viewer/lsw-goals-api.js",
      "$location": {
        "start": {
          "offset": 280,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 356,
          "line": 15,
          "column": 1
        }
      },
      "section": "Lsw Goals API » LswGoals class",
      "$code": "\n  const LocalUtilities = class {\n\n  };\n\n  const LswGoals = class {\n\n    static COLOR_GAMA_1 = {\n      SUSPENSO: \"red\",\n      INSUFICIENTE: \"#e87489\",\n      SUFICIENTE: \"#5353bf\",\n      NOTABLE: \"orange\",\n      EXCELENTE: \"yellow\",\n      SOBRESALIENTE: \"lime\",\n    };\n\n    static COLOR_GAMA_2 = {\n      SUSPENSO: \"#D32F2F\",\n      INSUFICIENTE: \"#F57C00\",\n      SUFICIENTE: \"#FBC02D\",\n      NOTABLE: \"#C0CA33\",\n      EXCELENTE: \"#7CB342\",\n      SOBRESALIENTE: \"#388E3C\",\n    };\n\n    static COLOR_GAMA_3 = {\n      SUSPENSO: \"#c6282866\",\n      INSUFICIENTE: \"#ef6c0066\",\n      SUFICIENTE: \"#ffe30066\",\n      NOTABLE: \"#29b6f666\",\n      EXCELENTE: \"#00897b66\",\n      SOBRESALIENTE: \"#66bb6a66\",\n    };\n\n    static COLOR = this.COLOR_GAMA_3;\n\n    static COLOR_MEANING = {\n      [this.COLOR.SUSPENSO]: \"SUSPENSO\",\n      [this.COLOR.INSUFICIENTE]: \"INSUFICIENTE\",\n      [this.COLOR.SUFICIENTE]: \"SUFICIENTE\",\n      [this.COLOR.NOTABLE]: \"NOTABLE\",\n      [this.COLOR.EXCELENTE]: \"EXCELENTE\",\n      [this.COLOR.SOBRESALIENTE]: \"SOBRESALIENTE\",\n    };\n\n    static async getGoalsReport(someDate = new Date()) {\n      Vue.prototype.$trace(\"lsw-goals-viewer.methods.getGoalsReport\");\n      let originalGoals = undefined;\n      // @HISTORICAL:\n      Previous_goals_setter: {\n        break Previous_goals_setter;\n        const parsedLinesPromise = Vue.prototype.$lsw.fs.evaluateAsDotenvListFileOrReturn(\"/kernel/settings/goals.env\", []);\n        const parsedLines = await parsedLinesPromise;\n        // 1. Get original goals:\n        const previousOriginalGoals = parsedLines.map(line => {\n          const [concept, condition = \"> 0\", urgency = \"0\"] = line.split(/\\|/g).map(item => {\n            return item.trim();\n          });\n          return { line, concept, condition, urgency };\n        });\n        originalGoals = previousOriginalGoals;\n      }\n      // @CURRENT:\n      Current_goals_setter: {\n        originalGoals = await Vue.prototype.$lsw.fs.evaluateAsWeekFileOrReturn(\"/kernel/goals/goals.week\", []);\n      }\n      // 2. Get today's completed actions:\n      const todayCompletedActions = await this.getSomeDayActions(someDate, false, \"completada\");\n      const formattedGoals = [];\n      const insertedGoals = [];\n      // 3. Expand goals:\n      Iterating_goals:\n      for (let indexGoal = 0; indexGoal < originalGoals.length; indexGoal++) {\n        try {\n          const originalGoal = originalGoals[indexGoal];\n          const {\n            type: goalType,\n            concept,\n            condition,\n            urgency,\n            from: goalBegin,\n            to: goalEnd\n          } = originalGoal;\n          const isRequire = goalType === \"REQ\";\n          const isSet = goalType === \"SET\";\n          const datestring = LswTimer.utils.fromDateToDatestring(someDate);\n          // Filtros de fecha:\n          if (goalBegin !== \"*\") {\n            if (datestring < goalBegin) {\n              continue Iterating_goals;\n            }\n          }\n          if (goalEnd !== \"*\") {\n            if (datestring > goalEnd) {\n              continue Iterating_goals;\n            }\n          }\n          // Aplica cambios en cada caso:\n          if (isSet) {\n            // Solo si es en un rango de 20 días antes o después:\n            const today = new Date();\n            const maxBefore = new Date(today);\n            maxBefore.setDate(maxBefore.getDate() - 1);\n            const maxLater = new Date(today);\n            maxLater.setDate(maxLater.getDate() + 1);\n            const isInRange = (someDate > maxBefore) && (someDate < maxLater);\n            if(!isInRange) {\n              continue Iterating_goals;\n            }\n            const duration = originalGoal.duration || \"1h\";\n            const hour = originalGoal.hour || \"00\";\n            const minute = originalGoal.minute || \"00\";\n            const weekday = originalGoal.weekday;\n            const isAnyWeekday = weekday === \"*\";\n            const currentWeekday = this.fromDateToWeekday(someDate);\n            if(!isAnyWeekday && (currentWeekday !== weekday)) {\n              continue Iterating_goals;\n            }\n            const currDatestring = LswTimer.utils.fromDateToDatestring(someDate, true);\n            const fullDatestring = `${currDatestring} ${hour}:${minute}`;\n            const matchedAcciones = await Vue.prototype.$lsw.database.select(\"Accion\", acc => {\n              const sameConcept = acc.en_concepto === concept;\n              const sameMinute = acc.tiene_inicio.startsWith(fullDatestring);\n              return sameConcept && sameMinute;\n            });\n            if(matchedAcciones.length === 1) {\n              continue Iterating_goals;\n            }\n            No_haremos_el_insert_aqui: {\n              const isToday = LswTimer.utils.areSameDayDates(today, someDate);\n              if(!isToday) {\n                break No_haremos_el_insert_aqui;\n              }\n              await Vue.prototype.$lsw.database.insert(\"Accion\", {\n                en_concepto: concept,\n                tiene_estado: \"pendiente\",\n                tiene_inicio: fullDatestring,\n                tiene_duracion: duration,\n                tiene_parametros: \"[*goal]\",\n                tiene_resultados: \"\",\n                tiene_comentarios: \"\",\n              });\n              insertedGoals.push(`${concept}@${fullDatestring}`);\n            }\n            continue Iterating_goals;\n          } else if (isRequire) {\n            const formattedGoal = {};\n            const formattedConcept = this.formatConcept(concept);\n            const formattedCondition = this.formatCondition(condition, formattedConcept);\n            const formattedUrgency = this.formatUrgency(urgency);\n            formattedGoal.concept = formattedConcept;\n            Object.assign(formattedGoal, formattedCondition(todayCompletedActions));\n            formattedGoal.urgency = formattedUrgency;\n            formattedGoals.push(formattedGoal);\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n      const sortedGoals = [].concat(formattedGoals).sort((g1, g2) => {\n        try {\n          const u1 = g1.urgency || 0;\n          const u2 = g2.urgency || 0;\n          const c1 = g1.filledAsint || 0;\n          const c2 = g2.filledAsint || 0;\n          const g1over = c1 > 100;\n          const g2over = c2 > 100;\n          if (g2over) return -1;\n          if (g1over) return 1;\n          if (u1 > u2) return -1;\n          if (u1 < u2) return 1;\n          if (c1 < c2) return -1;\n          if (c1 > c2) return 1;\n          return 0;\n        } catch (error) {\n          console.log(error);\n        }\n      });\n      if(insertedGoals.length) {\n        Vue.prototype.$lsw.toasts.debug(insertedGoals);\n      }\n      return {\n        goals: sortedGoals,\n        actions: todayCompletedActions\n      };\n    }\n\n    static fromDateToWeekday(date) {\n      const weekdayNum = date.getDay();\n      if(weekdayNum === 0) {\n        return \"dom\";\n      } else if(weekdayNum === 1) {\n        return \"lun\";\n      } else if(weekdayNum === 2) {\n        return \"mar\";\n      } else if(weekdayNum === 3) {\n        return \"mie\";\n      } else if(weekdayNum === 4) {\n        return \"jue\";\n      } else if(weekdayNum === 5) {\n        return \"vie\";\n      } else if(weekdayNum === 6) {\n        return \"sab\";\n      }\n    }\n\n    static $appliesRange(rangeStart, rangeEnd, date) {\n      Vue.prototype.$trace(\"lsw-goals-viewer.methods.$appliesRange\");\n      if (rangeStart === \"*\") {\n        if (rangeEnd === \"*\") {\n          return true;\n        } else {\n          return rangeEnd >= date;\n        }\n      } else if (rangeStart <= date) {\n        if (rangeEnd === \"*\") {\n          return true;\n        } else {\n          return rangeEnd >= date;\n        }\n      }\n      return true;\n    }\n\n    static formatConcept(txt) {\n      return txt;\n    }\n\n    static formatCondition(originalTxt, concept) {\n      const isMin = originalTxt.startsWith(\">\");\n      const op = originalTxt.trim().match(/(\\<|\\>)(=)?/g);\n      const opCorrected = op.length === 1 ? op + \"=\" : op;\n      const txt = originalTxt.replace(/(\\<|\\>)(=)?/g, \"\")\n      const isTimes = this.isConditionByTimes(txt);\n      const isDuration = this.isConditionByDuration(txt);\n      if ((!isTimes) && (!isDuration)) {\n        throw new Error(`Condition «${txt}» must be a number or a durationstring on «LswGoals.formatCondition»`);\n      }\n      const referenceValue = isTimes ? parseInt(txt) : LswTimer.utils.fromDurationstringToMilliseconds(txt);\n      return completedActions => {\n        const conclusion = {};\n        conclusion.type = isTimes ? \"by times\" : isDuration ? \"by duration\" : undefined;\n        conclusion.expectedAs = isMin ? \"minimum\" : \"maximum\";\n        conclusion.expectedAsAbbr = isMin ? \"min\" : \"max\";\n        const matchedActions = [];\n        Collect_matched_actions:\n        for (let index = 0; index < completedActions.length; index++) {\n          const acc = completedActions[index];\n          const sameConcept = acc.en_concepto === concept;\n          const isCompleted = acc.tiene_estado === \"completada\"; // Redundante, pero bueno.\n          if (sameConcept && isCompleted) {\n            matchedActions.push(acc);\n          }\n        }\n        Expand_data: {\n          conclusion.currentTimes = matchedActions.length;\n          conclusion.currentDurationInms = matchedActions.reduce((total, acc) => {\n            try {\n              total += LswTimer.utils.fromDurationstringToMilliseconds(acc.tiene_duracion || \"0min\");\n            } catch (error) {\n              console.log(error);\n            }\n            return total;\n          }, 0);\n          conclusion.currentDuration = LswTimer.utils.fromMillisecondsToDurationstring(conclusion.currentDurationInms) || \"0min\";\n        }\n        Apply_proper_filters: {\n          if (isTimes) {\n            const expectedTimes = referenceValue;\n            conclusion.expectedTimes = expectedTimes;\n            const evaluableSource = `${conclusion.currentTimes} ${opCorrected} ${expectedTimes}`;\n            console.log(\"[*] Evaluating JavaScript for condition: \", evaluableSource);\n            conclusion.filledAsint = Math.round(100 * (conclusion.currentTimes / conclusion.expectedTimes));\n            conclusion.filled = conclusion.filledAsint + \"%\";\n            Specific_for_time_cases: {\n              conclusion.missingTimes = conclusion.expectedTimes - conclusion.currentTimes;\n            }\n            conclusion.missingAsint = 100 - conclusion.filledAsint;\n            conclusion.missing = conclusion.missingAsint + \"%\";\n            conclusion.solved = window.eval(evaluableSource);\n            conclusion.solvable = evaluableSource;\n          } else if (isDuration) {\n            const expectedDuration = referenceValue;\n            conclusion.expectedDurationInms = expectedDuration;\n            conclusion.expectedDuration = LswTimer.utils.fromMillisecondsToDurationstring(expectedDuration);\n            const evaluableSource = `${conclusion.currentDurationInms} ${opCorrected} ${expectedDuration}`;\n            console.log(\"[*] Evaluating JavaScript for condition: \", evaluableSource);\n            conclusion.filledAsint = Math.round(100 * (conclusion.currentDurationInms / conclusion.expectedDurationInms));\n            conclusion.filled = conclusion.filledAsint + \"%\";\n            const missingDurationInms = LswUtils.zeroIfNegative(conclusion.expectedDurationInms - conclusion.currentDurationInms);\n            Specific_for_duration_cases: {\n              conclusion.missingDuration = LswTimer.utils.fromMillisecondsToDurationstring(missingDurationInms);\n              conclusion.missingDurationInms = missingDurationInms;\n            }\n            conclusion.missingAsint = 100 - conclusion.filledAsint;\n            conclusion.missing = conclusion.missingAsint + \"%\";\n            conclusion.solved = window.eval(evaluableSource);\n            conclusion.solvable = evaluableSource;\n          }\n        }\n        this.expandColor(conclusion);\n        return conclusion;\n      };\n    }\n\n    /*\n    static COLOR_MEANING = {\n      \"red\": \"SUSPENSO\",\n      \"#e87489\": \"INSUFICIENTE\",\n      \"#5353bf\": \"SUFICIENTE\",\n      \"orange\": \"NOTABLE\",\n      \"yellow\": \"EXCELENTE\",\n      \"lime\": \"SOBRESALIENTE\",\n    };\n    //*/\n\n    static expandColor(_) {\n      const percentage = _.filledAsint;\n      const asMin = _.expectedAs === \"minimum\" ? true : false;\n      const assignedColor = (() => {\n        if (percentage <= 0) {\n          return asMin ? this.COLOR.SUSPENSO : this.COLOR.SOBRESALIENTE;\n        } else if (percentage < 20) {\n          return asMin ? this.COLOR.INSUFICIENTE : this.COLOR.EXCELENTE;\n        } else if (percentage < 40) {\n          return asMin ? this.COLOR.SUFICIENTE : this.COLOR.NOTABLE;\n        } else if (percentage < 60) {\n          return asMin ? this.COLOR.NOTABLE : this.COLOR.SUFICIENTE;\n        } else if (percentage < 80) {\n          return asMin ? this.COLOR.EXCELENTE : this.COLOR.INSUFICIENTE;\n        } else if (percentage > 80) {\n          return asMin ? this.COLOR.SOBRESALIENTE : this.COLOR.SUSPENSO;\n        } else {\n        }\n      })();\n      Object.assign(_, {\n        color: assignedColor,\n        colorMeaning: this.COLOR_MEANING[assignedColor],\n      });\n    }\n\n    static formatUrgency(txt) {\n      return parseFloat(txt.replace(/\\!/g, \"\").trim());\n    }\n\n    static isConditionByTimes(txtVal) {\n      return txtVal.trim().match(/^[0-9]+(\\.[0-9]+)?$/g);\n    }\n\n    static isConditionByDuration(txtVal) {\n      try {\n        return LswTimer.utils.fromDurationstringToMilliseconds(txtVal);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    }\n\n    static getSomeDayActions(dateToday = new Date(), concept = false, state = false) {\n      Vue.prototype.$trace(\"lsw-goals-viewer.methods.getSomeDayActions\");\n      return Vue.prototype.$lsw.database.selectMany(\"Accion\", acc => {\n        const dateInicio = LswTimer.utils.fromDatestringToDate(acc.tiene_inicio);\n        const isSameDay = LswTimer.utils.areSameDayDates(dateInicio, dateToday);\n        if (!isSameDay) {\n          return false;\n        }\n        if (concept) {\n          const isSameConcept = acc.en_concepto === concept;\n          if (!isSameConcept) {\n            return false;\n          }\n        }\n        if (state) {\n          const isSameState = acc.tiene_estado === state;\n          if (!isSameState) {\n            return false;\n          }\n        }\n        return true;\n      });\n    }\n\n  };\n\n  return LswGoals;\n\n",
      "$code.label": "LswGoals class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-goals-viewer/lsw-goals-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 98,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswGoalsViewer component",
      "$code": "Vue.component(\"LswGoalsViewer\", {\n  template: $template,\n  props: {\n    onClose: {\n      type: [Function, Boolean],\n      default: false,\n    },\n    onRefresh: {\n      type: [Function, Boolean],\n      default: false,\n    },\n    dayToAnalize: {\n      type: [Boolean, Date],\n      default: () => new Date(),\n    }\n  },\n  data() {\n    this.$trace(\"lsw-goals-viewer.data\");\n    const solverSymbols = ['👍', '✔️', '😃']\n    const penderSymbols = ['🌵', '❌', '🥶'];\n    const randomIndex = LswRandomizer.getRandomIntegerBetween(0, penderSymbols.length-1);\n    return {\n      isLoaded: false,\n      isLoadingGoals: false,\n      isFiltering: \"none\",\n      isClicking: false,\n      specifiedGoals: {},\n      interestingFields: {\n        \"colorMeaning\": \"Estado actual\",\n        \"filled\": \"Completado\",\n        \"missing\": \"Faltante\",\n        \"solved\": \"Resuelto\",\n        // \"originalConcept\": \"Concepto\",\n        // \"originalCondition\": \"Condición\",\n        // \"originalUrgency\": \"Urgencia\",\n        \"type\": \"Tipo\",\n        \"expectedAs\": \"Formato\",\n        \"expectedDuration\": \"Duración esperada\",\n        // \"expectedAsAbbr\": \"Formato abreviado\",\n        \"currentDuration\": \"Duración actual\",\n        \"missingDuration\": \"Duración faltante\",\n        \"expectedTimes\": \"Veces esperadas\",\n        \"currentTimes\": \"Veces actuales\",\n        \"missingTimes\": \"Veces faltantes\",\n        // \"currentDurationInms\": \"Duración en ms actual\",\n        // \"expectedDurationInms\": \"Duración esperada en ms\",\n        // \"filledAsint\": \"Llenado como número\",\n        // \"missingDurationInms\": \"Duración faltante en ms\",\n        // \"missingAsint\": \"Faltante como número\",\n        // \"solvable\": \"Resolvible\",\n        // \"color\": \"color\",\n        // \"urgency\": \"Urgencia\"\n        \"originalLine\": \"Origen\",\n      },\n      symbolForSolved: solverSymbols[randomIndex],\n      symbolForPending: penderSymbols[randomIndex],\n      selectedGoal: false,\n      report: [],\n      summary: false,\n    };\n  },\n  methods: {\n    async selectGoal(goal) {\n      this.$trace(\"lsw-goals-viewer.methods.selectGoal\");\n      if(this.selectedGoal === goal) {\n        this.selectedGoal = undefined;\n      } else {\n        this.selectedGoal = goal;\n      }\n      await this.loadGoalSpecification(goal);\n    },\n    selectFilter(id) {\n      this.$trace(\"lsw-goals-viewer.methods.selectFilter\");\n      this.isFiltering = id;\n    },\n    async loadGoalSpecification(goal) {\n      this.$trace(\"lsw-goals-viewer.methods.loadGoalSpecification\");\n      try {\n        this.isLoadingGoals = true;\n        const filepath = \"/kernel/goals/todos/\" + goal.concept + \".md\";\n        const filecontent = await this.$lsw.fs.read_file(filepath);\n        const parsedContent = LswMarkdown.global.parse(filecontent);\n        this.specifiedGoals[goal.concept] = `<div class=\"markdown_texto\">${parsedContent}</div>`;\n        return parsedContent;\n      } catch (error) {\n        return false;\n      } finally {\n        this.isLoadingGoals = false;\n      }\n    },\n    passesFilter(goal) {\n      this.$trace(\"lsw-goals-viewer.methods.passesFilter\");\n      if(this.isFiltering === \"none\") {\n        return true;\n      } else if(this.isFiltering === \"completed\") {\n        return goal.solved === true;\n      } else {\n        return goal.solved === false;\n      }\n    },\n    async loadGoals() {\n      this.$trace(\"lsw-goals-viewer.methods.loadGoals\");\n      this.isLoaded = false;\n      this.report = await LswGoals.getGoalsReport(this.dayToAnalize);\n      let resolved = 0;\n      let failed = 0;\n\n      for(let index=0; index<this.report.goals.length; index++) {\n        const goal = this.report.goals[index];\n        if(goal.solved) {\n          resolved++;\n        } else {\n          failed++;\n        }\n      }\n      this.summary = {\n        total: this.report.goals.length,\n        resolved,\n        failed,\n      };\n      this.isLoaded = true;\n    },\n    openGoalsFile() {\n      this.$trace(\"lsw-goals-viewer.methods.openGoalsFile\");\n      this.$dialogs.open({\n        title: \"Editar objetivos\",\n        template: `\n          <div>\n            <lsw-filesystem-explorer opened-by=\"/kernel/goals/goals.week\" :absolute-layout=\"true\" />\n          </div>\n        `\n      });\n    },\n    openRecordsDirectory() {\n      this.$trace(\"lsw-goals-viewer.methods.saveMoment\");\n      this.$dialogs.open({\n        title: \"Ver récords anteriores\",\n        template: `\n          <div>\n            <lsw-filesystem-explorer opened-by=\"/kernel/goals/records\" :absolute-layout=\"true\" />\n          </div>\n        `\n      });\n    },\n    openRecordsViewer() {\n      this.$trace(\"lsw-goals-viewer.methods.openRecordsViewer\");\n      this.$dialogs.open({\n        title: \"Visualizar récords\",\n        template: `\n          <div class=\"pad_1\">\n            <lsw-goals-records-viewer />\n          </div>\n        `\n      });\n    },\n    openWeekPlanner() {\n      this.$trace(\"lsw-goals-viewer.methods.openWeekPlanner\");\n      this.$dialogs.open({\n        title: \"Planificador de semana\",\n        template: `\n          <div class=\"pad_1\">\n            <lsw-week-planner />\n          </div>\n        `\n      });\n    },\n    async saveMoment() {\n      this.$trace(\"lsw-goals-viewer.methods.saveMoment\");\n      const dayUid = LswTimer.utils.fromDateToDatestring(new Date(), false, false, true).replace(/\\/|\\:/g, \"-\").replace(/ .*$/g, \"\");\n      const filepath = \"/kernel/goals/records/\" + dayUid + \".json\";\n      const reportSnapshot = Object.assign({\n        date: LswTimer.utils.fromDateToDatestring(this.dayToAnalize || new Date()),\n      }, this.report, {});\n      const filecontents = JSON.stringify(reportSnapshot, null, 2);\n      await this.$lsw.fs.write_file(filepath, filecontents);\n      this.$lsw.toasts.send({\n        title: \"Estadísticas del día guardadas\",\n        text: `En: ${filepath}`\n      });\n    },\n    getAbbrvWord(id) {\n      return id === \"min\" ? \"🔺\" : \"🔻\";\n      return id === \"min\" ? \"mínimo\" : \"máximo\";\n    },\n    async editTodoOfGoal(goal) {\n      this.$trace(\"lsw-goals-viewer.methods.editTodoOfGoal\");\n      const goalFilepath = `/kernel/goals/todos/${goal.concept}.md`;\n      const exists = await this.$lsw.fs.exists(goalFilepath);\n      if(!exists) {\n        await this.$lsw.fs.write_file(goalFilepath, \"\");\n      }\n      this.$lsw.dialogs.open({\n        title: \"Detallando objetivo\",\n        template: `<lsw-filesystem-explorer :opened-by=\"goalFilepath\" :absolute-layout=\"true\" />`,\n        factory: {\n          data: { goal, goalFilepath },\n          methods: { }\n        }\n      });\n    },\n    async importGoalsToDay() {\n      this.$trace(\"lsw-goals-viewer.methods.importGoalsToDay\");\n      const originalGoals = await Vue.prototype.$lsw.fs.evaluateAsWeekFileOrReturn(\"/kernel/goals/goals.week\", []);\n      const dayString = LswTimer.utils.fromDateToDatestring(this.dayToAnalize, true);\n      const weekdayString = LswGoals.fromDateToWeekday(this.dayToAnalize);\n      const goalsMatched = originalGoals.filter(goal => {\n        if(goal.type !== \"SET\") {\n          return false;\n        }\n        Filtro_de_goal_segun_dia: {\n          const {\n            from: goalBegin,\n            to: goalEnd,\n            type: goalType,\n            concept: goalConcept,\n            duration: goalDuration,\n            hour: goalHour,\n            minute: goalMinute,\n            weekday: goalWeekday,\n          } = goal;\n          // No excede el «desde fecha».\n          if(goalBegin !== \"*\") {\n            if(dayString < goalBegin) {\n              return false;\n            }\n          }\n          // No excede el «hasta fecha»\n          if(goalEnd !== \"*\") {\n            if(dayString > goalEnd) {\n              return false;\n            }\n          }\n          // Coincide con el «dia de la semana»\n          if(goalWeekday !== \"*\") {\n            if(weekdayString !== goalWeekday) {\n              return false;\n            }\n          }\n        }\n        return true;\n      });\n      const goalsMissing = [];\n      const accionesDia = await this.$lsw.database.select(\"Accion\", acc => acc.tiene_inicio.startsWith(dayString));\n      Iterating_objetivos:\n      for(let indexGoal=0; indexGoal<goalsMatched.length; indexGoal++) {\n        const goalMatched = goalsMatched[indexGoal];\n        const {\n          from: goalBegin,\n          to: goalEnd,\n          type: goalType,\n          concept: goalConcept,\n          duration: goalDuration,\n          hour: goalHour,\n          minute: goalMinute,\n          weekday: goalWeekday,\n        } = goalMatched;\n        const presuntoInicio = dayString + \" \" + goalMatched.hour + \":\" + goalMatched.minute;\n        let missingAccion = {\n          ast: goalMatched,\n          acc: {\n            en_concepto: goalConcept,\n            tiene_estado: \"pendiente\",\n            tiene_inicio: presuntoInicio,\n            tiene_duracion: goalDuration || \"1h\",\n            tiene_parametros: \"[*semanal]\",\n            tiene_descripcion: \"\",\n            tiene_comentarios: \"\",\n          }\n        };\n        Iterating_acciones:\n        for(let indexAcc=0; indexAcc<accionesDia.length; indexAcc++) {\n          const accionDia = accionesDia[indexAcc];\n          const matchesParameter = accionDia.tiene_parametros.indexOf(\"[*semanal]\") !== -1;\n          const matchesTime = accionDia.tiene_inicio.startsWith(presuntoInicio);\n          const matchesConcept = accionDia.tiene_inicio.startsWith(presuntoInicio);\n          if(matchesParameter && matchesTime && matchesConcept) {\n            missingAccion = false;\n            break Iterating_acciones;\n          };\n        }\n        if(missingAccion) {\n          goalsMissing.push(missingAccion);\n        }\n      }\n      if(!goalsMissing.length) {\n        return this.$lsw.dialogs.open({\n          title: \"No hay objetivos por importar\",\n          template: `\n            <div class=\"pad_1\">\n              <div>No hay objetivos por importar actualmente.</div>\n            </div>\n          `\n        });\n      }\n      const confirmation = await this.$lsw.dialogs.open({\n        title: \"Importar objetivos a día\",\n        template: `\n          <div class=\"pad_1\">\n            <div>¿Seguro que quieres importar los objetivos al día seleccionado?</div>\n            <div class=\"pad_vertical_2\">Se añadirán las siguientes {{ goalsToImport.length }} acciones:</div>\n            <ul class=\"margin_vertical_0\">\n              <li v-for=\"goal, goalIndex in goalsToImport\" v-bind:key=\"'goal_' + goalIndex\">\n                <div>{{ currentWeekday }}, {{ currentDay }} ➞ {{ goal.ast.hour }}:{{ goal.ast.minute }}@{{ goal.acc.en_concepto }}</div>\n              </li>\n            </ul>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"() => accept(true)\">Aceptar</button>\n              </div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            currentWeekday: LswGoals.fromDateToWeekday(this.dayToAnalize),\n            currentDay: dayString,\n            goalsToImport: goalsMissing\n          }\n        }\n      });\n      if(confirmation !== true) {\n        return;\n      }\n      await this.$lsw.database.insertMany(\"Accion\", goalsMissing.map(goalMetadata => goalMetadata.acc));\n      this.$lsw.toasts.send({\n        title: `Se insertaron ${goalsMissing.length} acciones`,\n        text: `Los objetivos generaron ${goalsMissing.length} acciones para el día seleccionado`\n      });\n      this.updateCalendario();\n    },\n    updateCalendario() {\n      this.$trace(\"lsw-goals-viewer.methods.updateCalendario\");\n      try {\n        LswDom.findVue(\".lsw_agenda\").reloadDateTasks();\n      } catch (error) {\n        // @BADLUCK\n      }\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-goals-viewer.mounted\");\n    this.loadGoals();\n  },\n  unmounted() {\n    this.$trace(\"lsw-goals-viewer.unmounted\");\n  }\n});\n",
      "$code.label": "LswGoalsViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-goals-viewer-prev/lsw-goals-api.js",
      "$location": {
        "start": {
          "offset": 280,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 356,
          "line": 15,
          "column": 1
        }
      },
      "section": "Lsw Goals API » LswGoals class",
      "$code": "\n  const GoalFactory = class {\n\n    static validate(input) {\n      Vue.prototype.$trace(\"Lsw.GoalFactory.getTodayActions\");\n    }\n\n  }\n\n  const LswGoals = class {\n\n    static GoalFactory = GoalFactory;\n\n    static validateConcepto(val) {\n      Vue.prototype.$trace(\"LswGoals.validateConcepto\");\n      return val;\n    }\n\n    static validateMedida(val) {\n      Vue.prototype.$trace(\"LswGoals.validateMedida\");\n      try {\n\n        const isMax = val.startsWith(\"<\");\n        const isMin = val.startsWith(\">\");\n        const isLimit = isMax || isMin;\n        const innerVal = val.replace(/>|</g, \"\").trim();\n        const isNumber = (() => {\n          const numberCast = parseFloat(innerVal);\n          return !isNaN(numberCast);\n        })();\n        const comparator = isMax ? \"max\" : \"min\";\n        if (isNumber) {\n          return [`${comparator}TimesToday`, parseFloat(innerVal)];\n        } else {\n          Validate_string_or_fail: {\n            LswTimer.utils.fromDurationstringToMilliseconds(innerVal);\n          }\n          return [`${comparator}DurationToday`, innerVal];\n        }\n        return val;\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    }\n\n    static validateUrgencia(val) {\n      Vue.prototype.$trace(\"LswGoals.validateUrgencia\");\n      $ensure({ val }, 1).type(\"string\").can(it => it.trim().startsWith(\"!\"));\n      return parseInt(val.replace(/\\!/g, \"\").trim());\n    }\n\n\n    static async loadGoals() {\n      Vue.prototype.$trace(\"LswGoals.loadGoals\");\n      const output = [];\n      const errors = [];\n      console.log(\"[*] Carga de objetivos por factories:\");\n      Carga_por_factories: {\n        try {\n          const factoryIds = await Vue.prototype.$lsw.fs.scan_directory(\"/kernel/settings/goals/factory\");\n          for (let indexFactory = 0; indexFactory < factoryIds.length; indexFactory++) {\n            const factoryFilename = factoryIds[indexFactory];\n            try {\n              console.log(\"[*] Carga de objetivos por factory file:\", factoryFilename);\n              const factoryDefinition = await Vue.prototype.$lsw.fs.evaluateAsJavascriptFile(`/kernel/settings/goals/factory/${factoryFilename}`);\n              GoalFactory.validate(factoryDefinition);\n              output.push(factoryDefinition);\n            } catch (error) {\n              console.log(\"[!] Error cargando objetivo por fichero único en:\", factoryFilename);\n              errors.push(error);\n            }\n          }\n        } catch (error) {\n          console.log(\"[!] Error leyendo factories de objetivos:\", error);\n        }\n      }\n      Carga_por_el_fichero_unico: {\n        console.log(\"[*] Carga de objetivos por fichero único:\");\n        const goalsByFileCrude = await Vue.prototype.$lsw.fs.evaluateAsDotenvFileOrReturn(\"/kernel/settings/goals.env\", {});\n        const goalFiles = Object.keys(goalsByFileCrude);\n        Iterando_reglas_de_fichero:\n        for (let indexGoal = 0; indexGoal < goalFiles.length; indexGoal++) {\n          const key = goalFiles[indexGoal];\n          const val = goalsByFileCrude[key];\n          try {\n            console.log(\"[*] Carga de objetivos por clave de fichero único:\", key, val);\n            const tokens = val.split(/ *\\| */g);\n            const [concepto, medida, urgencia] = tokens;\n            let conceptoSan = concepto;\n            let medidaSan = undefined;\n            let urgenciaSan = 0;\n            conceptoSan = this.validateConcepto(concepto);\n            medidaSan = this.validateMedida(medida);\n            urgenciaSan = this.validateUrgencia(urgencia);\n            const [metodoParaMedir, medidaValor] = medidaSan;\n            console.log(conceptoSan, metodoParaMedir, medidaValor, urgenciaSan);\n            const accionesCoincidentesCompletadas = await this.getTodayActions(conceptoSan, \"completada\");\n            let porcentaje = undefined;\n            Calcular_porcentaje_actual: {\n              if(metodoParaMedir.endsWith(\"TimesToday\")) {\n                const totalTimes = accionesCoincidentesCompletadas.length;\n                porcentaje = Math.round((totalTimes / medidaValor) * 100);\n                console.log(\"CALC:\", totalTimes, medidaValor, porcentaje);\n              } else if(metodoParaMedir.endsWith(\"DurationToday\")) {\n                const totalDurationMs = LswGoals.extractDurationFromActions(accionesCoincidentesCompletadas, true);\n                porcentaje = Math.round((totalDurationMs / medidaValor) * 100);\n                console.log(\"CALC:\", totalDurationMs, medidaValor, porcentaje);\n              }\n            }\n            output.push({\n              id: conceptoSan,\n              urgencia: urgenciaSan,\n              porcentaje,\n              nombre: key,\n            });\n          } catch (error) {\n            console.log(\"[!] Error cargando objetivo por fichero único en:\", key);\n            errors.push(error);\n          }\n        }\n        console.log(\"output:\", output);\n      }\n      if (errors.length) {\n        console.error(\"[!] Errores al cargar objetivos\", errors);\n        Vue.prototype.$lsw.toasts.send({\n          title: \"Hubo errores en la carga de objetivos\",\n          text: `Los siguientes ${errors.length} se dieron al cargar los objetivos`,\n        });\n      }\n      return output;\n    }\n\n    static async getTodayActions(onlyConcept = false, onlyState = false) {\n      Vue.prototype.$trace(\"LswGoals.getTodayActions\");\n      const errores = LswErrorHandler.createGroup();\n      const allAcciones = await Vue.prototype.$lsw.database.selectMany(\"Accion\");\n      const todayDate = new Date();\n      let todayAcciones = [];\n      Iterando_acciones:\n      for (let indexAccion = 0; indexAccion < allAcciones.length; indexAccion++) {\n        const accion = allAcciones[indexAccion];\n        if (!accion.tiene_inicio) {\n          continue Iterando_acciones;\n        }\n        try {\n          const accionDate = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n          const sameDate = LswTimer.utils.areSameDayDates(todayDate, accionDate);\n          if (sameDate) {\n            todayAcciones.push(accion);\n          }\n        } catch (error) {\n          errores.push(error);\n        }\n      }\n      errores.selfThrowIfNeeded();\n      if (onlyConcept) {\n        todayAcciones = todayAcciones.filter(acc => acc.en_concepto === onlyConcept);\n      }\n      if(onlyState) {\n        todayAcciones = todayAcciones.filter(acc => acc.tiene_estado === onlyState);\n      }\n      return todayAcciones;\n    }\n\n    static async filterActionsByConcept(actions, conceptId) {\n      Vue.prototype.$trace(\"LswGoals.filterActionsByConcept\");\n      const matchedActions = [];\n      for (let indexAction = 0; indexAction < actions.length; indexAction++) {\n        const action = actions[indexAction];\n        const isMatch = action.en_concepto === conceptId;\n        if (isMatch) {\n          matchedActions.push(action);\n        }\n      }\n      return matchedActions;\n    }\n\n    static async filterActionsByState(actions, stateId) {\n      Vue.prototype.$trace(\"LswGoals.filterActionsByState\");\n      const matchedActions = [];\n      for (let indexAction = 0; indexAction < actions.length; indexAction++) {\n        const action = actions[indexAction];\n        const isMatch = action.tiene_estado === stateId;\n        if (isMatch) {\n          matchedActions.push(action);\n        }\n      }\n      return matchedActions;\n    }\n\n    static async ensureActionHasLimitedTimesToday(actionId, times, minOrMax = \"min\", options) {\n      Vue.prototype.$trace(\"LswGoals.ensureActionHasLimitedTimesToday\");\n      try {\n        const mensajeExplicativo = `${actionId} ${minOrMax === 'min' ? 'mínimo' : 'máximo'} ${times} veces hoy`;\n        const {\n          completado: completedMessage = `Sí está: ${mensajeExplicativo}`,\n          fallido: notYetMessage = `Aún no está: ${mensajeExplicativo}`,\n        } = options;\n        const salida = input => Object.assign({\n          id: mensajeExplicativo,\n          urgencia: options.urgencia || 0,\n        }, input);\n        const todayActions = await LswGoals.getTodayActions();\n        const matchedActions = await LswGoals.filterActionsByConcept(todayActions, actionId);\n        const completedActions = await LswGoals.filterActionsByState(matchedActions, \"completada\");\n        const isValid = (minOrMax === \"min\") ? completedActions.length < times : completedActions.length > times;\n        if (isValid) {\n          return salida({\n            completadas: completedActions.length,\n            mensaje: notYetMessage,\n            porcentaje: Math.round((completedActions.length / times) * 100),\n          });\n        } else {\n          return salida({\n            mensaje: completedMessage,\n            porcentaje: Math.round((completedActions.length / times) * 100),\n          });\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    static ensureActionHasMinimumTimesToday(actionId, minimumTimes, options) {\n      return this.ensureActionHasLimitedTimesToday(actionId, minimumTimes, \"min\", options);\n    }\n\n    static ensureActionHasMaximumTimesToday(actionId, maximumTimes, options) {\n      return this.ensureActionHasLimitedTimesToday(actionId, maximumTimes, \"max\", options);\n    }\n\n    static async ensureActionHasLimitedDurationToday(actionId, durationDatestring, minOrMax = \"min\", options = {}) {\n      Vue.prototype.$trace(\"LswGoals.ensureActionHasLimitedDurationToday\");\n      try {\n        const mensajeExplicativo = `${actionId} ${minOrMax === 'min' ? 'mínimo' : 'máximo'} ${durationDatestring} hoy`;\n        const minimumDurationMs = LswTimer.utils.fromDurationstringToMilliseconds(durationDatestring);\n        const {\n          completado: completedMessage = `Sí está: ${mensajeExplicativo}`,\n          fallido: notYetMessage = `Aún no está: ${mensajeExplicativo}`,\n        } = options;\n        const salida = input => Object.assign({\n          id: mensajeExplicativo,\n          urgencia: options.urgencia || 0,\n        }, input);\n        const todayActions = await LswGoals.getTodayActions();\n        const matchedActions = await LswGoals.filterActionsByConcept(todayActions, actionId);\n        const completedActions = await LswGoals.filterActionsByState(matchedActions, \"completada\");\n        let currentDurationMs = 0;\n        for (let indexActions = 0; indexActions < completedActions.length; indexActions++) {\n          const action = completedActions[indexActions];\n          try {\n            const actionDurationMs = LswTimer.utils.fromDurationstringToMilliseconds(action.tiene_duracion);\n            currentDurationMs += actionDurationMs;\n          } catch (error) {\n            // @BADLUCK.\n          }\n        }\n        const currentTotal = LswTimer.utils.fromMillisecondsToDurationstring(currentDurationMs);\n        const isValid = (minOrMax === \"min\") ? (currentDurationMs < minimumDurationMs) : (currentDurationMs > minimumDurationMs);\n        if (isValid) {\n          return salida({\n            completadas: currentTotal,\n            mensaje: notYetMessage,\n            porcentaje: Math.round((currentDurationMs / minimumDurationMs) * 100),\n          });\n        } else {\n          return salida({\n            completadas: currentTotal,\n            mensaje: completedMessage,\n            porcentaje: Math.round((currentDurationMs / minimumDurationMs) * 100),\n          });\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    static ensureActionHasMinimumDurationToday(actionId, durationDatestring, options = {}) {\n      return this.ensureActionHasLimitedDurationToday(actionId, durationDatestring, \"min\", options);\n    }\n\n    static ensureActionHasMaximumDurationToday(actionId, durationDatestring, options = {}) {\n      return this.ensureActionHasLimitedDurationToday(actionId, durationDatestring, \"max\", options);\n    }\n\n    static minTimesToday(action, times, urgencia = 0) {\n      return this.ensureActionHasLimitedTimesToday(action, times, \"min\", {\n        id: action,\n        urgencia: urgencia,\n      });\n    }\n\n    static maxTimesToday(action, times, urgencia = 0) {\n      return this.ensureActionHasLimitedTimesToday(action, times, \"max\", {\n        id: action,\n        urgencia: urgencia,\n      });\n    }\n\n    static minDurationToday(action, duration, urgencia = 0) {\n      return this.ensureActionHasLimitedDurationToday(action, duration, \"min\", {\n        id: action,\n        urgencia: urgencia,\n      });\n    }\n\n    static maxDurationToday(action, duration, urgencia = 0) {\n      return this.ensureActionHasLimitedDurationToday(action, duration, \"max\", {\n        id: action,\n        urgencia: urgencia,\n      });\n    }\n\n    static extractDurationFromActions(actions, inMilliseconds = false) {\n      let totalMs = 0;\n      for (let index = 0; index < actions.length; index++) {\n        const action = actions[index];\n        try {\n          const ms = LswTimer.utils.fromDurationstringToMilliseconds(action.tiene_duracion);\n          totalMs += ms;\n        } catch (error) {\n          // @BADLUCK\n        }\n      }\n      if (inMilliseconds) {\n        return totalMs;\n      }\n      return LswTimer.utils.fromMillisecondsToDurationstring(totalMs);\n    }\n\n  };\n\n  return LswGoals;\n\n",
      "$code.label": "LswGoals class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-goals-viewer-prev/lsw-goals-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 98,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswGoalsViewer component",
      "$code": "Vue.component(\"LswGoalsViewer\", {\n  template: $template,\n  props: {\n    onClose: {\n      type: [Function, Boolean],\n      default: false,\n    },\n    onRefresh: {\n      type: [Function, Boolean],\n      default: false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-goals-viewer.data\");\n    return {\n      isLoaded: false,\n      goalsData: false,\n      isShowingBars: true,\n      completedGoalsCounter: 0,\n      missingGoalsCounter: 0,\n    };\n  },\n  methods: {\n    async loadGoals() {\n      this.$trace(\"lsw-goals-viewer.methods.loadGoals\");\n      const allGoals = await LswGoals.loadGoals();\n      console.log(\"allGoals\", allGoals);\n      this.goalsData = allGoals;\n      for(let indexGoal=0; indexGoal<allGoals.length; indexGoal++) {\n        const goal = allGoals[indexGoal];\n        const it = this.expandGoal(goal);\n        try {\n          if(it[\"tiene el\"] >= 100) {\n            this.completedGoalsCounter++;\n          } else {\n            this.missingGoalsCounter++;\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n      this.isLoaded = true;\n    },\n    toggleBars() {\n      this.$trace(\"lsw-goals-viewer.methods.emitClose\");\n      const graphComp = this.$refs.barsGraph;\n      graphComp.selectPropertyViewByName(\"falta el\");\n    },\n    emitClose() {\n      this.$trace(\"lsw-goals-viewer.methods.emitClose\");\n      if(typeof this.onClose === \"function\") {\n        this.onClose(this);\n      }\n    },\n    emitRefresh() {\n      this.$trace(\"lsw-goals-viewer.methods.emitRefresh\");\n      if(typeof this.onRefresh === \"function\") {\n        this.onRefresh(this);\n      }\n    },\n    openGoalsDirectory() {\n      this.$trace(\"lsw-goals-viewer.methods.openGoalsDirectory\");\n      this.$lsw.dialogs.open({\n        title: \"Directorio de objetivos\",\n        template: `\n          <lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/goals/goals.week\" />\n        `\n      });\n    },\n    expandGoal(goal) {\n      this.$trace(\"lsw-goals-viewer.methods.expandGoal\");\n      return Object.assign({}, goal, {\n          \"tiene el\": goal.porcentaje,\n          \"falta el\": 100-goal.porcentaje\n      });\n    },\n    sortGoals(g1, g2) {\n      this.$trace(\"lsw-goals-viewer.methods.sortGoals\");\n      const u1 = g1.urgencia || 0;\n      const u2 = g2.urgencia || 0;\n      const c1 = g1[\"tiene el\"] || 0;\n      const c2 = g2[\"tiene el\"] || 0;\n      const g1over = c1 > 100;\n      const g2over = c2 > 100;\n      if(g2over) return -1;\n      if(g1over) return 1;\n      if(u1 > u2) return -1;\n      if(u1 < u2) return 1;\n      if(c1 < c2) return -1;\n      if(c1 > c2) return 1;\n      return 0;\n    },\n    adaptSample(goalsData) {\n      this.$trace(\"lsw-goals-viewer.methods.adaptSample\");\n      return goalsData.map(it => {\n        const expandedGoal = this.expandGoal(it);\n        return expandedGoal;\n      }).sort((...args) => {\n        return this.sortGoals(...args);\n      });\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-goals-viewer.mounted\");\n    this.loadGoals();\n  },\n  unmounted() {\n    this.$trace(\"lsw-goals-viewer.unmounted\");\n  }\n});\n",
      "$code.label": "LswGoalsViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-homepage/lsw-homepage.js",
      "$location": {
        "start": {
          "offset": 1556,
          "line": 62,
          "column": 1
        },
        "end": {
          "offset": 1648,
          "line": 63,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswHomepage component",
      "$code": "Vue.component(\"LswHomepage\", {\n  template: $template,\n  props: {\n    appsThrower: {\n      type: Object,\n      required: true,\n    },\n    onOpenApplicationEvent: {\n      type: Function,\n      default: () => {},\n    }\n  },\n  data() {\n    this.$trace(\"lsw-homepage.data\");\n    return {\n      isLoaded: false,\n      ownApps: {},\n      lastAppliedFilter: false,\n      filterSearchText: \"\",\n      filteredApps: {},\n      systemApps: launchables,\n    };\n  },\n  methods: {\n    registerApp(appName, appData, force = false, silence = false) {\n      this.$trace(\"lsw-homepage.methods.registerApp\");\n      try {\n        if ((appName in this.ownApps) && !force) {\n          throw new Error(`App «${appName}» is already registered`);\n        }\n        Validate_app_data: {\n          const $ensureAppData = $ensure({ [appName]: appData }, 1).type(\"object\");\n          $ensureAppData.to.have.keys([\n            \"label\", \n            \"event\",\n          ]);\n        }\n        this.ownApps[appName] = appData;\n      } catch (error) {\n        if (!silence) {\n          this.$lsw.toasts.showError(error);\n        }\n      }\n    },\n    filterApps() {\n      this.$trace(\"lsw-homepage.methods.filterApps\");\n      const s = this.filterSearchText.toLowerCase();\n      if (s.trim() === \"\") {\n        this.lastAppliedFilter = false;\n        return this.filteredApps = Object.assign({}, this.ownApps);\n      }\n      this.filteredApps = {};\n      for (let appName in this.ownApps) {\n        const appData = this.ownApps[appName];\n        const pos = JSON.stringify([appName, appData]).toLowerCase().indexOf(s);\n        if (pos !== -1) {\n          this.filteredApps[appName] = appData;\n        }\n      }\n      this.lastAppliedFilter = s;\n      this.isLoaded = true;\n    },\n    async loadOwnApps() {\n      this.$trace(\"lsw-homepage.methods.loadOwnApps\");\n      this.ownApps = {};\n      System_apps: {\n        for (let indexApp = 0; indexApp < this.systemApps.length; indexApp++) {\n          const app = this.systemApps[indexApp];\n          try {\n            this.registerApp(app.label, app);\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      }\n      Custom_apps: {\n        const appsFilesMap = await this.$lsw.fs.read_directory(\"/kernel/apps\");\n        const appsFiles = Object.keys(appsFilesMap);\n        for (let indexApp = 0; indexApp < appsFiles.length; indexApp++) {\n          const appName = appsFiles[indexApp];\n          try {\n            const appData = await lsw.fs.evaluateAsJavascriptFileOrReturn(\"/kernel/apps/\" + appName + \"/load.js\", false);\n            this.registerApp(appName, appData);\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      }\n      this.filterApps();\n    },\n    openAppsDirectory() {\n      this.$trace(\"lsw-homepage.methods.openAppsDirectory\");\n      this.$lsw.dialogs.open({\n        title: \"Directorio de apps\",\n        template: `<lsw-filesystem-explorer opened-by=\"/kernel/apps\" />`,\n      });\n    },\n    async abrirApp(appId) {\n      this.$trace(\"lsw-homepage.methods.abrirApp\");\n      this.$lsw.toasts.send({\n        title: \"Yendo a: \" + appId,\n      });\n      this.appsThrower.selectApplication(appId);\n      this.onOpenApplicationEvent();\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-homepage.mounted\");\n    this.loadOwnApps();\n  },\n  unmounted() {\n    this.$trace(\"lsw-homepage.unmounted\");\n\n  }\n});\n",
      "$code.label": "LswHomepage API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-inline-tags-picker/lsw-inline-tags-picker.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 108,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswInlineTagsPicker component",
      "$code": "Vue.component(\"LswInlineTagsPicker\", {\n  template: $template,\n  props: {\n    from: {\n      type: Object,\n      default: () => []\n    },\n    field: {\n      type: String,\n      required: true,\n    },\n    onChoose: {\n      type: [Function, Boolean],\n      default: () => false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-inline-tags-picker.data\");\n    return {\n      isLoaded: false,\n      fromData: this.from,\n      digestedData: [],\n      searchText: \"\",\n      selectedRow: false,\n    };\n  },\n  methods: {\n    digestSearch() {\n      this.$trace(\"lsw-inline-tags-picker.methods.digestSearch\");\n      this.isLoaded = false;\n      if (this.searchText.trim() === \"\") {\n        this.digestedData = this.fromData;\n      } else {\n        this.digestedData = this.fromData.filter(row => {\n          return JSON.stringify(row).toLowerCase().indexOf(this.searchText.toLowerCase()) !== -1;\n        });\n      }\n      this.isLoaded = true;\n    },\n    selectRow(row) {\n      this.$trace(\"lsw-inline-tags-picker.methods.selectRow\");\n      this.selectedRow = row;\n      if (typeof this.onChoose === \"function\") {\n        this.onChoose(row, this);\n      }\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-inline-tags-picker.mounted\");\n      this.digestSearch();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswInlineTagsPicker API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-js-file-coverage-viewer/lsw-js-file-coverage-viewer.js",
      "$location": {
        "start": {
          "offset": 3,
          "line": 2,
          "column": 1
        },
        "end": {
          "offset": 145,
          "line": 3,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswJsFileCoverageViewer component",
      "$code": "Vue.component(\"LswJsFileCoverageViewer\", {\n  template: $ template,\n  props: {\n    source: {\n      type: String,\n      required: true,\n    },\n    coverage: {\n      type: [Object, Boolean],\n      default: () => false,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-js-file-coverage-viewer.data\");\n    return {\n      isLoaded: false,\n      isExpanded: false,\n      beautifiedSource: false,\n    };\n  },\n  methods: {\n    toggleExpansion() {\n      this.$trace(\"lsw-js-file-coverage-viewer.methods.toggleExpansion\");\n      this.isExpanded = !this.isExpanded;\n    },\n    async load() {\n      this.$trace(\"lsw-js-file-coverage-viewer.methods.load\");\n      await LswLazyLoads.loadHighlightJs();\n      await LswLazyLoads.loadBeautifier();\n      try {\n        this.beautifiedSource = beautifier.js(this.source);\n      } catch (error) {\n        // @BADLUCK!\n        this.beautifiedSource = this.source;\n      } finally {\n        this.isLoaded = true;\n      }\n      this.$nextTick(() => {\n        hljs.highlightElement(this.$refs.sourceTag);\n      });\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-js-file-coverage-viewer.mounted\");\n      await this.load();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswJsFileCoverageViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-js-inspector/lsw-js-inspector.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 124,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswJsInspector component",
      "$code": "(() => {\n  const emptyOutput = {};\n  const InspectorTab = class {\n    constructor(options = {}, inspector) {\n      this.inspector = inspector;\n      this.uid = LswRandomizer.getRandomString(5);\n      this.id = inspector.tabs.length;\n      // this.inputSource = \"Vue.options.components.LswCalendario.options.template\";\n      this.inputSource = \"Vue\";\n      this.pathSource = '';\n      this.transformerSource = '';\n      this.searchSource = '';\n      Object.assign(this, options);\n    }\n  }\n  Vue.component(\"LswJsInspector\", {\n    template: $template,\n    props: {\n      initialBase: {\n        type: [],\n        default: () => window,\n      }\n    },\n    data() {\n      this.$trace(\"lsw-js-inspector.data\");\n      return {\n        isDigesting: false,\n        selectedTab: undefined,\n        base: this.initialBase,\n        tabs: [],\n        errorGettingInput: false,\n        errorPathingInput: false,\n        errorTransformingInput: false,\n        output: emptyOutput,\n        emptyOutput: emptyOutput,\n        digestTimeoutId: undefined,\n        digestTimeoutMilliseconds: 1000,\n      };\n    },\n    methods: {\n      addTab(specifications = {}) {\n        this.$trace(\"lsw-js-inspector.methods.addTab\");\n        const anotherTab = new InspectorTab(specifications, this);\n        this.tabs.push(anotherTab);\n        this.selectedTab = anotherTab.uid;\n        return anotherTab;\n      },\n      cloneTab() {\n        const specifications = {\n          input: this.inputSource,\n          path: this.pathSource,\n          transformer: this.transformerSource,\n          search: this.searchSource,\n        };\n        const anotherTab = new InspectorTab(specifications, this);\n        this.tabs.push(anotherTab);\n        this.selectedTab = anotherTab.uid;\n        return anotherTab;\n      },\n      async digestInput() {\n        try {\n          this.$trace(\"lsw-js-inspector.methods.digestInput\");\n          this.isDigesting = true;\n          clearTimeout(this.digestTimeoutId);\n          const currentTab = this.tabs.filter(tab => tab.uid === this.selectedTab)[0];\n          let transformedInput = undefined;\n          Getting_input: {\n            try {\n              if (currentTab.inputSource.trim() === \"\") {\n                throw new Error(\"Este campo es requerido para iniciar la exploración\");\n              }\n              const callback = LswUtils.createAsyncFunction(\"return \" + currentTab.inputSource, [\"it\"])\n              transformedInput = await callback.call(this, transformedInput);\n            } catch (error) {\n              this.errorGettingInput = error;\n              throw error;\n            }\n          }\n          Pathing_input: {\n            try {\n              if (currentTab.pathSource.trim() === \"\") {\n                break Pathing_input;\n              }\n              transformedInput = jmespath.search(transformedInput, currentTab.pathSource);\n            } catch (error) {\n              this.errorPathingInput = error;\n              throw error;\n            }\n          }\n          Transforming_input: {\n            try {\n              if (currentTab.transformerSource.trim() === \"\") {\n                break Transforming_input;\n              }\n              transformedInput = await LswUtils.createAsyncFunction(currentTab.transformerSource, [\"it\"]).call(this, transformedInput);\n            } catch (error) {\n              this.errorTransformingInput = error;\n              throw error;\n            }\n          }\n          Set_output: {\n            this.outputValue = transformedInput;\n            this.output = LswJsInspector.stringifyBeautify(transformedInput);\n          }\n        } catch (error) {\n          console.log(error);\n          this.$lsw.toasts.showError(error);\n        } finally {\n          this.isDigesting = false;\n        }\n      },\n      backProperty(tabIndex) {\n        this.$trace(\"lsw-js-inspector.methods.backProperty\");\n        const tab = this.tabs[tabIndex];\n        const propPath = tab.inputSource.trim();\n        let newPath = undefined;\n        let pos = undefined;\n        if (propPath.endsWith(\"]\")) {\n          pos = propPath.lastIndexOf(\"[\");\n        } else {\n          pos = propPath.lastIndexOf(\".\");\n        }\n        const shouldOpenGlobal = (pos === 0) || (propPath.trim() === '');\n        const shouldIgnore = (pos === -1) && (propPath.trim() !== '');\n        if (shouldIgnore) {\n          return;\n        } else if (shouldOpenGlobal) {\n          tab.inputSource = \"window\";\n        } else {\n          newPath = propPath.slice(0, pos);\n          tab.inputSource = newPath;\n        }\n        this.digestInput();\n      },\n      openProperty(tabIndex, propId) {\n        this.$trace(\"lsw-js-inspector.methods.openProperty\");\n        const tab = this.tabs[tabIndex];\n        const propRegex = /^[A-Za-z$_][A-Za-z0-9$_]*$/g;\n        const byString = !propRegex.test(propId);\n        const appendment = byString ? `[${JSON.stringify(propId)}]` : `.${propId}`;\n        tab.inputSource += appendment;\n        this.digestInput();\n      },\n      updateSearchWithDelay(tab, searchSource) {\n        this.$trace(\"lsw-js-inspector.methods.updateSearchWithDelay\");\n        clearTimeout(this.digestTimeoutId);\n        this.digestTimeoutId = setTimeout(() => {\n          tab.searchSource = searchSource;\n          this.digestInput();\n        }, this.digestTimeoutMilliseconds);\n      },\n      resetTabId(tabIndex) {\n        this.$trace(\"lsw-js-inspector.methods.resetTabId\");\n        this.tabs[tabIndex].idSource = '';\n        this.digestInput();\n      },\n      resetTabInput(tabIndex) {\n        this.$trace(\"lsw-js-inspector.methods.resetTabInput\");\n        this.tabs[tabIndex].inputSource = '';\n        this.digestInput();\n      },\n      resetTabPath(tabIndex) {\n        this.$trace(\"lsw-js-inspector.methods.resetTabPath\");\n        this.tabs[tabIndex].pathSource = '';\n        this.digestInput();\n      },\n      resetTabTransformer(tabIndex) {\n        this.$trace(\"lsw-js-inspector.methods.resetTabTransformer\");\n        this.tabs[tabIndex].transformerSource = '';\n        this.digestInput();\n      },\n      resetTabSearch(tabIndex) {\n        this.$trace(\"lsw-js-inspector.methods.resetTabSearch\");\n        this.tabs[tabIndex].searchSource = '';\n        this.digestInput();\n      },\n      openConsole() {\n        this.$trace(\"lsw-js-inspector.methods.openConsole\");\n        this.$consoleHooker.toggleConsole();\n      },\n    },\n    watch: {\n      selectedTab() {\n        this.digestInput();\n      }\n    },\n    async mounted() {\n      try {\n        this.$trace(\"lsw-js-inspector.mounted\");\n        await LswLazyLoads.loadBeautifier();\n        await LswLazyLoads.loadJmespath();\n        await LswJsInspector.initializeFully();\n        if (this.tabs.length === 0) {\n          this.selectedTab = this.addTab({\n            id: \"Principal\",\n          }).uid;\n        }\n        await this.digestInput();\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  });\n})();\n",
      "$code.label": "LswJsInspector API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-js-viewer/lsw-js-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 118,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswJsViewer component",
      "$code": "Vue.component(\"LswJsViewer\", {\n  template: $template,\n  props: {\n    source: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-js-viewer.data\");\n    return {\n      isLoaded: false,\n      isExpanded: false,\n      beautifiedSource: false,\n    };\n  },\n  methods: {\n    toggleExpansion() {\n      this.isExpanded = !this.isExpanded;\n    },\n    async load() {\n      await LswLazyLoads.loadHighlightJs();\n      await LswLazyLoads.loadBeautifier();\n      try {\n        this.beautifiedSource = beautifier.js(this.source);\n      } catch (error) {\n        // @BADLUCK!\n        this.beautifiedSource = this.source;\n      } finally {\n        this.isLoaded = true;\n      }\n      this.$nextTick(() => {\n        hljs.highlightElement(this.$refs.sourceTag);\n      });\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-js-viewer.mounted\");\n      await this.load();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswJsViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-keyboard-1/lsw-keyboard-1.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 94,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswKeyboard1 component",
      "$code": "Vue.component(\"LswKeyboard1\", {\n  template: $template,\n  props: {\n    initialText: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-keyboard-1.data\");\n    return {\n      hasFocus: false,\n      isShowingText: true,\n      teclasPresionadas: [],\n      teclado: [\n        [\n          {keys:['\\\\','ª','º'],text:'\\\\',topLeftText:'ª',bottomLeftText:'º'},\n          {keys:['1','!','|'],text:'1',topLeftText:'!',bottomLeftText:'|'},\n          {keys:['2','\"','@'],text:'2',topLeftText:'\"',bottomLeftText:'@'},\n          {keys:['3','·','#'],text:'3',topLeftText:'·',bottomLeftText:'#'},\n          {keys:['4','$','~'],text:'4',topLeftText:'$',bottomLeftText:'~'},\n          {keys:['5','%','½'],text:'5',topLeftText:'%',bottomLeftText:'½'},\n          {keys:['6','&','¬'],text:'6',topLeftText:'&',bottomLeftText:'¬'},\n          {keys:['7','/','{'],text:'7',topLeftText:'/',bottomLeftText:'{'},\n          {keys:['8','(','['],text:'8',topLeftText:'(',bottomLeftText:'['},\n          {keys:['9',')'],text:'9',topLeftText:')',bottomLeftText:''},\n          {keys:['0','=','}'],text:'0',topLeftText:'=',bottomLeftText:''},\n          {keys:[\"'\",'\\\\','?'],text:\"'\",topLeftText:'?',bottomLeftText:'\\\\'},\n          {keys:['¡','¿','~'],text:\"¡\",topLeftText:'¿',bottomLeftText:'~'},\n        ],[\n          {keys:['⇒'],text:'⇒',topLeftText:'',bottomLeftText:'',style:'flex:1.25'},\n          {keys:['Q','q'],text:'Q',topLeftText:'',bottomLeftText:''},\n          {keys:['W','w'],text:'W',topLeftText:'',bottomLeftText:''},\n          {keys:['E','e'],text:'E',topLeftText:'',bottomLeftText:''},\n          {keys:['R','r'],text:'R',topLeftText:'',bottomLeftText:''},\n          {keys:['T','t'],text:'T',topLeftText:'',bottomLeftText:''},\n          {keys:['Y','y'],text:'Y',topLeftText:'',bottomLeftText:''},\n          {keys:['U','u'],text:'U',topLeftText:'',bottomLeftText:''},\n          {keys:['I','i'],text:'I',topLeftText:'',bottomLeftText:''},\n          {keys:['O','o'],text:'O',topLeftText:'',bottomLeftText:''},\n          {keys:['P','p'],text:'P',topLeftText:'',bottomLeftText:''},\n          {keys:['^','`','['],text:'^',topLeftText:'`',bottomLeftText:'['},\n          {keys:['*','+',']'],text:'*',topLeftText:'+',bottomLeftText:']'},\n        ],[\n          {keys:['♦️'],text:'♦️',topLeftText:'',bottomLeftText:'',style:'flex:1.5'},\n          {keys:['A','a'],text:'A',topLeftText:'',bottomLeftText:''},\n          {keys:['S','s'],text:'S',topLeftText:'',bottomLeftText:''},\n          {keys:['D','d'],text:'D',topLeftText:'',bottomLeftText:''},\n          {keys:['F','f'],text:'F',topLeftText:'',bottomLeftText:''},\n          {keys:['G','g'],text:'G',topLeftText:'',bottomLeftText:''},\n          {keys:['H','h'],text:'H',topLeftText:'',bottomLeftText:''},\n          {keys:['J','j'],text:'J',topLeftText:'',bottomLeftText:''},\n          {keys:['K','k'],text:'K',topLeftText:'',bottomLeftText:''},\n          {keys:['L','l'],text:'L',topLeftText:'',bottomLeftText:''},\n          {keys:['Ñ','ñ'],text:'Ñ',topLeftText:'',bottomLeftText:''},\n          {keys:['¨'],text:'¨',topLeftText:'´',bottomLeftText:'{'},\n          {keys:['ç','Ç'],text:'ç',topLeftText:'',bottomLeftText:'}'},\n        ],[\n          {keys:['🔺'],text:'🔺',topLeftText:'',bottomLeftText:''},\n          {keys:['>'],text:'>',topLeftText:'<',bottomLeftText:''},\n          {keys:['Z','z'],text:'Z',topLeftText:'',bottomLeftText:''},\n          {keys:['X','x'],text:'X',topLeftText:'',bottomLeftText:''},\n          {keys:['C','c'],text:'C',topLeftText:'',bottomLeftText:''},\n          {keys:['V','v'],text:'V',topLeftText:'',bottomLeftText:''},\n          {keys:['B','b'],text:'B',topLeftText:'',bottomLeftText:''},\n          {keys:['N','n'],text:'N',topLeftText:'',bottomLeftText:''},\n          {keys:['M','m'],text:'M',topLeftText:'',bottomLeftText:''},\n          {keys:[','],text:',',topLeftText:';',bottomLeftText:''},\n          {keys:['.'],text:'.',topLeftText:':',bottomLeftText:''},\n          {keys:['-'],text:'-',topLeftText:'_',bottomLeftText:''},\n          {keys:['🔺'],text:'🔺',topLeftText:'',bottomLeftText:'',style:'flex:2', fontSize:'8px'},\n        ],[\n          {keys:['Control'],text:'Ctrl',topLeftText:'',bottomLeftText:'',fontSize:'8px'},\n          {keys:['Alt'],text:'Alt',topLeftText:'',bottomLeftText:'',fontSize:'8px'},\n          {keys:['Space'],text:'Space',topLeftText:'',bottomLeftText:'',style:'flex:6',fontSize:'8px'},\n          {keys:['AltGraph'],text:'Alt Gr',topLeftText:'',bottomLeftText:'',fontSize:'8px'},\n          {keys:['Fn'],text:'Fn',topLeftText:'',bottomLeftText:'',fontSize:'8px'},\n        ],\n      ],\n      botonesTop: [{\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }],\n      botonesLeft: [{\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }],\n      botonesRight: [{\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }],\n      botonesBottom: [{\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }],\n    };\n  },\n  methods: {\n    async load() {\n      \n    },\n    hasPressedKey(keys) {\n      this.$trace(\"lsw-keyboard-1.methods.hasPressedKey\");\n      for(let index=0; index<keys.length; index++) {\n        const key = keys[index];\n        const isPressed = this.teclasPresionadas.indexOf(key) !== -1;\n        if(isPressed) {\n          return true;\n        }\n      }\n      return false;\n    },\n    pressKey(event) {\n      this.$trace(\"lsw-keyboard-1.methods.pressKey\");\n      this.teclasPresionadas.push(event.key);\n      this.dispatchKeyPress(event.key, event);\n    },\n    releaseKey(event) {\n      this.$trace(\"lsw-keyboard-1.methods.releaseKey\");\n      console.log(event.key);\n      const pos = this.teclasPresionadas.indexOf(event.key);\n      if(pos !== -1) {\n        this.teclasPresionadas.splice(pos, 1);\n      }\n    },\n    notifyFocus() {\n      this.$trace(\"lsw-keyboard-1.methods.notifyFocus\");\n      this.hasFocus = true;\n    },\n    notifyBlur() {\n      this.$trace(\"lsw-keyboard-1.methods.notifyBlur\");\n      this.hasFocus = false;\n    },\n    dispatchKeyPress(keyId, event) {\n      this.$trace(\"lsw-keyboard-1.methods.dispatchKeyPress\");\n      console.log(keyId);\n      this.$refs.keyboardText.dispatchKeyPress(keyId, event);\n    },\n    gainFocus() {\n      this.$trace(\"lsw-keyboard-1.methods.gainFocus\");\n      this.$refs.keyboardMainElement.focus();\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-keyboard-1.mounted\");\n      this.load();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswKeyboard1 API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-loading-bar/lsw-loading-bar.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 96,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswLoadingBar component",
      "$code": "Vue.component(\"LswLoadingBar\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-loading-bar.data\");\n    return {\n      loadedPercentage: 100\n    };\n  },\n  methods: {\n    setLoadedPercentage(percentage) {\n      this.loadedPercentage = percentage;\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-loading-bar.mounted\");\n      \n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswLoadingBar API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-markdown-viewer/lsw-markdown-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 104,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswMarkdownViewer component",
      "$code": "Vue.component(\"LswMarkdownViewer\", {\n  template: $template,\n  props: {\n    source: {\n      type: String,\n      required: true,\n    },\n    activateEjs: {\n      type: Boolean,\n      default: () => false,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-markdown-viewer.data\");\n    return {\n      parsingEjsError: false,\n      parsingMarkdownError: false,\n      output: false,\n    };\n  },\n  methods: {\n    async buildSource() {\n      this.$trace(\"lsw-markdown-viewer.methods.buildSource\");\n      await LswLazyLoads.loadEjs();\n      let sourceTransformed = this.source;\n      Render_ejs: {\n        if (this.activateEjs) {\n          try {\n            sourceTransformed = await ejs.render(sourceTransformed, {\n              component: this\n            }, {\n              async: true,\n            });\n          } catch (error) {\n            console.log(error);\n            this.parsingEjsError = error;\n            throw error;\n          }\n        }\n      }\n      Render_markdown: {\n          try {\n            sourceTransformed = await LswMarkdown.global.parse(sourceTransformed);\n          } catch (error) {\n            console.log(error);\n            this.parsingMarkdownError = error;\n            throw error;\n          }\n      }\n      this.output = sourceTransformed;\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-markdown-viewer.mounted\");\n      await this.buildSource();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswMarkdownViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-mermaid-viewer/lsw-mermaid-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 102,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswMermaidViewer component",
      "$code": "Vue.component(\"LswMermaidViewer\", {\n  template: $template,\n  props: {\n    initialSource: {\n      type: String,\n      default: () => `graph TD;\\n  A --> B;\\n  B --> C;\\n  C --> D;\\n  C --> A;`,\n    },\n    initialPage: {\n      type: String,\n      default: () => \"editor\" // too: \"visualizador\"\n    }\n  },\n  data() {\n    this.$trace(\"lsw-mermaid-viewer.data\");\n    return {\n      currentPage: this.initialPage,\n      error: false,\n      isLoaded: false,\n      source: this.initialSource,\n    };\n  },\n  methods: {\n    async loadImage() {\n      this.$trace(\"lsw-mermaid-viewer.methods.loadImage\");\n      try {\n        this.isLoaded = false;\n        const targetHtml = this.$refs.mermaidTargetTag;\n        const targetId = LswRandomizer.getRandomString(10);\n        const targetCode = this.source;\n        // Hacemos saltar el error antes:\n        mermaid.parse(targetCode);\n        // Procedemos al parse convencional\n        const output = await window.mermaid.render(targetId, targetCode);\n        targetHtml.innerHTML = output.svg;\n        this.isLoaded = true;\n        this.setError(false);\n      } catch (error) {\n        this.setError(error);\n      }\n    },\n    abrirEditor() {\n      this.$trace(\"lsw-mermaid-viewer.methods.abrirEditor\");\n      this.currentPage = 'editor';\n    },\n    abrirVisualizador() {\n      this.$trace(\"lsw-mermaid-viewer.methods.abrirVisualizador\");\n      this.currentPage = 'visualizador';\n      this.loadImage();\n    },\n    setError(error) {\n      this.$trace(\"lsw-mermaid-viewer.methods.setError\");\n      this.error = error;\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-mermaid-viewer.mounted\");\n      this.loadImage();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswMermaidViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-naty-script/fix.js",
      "$location": {
        "start": {
          "offset": 225,
          "line": 6,
          "column": 1
        },
        "end": {
          "offset": 296,
          "line": 7,
          "column": 1
        }
      },
      "DONE": "Comentado porque se mete en el builder del framework aparte:",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-notes/lsw-notes.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 112,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswNotes component",
      "$code": "Vue.component(\"LswNotes\", {\n  template: $template,\n  props: {\n    autoDialog: {\n      type: Boolean,\n      default: () => false,\n    },\n    onAutoDialogSuccess: {\n      type: Function,\n      default: () => {},\n    },\n    onAutoDialogError: {\n      type: Function,\n      default: () => {},\n    }\n  },\n  data() {\n    this.$trace(\"lsw-notes.data\");\n    return {\n      isLoaded: false,\n      allNotes: false,\n      openedNotes: [],\n      notasButtons: [{\n        text: \"➕\",\n        event: () => {\n          this.openAddNoteDialog();\n        }\n      }, {\n        text: \"🛜\",\n        event: () => {\n          this.loadNotes();\n        }\n      }],\n      currentError: this.error,\n    };\n  },\n  methods: {\n    setError(error = undefined) {\n      this.$trace(\"lsw-notes.methods.setError\");\n      this.currentError = error;\n    },\n    toggleNote(noteId) {\n      this.$trace(\"lsw-notes.methods.toggleNote\");\n      const pos = this.openedNotes.indexOf(noteId);\n      if(pos === -1) {\n        this.openedNotes.push(noteId);\n      } else {\n        this.openedNotes.splice(pos, 1);\n      }\n    },\n    async loadNotes() {\n      this.$trace(\"lsw-notes.methods.loadNotes\");\n      // *@TODO: seleccionar e importar notes.\n      this.isLoaded = false;\n      const notes = await this.$lsw.database.selectMany(\"Nota\");\n      const notesSorted = notes.sort((n1, n2) => {\n        Segun_urgencia: {\n          const e1 = n1.tiene_estado === 'urgente';\n          const e2 = n2.tiene_estado === 'urgente';\n          if(e1 && e2) {\n            // @OK\n          } else if(e1) {\n            return -1;\n          } else if(e2) {\n            return 1;\n          }\n        }\n        Segun_fecha: {\n          const d1 = LswTimer.utils.getDateFromMomentoText(n1.tiene_fecha);\n          const d2 = LswTimer.utils.getDateFromMomentoText(n2.tiene_fecha);\n          if(d1 >= d2) return -1;\n          return 1;\n        }\n      });\n      this.allNotes = notesSorted;\n      this.isLoaded = true;\n    },\n    editNote(nota) {\n      this.$trace(\"lsw-notes.methods.editNote\");\n      const notasComponent = this;\n      this.$lsw.dialogs.open({\n        title: '💬 Editar nota',\n        template: `\n          <div>\n            <lsw-schema-based-form\n              :show-breadcrumb=\"false\"\n              :on-submit=\"(value) => submitCallback(value)\"\n              :on-delete-row=\"deleteCallback\"\n              :model=\"{\n                  connection: $lsw.database,\n                  databaseId: 'lsw_default_database',\n                  tableId: 'Nota',\n                  rowId: notaId,\n              }\"\n            />\n          </div>\n        `,\n        factory: {\n          data: { notaId: nota.id },\n          methods: {\n            async submitCallback(value) {\n              this.$trace(\"Dialogs.EditarArticulo.methods.submitCallback\");\n              try {\n                await this.$lsw.database.update(\"Nota\", this.notaId, value);\n                await this.$lsw.toasts.send({\n                  title: \"Nota actualizada correctamente\",\n                  text: \"La nota ha sido actualizado con éxito.\"\n                });\n                this.close();\n                notasComponent.loadNotes();\n              } catch (error) {\n                console.log(error);\n                await this.$lsw.toasts.send({\n                  title: \"Error al actualizar nota\",\n                  text: \"No se pudo actualizar la nota por un error: \" + error.message,\n                  background: \"red\",\n                });\n              }\n            },\n            async deleteCallback() {\n              this.$trace(\"Dialogs.EditarArticulo.methods.deleteCallback\");\n              await this.$lsw.database.delete(\"Nota\", this.notaId);\n              this.close();\n              notasComponent.loadNotes();\n              await this.$lsw.toasts.send({\n                title: \"Nota eliminada correctamente\",\n                text: \"La nota se eliminó con éxito.\",\n              });\n            }\n          }\n        }\n      });\n    },\n    async deleteNote(nota) {\n      this.$trace(\"lsw-notes.methods.deleteNote\");\n      const confirmation = await this.$lsw.dialogs.open({\n        title: \"Eliminar nota\",\n        template: `\n          <div>\n            <p>¿Estás seguro de eliminar esta nota?</p>\n            <pre>{{ JSON.stringify(nota, null, 2) }}</pre>\n            <hr />\n            <div class=\"flex_row\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            value: true,\n            nota: nota,\n          }\n        }\n      });\n      if(confirmation !== true) {\n        return;\n      }\n      await this.$lsw.database.delete(\"Nota\", nota.id);\n      await this.loadNotes();\n    },\n    async openAddNoteDialog() {\n      this.$trace(\"lsw-notes.methods.openAddNoteDialog\");\n      const notasComponent = this;\n      const response = await this.$lsw.dialogs.open({\n        title: 'Insertando nota',\n        template: `\n          <lsw-schema-based-form\n            :show-breadcrumb=\"false\"\n            :on-submit=\"(value) => submitCallback(value)\"\n            :model=\"{\n                connection: $lsw.database,\n                databaseId: 'lsw_default_database',\n                tableId: 'Nota',\n                rowId: -1,\n            }\"\n          />\n        `,\n        factory: {\n          methods: {\n            async submitCallback(value) {\n              this.$trace(\"Dialogs.EditarArticulo.methods.submitCallback\");\n              try {\n                await this.$lsw.database.insert(\"Nota\", value);\n                await this.$lsw.toasts.send({\n                  title: \"Nota insertada correctamente\",\n                  text: \"La nota ha sido insertada con éxito.\"\n                });\n                this.close();\n                notasComponent.loadNotes();\n              } catch (error) {\n                console.log(error);\n                await this.$lsw.toasts.send({\n                  title: \"Error al insertar nota\",\n                  text: \"No se pudo actualizar el nota por un error: \" + error.message,\n                  background: \"red\",\n                });\n              }\n            },\n          }\n        }\n      })\n      if(typeof response !== \"object\") {\n        return;\n      }\n      await this.$lsw.database.insert(\"Nota\", response);\n      await this.loadNotes();\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-notes.mounted\");\n      await this.loadNotes();\n      if(this.autoDialog) {\n        this.openAddNoteDialog();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswNotes API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-nueva-feature/lsw-nueva-feature.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 100,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswNuevaFeature component",
      "$code": "Vue.component(\"LswNuevaFeature\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-nueva-feature.data\");\n    return {\n\n    };\n  },\n  methods: {\n    \n  },\n  computed: {\n    \n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-nueva-feature.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswNuevaFeature API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-pegjs-tester/lsw-pegjs-tester.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 124,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswPegjsTester component",
      "$code": "Vue.component(\"LswPegjsTester\", {\n  template: $template,\n  props: {\n    source: {\n      type: String,\n      default: () => 'Example = \"0\"',\n    }\n  },\n  data() {\n    this.$trace(\"lsw-pegjs-tester.data\");\n    return {\n      isLoaded: false,\n      currentAst: false,\n      currentParserSource: this.source,\n      currentParser: false,\n      currentSnippet: \"0\",\n      currentParserSyntaxError: false,\n      currentSnippetSyntaxError: false,\n      showingPaneOf: 'parser',\n    };\n  },\n  methods: {\n    async loadDependencies() {\n      await LswLazyLoads.loadPegjs();\n    },\n    showParserError(error) {\n      this.$refs.parserErrorViewer.setError(error);\n    },\n    showSnippetError(error) {\n      this.$refs.snippetErrorViewer.setError(error);\n    },\n    compileSyntax() {\n      this.$trace(\"lsw-pegjs-tester.methods.compileSyntax\");\n      try {\n        this.currentParser = PEG.buildParser(this.currentParserSource);\n        this.showParserError(false);\n      } catch (error) {\n        this.showParserError(error);\n        this.$lsw.toasts.showError(error);\n        throw error;\n      }\n    },\n    compileParser() {\n      this.$trace(\"lsw-pegjs-tester.methods.compileParser\");\n      this.compileSyntax();\n      this.showingPaneOf = 'snippet';\n    },\n    resetState() {\n      this.$trace(\"lsw-pegjs-tester.methods.resetState\");\n      this.currentSnippetSyntaxError = false;\n      this.currentAst = false;\n    },\n    testSnippet() {\n      this.$trace(\"lsw-pegjs-tester.methods.testSnippet\");\n      try {\n        this.resetState();\n        Check_it_has_parser: {\n          if (!this.currentParser) {\n            throw new Error(\"No parser selected on «testSnippet»\");\n          }\n        }\n        Parse_contents: {\n          try {\n            this.currentAst = this.currentParser.parse(this.currentSnippet);\n            this.currentSnippetSyntaxError = false;\n            this.showSnippetError(false);\n          } catch (error) {\n            this.showSnippetError(error);\n            throw error;\n          }\n        }\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-pegjs-tester.mounted\");\n      await this.loadDependencies();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswPegjsTester API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-protolang-editor/lsw-protolang-editor.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 173,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswProtolangEditor API » LswProtolangEditor component",
      "$code": "Vue.component(\"LswProtolangEditor\", {\n  template: $template,\n  props: {\n    initialContents: {\n      type: String,\n      default: () => \"\"\n    }\n  },\n  data() {\n    this.$trace(\"lsw-protolang-editor.data\");\n    return {\n      error: false,\n      result: false,\n      contents: this.initialContents,\n      placeholder: `rel correr\n  > cardio * 1\n  > musculación * 0.3\n  >> propagador de correr * []`\n    };\n  },\n  methods: {\n    setError(error) {\n      this.$trace(\"lsw-protolang-editor.methods.setError\");\n      this.error = error;\n    },\n    setResult(result) {\n      this.$trace(\"lsw-protolang-editor.methods.setResult\");\n      this.result = result;\n    },\n    async validateCode() {\n      this.$trace(\"lsw-protolang-editor.methods.validateCode\");\n      try {\n        const value = this.contents;\n        const js = await Protolang.codify(value);\n        console.log(js);\n        this.setError(false);\n        this.setResult(js);\n      } catch (error) {\n        this.setError(error);\n      }\n    },\n    async evaluateCode() {\n      this.$trace(\"lsw-protolang-editor.methods.evaluateCode\");\n      try {\n        const value = this.contents;\n        const js = await Protolang.codify(value);\n        console.log(js);\n        this.setError(false);\n      } catch (error) {\n        this.setError(error);\n      }\n    },\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-protolang-editor.mounted\");\n      this.$window.protolangEditor = this;\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswProtolangEditor API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-schema-based-form/lsw-schema-based-form.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 132,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswSchemaBasedForm component",
      "$code": "Vue.component(\"LswSchemaBasedForm\", {\n  template: $template,\n  props: {\n    model: {\n      type: Object,\n      required: true,\n    },\n    onSubmit: {\n      type: Function,\n      default: () => this.$noop,\n    },\n    onValidate: {\n      type: Function,\n      default: () => this.$noop,\n    },\n    onDeleteRow: {\n      type: Function,\n      default: () => this.$noop,\n    },\n    overridenValues: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    this.$trace(\"lsw-schema-based-form.data\");\n    this.validateModel(this.model);\n    const isOperation = (this.model.row && this.model.row.id) || (this.model.rowId && (this.model.rowId !== -1)) ? \"update\" : \"insert\";\n    return {\n      own: this,\n      validFormtypes: [\n        \"text\",\n        \"long-text\",\n        \"options\",\n        \"boolean\",\n        \"date\",\n        \"duration\",\n        \"ref-object\",\n        \"ref-object-by-label\",\n        \"ref-list\",\n        \"ref-relation\",\n        \"source-code\",\n      ],\n      section: 'campos propios', // 'campos reflejos'\n      isShowingFormInfo: false,\n      isLoaded: false,\n      tableDefinition: false,\n      columnDefinitions: false,\n      value: this.model.row ?? false,\n      editableFields: [],\n      minimizedFields: [],\n      isOperation,\n      isUpdateOperation: isOperation === \"update\",\n      isInsertOperation: isOperation === \"insert\",\n    };\n  },\n  methods: {\n    selectSection(section) {\n      this.section = section;\n    },\n    toggleMinimizedField(field) {\n      this.$trace(\"lsw-schema-based-form.methods.toggleMinimizedField\");\n      const fieldPos = this.minimizedFields.indexOf(field);\n      if (fieldPos === -1) {\n        this.minimizedFields.push(field);\n      } else {\n        this.minimizedFields.splice(fieldPos, 1);\n      }\n      this.$forceUpdate(true);\n    },\n    hideMinimizedField(field) {\n      this.$trace(\"lsw-schema-based-form.methods.hideMinimizedField\");\n      const fieldPos = this.minimizedFields.indexOf(field);\n      if (fieldPos === -1) {\n        this.minimizedFields.push(field);\n      }\n      this.$forceUpdate(true);\n    },\n    showMinimizedField(field) {\n      this.$trace(\"lsw-schema-based-form.methods.showMinimizedField\");\n      const fieldPos = this.minimizedFields.indexOf(field);\n      if (fieldPos !== -1) {\n        this.minimizedFields.splice(fieldPos, 1);\n      }\n      this.$forceUpdate(true);\n    },\n    toggleEditableField(field) {\n      this.$trace(\"lsw-schema-based-form.methods.toggleEditableField\");\n      const fieldPos = this.editableFields.indexOf(field);\n      if (fieldPos === -1) {\n        this.editableFields.push(field);\n      } else {\n        this.editableFields.splice(fieldPos, 1);\n      }\n    },\n    saveField(field, value) {\n      this.$trace(\"lsw-schema-based-form.methods.saveField\");\n      console.log(\"Should save field:\", field, value);\n      // *@TODO: use $lsw.database.overwrite to send the field only\n\n    },\n    validateModel(model) {\n      this.$trace(\"lsw-schema-based-form.methods.validateModel\");\n      try {\n        const ensureModel = $ensure({ model }, 1);\n        const checkModel = $check(model);\n        Basic_type_and_signature: {\n          ensureModel.type(\"object\");\n          ensureModel.to.have.uniquelyKeys([\"connection\", \"databaseId\", \"tableId\", \"rowId\", \"row\", \"databaseExplorer\"]);\n          ensureModel.to.have.keys([\"databaseId\", \"tableId\"]);\n          const correctOption = $ensure.$or({\n            \"has connection and rowId (set -1 for new instances)\": () => ensureModel.to.have.key(\"rowId\"),\n            \"has row\": () => ensureModel.to.have.key(\"row\"),\n          });\n          if (!checkModel.to.have.key(\"rowId\")) {\n            ensureModel.to.have.key(\"row\");\n          }\n        }\n        Component_types_and_signatures: {\n          if (checkModel.to.have.key(\"connection\")) {\n            ensureModel.its(\"connection\").type(\"object\");\n          }\n          if (checkModel.to.have.key(\"databaseId\")) {\n            ensureModel.its(\"databaseId\").type(\"string\");\n          }\n          if (checkModel.to.have.key(\"tableId\")) {\n            ensureModel.its(\"tableId\").type(\"string\");\n          }\n          if (checkModel.to.have.key(\"rowId\")) {\n            ensureModel.its(\"rowId\").type(\"number\");\n          }\n          if (checkModel.to.have.key(\"row\")) {\n            $ensure.$or({\n              \"row is object\": () => ensureModel.its(\"row\").type(\"object\"),\n              \"row is false\": () => ensureModel.its(\"row\").type(\"boolean\").is(false),\n            });\n          }\n          if(checkModel.to.have.key(\"databaseExplorer\")) {\n            ensureModel.its(\"databaseExplorer\").type(\"object\");\n          }\n        }\n      } catch (error) {\n        console.error(\"Failed validating «model» property on «lsw-schema-based-form.validateModel»\");\n        console.error(error);\n      }\n    },\n    async loadValue() {\n      this.$trace(\"lsw-schema-based-form.methods.loadValue\");\n      if (this.model.rowId) {\n        const originalValues = await LswDatabase.pickRow(this.model.databaseId, this.model.tableId, this.model.rowId);\n        this.value = Object.assign({}, originalValues, this.overridenValues);\n      }\n    },\n    onlyKnownTypes(formtype) {\n      if(this.validFormtypes.indexOf(formtype) !== -1) {\n        return formtype;\n      }\n      return \"long-text\";\n    },\n    async loadSchema() {\n      this.$trace(\"lsw-schema-based-form.methods.loadSchema\");\n      const columnIds = Object.keys($lswSchema.$schema.hasTables[this.model.tableId].hasColumns);\n      for(let columnId of columnIds) {\n        const columnData = $lswSchema.$schema.hasTables[this.model.tableId].hasColumns[columnId];\n        Object.assign(columnData, {\n          belongsToDatabase: this.model.databaseId,\n          belongsToTable: this.model.tableId,\n          hasFormtypeSettings: {\n            id: 'lsw-' + this.onlyKnownTypes(columnData.isFormType) + '-control',\n            name: columnId,\n            input: {\n              props: {\n                placeholder: columnData.hasPlaceholder,\n              },\n              events: {\n                \n              }\n            },\n          }\n        })\n      }\n      this.tableDefinition = $lswSchema.$schema.hasTables[this.model.tableId];\n      this.columnDefinitions = this.tableDefinition.hasColumns;\n    },\n    toggleFormInfo() {\n      this.$trace(\"lsw-schema-based-form.methods.toggleFormInfo\");\n      this.isShowingFormInfo = !this.isShowingFormInfo;\n    },\n    closeEditables() {\n      this.$trace(\"lsw-schema-based-form.methods.closeEditables\");\n      const uneditables = this.$el.querySelectorAll(\".lsw_form_control .lsw_control_label .button_to_uneditable\");\n      for(let index=0; index<uneditables.length; index++) {\n        const uneditable = uneditables[index];\n        uneditable.click();\n      }\n    },\n    openEditables() {\n      this.$trace(\"lsw-schema-based-form.methods.openEditables\");\n      const editables = this.$el.querySelectorAll(\".lsw_form_control .lsw_control_label .button_to_editable\");\n      for(let index=0; index<editables.length; index++) {\n        const editable = editables[index];\n        editable.click();\n      }\n    },\n    validateForm() {\n      this.$trace(\"lsw-schema-based-form.methods.validateForm\");\n      return this.$refs.schemaForm0.$xform.validate();\n    },\n    async submitForm(v) {\n      this.$trace(\"lsw-schema-based-form.methods.submitForm\");\n      return await this.$refs.schemaForm0.$xform.submit();\n    },\n    passToPrinter() {\n      this.$trace(\"lsw-schema-based-form.methods.passToPrinter\");\n      const value = this.$refs.schemaForm0.$xform.getValue();\n      this.$lsw.dialogs.open({\n        title: \"Impresión de estado de formulario\",\n        template: `\n          <lsw-data-printer-report :input=\"input\" />\n        `,\n        factory: { data: { input: value } },\n      });\n    },\n    async deleteRow() {\n      this.$trace(\"lsw-schema-based-form.methods.deleteRow\");\n      const confirmed = await this.$lsw.dialogs.open({\n        id: `eliminar-registro-${this.model.tableId}-${this.model.rowId || this.model.row.id}-${LswRandomizer.getRandomString(5)}`,\n        title: \"Eliminar registro\",\n        template: `\n          <div>\n            <div class=\"pad_2 font_weight_bold\">ATENCIÓN: </div>\n            <div class=\"pad_2\">¿Seguro que quieres eliminar el registro <b>{{ model.tableId }}</b> cuyo <b>id</b>#<b>{{ model.rowId || model.row.id }}</b>?</div>\n            <div class=\"pad_2\">\n              <pre class=\"pad_2 codeblock\">{{ JSON.stringify(model.row || rowValue, null, 2) }}</pre>\n            </div>\n            <hr class=\"margin_0\" />\n            <div class=\"pad_2 text_align_right\">\n              <button class=\"supermini danger_button\" v-on:click=\"() => accept(true)\">Eliminar</button>\n              <button class=\"supermini \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            model: this.model,\n            rowValue: this.value\n          }\n        }\n      });\n      if(!confirmed) return false;\n      const rowIdentifier = this.model.rowId || this.model.row.id;\n      await this.$lsw.database.delete(this.model.tableId, rowIdentifier);\n      if(this.onDeleteRow) {\n        const result = this.onDeleteRow(this.model.rowId, this.model.tableId, true);\n        // INTERCEPT REDIRECTION RETURNING FALSE FROM onDeleteRow PARAMETRIC CALLBACK\n        if(result === false) return;\n      }\n      if(this.model.databaseExplorer) {\n        if(this.model.databaseExplorer.showBreadcrumb) {\n          this.model.databaseExplorer.selectPage(\"LswPageRows\", {\n            database: this.model.databaseId,\n            table: this.model.tableId,\n          });\n        } else {\n          \n        }\n      }\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-schema-based-form.mounted\");\n      await this.loadSchema();\n      await this.loadValue();\n      this.isLoaded = true;\n      this.$nextTick(() => {\n        window.sf0 = this.$refs.schemaForm0;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSchemaBasedForm API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-search-replacer/lsw-search-replacer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 104,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswSearchReplacer component",
      "$code": "Vue.component(\"LswSearchReplacer\", {\n  template: $template,\n  props: {\n    input: {\n      type: String,\n      default: () => false,\n    },\n    initialSearch: {\n      type: String,\n      default: () => \"\",\n    },\n    initialReplace: {\n      type: String,\n      default: () => \"\",\n    },\n    onAccept: {\n      type: Function,\n      default: () => {},\n    },\n    onCancel: {\n      type: Function,\n      default: () => {},\n    },\n    onFinally: {\n      type: Function,\n      default: () => {},\n    },\n  },\n  data() {\n    this.$trace(\"lsw-search-replacer.data\");\n    return {\n      currentInput: this.input,\n      currentMatch: false,\n      search: this.initialSearch || \"\",\n      searchAsRegexp: false,\n      replace: this.initialReplace || \"\",\n    };\n  },\n  methods: {\n    toggleRegexpMode() {\n      this.$trace(\"lsw-search-replacer.methods.toggleRegexpMode\");\n      this.searchAsRegexp = !this.searchAsRegexp;\n    },\n    accept() {\n      this.$trace(\"lsw-search-replacer.methods.accept\");\n      this.onAccept(this.currentInput, this);\n      this.onFinally(this.currentInput, this);\n    },\n    cancel() {\n      this.$trace(\"lsw-search-replacer.methods.cancel\");\n      this.onCancel(this.currentInput, this);\n      this.onFinally(this.currentInput, this);\n    },\n    illuminateMatches() {\n      this.$trace(\"lsw-search-replacer.methods.illuminateMatches\");\n      if(!this.searchAsRegexp) {\n\n      }\n    },\n    replaceAllMatches() {\n      this.$trace(\"lsw-search-replacer.methods.replaceAllMatches\");\n      if(this.searchAsRegexp) {\n        const regexp = new RegExp(this.search, \"g\");\n        this.currentInput = this.currentInput.replaceAll(regexp, this.replace);\n      } else {\n        this.currentInput = this.currentInput.replaceAll(this.search, this.replace);\n      }\n    },\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-search-replacer.mounted\");\n    \n  },\n  unmounted() {\n    this.$trace(\"lsw-search-replacer.unmounted\");\n    \n  }\n});\n",
      "$code.label": "LswSearchReplacer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-sourceable/lsw-sourceable.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 96,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswSourceable component",
      "$code": "Vue.component(\"LswSourceable\", {\n  template: $template,\n  props: {\n    fixedId: {\n      type: [String, Boolean],\n      default: () => false,\n    },\n    source: {\n      type: [String, Boolean],\n      default: () => false,\n    },\n    composition: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    this.$trace(\"lsw-sourceable.data\");\n    const reflectedId = this.fixedId || LswRandomizer.getRandomString(10);\n    return {\n      isLoaded: false,\n      componentId: \"lsw-sourceable-\" + reflectedId,\n    };\n  },\n  methods: {\n    loadReflection() {\n      this.$trace(\"lsw-sourceable.methods.loadReflection\");\n      const that = this;\n      const source = this.source || this.$slots.default;\n      Vue.component(this.componentId, {\n        template: \"<div>\" + source + \"</div>\",\n        ...this.composition,\n      });\n      this.isLoaded = true;\n    },\n    unloadReflection() {\n      this.$trace(\"lsw-sourceable.methods.loadReflection\");\n      delete Vue.options.components[this.componentId];\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-sourceable.mounted\");\n    this.loadReflection();\n  },\n  unmounted() {\n    this.$trace(\"lsw-sourceable.unmounted\");\n    this.unloadReflection();\n  }\n});\n",
      "$code.label": "LswSourceable API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-form-accion/lsw-spontaneous-form-accion.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 191,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormAccion API » LswSpontaneousFormAccion component",
      "$code": "Vue.component(\"LswSpontaneousFormAccion\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-form-accion.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-form-accion.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSpontaneousFormAccion API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-form-articulo/lsw-spontaneous-form-articulo.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 195,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormArticulo API » LswSpontaneousFormAccion component",
      "$code": "Vue.component(\"LswSpontaneousFormArticulo\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-form-articulo.data\");\n    return {\n      ...this.getInitialContents(),\n      opcionesGarantia: {\n        \"ns/nc\": \"ns/nc\",\n        \"muy inestable\": \"muy inestable\",\n        \"inestable\": \"inestable\",\n        \"estable\": \"estable\",\n        \"muy estable\": \"muy estable\",\n        \"popular\": \"popular\",\n      }\n    };\n  },\n  methods: {\n    getInitialContents() {\n      return Object.assign({}, {\n        tiene_titulo: \"\",\n        tiene_contenido: \"\",\n        tiene_categorias: \"\",\n        tiene_garantia: \"ns/ns\",\n        tiene_fecha: LswTimer.utils.fromDateToDatestring(new Date()),\n        tiene_tags: \"\",\n      });\n    },\n    async addArticulo() {\n      this.$trace(\"lsw-spontaneous-form-articulo.methods.addArticulo\");\n      try {\n      await this.$lsw.database.insert(\"Articulo\", {\n        tiene_titulo: this.tiene_titulo,\n        tiene_contenido: this.tiene_contenido,\n        tiene_categorias: this.tiene_categorias,\n        tiene_garantia: this.tiene_garantia,\n        tiene_fecha: this.tiene_fecha,\n        tiene_tags: this.tiene_tags,\n      });\n      this.$lsw.toasts.send({\n        title: \"Artículo insertado\",\n        message: \"El artículo fue insertado con éxito.\"\n      });\n      Object.assign(this, this.getInitialContents());\n    } catch (error) {\n      console.log(error);\n      this.$lsw.toasts.send({\n        title: \"Error al insertar artículo\",\n        message: \"Hubo errores al insertar el artículo: \" + error.message\n      });\n    }\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-form-articulo.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSpontaneousFormArticulo API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-form-lista/lsw-spontaneous-form-lista.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 189,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormLista API » LswSpontaneousFormAccion component",
      "$code": "Vue.component(\"LswSpontaneousFormLista\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-form-lista.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-form-lista.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSpontaneousFormLista API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-form-nota/lsw-spontaneous-form-nota.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 187,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormNota API » LswSpontaneousFormAccion component",
      "$code": "Vue.component(\"LswSpontaneousFormNota\", {\n  template: $template,\n  props: {\n    onSubmitted: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  data() {\n    this.$trace(\"lsw-spontaneous-form-nota.data\");\n    return this.getInitialData({\n\n    });\n  },\n  methods: {\n    getInitialData(extendedWith = {}) {\n      return Object.assign({\n        tiene_titulo: \"\",\n        tiene_contenido: \"\",\n        tiene_fecha: LswTimer.utils.fromDateToDatestring(new Date()),\n        tiene_categorias: \"\",\n      }, extendedWith);\n    },\n    async addNota() {\n      this.$trace(\"lsw-spontaneous-form-nota.methods.addNota\");\n      const nota = {\n        tiene_titulo: this.tiene_titulo,\n        tiene_contenido: this.tiene_contenido,\n        tiene_fecha: this.tiene_fecha,\n        tiene_categorias: this.tiene_categorias,\n      };\n      if(nota.tiene_titulo.trim() === \"\") {\n        const superaLimite = nota.tiene_contenido.length > 30;\n        nota.tiene_titulo = nota.tiene_contenido.substr(0,30) + (superaLimite ? \"...\" : \"\");\n      }\n      const notaId = await this.$lsw.database.insert(\"Nota\", nota);\n      Object.assign(this, this.getInitialData());\n      this.$forceUpdate(true);\n      this.focusContenidos();\n      if(this.onSubmitted) {\n        this.onSubmitted(notaId, nota, this);\n      }\n    },\n    focusContenidos() {\n      this.$trace(\"lsw-spontaneous-form-nota.methods.addNota\");\n      // this.$refs.tiene_contenido.focus();\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-form-nota.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSpontaneousFormNota API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-form-recordatorio/lsw-spontaneous-form-recordatorio.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 203,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormRecordatorio API » LswSpontaneousFormAccion component",
      "$code": "Vue.component(\"LswSpontaneousFormRecordatorio\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-form-recordatorio.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-form-recordatorio.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSpontaneousFormRecordatorio API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-table-accion/lsw-spontaneous-table-accion.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 194,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableAccion API » LswSpontaneousTableAccion component",
      "$code": "Vue.component(\"LswSpontaneousTableAccion\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-table-accion.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-table-accion.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSpontaneousTableAccion API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-table-articulo/lsw-spontaneous-table-articulo.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 200,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableArticulo API » LswSpontaneousTableArticulo component",
      "$code": "Vue.component(\"LswSpontaneousTableArticulo\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-table-articulo.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-table-articulo.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSpontaneousTableArticulo API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-table-lista/lsw-spontaneous-table-lista.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 191,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableLista API » LswSpontaneousTableLista component",
      "$code": "Vue.component(\"LswSpontaneousTableLista\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-table-lista.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-table-lista.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSpontaneousTableLista API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-table-nota/lsw-spontaneous-table-nota.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 188,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableNota API » LswSpontaneousTableNota component",
      "$code": "Vue.component(\"LswSpontaneousTableNota\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-table-nota.data\");\n    return {\n      allNotas: false,\n      currentNotas: false,\n      currentPage: 0,\n      totalPages: 0,\n      currentItemsPerPage: 100,\n      searchText: '',\n      selectedNotas: [],\n    };\n  },\n  methods: {\n    toggleNota(notaId) {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.toggleNota\");\n      const pos = this.selectedNotas.indexOf(notaId);\n      if (pos === -1) {\n        this.selectedNotas.push(notaId);\n      } else {\n        this.selectedNotas.splice(pos, 1);\n      }\n    },\n    goToNextPage() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToNextPage\");\n      if ((this.currentPage + 1) < this.totalPages) {\n        this.currentPage++;\n        this.synchronizePagination();\n      }\n    },\n    goToFirstPage() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToFirstPage\");\n      this.currentPage = 0;\n      this.synchronizePagination();\n    },\n    goToLastPage() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToLastPage\");\n      this.currentPage = (this.totalPages - 1);\n      this.synchronizePagination();\n    },\n    goToPreviousPage() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToPreviousPage\");\n      if (this.currentPage > 0) {\n        this.currentPage--;\n        this.synchronizePagination();\n      }\n    },\n    async loadNotes() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.loadNotes\");\n      const allNotas = await this.$lsw.database.selectMany(\"Nota\");\n      const sortedNotas = allNotas.filter(nota => {\n        if(this.searchText === '') {\n          return true;\n        }\n        return JSON.stringify(nota).toLowerCase().indexOf(this.searchText.toLowerCase()) !== -1;\n      }).sort((n1, n2) => {\n        Ordena_por_urgencia: {\n          const estado1 = n1.tiene_estado;\n          const estado2 = n2.tiene_estado;\n          const urgencia1 = estado1 === \"urgente\" ? 100 : 1;\n          const urgencia2 = estado2 === \"urgente\" ? 100 : 1;\n          if (urgencia1 > urgencia2) {\n            return -1;\n          } else if (urgencia1 < urgencia2) {\n            return 1;\n          }\n        }\n        Ordena_por_fecha: {\n          const fecha1 = LswTimer.utils.fromDatestringToDate(n1.tiene_fecha);\n          const fecha2 = LswTimer.utils.fromDatestringToDate(n2.tiene_fecha);\n          if (fecha1 > fecha2) {\n            return -1;\n          } else if (fecha1 < fecha2) {\n            return 1;\n          } else {\n            return -1;\n          }\n        }\n      });\n      this.allNotas = sortedNotas;\n      this.synchronizePagination();\n    },\n    synchronizePagination() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.synchronizePagination\");\n      this.totalPages = (() => {\n        const totalFullPages = Math.floor(this.allNotas.length / this.currentItemsPerPage);\n        const totalResidualPages = this.allNotas.length % this.currentItemsPerPage ? 1 : 0;\n        return totalFullPages + totalResidualPages;\n      })();\n      this.currentNotas = (() => {\n        const paginatedNotas = [];\n        const minIndex = this.currentPage * this.currentItemsPerPage;\n        const maxIndex = (this.currentPage + 1) * this.currentItemsPerPage;\n        for (let index = 0; index < this.allNotas.length; index++) {\n          const nota = this.allNotas[index];\n          const validByMin = index >= minIndex;\n          const validByMax = index < maxIndex;\n          const isValid = validByMin && validByMax;\n          if (isValid) {\n            paginatedNotas.push(nota);\n          }\n        }\n        return paginatedNotas;\n      })();\n    },\n    async goToDeleteNota(row) {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToDeleteNota\");\n      const confirmed = await this.$lsw.dialogs.open({\n        id: `eliminar-registro-Nota-#${row.id}-${LswRandomizer.getRandomString(5)}`,\n        title: \"Eliminar registro\",\n        template: `\n          <div>\n            <div class=\"pad_2 font_weight_bold\">ATENCIÓN: </div>\n            <div class=\"pad_2\">¿Seguro que quieres eliminar el registro <b>{{ tableId }}</b> cuyo <b>id</b>#<b>{{ rowId }}</b>?</div>\n            <div class=\"pad_2\">\n              <pre class=\"pad_2 codeblock\">{{ JSON.stringify(rowValue, null, 2) }}</pre>\n            </div>\n            <hr class=\"margin_0\" />\n            <div class=\"pad_2 text_align_right\">\n              <button class=\"supermini danger_button\" v-on:click=\"() => accept(true)\">Eliminar</button>\n              <button class=\"supermini \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            tableId: \"Nota\",\n            rowValue: row,\n            rowId: row.id\n          }\n        }\n      });\n      if (!confirmed) return false;\n      await this.$lsw.database.delete(\"Nota\", row.id);\n      this.$lsw.toasts.send({\n        title: `Registro eliminado`,\n        text: `El registro #${this.notaId} de «Nota» fue eliminado correctamente.`\n      });\n      this.loadNotes();\n    },\n    async goToEditNota(notaId) {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToEditNota\");\n      await this.$lsw.dialogs.open({\n        title: \"Actualizar nota\",\n        template: `\n          <div>\n            <lsw-schema-based-form\n              :on-submit=\"(value) => submitCallback(value)\"\n              :on-delete-row=\"deleteCallback\"\n              :model=\"{\n                  connection: $lsw.database,\n                  databaseId: 'lsw_default_database',\n                  tableId: 'Nota',\n                  rowId: notaId,\n              }\"\n            />\n          </div>\n        `,\n        factory: {\n          methods: {\n            async submitCallback(value) {\n              console.log(\"Submiting form: \", value);\n              await this.$lsw.database.update(\"Nota\", notaId, value);\n              this.$lsw.toasts.send({\n                title: `Nueva actualización`,\n                text: `El registro #${this.notaId} de «Nota» fue actualizado correctamente.`\n              });\n              this.close();\n            },\n            async deleteCallback() {\n              // EL DELETE YA LO HACE DENTRO, POR ALGUNA RAZÓN, NO ME ACABES DE PREGUNTAR.\n              this.close();\n            }\n          },\n          data: {\n            notaId,\n          }\n        }\n      });\n    },\n    goToAddNota() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToEditNota\");\n      const that = this;\n      this.$lsw.dialogs.open({\n        title: \"Añadir nota\",\n        template: `<lsw-spontaneous-form-nota :on-submitted=\"closeAndRefresh\" />`,\n        factory: {\n          methods: {\n            closeAndRefresh() {\n              this.close();\n              that.loadNotes();\n            }\n          }\n        }\n      });\n    },\n    async sendNotaToArticulos(nota) {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.sendNotaToArticulos\");\n      const respuesta = await this.$lsw.dialogs.open({\n        title: \"Pasar nota a artículo\",\n        template: `\n          <div class=\"pad_1\">\n            <div>Vas a pasar la siguiente nota a artículo: </div>\n            <div class=\"pad_2\">\n              <pre class=\"codeblock\">{{ nota }}</pre>\n            </div>\n            <div>¿Estás seguro?</div>\n            <hr/>\n            <div class=\"flex_row centered text_align_right\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_right_1\">\n                <button class=\"supermini danger_button\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: { data: { nota } },\n      });\n      if(respuesta === -1) return;\n      const articuloNew = Object.assign({\n        tiene_titulo: '',\n        tiene_fecha: '',\n        tiene_categorias: '',\n        tiene_contenido: '',\n        tiene_garantia: '',\n        tiene_tags: '',\n      }, nota);\n      delete articuloNew.id;\n      await this.$lsw.database.insert(\"Articulo\", articuloNew);\n      await this.$lsw.database.delete(\"Nota\", nota.id);\n      this.$lsw.toasts.send({\n        title: \"Nota a artículo bien\",\n        text: \"La nota ha sido pasada a artículo correctamente\",\n      });\n      this.loadNotes();\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-table-nota.mounted\");\n      this.loadNotes();\n      this.$window.sptt_notas = this;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSpontaneousTableNota API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-table-recordatorio/lsw-spontaneous-table-recordatorio.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 212,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableRecordatorio API » LswSpontaneousTableRecordatorio component",
      "$code": "Vue.component(\"LswSpontaneousTableRecordatorio\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-table-recordatorio.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-table-recordatorio.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSpontaneousTableRecordatorio API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-sqlite-console/lsw-sqlite-console.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 102,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswSqliteConsole component",
      "$code": "Vue.component(\"LswSqliteConsole\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-sqlite-console.data\");\n    return {\n      selectedSection: \"js\", // \"js\", \"sql\", \"data\"\n      code: `\n\nSELECT * FROM sqlite_master;\n\n`.trim(),\n      output: \"\",\n      executionError: false,\n      isSqliteLoaded: false,\n    };\n  },\n  methods: {\n    async loadEnvironment() {\n      LswLazyLoads.loadSqlite().then(() => {\n        this.isSqliteLoaded = true;\n      });\n    },\n    async executeCode() {\n      this.$trace(\"lsw-sqlite-console.methods.executeCode\");\n      try {\n        this.output = await LswSqlite.execute(this.code);\n      } catch (error) {\n        this.output = \"Error\";\n        this.executionError = error;\n        console.error(error);\n      }\n    },\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-sqlite-console.mounted\");\n      await this.loadEnvironment();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSqliteConsole API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-sqlite-explorer/lsw-sqlite-explorer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 104,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswSqliteExplorer component",
      "$code": "Vue.component(\"LswSqliteExplorer\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-sqlite-explorer.data\");\n    return {\n      selectedSection: \"data\",\n      selectedDataSection: \"tables\",\n      selectedDataTable: false,\n      sqliteResolvable: Promise.withResolvers(),\n      isSqliteLoaded: false,\n      schema: false,\n      rows: false,\n    };\n  },\n  methods: {\n    loadEnvironment() {\n      this.$trace(\"lsw-sqlite-explorer.methods.loadEnvironment\");\n      return LswLazyLoads.loadSqlite().then(() => {\n        this.isSqliteLoaded = true;\n        this.sqliteResolvable.resolve();\n      });\n    },\n    async loadSchema() {\n      this.$trace(\"lsw-sqlite-explorer.methods.loadSchema\");\n      this.sqliteResolvable.promise.then(() => {\n        this.schema = LswSqlite.getSchema();\n      });\n    },\n    async saveDatabase() {\n      this.$trace(\"lsw-sqlite-explorer.methods.saveDatabase\");\n      try {\n        await LswSqlite.saveDatabase();\n        this.$lsw.toasts.send({\n          title: \"Datos guardados\",\n          text: \"Los dadtos fueron guardados con éxito.\"\n        });\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    },\n    goToData() {\n      this.$trace(\"lsw-sqlite-explorer.methods.goToData\");\n      this.selectedSection = \"data\";\n    },\n    goToConsole() {\n      this.$trace(\"lsw-sqlite-explorer.methods.goToConsole\");\n      this.selectedSection = \"console\";\n    },\n    goToTables() {\n      this.$trace(\"lsw-sqlite-explorer.methods.goToTables\");\n      this.selectedSection = \"data\";\n      this.selectedDataSection = \"tables\";\n    },\n    openTable(tableId) {\n      this.$trace(\"lsw-sqlite-explorer.methods.goToTables\");\n      this.selectedSection = \"data\";\n      this.selectedDataSection = \"rows\";\n      this.selectedDataTable = tableId;\n    },\n    goToNewItem() {\n      this.$trace(\"lsw-sqlite-explorer.methods.goToNewItem\");\n      this.selectedDataSection = \"new-row\";\n    },\n    goToRows() {\n      this.$trace(\"lsw-sqlite-explorer.methods.goToRows\");\n      this.selectedDataSection = \"rows\";\n    }\n  },\n  watch: {\n    selectedDataTable(tableId) {\n      Cascadea_las_rows: {\n        if(typeof tableId === \"string\") {\n          (async () => {\n            this.rows = await LswSqlite.selectMany(tableId, []);\n          })();\n        } else {\n          this.rows = false;\n        }\n      }\n    }\n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-sqlite-explorer.mounted\");\n      this.loadEnvironment();\n      this.loadSchema();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSqliteExplorer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-syntax-error-viewer/lsw-syntax-error-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 130,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswSyntaxErrorViewer component",
      "$code": "Vue.component(\"LswSyntaxErrorViewer\", {\n  template: $template,\n  props: {\n    error: {\n      type: [Object, Boolean],\n      default: () => false\n    },\n    onClearError: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  data() {\n    this.$trace(\"lsw-syntax-error-viewer.data\");\n    return {\n      currentError: this.error,\n    };\n  },\n  methods: {\n    setError(error = undefined) {\n      this.$trace(\"lsw-syntax-error-viewer.methods.setError\");\n      this.currentError = error;\n      if(typeof error === \"undefined\") {\n        this.onClearError();\n      }\n    },\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-syntax-error-viewer.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSyntaxErrorViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-test-context-viewer/lsw-test-context-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 140,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Test Context Viewer API » LswTestContextViewer component",
      "$code": "Vue.component(\"LswTestContextViewer\", {\n  template: $template,\n  props: {\n    testsPage: {\n      type: [Object, Boolean],\n      default: false,\n    }\n  },\n  data() {\n    const testContext = LswTestContext.create({}, this);\n    const testAsserter = testContext.$asserter;\n    return {\n      isStarted: false,\n      isFinished: false,\n      testAssertions: [],\n      testContext,\n      testAsserter,\n      testCronometer: undefined,\n      testContextButtons: this.testsPage ? [{\n        text: \"🪖 ↗️\",\n        event: () => this.testsPage.selectSection(\"coverage\")\n      }] : [],\n    };\n  },\n  methods: {\n    async startTests() {\n      this.$trace(\"lsw-tests-context-viewer.methods.startTests\");\n      this.isStarted = true;\n      this.testCronometer = LswTemporizer.create();\n      Export_assert_expanded: {\n        const assert = this.testAsserter;\n        // Overwrite global assert function:\n        window.assert = assert;\n        // Inject title feature externally:\n        window.assert.title = (title) => {\n          this.testAssertions.unshift({ title });\n        };\n      }\n      assert.title(\"Ready for tests\");\n      assert.as(\"starting tests\", true);\n      this.testContext.start();\n      // Run your custom tests:\n      await this.callTests();\n    },\n    async callTests() {\n      this.$trace(\"lsw-tests-context-viewer.methods.callTests\");\n      // @TODO: call all the tests from here:\n      await importer.scriptAsync(\"./assets/tests/cases/app/start-your-test-here.js\");\n      await importer.scriptAsync(\"./assets/tests/cases/framework/lsw.can-find-all-globals.js\");\n    },\n    addAssertion(text, value) {\n      this.$trace(\"lsw-tests-context-viewer.methods.addAssertion\");\n      this.testAssertions.unshift({\n        text,\n        value,\n        moment: this.testCronometer.getTime()\n      });\n    },\n  },\n  async mounted() {\n    this.$trace(\"lsw-tests-context-viewer.mounted\");\n  }\n});\n",
      "$code.label": "LswTestContextViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-test-context-viewer/lsw-test-context-viewer.js",
      "$location": {
        "start": {
          "offset": 1491,
          "line": 48,
          "column": 1
        },
        "end": {
          "offset": 1537,
          "line": 49,
          "column": 1
        }
      },
      "TODO": "call all the tests from here:",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-tester-module-viewer/lsw-tester-module-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 133,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Unit Test Page » LswTesterModuleViewer component",
      "$code": "window.asserters = [];\nVue.component(\"LswTesterModuleViewer\", {\n  template: $template,\n  props: {\n    tester: {\n      type: Object,\n      required: true,\n    },\n    test: {\n      type: Object,\n      required: true,\n    }\n  },\n  data() {\n    return {\n      state: \"not started\", // \"started\", \"ignored\", \"passed\" or \"failed\"\n      assertions: [],\n    };\n  },\n  methods: {\n    addAssertion(assertionData) {\n      this.$trace(\"lsw-tester-module-viewer.methods.addAssertion\");\n      this.assertions = [].concat(this.assertions).concat([assertionData]);\n      this.$forceUpdate(true);\n    },\n    changeState(newState) {\n      this.$trace(\"lsw-tester-module-viewer.methods.changeState\");\n      this.state = newState;\n      this.$forceUpdate(true);\n    }\n  },\n  watch: {},\n  async mounted() {\n    this.$trace(\"lsw-tests-page.mounted\");\n    asserters.push(this);\n  }\n});\n",
      "$code.label": "LswTesterModuleViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-tester-viewer/lsw-tester-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 121,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Unit Test Page » LswTesterViewer component",
      "$code": "const LswTesterViewerUtils = {};\nLswTesterViewerUtils.getEventSourceId = function(eventData) {\n  return eventData?.value?.id || \"tester\";\n};\nLswTesterViewerUtils.initModule = function(component, id) {\n  if(!(id in component.states)) {\n    component.states[id] = \"not started\";\n  }\n};\nLswTesterViewerUtils.registerEvent = function(component, eventType, id, eventData) {\n  LswTesterViewerUtils.initModule(component, id);\n  Notify_new_state_to_tester: {\n    if(eventType === \"onStartModule\") {\n      component.states[id] = \"started\";\n    } else if(eventType === \"onSuccessModule\") {\n      component.states[id] = \"passed\";\n      Notify_to_submodule: {\n        const selector = `[data-test-module=${JSON.stringify(id)}]`;\n        const moduleComponent = LswDom.findVue(selector, false, component.$refs.esquema_de_tests);\n        if(!moduleComponent) {\n          break Notify_new_state_to_tester;\n        }\n        moduleComponent.changeState(\"passed\");\n      }\n    } else if(eventType === \"onErrorModule\") {\n      component.states[id] = \"failed\";\n      Notify_to_submodule: {\n        const selector = `[data-test-module=${JSON.stringify(id)}]`;\n        const moduleComponent = LswDom.findVue(selector, false, component.$refs.esquema_de_tests);\n        if(!moduleComponent) {\n          break Notify_new_state_to_tester;\n        }\n        moduleComponent.changeState(\"failed\");\n      }\n    }\n  }\n  Append_assertion: {\n    if((eventType === \"onSuccessAssertion\") || (eventType === \"onErrorAssertion\")) {\n      const selector = `[data-test-module=${JSON.stringify(id)}]`;\n      const moduleComponent = LswDom.findVue(selector, false, component.$refs.esquema_de_tests);\n      if(!moduleComponent) {\n        break Append_assertion;\n      }\n      moduleComponent.addAssertion({\n        text: eventData.assertionText,\n        result: eventData.assertionResult,\n      });\n    }\n  }\n};\nVue.component(\"LswTesterViewer\", {\n  template: $template,\n  props: {\n    tester: {\n      type: Object,\n      required: true,\n    },\n    testsPage: {\n      type: Object,\n      default: () => false\n    }\n  },\n  data() {\n    return this.getInitialState();\n  },\n  methods: {\n    getInitialState() {\n      this.$trace(\"lsw-tests-page.methods.getInitialState\");\n      return {\n        isRun: false,\n        isStarted: false,\n        isLoaded: false,\n        isShowingSubmodules: false,\n        isShowingErrors: false,\n        isShowingEventsConsole: false,\n        isSuccessfullyCompleted: false,\n        currentErrors: [],\n        loadingError: false,\n        runningError: false,\n        temporizer: LswTemporizer.create(),\n        states: {},\n      };\n    },\n    goToCoverage() {\n      this.$trace(\"lsw-tests-page.methods.goToCoverage\");\n      if(this.testsPage) {\n        this.testsPage.selectSection(\"coverage\");\n      }\n    },\n    addEvent(event, eventData) {\n      this.$trace(\"lsw-tests-page.methods.addEvent\");\n      if(event.eventType === \"onStartTester\") {\n        this.temporizer.start();\n      } else if(event.eventType === \"onEndTester\") {\n        this.isSuccessfullyCompleted = this.currentErrors.length === 0;\n      } else if((event.eventType === \"onErrorModule\") || (event.eventType === \"onErrorAssertion\")) {\n        this.currentErrors.push({\n          errorType: event.eventType,\n          ...eventData\n        });\n      }\n      const id = LswTesterViewerUtils.getEventSourceId(eventData);\n      The_magic_should_happen_mostly_here: {\n        eventData.timeoff = this.temporizer.getTime();\n        LswTesterViewerUtils.registerEvent(this, event.eventType, id, eventData);\n      }\n      this.$refs.eventsConsole.textContent = `>> ${id} > ${ event.eventType } @${eventData.timeoff}\\n${ this.$refs.eventsConsole.textContent }`;\n    },\n    toggleEventsConsole() {\n      this.$trace(\"lsw-tests-page.methods.toggleEventsConsole\");\n      this.isShowingEventsConsole = !this.isShowingEventsConsole;\n    },\n    toggleErrors() {\n      this.$trace(\"lsw-tests-page.methods.toggleErrors\");\n      this.isShowingErrors = !this.isShowingErrors;\n    },\n    toggleSubmodules() {\n      this.$trace(\"lsw-tests-page.methods.toggleSubmodules\");\n      this.isShowingSubmodules = !this.isShowingSubmodules;\n    },\n    validateTester() {\n      this.$trace(\"lsw-tests-page.methods.validateTester\");\n      $ensure(this.tester).to.be.instanceOf(LswTester);\n    },\n    async loadTester() {\n      this.$trace(\"lsw-tests-page.methods.loadTester\");\n      try {\n        this.validateTester();\n        await this.tester.options({}).load();\n      } catch (error) {\n        this.loadingError = error;\n        this.$lsw.toasts.showError(error);\n        console.log(error);\n      } finally {\n        this.isLoaded = true;\n      }\n    },\n    async runTester() {\n      this.$trace(\"lsw-tests-page.methods.runTester\");\n      try {\n        this.isStarted = true;\n        const viewer = this;\n        await this.tester.options({\n          trace: (Vue?.prototype?.$lsw?.logger?.$options?.active ),\n          onAnything(event, ...args) {\n            viewer.addEvent(event, ...args);\n          }\n        }).run(1);\n      } catch (error) {\n        this.runningError = error;\n        this.$lsw.toasts.showError(error);\n        console.log(error);\n      } finally {\n        this.isRun = true;\n      }\n    },\n    resetTester() {\n      this.$trace(\"lsw-tests-page.methods.resetTester\");\n      LswDomIrruptor.abrirTestsDeAplicacion();\n    }\n  },\n  watch: {},\n  computed: {\n    isSuccessfullyCompleted() {\n\n    },\n    isCompleted() {\n      return this.tester.$isExecuted;\n    },\n    currentState() {\n      return !this.isLoaded ? \"to be loaded\" :\n        !this.isStarted ? \"loaded\" :\n        !this.isRun ? \"running\" : \"finished\";\n    }\n  },\n  async mounted() {\n    this.$trace(\"lsw-tests-page.mounted\");\n    this.loadTester();\n    window.testerviewer = this;\n  }\n});\n",
      "$code.label": "LswTesterViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-tests-page/lsw-tests-page.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 115,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Unit Test Page » LswTestsPage component",
      "$code": "Vue.component(\"LswTestsPage\", {\n  template: $template,\n  props: {\n\n  },\n  data() {\n    return {\n      selectedSection: \"coverage\", // also: \"tester\", \"coverage\"\n      initializationError: false,\n      choosenTester: false,\n    };\n  },\n  methods: {\n    selectSection(subsection) {\n      this.$trace(\"lsw-tests-page.methods.selectSection\");\n      this.selectedSection = subsection;\n    },\n    async initializeTester() {\n      this.$trace(\"lsw-tests-page.methods.initializeTester\");\n      try {\n        const testcases = await importer.json(\"assets/tests/urls.json\");\n        this.choosenTester = LswTester.create().define(testcases).options({\n          onAnything(event) {\n            console.log(\"eventuated:\", event);\n          }\n        });\n      } catch (error) {\n        this.initializationError = error;\n        this.$lsw.toasts.showError(error);\n        console.log(error);\n        throw error;\n      }\n    }\n  },\n  watch: {},\n  async mounted() {\n    this.$trace(\"lsw-tests-page.mounted\");\n    await this.initializeTester();\n  }\n});\n",
      "$code.label": "LswTestsPage API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-tests-page--prev/lsw-tests-page.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 115,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Unit Test Page » LswTestsPage component",
      "$code": "Vue.component(\"LswTestsPage\", {\n  template: $template,\n  props: {\n\n  },\n  data() {\n    return {\n      isLoaded: false,\n      isRunning: false,\n      isDownloaded: false,\n      isCompleted: false,\n      section: \"available\",\n      baseUrl: \"assets/tests/cases/\",\n      available: [],\n      selected: [],\n      downloaded: [],\n    };\n  },\n  methods: {\n    goToSection(section) {\n      this.$trace(\"lsw-tests-page.methods.goToSection\");\n      this.section = section;\n    },\n    backToTests() {\n      this.$trace(\"lsw-tests-page.methods.backToTests\");\n      this.resetState();\n    },\n    resetState() {\n      this.$trace(\"lsw-tests-page.methods.resetState\");\n      this.isLoaded = false;\n      this.isRunning = false;\n      this.isDownloaded = false;\n    },\n    selectTest(test) {\n      const pos = this.selected.indexOf(test);\n      if(pos !== -1) {\n        this.selected.splice(pos, 1);\n      } else {\n        this.selected.push(test);\n      }\n    },\n    resetSelectedTests() {\n      this.$trace(\"lsw-tests-page.methods.resetSelectedTests\");\n      this.selected = [].concat(this.available);\n    },\n    async loadTests() {\n      this.$trace(\"lsw-tests-page.methods.loadTests\");\n      try {\n        this.available = await importer.json(\"assets/tests/testcases.json\");\n        this.selected = [].concat(this.available);\n        this.isLoaded = true;\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    },\n    async downloadTests() {\n      this.$trace(\"lsw-tests-page.methods.downloadTests\");\n      try {\n        const allDownloads = [];\n        for (let index = 0; index < this.selected.length; index++) {\n          const selectedTest = this.selected[index];\n          const testCallbackPromise = importer.scriptAsync(selectedTest);\n          allDownloads.push(testCallbackPromise)\n        }\n        const testsResult = await Promise.all(allDownloads);\n        const testsFormatted = LswUtils.flattenObjects(testsResult, {\n          keyMapper(key, totalKeys, indexKey) {\n            return `[T${('' + (totalKeys + 1)).padStart(4, '0')}] ${key}`;\n          }\n        });\n        this.downloaded = testsFormatted;\n        this.isDownloaded = true;\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    },\n    selectAllTests() {\n      this.$trace(\"lsw-tests-page.methods.selectAllTests\");\n      if(this.available.length === this.selected.length ) {\n        this.selected = [];\n      } else {\n        this.selected = [].concat(this.available);\n      }\n      this.$forceUpdate(true);\n    },\n    shortSubpath(subpath) {\n      return subpath.replace(this.baseUrl, \"\");\n    },\n    async runTests() {\n      this.$trace(\"lsw-tests-page.methods.runTests\");\n      try {\n        this.isRunning = true;\n        this.goToSection(\"running\");\n        // @TODO: continue running tests:\n      } catch (error) {\n        this.showError(error);\n      }\n    },\n    interruptTests() {\n      this.$trace(\"lsw-tests-page.methods.interruptTests\");\n      this.isRunning = false;\n    },\n    async start() {\n      this.$trace(\"lsw-tests-page.methods.start\");\n      try {\n        await this.downloadTests();\n        await this.runTests();\n      } catch (error) {\n        this.showError(error);\n      }\n    }\n  },\n  watch: {},\n  async mounted() {\n    this.$trace(\"lsw-tests-page.mounted\");\n    await this.loadTests();\n  }\n});\n",
      "$code.label": "LswTestsPage API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-tests-page--prev/lsw-tests-page.js",
      "$location": {
        "start": {
          "offset": 2888,
          "line": 95,
          "column": 1
        },
        "end": {
          "offset": 2930,
          "line": 96,
          "column": 1
        }
      },
      "TODO": "continue running tests:",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-toasts/lsw-toasts.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 105,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Toasts API » LswToasts component",
      "$code": "Vue.component(\"LswToasts\", {\n  template: $template,\n  props: {},\n  data() {\n    return {\n      sent: {}\n    };\n  },\n  methods: {\n    getRandomString(len = 10) {\n      const alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n      let out = \"\";\n      while (out.length < len) {\n        out += alphabet[Math.floor(Math.random() * alphabet.length)];\n      }\n      return out;\n    },\n    showError(error, args = {}, propagate = false, log = true) {\n      this.$trace(\"lsw-toasts.methods.showError\");\n      let parameters = {};\n      const isSyntaxError = typeof error.location === \"object\";\n      if (isSyntaxError) {\n        parameters = {\n          title: `Error sintáctico en ${error.location.start.line}:${error.location.start.column} (${error.found})`,\n          text: error.expected,\n        }\n      } else {\n        parameters = {\n          title: \"Un error ocurrió\",\n          text: error.name + \": \" + error.message,\n          ...args,\n        }\n      }\n      const output = this.send(parameters);\n      if (log) {\n        console.log(error);\n      }\n      if (propagate) {\n        throw error;\n      }\n      return output;\n    },\n    send(toastsInput = {}) {\n      const toastData = Object.assign({\n        id: this.getRandomString(),\n        title: \"\",\n        text: \"\",\n        timeout: 3000,\n        orientation: \"bottom\",\n        background: \"rgba(255,255,255,0.5)\",\n        foreground: \"#000\",\n        started_at: new Date()\n      }, toastsInput);\n      if (typeof toastData.timeout !== \"number\") {\n        throw new Error(\"Required parameter «timeout» to be a number or empty on «LswToasts.methods.send»\");\n      }\n      if (isNaN(toastData.timeout)) {\n        throw new Error(\"Required parameter «timeout» to be a (non-NaN) number or empty on «LswToasts.methods.send»\");\n      }\n      if ([\"top\", \"bottom\", \"center\"].indexOf(toastData.orientation) === -1) {\n        throw new Error(\"Required parameter «orientation» to be a string (top, center, bottom) or empty on «LswToasts.methods.send»\");\n      }\n      if (toastData.id in this.sent) {\n        throw new Error(\"Required parameter «id» to not be repeated on «LswToasts.methods.send»\");\n      }\n      this.sent = Object.assign({}, this.sent, {\n        [toastData.id]: toastData\n      });\n      setTimeout(() => {\n        this.close(toastData.id);\n      }, toastData.timeout);\n    },\n    close(id) {\n      delete this.sent[id];\n      this.$forceUpdate(true);\n    },\n    debug(anyzing) {\n      this.send({\n        title: typeof anyzing,\n        text: LswUtils.stringify(anyzing),\n      });\n    },\n    collapse(anyzing, timeout = 3000) {\n      this.$lsw.dialogs.open({\n        title: \"Debugging: type \" + typeof anyzing,\n        template: `\n          <div class=\"pad_1\">\n            <div>Moment: {{ moment }}</div>\n            <pre class=\"codeblock\" style=\"font-size: 10px;\">{{ code }}</pre>\n          </div>\n        `,\n        factory: function() {\n          return {\n            data() {\n              return {\n                moment: LswTimer.utils.fromDateToDatestring(new Date(), true),\n                code: typeof anyzing === \"string\" ? anyzing : JSON.stringify(anyzing, null, 2),\n              };\n            },\n            mounted() {\n              setTimeout(() => this.cancel(), timeout);\n            },\n          };\n        }\n      });\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$toasts = this;\n    this.$window.LswToasts = this;\n    if (this.$lsw) {\n      this.$lsw.toasts = this;\n    }\n    this.$window.dd = (...args) => {\n      return this.debug(...args);\n    };\n  }\n});\n",
      "$code.label": "LswToasts API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-typical-title/lsw-typical-title.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 100,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswTypicalTitle component",
      "$code": "Vue.component(\"LswTypicalTitle\", {\n  template: $template,\n  props: {\n    buttons: {\n      type: [Array, Boolean],\n      default: () => []\n    }\n  },\n  data() {\n    this.$trace(\"lsw-typical-title.data\");\n    return {\n      \n    };\n  },\n  methods: {\n    \n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-typical-title.mounted\");\n      // @OK\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswTypicalTitle API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-unit-test-all/lsw-unit-test-all.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 120,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Unit Tester API » LswUnitTestAll component",
      "$code": "Vue.component(\"LswUnitTestAll\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    return {\n      mode: false,\n      autorunOption: false,\n    };\n  },\n  methods: {\n    openTests() {\n      this.autorunOption = false;\n      this.mode = \"open\";\n    },\n    runTests() {\n      this.autorunOption = true;\n      this.mode = \"run\";\n    },\n    goBack() {\n      this.autorunOption = false;\n      this.mode = false;\n    }\n  },\n  watch: {},\n  async mounted() {\n    this.$trace(\"lsw-unit-test-all.mounted\");\n  }\n});\n",
      "$code.label": "LswUnitTestAll API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-unit-test-page/lsw-unit-test-page.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 121,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Unit Test Page » LswUnitTestPage component",
      "$code": "Vue.component(\"LswUnitTestPage\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    return {\n      testsBaseUrl: \"assets/tests/cases/\",\n      isLoaded: false,\n      isReady: false,\n      availableTests: false,\n      selectedTests: [],\n      downloadedTests: [],\n    };\n  },\n  methods: {\n    backToTests() {\n      this.$trace(\"lsw-unit-test-page.methods.backToTests\");\n      this.isReady = false;\n    },\n    async loadTests() {\n      this.$trace(\"lsw-unit-test-page.methods.loadTests\");\n      this.availableTests = await importer.json(\"assets/tests/testcases.json\");\n      this.selectedTests = [].concat(this.availableTests);\n    },\n    async start() {\n      const allDownloads = [];\n      for(let index=0; index<this.selectedTests.length; index++) {\n        const selectedTest = this.selectedTests[index];\n        const testCallbackPromise = importer.scriptSrc(selectedTest);\n        allDownloads.push(testCallbackPromise)\n      }\n      await Promise.all(allDownloads);\n      this.downloadedTests = LswTests.all();\n      console.log(this.downloadedTests);\n      this.isReady = true;\n    }\n  },\n  watch: {},\n  async mounted() {\n    this.$trace(\"lsw-unit-test-page.mounted\");\n    await this.loadTests();\n    this.isLoaded = true;\n  }\n});\n",
      "$code.label": "LswUnitTestPage API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-unit-tester/lsw-unit-tester.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 118,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Unit Tester API » LswUnitTester component",
      "$code": "Vue.component(\"LswUnitTester\", {\n  template: $template,\n  props: {\n    test: {\n      type: Function,\n      required: true,\n    },\n    autorun: {\n      type: Boolean,\n      default: true,\n    },\n    onFinish: {\n      type: Function,\n      default: () => {},\n    },\n  },\n  data() {\n    return {\n      hasRunTests: false,\n      isExpanded: false,\n      report: false,\n      selectedTests: [],\n      isSourceAccessed: false,\n      error: false,\n    };\n  },\n  methods: {\n    showError(error) {\n      this.error = error;\n      this.$forceUpdate(true);\n    },\n    toggleTest(testIndex) {\n      const pos = this.selectedTests.indexOf(testIndex);\n      if(pos !== -1) {\n        this.selectedTests.splice(pos, 1);\n      } else {\n        this.selectedTests.push(testIndex);\n      }\n    },\n    toggleDetails() {\n      this.isExpanded = !this.isExpanded;\n    },\n    async setupTest() {\n      this.$trace(\"lsw-unit-tester.methods.setupTest\");\n      // @OK.\n    },\n    createBlankReport() {\n      return {\n        testCollectionId: 'not specified',\n      }\n    },\n    async runTest() {\n      this.$trace(\"lsw-unit-tester.methods.runTest\");\n      try {\n        console.log(\"[*] Starts test...\")\n        const tester = await this.test.call();\n        console.log(\"[*] Test ok!\");\n        this.hasRunTests = true;\n        if(tester instanceof LswTester) {\n          this.report = tester.getReport();\n        } else {\n          this.report = this.createBlankReport();\n        }\n        if(typeof this.onFinish === \"function\") {\n          this.onFinish(this.report, this);\n        }\n      } catch (error) {\n        console.log(\"[!] Test failed!\");\n        this.showError(error);\n        console.log(error);\n      }\n    },\n    toggleSource() {\n      this.$trace(\"lsw-unit-tester.methods.toggleSource\");\n      this.isSourceAccessed = !this.isSourceAccessed;\n    },\n  },\n  watch: {},\n  async mounted() {\n    this.$trace(\"lsw-unit-tester.mounted\");\n    await this.setupTest();\n    if(this.autorun) {\n      this.runTest();\n    }\n  }\n});\n",
      "$code.label": "LswUnitTester API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-unit-tester-collection/lsw-unit-tester-collection.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 116,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswUnitTesterCollection component",
      "$code": "Vue.component(\"LswUnitTesterCollection\", {\n  template: $template,\n  props: {\n    allTests: {\n      type: Array,\n      required: true,\n    },\n    autorun: {\n      type: Boolean,\n      default: () => false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-unit-tester-collection.data\");\n    return {\n      isCompleted: false,\n      isPassed: undefined,\n      startedTests: [],\n      testResults: [],\n    };\n  },\n  methods: {\n    async nextTest(previousReport = false) {\n      this.$trace(\"lsw-unit-tester-collection.methods.nextTest\");\n      if(typeof previousReport === 'object') {\n        this.testResults.push(previousReport.result);\n      }\n      const shouldNotInterrupt = this.autorun || force;\n      if(!shouldNotInterrupt) {\n        return;\n      }\n      if(this.allTests.length === this.startedTests.length) {\n        this.isCompleted = true;\n        this.calculatePass();\n        return;\n      }\n      try {\n        const nextTestIndex = this.startedTests.length;\n        const nextTestCallback = this.allTests[nextTestIndex];\n        this.startedTests.push(nextTestCallback);\n      } catch (error) {\n        this.startedTests.push(error);\n        console.log(error);\n      }\n    },\n    calculatePass() {\n      let isPassed = true;\n      Iterating_results:\n      for(let index=0; index<this.testResults.length; index++) {\n        const result = this.testResults[index];\n        const isOk = [\"defined\", \"passed\"].indexOf(result) !== -1;\n        if(!isOk) {\n          isPassed = false;\n          break Iterating_results;\n        }\n      }\n      this.isPassed = isPassed;\n    },\n    startTest(testIndex) {\n      this.allTests[testIndex].$lswTester = {\n        state: \"started\",\n      };\n      const nextTestCallback = this.allTests[testIndex];\n      this.startedTests.push(nextTestCallback);\n      this.$forceUpdate(true);\n    },\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-unit-tester-collection.mounted\");\n      this.nextTest();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswUnitTesterCollection API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-week-planner/lsw-week-planner.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 121,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Week Planner API » LswWeekPlanner component",
      "$code": "Vue.component(\"LswWeekPlanner\", {\n  template: $template,\n  props: {},\n  data() {\n    return {\n      scriptContent: \"\",\n      scriptOutput: \"\",\n    };\n  },\n  methods: {\n    parsear() {\n      try {\n        const ast = WeekLang.parse(this.scriptContent);\n        this.scriptOutput = JSON.stringify(ast, null, 2);\n      } catch (error) {\n        this.scriptOutput = JSON.stringify({\n          error: true,\n          name: error.name,\n          message: error.message,\n          stack: error.stack,\n        }, null, 2);\n      }\n    }\n  },\n  watch: {},\n  mounted() {\n    \n  }\n});\n",
      "$code.label": "LswWeekPlanner API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/new-canvas-experiment-1/new-canvas-experiment-1.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 110,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » NewCanvasExperiment1 component",
      "$code": "(function () {\n\n  const Cc = {};\n  Cc.width = 250;\n  Cc.height = 250;\n  Cc.fuga = {\n    x: 125,\n    y: 125,\n  };\n\n  Vue.component(\"NewCanvasExperiment1\", {\n    template: $template,\n    props: {},\n    data() {\n      return {\n\n      };\n    },\n    methods: {\n      load() {\n        const canvas = this.$refs.canvas1;\n        const context = canvas.getContext(\"2d\");\n        // context.fillRect(Cc.fuga.x, Cc.fuga.y, 1, 1);\n        console.log(canvas.width / 2);\n        console.log(canvas.height / 2);\n        context.fillRect(canvas.width / 2, canvas.height / 2, 1, 1);\n      }\n    },\n    watch: {},\n    mounted() {\n      this.load();\n    }\n  });\n\n})();\n",
      "$code.label": "NewCanvasExperiment1 API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/directives/v-call/v-call.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 74,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Lsw Directives » v-call directive",
      "$code": "Vue.directive(\"call\", {\n  inserted: function(el) {\n    \n  }\n});\n",
      "$code.label": "v-call API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/directives/v-descriptor/v-descriptor.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 86,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Lsw Directives » v-descriptor directive",
      "$code": "(() => {\n\n  const getDescriptorKeys = function (el, binding) {\n    if (binding.expression.startsWith(\"'\") || binding.expression.startsWith('\"')) {\n      return (binding.value || el.getAttribute(\"descriptor\")).split(\" \");\n    }\n    return (binding.expression || el.getAttribute(\"descriptor\")).split(\" \");\n  };\n\n  Vue.directive(\"descriptor\", {\n    bind(el, binding) {\n      const resolveClasses = key => {\n        let resolved = window.stylingDescriptor[key];\n        if (!resolved) return key;\n        if (typeof resolved === \"string\") {\n          resolved = resolved.split(\" \");\n        }\n        return resolved.map(subKey => resolveClasses(subKey)).flat();\n      };\n      const descriptorKeys = getDescriptorKeys(el, binding);\n      const descriptorClasses = descriptorKeys.map(key => resolveClasses(key)).flat();\n      descriptorClasses.forEach(cls => {\n        if (cls.indexOf(\".\") === -1) {\n          el.classList.add(cls);\n        }\n      });\n    }\n  });\n\n  const styleTag = document.createElement(\"style\");\n  styleTag.textContent = `\n  .title_of_form {\n    border: 1px solid #113;\n    box-shadow: 0 0 4px black;\n    border-radius: 0pt;\n    color: black;\n    width: 100%;\n    padding: 8px;\n    font-size: 12px;\n    background-color: #AAF;\n  }\n  .block_of_form {\n    padding: 4px;\n    padding-left: 0px;\n    padding-right: 0px;\n    padding-bottom: 0px;\n    padding-top: 0px;\n  }\n  .bordered_1 {\n    border: 1px solid #999;\n    border-radius: 2pt;\n  }\n  .with_separator_on_bottom_1 {\n    border-bottom: 1px solid #999;\n  }\n  .lateral_button {\n    height: 100%;\n  }\n  .lateral_button_cell {\n    padding-top: 4px;\n    padding-bottom: 4px;\n    padding-right: 4px;\n  }\n  .padded_1 {\n    padding: 4px;\n  }\n  .vertically_padded_1 {\n    padding-top: 4px;\n    padding-bottom: 4px;\n  }\n  .horizontally_padded_1 {\n    padding-left: 4px;\n    padding-right: 4px;\n  }\n  .left_padded_1 {\n    padding-left: 4px;\n  }\n  .right_padded_1 {\n    padding-right: 4px;\n  }\n  .top_padded_1 {\n    padding-top: 4px;\n  }\n  .bottom_padded_1 {\n    padding-bottom: 4px;\n  }\n  .calendar_main_panel {\n    padding-left: 0px;\n    padding-right: 0px;\n    padding-top: 0px;\n    padding-bottom: 4px;\n  }\n  .calendar_buttons_panel_1 {\n    padding-bottom: 0px;\n    padding-top: 0px;\n  }\n`;\n\n  window.addEventListener(\"load\", function() {\n    document.body.appendChild(styleTag);\n  });\n\n  window.stylingDescriptor = {\n    \"agenda.calendar.buttons_panel_1\": \"calendar_main_panel calendar_buttons_panel_1\",\n    \"agenda.task_form.title\": \"title_of_form\",\n    \"agenda.task_form.block\": \"block_of_form\",\n    \"agenda.task_form.block_of_add_button\": \"block_of_form vertically_padded_1\",\n    \"agenda.task_form.block_of_aggregated_field\": \"bordered_1\",\n    \"agenda.task_form.section\": \"with_separator_on_bottom_1\",\n    \"agenda.task_form.aggregations.block\": \"block_of_form\",\n    \"agenda.task_form.aggregations.lateral_button\": \"lateral_button\",\n    \"agenda.task_form.aggregations.lateral_button_cell\": \"lateral_button_cell\",\n    \"lsw_table.no_data_provided_message\": \"pad_top_2 pad_bottom_2\"\n  }\n\n})();\n",
      "$code.label": "v-descriptor API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/directives/v-focus/v-focus.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 76,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Lsw Directives » v-focus directive",
      "$code": "Vue.directive(\"focus\", {\n  inserted: function(el) {\n    el.focus();\n  }\n});\n",
      "$code.label": "v-focus API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/directives/v-xform/v-xform.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 77,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Lsw Directives » v-xform directive",
      "$code": "(function (factory) {\n  const mod = factory();\n  if (typeof window !== 'undefined') {\n    window['LswXForm'] = mod;\n  }\n  if (typeof global !== 'undefined') {\n    global['LswXForm'] = mod;\n  }\n  if (typeof module !== 'undefined') {\n    module.exports = mod;\n  }\n})(function () {\n\n  let isTracing = true;\n  let $COUNTADOR1 = 0;\n\n  const trace = function (method, args = []) {\n    if (isTracing) {\n      console.log(\"[trace][lsw-xform][\" + method + \"]\", args.length);\n    }\n  };\n\n  const XformCommonInterface = class {\n    formInterface = \"Common\";\n    static create(...args) {\n      return new this(...args);\n    }\n    constructor(inheritedArgument, subtype) {\n      const { el, binding, scope } = inheritedArgument;\n      trace(\"XformCommonInterface.constructor:\" + this.formInterface);\n      this.$el = el;\n      this.$binding = binding;\n      this.$component = scope;\n      this.$type = subtype;\n      this.$name = this.$binding.value?.name || false;\n      this.$onValidateInterfaceArguments();\n      this.$injectAttributesToElement();\n    }\n    $injectAttributesToElement() {\n      trace(\"XformCommonInterface.$injectAttributesToElement:\" + this.formInterface);\n      this.$el.setAttribute(\"data-xform-node\", this);\n    }\n    $onValidateInterfaceArguments() {\n      trace(\"XformCommonInterface.$onValidateInterfaceArguments:\" + this.formInterface);\n      const ensureEl = $ensure(this.$el).type(\"object\").to.be.instanceOf(HTMLElement);\n      const ensureBinding = $ensure(this.$binding).type(\"object\");\n      const ensureValue = ensureBinding.its(\"value\").type(\"object\");\n      const checkValue = $check(ensureValue.$subject);\n      $ensure(this.$type).type(\"string\").to.be.oneOf([\"form\", \"control\", \"input\", \"error\"]);\n      ensureValue.to.have.keys([\"name\"]).its(\"name\").type(\"string\").back();\n      if (checkValue.to.have.key(\"onSetError\")) {\n        ensureValue.its(\"onSetError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onClearError\")) {\n        ensureValue.its(\"onClearError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onGetValue\")) {\n        ensureValue.its(\"onGetValue\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onGetChildren\")) {\n        ensureValue.its(\"onGetChildren\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onValidate\")) {\n        ensureValue.its(\"onValidate\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onSubmit\")) {\n        ensureValue.its(\"onSubmit\").type(\"function\");\n      }\n    }\n    validate() {\n      trace(\"XformCommonInterface.validate:\" + this.formInterface);\n      const value = this.getValue();\n      const result = this.$hookWith(\"onValidate\", [value, this]);\n      this.$propagateSuccess();\n      return true;\n    }\n    $getParent(onlyTypes = false) {\n      trace(\"XformCommonInterface.$getParent:\" + this.formInterface);\n      if (typeof onlyTypes === \"string\") {\n        onlyTypes = [onlyTypes];\n      }\n      const found = LswDom.getClosestParent(this.$el, \"[data-xform-node]\");\n      if (!Array.isArray(onlyTypes)) {\n        return found;\n      } else if (!found?.length) {\n        return found;\n      }\n      return found.filter(el => onlyTypes.indexOf(el.$xform.$type) !== -1);\n    }\n    $getChildren(onlyTypesInput = false) {\n      trace(\"XformCommonInterface.$getChildren:\" + this.formInterface);\n      let onlyTypes = onlyTypesInput;\n      if (typeof onlyTypesInput === \"string\") {\n        onlyTypes = [onlyTypesInput];\n      }\n      const found = LswDom.getClosestChildren(this.$el, \"[data-xform-node]\");\n      if (!Array.isArray(onlyTypes)) {\n        return found;\n      } else if (!found?.length) {\n        return found;\n      }\n      const foundChildren = found.filter(el => onlyTypes.indexOf(el.$xform.$type) !== -1);\n      return foundChildren;\n    }\n    getValue() {\n      trace(\"XformCommonInterface.getValue:\" + this.formInterface);\n      const result = this.$hookWith(\"onGetValue\");\n      if (typeof result !== \"undefined\") {\n        return result;\n      }\n      return this.$getChildren([\"form\", \"control\", \"input\"]).reduce((output, el) => {\n        const hasName = el.$xform.$binding.value.name;\n        if (hasName === \"*\") {\n          output = el.$xform.getValue();\n        } else if (!hasName) {\n          // @OK...\n        } else {\n          output[hasName] = el.$xform.getValue();\n        }\n        return output;\n      }, {});\n    }\n    $hookWith(hookId, parameters = []) {\n      trace(\"XformCommonInterface.$hookWith:\" + this.formInterface);\n      if (!(hookId in this.$binding.value)) {\n        console.log(`[-] No hooks found for ${hookId}`);\n        return undefined;\n      }\n      const hookFunction = this.$binding.value[hookId];\n      if (typeof hookFunction === \"undefined\") {\n        console.log(`[-] Hook with bad type found for ${hookId}`);\n        return undefined;\n      } else if (typeof hookFunction !== \"function\") {\n        throw new Error(`Expected parameter «${hookId}» to be a function on «$hookWith»`);\n      }\n      console.log(`[*] Executing hook for ${hookId}`);\n      console.log(hookFunction.toString(), parameters);\n      return hookFunction(...parameters);\n    }\n    $setError(error) {\n      trace(\"XformCommonInterface.$setError:\" + this.formInterface);\n      this.$error = error;\n      this.$hookWith(\"onSetError\", [error, this]);\n      return this;\n    }\n    $clearError() {\n      trace(\"XformCommonInterface.$clearError:\" + this.formInterface);\n      this.$error = false;\n      this.$hookWith(\"onClearError\", [this]);\n      return this;\n    }\n    $propagateError(error, rethrowIt = 1, propagateDown = 1, propagateUp = 1) {\n      trace(\"XformCommonInterface.$propagateError:\" + this.formInterface);\n      try {\n        if (this.$binding.value.debug) {\n          console.error(`[DEBUG] Error propagated to «v-form.${this.$type}»:`, error);\n        }\n        const contador = ++$COUNTADOR1;\n        Propagate_down: {\n          if(!propagateDown) {\n            break Propagate_down;\n          }\n          console.log(\"propagate down now \" + contador + \" \" + this.formInterface);\n          const propagableChildren = this.$getChildren([\"error\"]);\n          console.log(propagableChildren);\n          if (propagableChildren && propagableChildren.length) {\n            for (let index = 0; index < propagableChildren.length; index++) {\n              const child = propagableChildren[index];\n              child.$xform.$setError(error);\n            }\n          }\n          console.log(\"ok down now \" + contador + \" \" + this.formInterface);\n        }\n        Propagate_up: {\n          if(!propagateUp) {\n            break Propagate_up;\n          }\n          console.log(\"propagate up now \" + contador + \" \" + this.formInterface);\n          const propagableParent = this.$getParent([\"form\", \"control\"]);\n          console.log(propagableParent);\n          if (propagableParent) {\n            try {\n              propagableParent.$xform.$propagateError(error, 1);\n            } catch (error) {\n              console.log(error);\n            }\n          }\n          console.log(\"ok up now \" + contador + \" \" + this.formInterface);\n        }\n      } catch (error) {\n        console.log(error);\n      } finally {\n        this.$setError(error);\n        if (rethrowIt === 1) {\n          throw error;\n        }\n      }\n    }\n    $propagateSuccess() {\n      trace(\"XformCommonInterface.$propagateSuccess:\" + this.formInterface);\n      // this.$getParent([\"form\", \"control\"]).$propagateSuccess(error);\n      const contador = ++$COUNTADOR1;\n      Propagate_down: {\n        console.log(\"propagate SUCCESS down now (to errors)\" + contador + \" \" + this.formInterface);\n        const propagableChildren = this.$getChildren([\"error\"]);\n        console.log(propagableChildren);\n        for (let index = 0; index < propagableChildren.length; index++) {\n          const child = propagableChildren[index];\n          child.$xform.$clearError();\n        }\n        console.log(\"ok down now (to errors)\" + contador + \" \" + this.formInterface);\n      }\n      this.$clearError();\n    }\n  };\n\n  const XformForm = class extends XformCommonInterface {\n    formInterface = \"Form\";\n    $onValidateInterfaceArguments() {\n      trace(\"XformForm.$onValidateInterfaceArguments\");\n      const ensureEl = $ensure(this.$el);\n      const ensureBinding = $ensure(this.$binding);\n      const ensureValue = ensureBinding.its(\"value\").type(\"object\");\n      const checkValue = $check(ensureValue.$subject);\n    }\n    submit() {\n      trace(\"XformForm.submit\");\n      const resultado = this.validate();\n      if(resultado !== true) throw new Error(\"Could not validate form\");\n      const value = this.getValue();\n      const result = this.$hookWith(\"onSubmit\", [value], this);\n      if (typeof result !== \"undefined\") {\n        return result;\n      }\n    }\n    validate() {\n      trace(\"XformForm.validate\");\n      try {\n        const allChildren = this.$getChildren([\"form\", \"control\"]);\n        let allErrors = 0;\n        for (let indexChild = 0; indexChild < allChildren.length; indexChild++) {\n          const child = allChildren[indexChild];\n          console.log(\"Validating [from form] now child to validate:\", child);\n          try {\n            const result = child.$xform.validate();\n            if(!result) {\n              allErrors++;\n            }\n          } catch (error) {\n            allErrors++;\n          }\n        }\n        if(allErrors > 0) {\n          throw new Error(`Form has «${allErrors}» validation errors. Fix them to continue.`);\n        }\n        const resultado = super.validate();\n        if(resultado !== true) {\n          throw new Error(\"Could not validate form natively (calling super.validate) on «XformForm.validate»\");\n        }\n        this.$propagateSuccess();\n        return true;\n      } catch (error) {\n        this.$propagateError(error, 0, 1, 0);\n        throw error;\n      }\n    }\n  };\n\n  const XformControl = class extends XformCommonInterface {\n    formInterface = \"Control\";\n    $onValidateInterfaceArguments() {\n      trace(\"XformControl.$onValidateInterfaceArguments\");\n      const ensureEl = $ensure(this.$el);\n      const ensureBinding = $ensure(this.$binding);\n      const ensureValue = ensureBinding.its(\"value\").type(\"object\");\n      const checkValue = $check(ensureValue.$subject);\n      ensureValue.to.have.keys([\"name\"]).its(\"name\").type(\"string\").back();\n      if (checkValue.to.have.key(\"onSetError\")) {\n        ensureValue.its(\"onSetError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onClearError\")) {\n        ensureValue.its(\"onClearError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onGetValue\")) {\n        ensureValue.its(\"onGetValue\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onGetChildren\")) {\n        ensureValue.its(\"onGetChildren\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onValidate\")) {\n        ensureValue.its(\"onValidate\").type(\"function\");\n      }\n    }\n    $validateChildren() {\n      trace(\"XformControl.$validateChildren\");\n      const allChildren = this.$getChildren([\"form\", \"control\", \"input\"]);\n      for (let indexChild = 0; indexChild < allChildren.length; indexChild++) {\n        const child = allChildren[indexChild];\n        console.log(\"Validating [from control] now child to validate:\", child);\n        child.$xform.validate();\n      }\n      this.$propagateSuccess();\n    }\n    validate(deeply = false) {\n      trace(\"XformControl.validate\");\n      try {\n        const value = this.getValue();\n        this.$hookWith(\"onValidate\", [value, this]);\n        this.$propagateSuccess();\n        return true;\n      } catch (error) {\n        this.$propagateError(error, 0, 1, 0);\n      }\n    }\n  };\n\n  const XformInput = class extends XformCommonInterface {\n    formInterface = \"Input\";\n    validate() {\n      trace(\"XformInput.validate\");\n      const value = this.getValue();\n      this.$hookWith(\"onValidate\", [value, this]);\n      return true;\n    }\n    $onValidateInterfaceArguments() {\n      trace(\"XformInput.$onValidateInterfaceArguments\");\n      const ensureEl = $ensure(this.$el);\n      const ensureBinding = $ensure(this.$binding);\n      const ensureValue = ensureBinding.its(\"value\").type(\"object\");\n      const checkValue = $check(ensureValue.$subject);\n      ensureValue.to.have.keys([\"name\"]).its(\"name\").type(\"string\").back();\n      if (checkValue.to.have.key(\"onSetError\")) {\n        ensureValue.its(\"onSetError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onClearError\")) {\n        ensureValue.its(\"onClearError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onGetValue\")) {\n        ensureValue.its(\"onGetValue\").type(\"function\");\n      }\n    }\n    getValue() {\n      trace(\"XformInput.getValue\");\n      if ([\"INPUT\", \"TEXTAREA\", \"SELECT\"].indexOf(this.$el.tagName) !== -1) {\n        const ownValue = this.$el.value;\n        return ownValue;\n      } else {\n        return super.getValue();\n      }\n    }\n    $propagateSuccess() {\n      const control = this.$getParent([\"control\"]);\n      control.$xform.$propagateSuccess();\n    }\n  };\n\n  const XformError = class extends XformCommonInterface {\n    formInterface = \"Error\";\n    $onValidateInterfaceArguments() {\n      trace(\"XformError.$onValidateInterfaceArguments\");\n      const ensureEl = $ensure(this.$el);\n      const ensureBinding = $ensure(this.$binding);\n      const ensureValue = ensureBinding.its(\"value\").type(\"object\");\n      const checkValue = $check(ensureValue.$subject);\n      if (checkValue.to.have.key(\"onSetError\")) {\n        ensureValue.its(\"onSetError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onClearError\")) {\n        ensureValue.its(\"onClearError\").type(\"function\");\n      }\n    }\n    validate() {\n      // @EMPTY.\n    }\n    $getChildren() {\n      trace(\"XformError.$getChildren\");\n      throw new Error(`Error can not contain children on «XformError.$getChildren»`);\n    }\n    getValue() {\n      trace(\"XformError.getValue\");\n      throw new Error(`Error can not contain a value on «XformError.getValue»`);\n    }\n    $setError(error) {\n      trace(\"XformError.$setError\");\n      this.$error = error;\n      this.$el.classList.add(\"error_is_affecting_field\");\n      try {\n        const summarizedError = error.summarized();\n        summarizedError.stack2 = summarizedError.stack.map(tr => {\n          return tr.split(\"\\n\").map((msg, errorIndex) => {\n            const [callbackName, rest1] = LswUtils.splitStringOnce(msg, \"@\");\n            if (!rest1) {\n              return [1, callbackName, rest1];\n            }\n            const rest2 = LswUtils.reverseString(rest1);\n            const [columnReversed, rest3] = LswUtils.splitStringOnce(rest2, \":\");\n            if (!rest3) {\n              return [3, rest3, columnReversed, callbackName];\n              return msg;\n            }\n            const [lineReversed, errorSource] = LswUtils.splitStringOnce(rest3, \":\");\n            if (!errorSource) {\n              return [5, errorSource, lineReversed, rest3, columnReversed, callbackName];\n              return msg;\n            }\n            const line = LswUtils.reverseString(lineReversed);\n            const column = LswUtils.reverseString(columnReversed);\n            return `${errorIndex + 1}. ${LswUtils.reverseString(errorSource)}:${line}:${column}::${callbackName}`;\n          }).join(\"\\n\")\n        });\n        this.$getErrorMessageElement().textContent = `${error.name}: ${error.message}.\\n${summarizedError.stack2}`;\n      } catch (error2) {\n        this.$getErrorMessageElement().textContent = `${error.name}: ${error.message} [${error.stack}]`;\n      }\n      try {\n        this.$hookWith(\"onSetError\", [error, this]);\n      } catch (error) {\n        console.log(error);\n      }\n      return this;\n    }\n    $getErrorMessageElement() {\n      return (this.$el.querySelector(\".errorMessage\") || this.$el);\n    }\n    $clearError() {\n      trace(\"XformError.$clearError\");\n      this.$error = undefined;\n      this.$el.classList.remove(\"error_is_affecting_field\");\n      this.$getErrorMessageElement().textContent = ``;\n      this.$hookWith(\"onClearError\", [this]);\n      return this;\n    }\n  };\n\n  const xformClasses = {\n    form: XformForm,\n    control: XformControl,\n    input: XformInput,\n    error: XformError,\n  };\n\n  Vue.directive(\"xform\", {\n    bind(el, binding) {\n      trace(\"xform-directive.bind\");\n      // console.log(binding);\n      const modifierType = Object.keys(binding.modifiers)[0];\n      if (!(modifierType in xformClasses)) {\n        throw new Error(\"Required directive «v-form» to be injected with a known modifier on «xform.bind»\");\n      }\n      const xformClass = xformClasses[modifierType];\n      const xformInstance = xformClass.create({ el, binding, scope: this }, modifierType);\n      el.$xform = xformInstance;\n    },\n    unbind(el) {\n      trace(\"xform-directive.unbind\");\n      delete el.$xform.$binding;\n      delete el.$xform.$el;\n      delete el.$xform;\n    }\n  });\n\n  const XFormPublicAPI = {\n    validateSettings(settings) {\n      trace(\"XFormPublicAPI.validateSettings\");\n      const checkSettings = $check(settings);\n      const ensureSettings = $ensure(settings).type(\"object\").to.have.key(\"name\");\n      ensureSettings.its(\"name\").type(\"string\").back();\n      if (checkSettings.to.have.key(\"input\")) {\n        const ensureInput = ensureSettings.its(\"input\").type(\"object\");\n        ensureInput.to.have.uniquelyKeys([\"props\", \"events\"]);\n        if(checkSettings.its(\"input\").to.have.key(\"props\")) {\n          ensureInput.its(\"props\").type(\"object\");\n        }\n        if(checkSettings.its(\"input\").to.have.key(\"events\")) {\n          ensureInput.its(\"events\").type(\"object\");\n        }\n      }\n    }\n  }\n\n  return XFormPublicAPI;\n\n});\n",
      "$code.label": "LswXForm API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/lsw-agenda/lsw-agenda.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 120,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgenda API » LswAgenda component",
      "$code": "Vue.component(\"LswAgenda\", {\n  name: \"LswAgenda\",\n  template: $template,\n  props: {\n    context: {\n      type: String,\n      default: \"agenda\"\n    }\n  },\n  data() {\n    this.$trace(\"lsw-agenda.data\");\n    let allAgendaButtons = [];\n    if (typeof this.$window.cordova !== \"undefined\") {\n      allAgendaButtons = allAgendaButtons.concat([{\n        text: '🔔',\n        event: () => this.synchronizeAlarms(),\n      }, {\n        text: '🔕',\n        event: () => this.unsynchronizeAlarms(),\n      }]);\n    }\n    return {\n      counter: 0,\n      isLoading: false,\n      hasPsicodelia: true,\n      selectedHiddenMenu: \"none\",\n      selectedContext: \"agenda\",\n      selectedAction: 'calendario',\n      selectedDate: undefined,\n      selectedDateTasks: undefined,\n      selectedDateTasksSorted: undefined,\n      selectedDateTasksFormattedPerHour: undefined,\n      selectedForm: undefined,\n      hiddenDateHours: [],\n      shownAcciones: [],\n      agendaButtons: allAgendaButtons,\n      possibleNotifiers: [\n        accion => `🔷 ¡Vamos con «${accion.en_concepto}» por «${accion.tiene_duracion}»!`,\n        accion => `🔶 Parece que se te requiere en «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🕥 Ahora tocaría «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔶 ¿Qué tal un poco de «${accion.en_concepto}» por «${accion.tiene_duracion}»?`,\n        accion => `🕥 ¿Sabes que tendrías ahora que «${accion.en_concepto}» por «${accion.tiene_duracion}»?`,\n        accion => `🔶 ¿Te acuerdas que ahora viene «${accion.en_concepto}» por «${accion.tiene_duracion}»?`,\n        accion => `🕥 ¿Cómo lo llevas? Porque se viene «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔶 ¿Te apetece un poco de «${accion.en_concepto}» por «${accion.tiene_duracion}»?`,\n        accion => `🕥 Bueno, y ahora «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔶 ¿Estás bien? Porque vamos con «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🕥 ¿Y ahora? Ahora «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔶 Tendríamos que «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🕥 Sin ponerse grave, habría que «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔶 No sé si tienes algo, aparte de «${accion.en_concepto}» ahora por «${accion.tiene_duracion}»`,\n        accion => `🕥 Por «${accion.tiene_duracion}» tocaría «${accion.en_concepto}»`,\n        accion => `🔶 Durante «${accion.tiene_duracion}» vendría «${accion.en_concepto}»`,\n        accion => `🔷 Sin más dilación, «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔷 ¡Vamos ahí ese «${accion.en_concepto}» por «${accion.tiene_duracion}»!`,\n        accion => `🕥 Estaríamos con «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔷 Tiempo para «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔷 ¡Atensiong! Viene «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n      ]\n    };\n  },\n  methods: {\n    toggleShowAccion(accionId) {\n      this.$trace(\"lsw-agenda.methods.toggleShowAccion\");\n      const pos = this.shownAcciones.indexOf(accionId);\n      if (pos === -1) {\n        this.shownAcciones.push(accionId);\n      } else {\n        this.shownAcciones.splice(pos, 1);\n      }\n    },\n    selectHiddenMenu(menuId) {\n      this.$trace(\"lsw-agenda.methods.selectHiddenMenu\");\n      this.selectedHiddenMenu = menuId;\n    },\n    selectAction(accionId, contextId = false) {\n      this.$trace(\"lsw-agenda.methods.selectAction\");\n      if (contextId) {\n        this.selectContext(contextId);\n      }\n      this.selectedAction = accionId;\n    },\n    selectContext(id, parameters = {}) {\n      this.$trace(\"lsw-agenda.methods.selectContext\");\n      this.selectedHiddenMenu = \"none\";\n      this.selectedContextParameters = parameters;\n      this.selectedContext = id;\n    },\n    toggleCalendario() {\n      this.$trace(\"lsw-agenda.methods.toggleCalendario\");\n      const finalState = (this.selectedAction === \"calendario\") ? \"none\" : \"calendario\";\n      if (this.selectedContext !== \"agenda\") {\n        this.selectContext(\"agenda\");\n        this.selectAction(\"calendario\");\n        return;\n      }\n      this.selectAction(finalState);\n    },\n    selectCalendario() {\n      this.$trace(\"lsw-agenda.methods.selectCalendario\");\n      this.selectContext(\"agenda\");\n      this.selectAction(\"calendario\");\n    },\n    selectConductometria() {\n      this.$trace(\"lsw-agenda.methods.selectCondutometria\");\n      this.selectContext(\"conductometria\");\n      // this.selectAction(\"calendario\");\n    },\n    togglePsicodelia() {\n      this.$trace(\"lsw-agenda.methods.togglePsicodelia\");\n      this.hasPsicodelia = !this.hasPsicodelia;\n    },\n    toggleHour(hourInt) {\n      this.$trace(\"lsw-agenda.methods.toggleHour\");\n      const pos = this.hiddenDateHours.indexOf(hourInt);\n      if (pos === -1) {\n        this.hiddenDateHours.push(hourInt);\n      } else {\n        this.hiddenDateHours.splice(pos, 1);\n      }\n    },\n    reloadDateTasks() {\n      this.$trace(\"lsw-agenda.methods.reloadDateTasks\");\n      return this.loadDateTasks(this.selectedDate);\n    },\n    async loadDateTasks(dateInput, calendario, isOnMounted = false) {\n      this.$trace(\"lsw-agenda.methods.loadDateTasks\");\n      // this.isLoading = true;\n      const newDate = dateInput || this.selectedDate || new Date();\n      console.log(\"[*] Loading date tasks of: \" + LswTimer.utils.fromDateToDatestring(newDate));\n      try {\n        this.selectedDate = newDate;\n        const selectedDate = this.selectedDate;\n        const selectedDateTasks = await this.$lsw.database.selectMany(\"Accion\", valueBrute => {\n          try {\n            const valueList = LswTimer.parser.parse(valueBrute.tiene_inicio);\n            const value = valueList[0];\n            const isSameYear = value.anio === selectedDate.getFullYear();\n            const isSameMonth = value.mes === (selectedDate.getMonth() + 1);\n            const isSameDay = value.dia === selectedDate.getDate();\n            const isAccepted = isSameYear && isSameMonth && isSameDay;\n            return isAccepted;\n          } catch (error) {\n            return true;\n          }\n        });\n        this.selectedDateTasks = selectedDateTasks;\n        this.selectedDateTasksSorted = selectedDateTasks.sort((accion1, accion2) => {\n          let inicio1 = undefined;\n          let inicio2 = undefined;\n          try {\n            inicio1 = LswTimer.utils.fromDatestringToDate(accion1.tiene_inicio);\n          } catch (error) {\n            return 1;\n          }\n          try {\n            inicio2 = LswTimer.utils.fromDatestringToDate(accion2.tiene_inicio);\n          } catch (error) {\n            return -1;\n          }\n          if (inicio1 < inicio2) {\n            return -1;\n          } else if (inicio1 > inicio2) {\n            return 1;\n          } else {\n            return -1;\n          }\n        });\n        if (isOnMounted) {\n          const noTasksFound = (!this.selectedDateTasks) || (!this.selectedDateTasks.length);\n          if (noTasksFound) {\n            this.isCalendarioSelected = true;\n          }\n        }\n        this.propagateDateTasks();\n      } catch (error) {\n        console.log(\"Error loading date taskes:\", error);\n      } finally {\n        setTimeout(() => { this.isLoading = false }, 100);\n      }\n      await this.reloadCalendarioMarks(calendario);\n      this.refreshTasks();\n    },\n    async reloadCalendarioMarks(calendario) {\n      if (calendario) {\n        const selectedDate = this.selectedDate;\n        const tasksOfMonth = await this.$lsw.database.selectMany(\"Accion\", valueBrute => {\n          const valueList = LswTimer.parser.parse(valueBrute.tiene_inicio);\n          const value = valueList[0];\n          const isSameYear = value.anio === selectedDate.getFullYear();\n          const isSameMonth = value.mes === (selectedDate.getMonth() + 1);\n          const isAccepted = isSameYear && isSameMonth;\n          return isAccepted;\n        });\n        const tasksOfMonthByDay = tasksOfMonth.reduce((out, item) => {\n          const valueList = LswTimer.parser.parse(item.tiene_inicio);\n          const value = valueList[0];\n          const day = value.dia;\n          if (!(day in out)) {\n            out[day] = [];\n          }\n          out[day].push(item);\n          return out;\n        }, {});\n        calendario.establecer_marcadores_del_mes(tasksOfMonthByDay);\n      }\n    },\n    groupTasksByHour(tareas = this.selectedDateTasks) {\n      this.$trace(\"lsw-agenda.methods.groupTasksByHour\");\n      const mapaHoras = {};\n      Agrupacion_inicial:\n      for (let i = 0; i < tareas.length; i++) {\n        const tarea = tareas[i];\n        const { tiene_inicio } = tarea;\n        const [inicioObject] = LswTimer.parser.parse(tiene_inicio);\n        const { hora, minuto } = inicioObject;\n        if (typeof hora !== \"number\") {\n          continue Agrupacion_inicial;\n        }\n        if (!(hora in mapaHoras)) {\n          mapaHoras[hora] = [];\n        }\n        mapaHoras[hora].push(tarea);\n      }\n      //return mapaHoras;\n      const segunHoras = [];\n      Formateo_final:\n      for (let hora in mapaHoras) {\n        const lista = mapaHoras[hora];\n        segunHoras.push({\n          hora,\n          tareas: lista,\n        });\n      }\n      return segunHoras;\n    },\n    propagateDateTasks() {\n      this.$trace(\"lsw-agenda.methods.propagateDateTasks\");\n      this.selectedDateTasksFormattedPerHour = this.groupTasksByHour();\n    },\n    async openInsertTaskDialog() {\n      this.$trace(\"lsw-agenda.methods.openInsertTaskDialog\");\n      // *@TODO: \n    },\n    async openDeleteTaskDialog(tarea, e) {\n      this.$trace(\"lsw-agenda.methods.openDeleteTaskDialog\");\n      const confirmed = await Vue.prototype.$dialogs.open({\n        title: \"Eliminar registro\",\n        template: `\n          <div>\n            <div class=\"pad_2\">¿Seguro que quieres eliminar el registro?</div>\n            <hr class=\"margin_0\" />\n            <div class=\"pad_2 text_align_right\">\n              <button class=\"supermini danger_button\" v-on:click=\"() => accept(true)\">Eliminar</button>\n              <button class=\"supermini \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        `,\n      });\n      if (!confirmed) return false;\n      await this.$lsw.database.delete(\"Accion\", tarea.id);\n      this.selectedForm = undefined;\n      this.refreshTasks();\n    },\n    selectHour(hora) {\n      this.$trace(\"lsw-agenda.methods.selectHour\");\n      if (this.selectedForm === hora) {\n        this.selectedForm = undefined;\n      } else {\n        this.selectedForm = hora;\n      }\n    },\n    async refreshTasks() {\n      this.$trace(\"lsw-agenda.methods.refreshTasks\");\n      if (this.$refs.calendario) {\n        this.$refs.calendario.changeDate(new Date(this.selectedDate));\n      }\n    },\n    async synchronizeAlarms() {\n      this.$trace(\"lsw-agenda.methods.synchronizeAlarms\");\n      Cordova_injection: {\n        if (typeof this.$window.cordova !== \"undefined\") {\n          // LswUtils.debug(1);\n          const dateToday = new Date();\n          // LswUtils.debug(2);\n          const allAlarms = await this.$lsw.database.selectMany(\"Accion\", accion => {\n            const dateAccion = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n            return LswTimer.utils.areSameDayDates(dateToday, dateAccion);\n          });\n          // LswUtils.debug(3);\n          const soundFile = LswRandomizer.getRandomItem([\n            \"file://assets/sounds/alarm.busca.wav\",\n            \"file://assets/sounds/alarm.clock-light.wav\",\n            \"file://assets/sounds/alarm.facility-breach.wav\",\n            \"file://assets/sounds/alarm.heavy.wav\",\n            \"file://assets/sounds/alarm.submarine.wav\",\n          ]);\n          // LswUtils.debug(4);\n          try {\n            // LswUtils.debug(5);\n            // LswUtils.debug(allAlarms);\n            for (let index = 0; index < allAlarms.length; index++) {\n              // LswUtils.debug(6 + \":\" + index);\n              const accion = allAlarms[index];\n              // LswUtils.debug(7 + \":\" + index);\n              const id = index + 1;\n              const notificationCallback = LswRandomizer.getRandomItem(this.possibleNotifiers);\n              // LswUtils.debug(8 + \":\" + index);\n              const text = notificationCallback(accion);\n              // LswUtils.debug(9 + \":\" + index);\n              await this.$window.cordova.plugins.notification.local.cancel(id);\n              // LswUtils.debug(10 + \":\" + index);\n              await this.$window.cordova.plugins.notification.local.schedule({\n                id,\n                title: `${accion.en_concepto} * ${accion.tiene_inicio} @${accion.tiene_inicio}`,\n                text: text,\n                trigger: {\n                  at: LswTimer.utils.fromDatestringToDate(accion.tiene_inicio)\n                },\n                vibrate: [1000, 1000, 1000, 1000],\n                wakeUp: true,\n                lockscreen: true,\n                sound: soundFile\n              });\n              // LswUtils.debug(11 + \":\" + index);\n            }\n            this.$lsw.toasts.send({\n              title: \"Alarmas sincronizadas\",\n              text: `Unas ${allAlarms.length} alarmas fueron sincronizadas con el dispositivo`\n            });\n          } catch (error) {\n            // LswUtils.debug(100);\n            this.$lsw.toasts.showError(error);\n          }\n        }\n      }\n    },\n    unsynchronizeAlarms() {\n      this.$trace(\"lsw-agenda.methods.unsynchronizeAlarms\");\n      Cordova_injection: {\n        if (typeof this.$window.cordova !== \"undefined\") {\n          try {\n            this.$window.cordova.plugins.notification.local.cancelAll(() => {\n              this.$lsw.toasts.send({\n                title: \"Alarmas desincronizadas\",\n                text: \"Las alarmas se eliminaron del dispositivo\"\n              });\n            })\n          } catch (error) {\n            this.$lsw.toasts.showError(error);\n          }\n        }\n      }\n    },\n  },\n  watch: {\n  },\n  computed: {\n    isCalendarioSelected() {\n      return this.selectedAction === \"calendario\";\n    }\n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-agenda.mounted\");\n      const selectedDate = this.$refs.calendario.getValue();\n      await this.loadDateTasks(selectedDate, undefined, true);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgenda API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-data-explorer/lsw-data-explorer/lsw-data-explorer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 116,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswDataExplorer API » LswDataExplorer API",
      "$code": "Vue.component('LswDataExplorer', {\n  template: $template,\n  props: {\n    value: {\n      required: true\n    },\n    pageSize: {\n      type: Number,\n      default: 10\n    },\n    level: {\n      type: Number,\n      default: 0\n    },\n    pointer: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      hasLoadedInnerValue: true,\n      isLoadingInnerValue: false,\n      originalValue: this.value,\n      innerValue: this.value,\n      textFilter: \"\",\n      isShowingTopPanel: false,\n      isShowingRelatedDocuments: false,\n      documentTitle: \"\",\n      documentContent: \"\",\n      expanded: {},\n      relatedDocuments: [{\n        title: \"Document 1\",\n        text: \"console.log('hi!');\",\n      }],\n      propagateFastFilterTimeoutId: undefined,\n      propagateFastFilterTimeoutMs: 1500\n    };\n  },\n  methods: {\n    getRandomId() {\n      return this.$lsw.toasts.getRandomString();\n    },\n    toggleTopPanel() {\n      this.isShowingTopPanel = !this.isShowingTopPanel;\n    },\n    toggleExpand(key) {\n      this.$set(this.expanded, key, !this.expanded[key]);\n    },\n    toggleRelatedDocuments() {\n      this.isShowingRelatedDocuments = !this.isShowingRelatedDocuments;\n    },\n    openDocument(docIndex) {\n      // *@TODO:\n      const doc = this.relatedDocuments[docIndex];\n      this.documentTitle = doc.title;\n      this.documentContent = doc.text;\n      this.isShowingRelatedDocuments = false;\n    },\n    saveRelatedDocument() {\n\n    },\n    async applyFastFilter(textFilter = this.textFilter) {\n      // *@TODO:\n      try {\n        this.hasLoadedInnerValue = false;\n        this.$forceUpdate(true);\n        if(textFilter.trim() === \"\") {\n          this.innerValue = this.originalValue;\n          return;\n        }\n        const textFilterFunction = new Function(\"it,key,i\", \"try {\\n  return \" + textFilter + \";\\n} catch(e) {\\n  return false;\\n}\");\n        console.log(\"User-built filter function:\");\n        console.log(textFilterFunction.toString());\n        if(typeof this.originalValue !== \"object\") {\n          this.innerValue = this.originalValue;\n          return;\n        } else if(Array.isArray(this.originalValue)) {\n          this.innerValue = [].concat(this.originalValue).filter(textFilterFunction);\n        } else {\n          Object.keys(this.originalValue).reduce((out, key, i) => {\n            const value = this.originalValue[key];\n            const passesFilter = textFilterFunction(value, key, i);\n            if(passesFilter) {\n              out[key] = value;\n            }\n            return out;\n          }, {});\n          this.innerValue = out;\n        }\n      } catch (error) {\n        console.log(error);\n      } finally {\n        this.isLoadingInnerValue = false;\n        this.hasLoadedInnerValue = true;\n        this.$forceUpdate(true);\n      }\n    },\n    propagateFastFilter(textFilter = this.textFilter) {\n      this.isLoadingInnerValue = true;\n      clearTimeout(this.propagateFastFilterTimeoutId);\n      this.propagateFastFilterTimeoutId = setTimeout(() => {\n        this.applyFastFilter(textFilter);\n      }, this.propagateFastFilterTimeoutMs);\n    }\n  },\n  watch: {\n    textFilter(newValue) {\n      this.propagateFastFilter(newValue);\n    }\n  }\n});\n",
      "$code.label": "LswDataExplorer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-data-explorer/lsw-data-implorer/lsw-data-implorer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 116,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswDataImplorer API » LswDataImplorer API",
      "$code": "Vue.component('LswDataImplorer', {\n  template: $template,\n  props: {\n    value: {\n      required: true\n    },\n    pageSize: {\n      type: Number,\n      default: () => 10\n    },\n    level: {\n      type: Number,\n      default: () => 0\n    },\n    pointer: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      expanded: {},\n      isRoot: this.pointer.length === 0,\n      currentPageSize: this.pageSize,\n      currentPage: 1,\n      page: {},\n      entries: [],\n      paginatedEntries: [],\n      isPaginated: false,\n    };\n  },\n  methods: {\n    loadEntries() {\n      if (typeof this.value !== 'object' || this.value === null) {\n        return [{ key: 'value', value: this.value }];\n      }\n      this.entries = Object.entries(this.value).map(([key, value]) => ({ key, value }));\n    },\n    toggleExpand(key) {\n      this.$set(this.expanded, key, !this.expanded[key]);\n    },\n    goToPage(page) {\n      this.currentPage = page;\n      this.loadPaginatedEntries();\n    },\n    goToPreviousPage() {\n      if(this.currentPage <= 1) {\n        return;\n      }\n      this.currentPage--;\n      this.loadPaginatedEntries();\n    },\n    goToNextPage() {\n      if(this.currentPage >= Math.ceil(this.entries.length / this.pageSize)) {\n        return;\n      }\n      this.currentPage++;\n      this.loadPaginatedEntries();\n    },\n    goToLastPage() {\n      this.currentPage = Math.ceil(this.entries.length / this.pageSize);\n      this.loadPaginatedEntries();\n    },\n    paginateArray(array, pageSize = this.currentPageSize, currentPage = this.currentPage) {\n      const start = (currentPage - 1) * pageSize;\n      const end = start + pageSize;\n      return array.slice(start, end);\n    },\n    loadPaginatedEntries(entries = this.entries) {\n      this.paginatedEntries = this.paginateArray(entries);\n      this.isPaginated = this.paginatedEntries.length !== this.entries.length;\n    },\n  },\n  watch: {\n    entries(newValue) {\n      if(this.pageSize <= 0) {\n        return newValue;\n      }\n      this.loadPaginatedEntries(newValue);\n    }\n  },\n  mounted() {\n    this.loadEntries();\n  }\n});\n",
      "$code.label": "LswDataImplorer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/database-breadcrumb/database-breadcrumb.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 134,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswDatabaseBreadcrumb API » LswDatabaseBreadcrumb API",
      "$code": "Vue.component(\"LswDatabaseBreadcrumb\", {\n  template: $template,\n  props: {\n    databaseExplorer: {\n      type: Object,\n      required: true\n    },\n    breadcrumb: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      \n    }\n  },\n  methods: {\n    selectPage(page, args = {}) {\n      return this.databaseExplorer.selectPage(page, args);\n    }\n  },\n  async mounted() {\n    \n  },\n  unmounted() {\n\n  }\n});\n",
      "$code.label": "LswDatabaseBreadcrumb API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/database-explorer/database-explorer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 128,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswDatabaseExplorer API » LswDatabaseExplorer API",
      "$code": "Vue.component(\"LswDatabaseExplorer\", {\n  template: $template,\n  props: {\n    showBreadcrumb: {\n      type: Boolean,\n      default: () => true\n    },\n    initialPage: {\n      type: String,\n      default: () => \"lsw-page-tables\"\n    },\n    initialArgs: {\n      type: Object,\n      default: () => ({ database: \"lsw_default_database\" })\n    },\n  },\n  data() {\n    this.$trace(\"lsw-database-explorer.data\", []);\n    return {\n      isLoading: false,\n      selectedPage: this.initialPage,\n      selectedArgs: this.initialArgs,\n    }\n  },\n  methods: {\n    selectPage(page, args = {}) {\n      try {\n        this.$trace(\"lsw-database-explorer.methods.selectPage\", arguments);\n        $ensure({page}, 1).type(\"string\");\n        $ensure({args}, 1).type(\"object\");\n        this.isLoading = true;\n        this.$nextTick(() => {\n          this.selectedArgs = args;\n          this.selectedPage = page;\n          this.isLoading = false;\n        });\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    }\n  },\n  async mounted() {\n    this.$trace(\"lsw-database-explorer.methods.mounted\", arguments);\n  },\n  unmounted() {\n    this.$trace(\"lsw-database-explorer.methods.unmounted\", arguments);\n  }\n});\n",
      "$code.label": "LswDatabaseExplorer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/page-databases/page-databases.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 119,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswPageDatabases API » LswPageDatabases API",
      "$code": "Vue.component(\"LswPageDatabases\", {\n  template: $template,\n  props: {\n    databaseExplorer: {\n      type: Object,\n      required: true\n    },\n    args: {\n      type: Object,\n      required: true\n    },\n  },\n  data() {\n    return {\n      databases: [],\n      databasesForTable: false,\n      breadcrumb: [{\n        page: \"LswPageDatabases\",\n        name: \"Databases\",\n        args: {},\n        current: true\n      }],\n    }\n  },\n  methods: {\n    openDatabase(name) {\n      this.databaseExplorer.selectPage(\"LswPageTables\", { database: name });\n    }\n  },\n  watch: {\n    databases(value) {\n      AdaptingForTable: {\n        const databasesForTable = [];\n        if (typeof value !== \"object\") {\n          break AdaptingForTable;\n        }\n        const databaseIds = Object.keys(value);\n        for(let indexDatabase=0; indexDatabase<databaseIds.length; indexDatabase++) {\n          const databaseId = databaseIds[indexDatabase];\n          const databaseObject = value[databaseId];\n        }\n        this.databasesForTable = databasesForTable;\n      }\n    }\n  },\n  async mounted() {\n    this.databases = await LswDatabaseAdapter.listDatabases();\n    Filter_by_entity_schema_matched_db_names: {\n      $lswSchema\n    }\n  },\n  unmounted() {\n\n  }\n});\n",
      "$code.label": "LswPageDatabases API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/page-row/page-row.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 101,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswPageRow API » LswPageRow API",
      "$code": "Vue.component(\"LswPageRow\", {\n  template: $template,\n  props: {\n    databaseExplorer: {\n      type: Object,\n      required: true\n    },\n    args: {\n      type: Object,\n      required: true\n    },\n  },\n  data() {\n    this.$trace(\"lsw-page-row.data\", arguments);\n    $ensure(this.args.database).type(\"string\");\n    $ensure(this.args.table).type(\"string\");\n    $ensure(this.args.rowId).type(\"number\");\n    return {\n      isLoaded: false,\n      breadcrumb: [{\n        page: \"LswPageTables\",\n        name: this.args.database,\n        args: {\n          database: this.args.database\n        }\n      }, {\n        page: \"LswPageRows\",\n        name: this.args.table,\n        args: {\n          database: this.args.database,\n          table: this.args.table\n        },\n      }, {\n        page: \"LswPageRow\",\n        name: (this.args.rowId === -1) ? '#new' : (\"#\" + this.args.rowId),\n        args: {\n          database: this.args.database,\n          table: this.args.table,\n          rowId: this.args.rowId\n        },\n        current: true\n      }],\n      database: this.args.database,\n      table: this.args.table,\n      rowId: this.args.rowId,\n      connection: undefined,\n      row: false,\n    }\n  },\n  methods: {\n    goBack() {\n      this.$trace(\"lsw-page-row.methods.goBack\", arguments);\n      return this.databaseExplorer.selectPage(\"LswPageRows\", {\n        database: this.database,\n        table: this.table\n      });\n    },\n    async loadRow() {\n      this.$trace(\"lsw-page-row.methods.loadRow\", arguments);\n      try {\n        if (this.rowId === -1) {\n          return false;\n        }\n        this.connection = this.connection ?? new LswDatabaseAdapter(this.database);\n        await this.connection.open();\n        const matches = await this.connection.select(this.table, it => it.id === this.rowId);\n        this.row = matches[0];\n      } catch (error) {\n        console.log(\"Error loading row:\", error);\n        this.$lsw.toasts.showError(error);\n        throw error;\n      } finally {\n        this.row = false;\n      }\n    },\n    async upsertRow(value) {\n      this.$trace(\"lsw-page-row.methods.upsertRow\", arguments);\n      try {\n        const existsRow = this.rowId || ((typeof (this.row) === \"object\") && (typeof (this.row.id) === \"number\") && (this.row.id !== -1));\n        let id = this.rowId || this.row.id;\n        const operation = (existsRow && (id !== -1)) ? \"update\" : \"insert\";\n        if (operation === \"insert\") {\n          id = await this.$lsw.database.insert(this.table, value);\n        } else {\n          await this.$lsw.database.update(this.table, id, value);\n        }\n        this.$lsw.toasts.send({\n          title: `Nueva ${operation === 'insert' ? 'inserción' : 'actualización'}`,\n          text: `El registro #${id} de «${this.table}» fue ${operation === 'insert' ? 'insertado' : 'actualizado'} correctamente.`\n        });\n        if (operation === \"insert\") {\n          this.databaseExplorer.selectPage(\"LswPageRow\", {\n            database: this.database,\n            table: this.table,\n            rowId: id\n          });\n        } else {\n          // @OK.\n        }\n      } catch (error) {\n        console.log(error);\n        this.$lsw.toasts.showError(error);\n      }\n    }\n  },\n  async mounted() {\n    this.$trace(\"lsw-page-row.mounted\", arguments);\n    try {\n      await this.loadRow();\n    } catch (error) {\n      console.log(\"Error loading row:\", error);\n      throw error;\n    } finally {\n      this.isLoaded = true;\n    }\n  },\n  unmounted() {\n    this.$trace(\"lsw-page-row.unmounted\", arguments);\n    this.connection.close();\n  }\n});\n",
      "$code.label": "LswPageRow API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/page-rows/page-rows.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 104,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswPageRows API » LswPageRows API",
      "$code": "Vue.component(\"LswPageRows\", {\n  template: $template,\n  props: {\n    databaseExplorer: {\n      type: Object,\n      required: true\n    },\n    args: {\n      type: Object,\n      required: true\n    },\n  },\n  data() {\n    this.$trace(\"lsw-page-rows.data\", []);\n    $ensure({ \"args\": this.args }, 1).type(\"object\");\n    $ensure({ \"args.database\": this.args.database }, 1).type(\"string\");\n    $ensure({ \"args.table\": this.args.table }, 1).type(\"string\");\n    return {\n      breadcrumb: [{\n        page: \"LswPageTables\",\n        name: this.args.database,\n        args: {\n          database: this.args.database\n        }\n      }, {\n        page: \"LswPageRows\",\n        name: this.args.table,\n        args: {\n          database: this.args.database,\n          table: this.args.table\n        },\n        current: true\n      }],\n      database: this.args.database,\n      table: this.args.table,\n      rows: undefined,\n      connection: undefined,\n    }\n  },\n  methods: {\n    goBack() {\n      this.$trace(\"lsw-page-rows.methods.goBack\", arguments);\n      return this.databaseExplorer.selectPage(\"LswPageTables\", {\n        database: this.database,\n      });\n    },\n    getTableId() {\n      if(this.args.tableStorageId) {\n        return this.args.tableStorageId + '.json';\n      } else {\n        return 'lsw-database-ui.page-rows.' + this.args.database + '.' + this.args.table + '.json';\n      }\n    },\n    async loadRows() {\n      this.$trace(\"lsw-page-rows.methods.loadRows\", arguments);\n      this.connection = this.connection ?? new LswDatabaseAdapter(this.database);\n      await this.connection.open();\n      const filterCallback = (this.args.filterCallback && typeof(this.args.filterCallback) === \"function\") ? this.args.filterCallback : () => true;\n      const selection = await this.connection.select(this.table, filterCallback);\n      this.rows = selection;\n      return selection;\n    },\n    openRow(rowId) {\n      this.$trace(\"lsw-page-rows.methods.openRow\", arguments);\n      return this.databaseExplorer.selectPage(\"LswPageRow\", {\n        database: this.database,\n        table: this.table,\n        rowId: rowId\n      });\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-page-rows.mounted\", arguments);\n    this.loadRows();\n  },\n  unmounted() {\n    this.$trace(\"lsw-page-rows.unmounted\", arguments);\n    this.connection.close();\n  }\n});\n",
      "$code.label": "LswPageRows API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/page-schema/page-schema.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 110,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswPageSchema API » LswPageSchema API",
      "$code": "Vue.component(\"LswPageSchema\", {\n  template: $template,\n  props: {},\n  data() {\n    return {\n      \n    }\n  },\n  methods: {\n    \n  },\n  mounted() {\n    \n  },\n  unmounted() {\n\n  }\n});\n",
      "$code.label": "LswPageSchema API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/page-tables/page-tables.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 110,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswPageTables API » LswPageTables API",
      "$code": "Vue.component(\"LswPageTables\", {\n  template: $template,\n  props: {\n    databaseExplorer: {\n      type: Object,\n      required: true\n    },\n    args: {\n      type: Object,\n      required: true\n    },\n  },\n  data() {\n    const ensureArgs = $ensure(this.args).type(\"object\");\n    ensureArgs.to.have.key(\"database\").its(\"database\").type(\"string\");\n    return {\n      breadcrumb: [{\n        page: \"LswPageTables\",\n        name: this.args.database,\n        args: {\n          database: this.args.database\n        },\n        current: true\n      }],\n      database: this.args.database,\n      tables: false,\n      tablesAsList: false,\n      isShowingSchema: false,\n    }\n  },\n  methods: {\n    async loadDatabase() {\n      const db = await LswDatabaseAdapter.getSchema(this.database);\n      this.tables = db;\n      console.log(`[*] Tables of database ${this.args.database}:`, db);\n    },\n    openTable(table) {\n      $ensure({ table }, 1).type(\"string\");\n      return this.databaseExplorer.selectPage(\"LswPageRows\", {\n        database: this.database,\n        table: table\n      });\n    },\n    toggleSchema() {\n      this.isShowingSchema = !this.isShowingSchema;\n    }\n  },\n  watch: {\n    tables(value) {\n      const tablesAsList = [];\n      const tableIds = Object.keys(value);\n      for(let index=0; index<tableIds.length; index++) {\n        const tableId = tableIds[index];\n        const tableData = value[tableId];\n        tablesAsList.push({\n          id: tableId,\n          name: tableId,\n          ...tableData,\n          indexes: tableData.indexes ? tableData.indexes.map(ind => ind.name) : []\n        });\n      }\n      this.tablesAsList = tablesAsList;\n    },\n  },\n  computed: {\n    tablesAsIdsList() {\n      return Object.keys(this.tablesAsList || {});\n    }\n  },\n  mounted() {\n    this.loadDatabase();\n  },\n  unmounted() {\n\n  }\n});\n",
      "$code.label": "LswPageTables API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-filesystem-explorer/lsw-filesystem-buttons-panel/lsw-filesystem-buttons-panel.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 150,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Filesystem Explorer API » LswFilesystemButtonsPanel component",
      "$code": "Vue.component(\"LswFilesystemButtonsPanel\", {\n  name: \"LswFilesystemButtonsPanel\",\n  template: $template,\n  props: {\n    explorer: {\n      type: Object,\n      required: true\n    },\n    orientation: {\n      type: String,\n      default: () => \"row\" // could be \"column\" too\n    }\n  },\n  data() {\n    return {\n      buttons: []\n    };\n  },\n  watch: {\n\n  },\n  methods: {\n    setButtons(...buttons) {\n      this.$trace(\"lsw-filesystem-buttons-panel.methods.prependButtons\");\n      this.buttons = buttons;\n    },\n    prependButtons(...buttons) {\n      this.$trace(\"lsw-filesystem-buttons-panel.methods.prependButtons\");\n      this.buttons = buttons.concat(this.buttons);\n    },\n    appendButtons(...buttons) {\n      this.$trace(\"lsw-filesystem-buttons-panel.methods.appendButtons\");\n      this.buttons = this.buttons.concat(buttons);\n    },\n  },\n  mounted() {\n\n  }\n});\n",
      "$code.label": "LswFilesystemButtonsPanel API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-filesystem-explorer/lsw-filesystem-editor/lsw-filesystem-editor.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 138,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Filesystem Explorer API » LswFilesystemEditor component",
      "$code": "Vue.component(\"LswFilesystemEditor\", {\n  name: \"LswFilesystemEditor\",\n  template: $template,\n  props: {\n    explorer: {\n      type: Object,\n      required: true\n    },\n    filecontents: {\n      type: String,\n      required: true\n    },\n  },\n  data() {\n    return {\n      contents: this.filecontents,\n      cursorPosition: false,\n      currentFontsize: 12,\n      currentFontfamily: \"Arial\"\n    };\n  },\n  watch: {\n\n  },\n  methods: {\n    getContents() {\n      return this.contents;\n    },\n    setContents(contents) {\n      this.contents = contents;\n    },\n    gainFocus() {\n      this.$refs.editorTextarea.focus();\n    },\n    increaseFontsize() {\n      this.$trace(\"lsw-filesystem-editor.methods.increaseFontsize\");\n      this.currentFontsize++;\n    },\n    decreaseFontsize() {\n      this.$trace(\"lsw-filesystem-editor.methods.decreaseFontsize\");\n      this.currentFontsize--;\n    },\n    toggleFontfamily() {\n      this.$trace(\"lsw-filesystem-editor.methods.toggleFontfamily\");\n      if(this.currentFontfamily === \"monospace\") {\n        this.currentFontfamily = \"Arial\";\n      } else {\n        this.currentFontfamily = \"monospace\";\n      }\n    },\n    async saveDocument() {\n      this.$trace(\"lsw-filesystem-editor.methods.saveDocument\");\n      await this.$lsw.fs.write_file(this.explorer.current_node, this.contents);\n      this.$lsw.toasts.send({\n        title: \"Documento guardado\",\n        text: \"El documento se guardó correctamente\"\n      });\n    },\n    async executeDocument() {\n      this.$trace(\"lsw-filesystem-editor.methods.executeDocument\");\n      if(this.explorer.current_node.endsWith(\".js\")) {\n        Ejecutar_javascript_asincronamente: {\n          this.explorer.processToExecuteFile();\n        }\n      }\n    },\n    async executeMobileDocument() {\n      this.$trace(\"lsw-filesystem-editor.methods.executeMobileDocument\");\n      if(this.explorer.current_node.endsWith(\".js\")) {\n        Ejecutar_javascript_asincronamente: {\n          this.explorer.processToExecuteFileOnAndroid();\n        }\n      }\n    },\n    beautifyDocument() {\n      this.$trace(\"lsw-filesystem-editor.methods.beautifyDocument\");\n      const fsExplorer = LswDom.getClosestParent(this.$el, \".lsw_filesystem_explorer\");\n      if(!fsExplorer) return;\n      LswDom.querySelectorFirst(\"button\", \"{js}\", fsExplorer).click();\n    },\n    searchReplace() {\n      this.$trace(\"lsw-filesystem-editor.methods.searchReplace\");\n      const fsExplorer = LswDom.getClosestParent(this.$el, \".lsw_filesystem_explorer\");\n      if(!fsExplorer) return;\n      LswDom.querySelectorFirst(\"button\", \"🔎↔️\", fsExplorer).click();\n    },\n    synchronizeCursor() {\n      this.$trace(\"lsw-filesystem-editor.methods.synchronizeCursor\");\n      const editorHtml = this.$refs.editorTextarea;\n      const offsetStart = editorHtml.selectionStart\n      const offsetEnd = editorHtml.selectionEnd;\n      let lineStart = undefined;\n      let lineEnd = undefined;\n      let columnStart = undefined;\n      let columnEnd = undefined;\n      Col_start: {\n        const beforeCursor = editorHtml.value.slice(0, offsetStart);\n        const lines = beforeCursor.split(\"\\n\");\n        lineStart = lines.length - 1;\n        columnStart = lines[lines.length - 1].length;\n      }\n      Col_end: {\n        const beforeCursor = editorHtml.value.slice(0, offsetEnd);\n        const lines = beforeCursor.split(\"\\n\");\n        lineEnd = lines.length - 1;\n        columnEnd = lines[lines.length - 1].length;\n      }\n      const cursor = {\n        start: {\n          offset: offsetStart,\n          line: lineStart,\n          column: columnStart,\n        },\n        end: {\n          offset: offsetEnd,\n          line: lineEnd,\n          column: columnEnd,\n        }\n      };\n      this.cursorPosition = cursor;\n      return cursor;\n    }\n  },\n  mounted() {\n\n  }\n});\n",
      "$code.label": "LswFilesystemEditor API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-filesystem-explorer/lsw-filesystem-explorer/lsw-filesystem-explorer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 142,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Filesystem Explorer API » LswFilesystemExplorer component",
      "$code": "Vue.component(\"LswFilesystemExplorer\", {\n  name: \"LswFilesystemExplorer\",\n  template: $template,\n  props: {\n    absoluteLayout: {\n      type: Boolean,\n      default: () => false,\n    },\n    openedBy: {\n      type: String,\n      default: () => \"/\",\n    }\n  },\n  data() {\n    this.$trace(\"lsw-filesystem-explorer.data\");\n    return {\n      is_ready: false,\n      current_node: \"/\",\n      current_node_parts: undefined,\n      current_node_basename: undefined,\n      current_node_basedir: undefined,\n      current_node_contents: undefined,\n      current_node_subnodes: [],\n      current_node_is_file: false,\n      current_node_is_directory: false,\n      syntaxValidators: {},\n      STANDARIZED_REFRESH_DELAY: 100\n    };\n  },\n  methods: {\n    open(...args) {\n      this.$trace(\"lsw-filesystem-explorer.methods.open\");\n      return this.open_node(...args);\n    },\n    goUp() {\n      this.$trace(\"lsw-filesystem-explorer.methods.goUp\");\n      const parts = this.current_node.split(\"/\");\n      parts.pop();\n      const dest = this.normalize_path(\"/\" + parts.join(\"/\"));\n      return this.open(dest);\n    },\n    async refresh() {\n      this.$trace(\"lsw-filesystem-explorer.methods.refresh\");\n      this.is_ready = false;\n      try {\n        await this.open(this.current_node);\n      } catch (error) {\n        throw error;\n      } finally {\n        this.$nextTick(() => {\n          this.is_ready = true;\n          this.$forceUpdate(true);\n        });\n      }\n    },\n    normalize_path(subpath) {\n      this.$trace(\"lsw-filesystem-explorer.methods.normalize_path\");\n      return this.$lsw.fs.resolve_path(this.current_node, subpath);\n    },\n    async open_node(subpath = this.current_node) {\n      this.$trace(\"lsw-filesystem-explorer.methods.open_node\");\n      try {\n        if ([\"\", \"/\"].indexOf(subpath) !== -1) {\n          return await this._openDirectory(\"/\");\n        }\n        const temporaryPath = this.normalize_path(subpath);\n        const is_directory = await this.$lsw.fs.is_directory(temporaryPath);\n        if (is_directory) {\n          return await this._openDirectory(temporaryPath);\n        }\n        const is_file = await this.$lsw.fs.is_file(temporaryPath);\n        if (is_file) {\n          return await this._openFile(temporaryPath);\n        }\n        throw new Error(`Cannot open path because it does not exist: ${temporaryPath} on «LswFilesystemExplorer.methods.open_node»`);\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    },\n    async processToCreateFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToCreateFile\");\n      const filename = await this.$lsw.dialogs.open({\n        title: \"Crear fichero\",\n        template: `<div>\n          <div class=\"pad_1\">\n            <div>Estás en la carpeta:</div>\n            <div class=\"pad_2\">{{ current_directory }}</div>\n            <div>Di el nombre del nuevo fichero:</div>\n            <div class=\"pad_top_1\">\n              <input class=\"width_100\" type=\"text\" placeholder=\"myfile.txt\" v-model=\"filename\" v-focus v-on:keyup.enter=\"() => accept(filename)\" />\n            </div>\n          </div>\n          <hr />\n          <div class=\"flex_row centered pad_1\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 pad_right_1\">\n              <button class=\"supermini nowrap danger_button\" v-on:click=\"() => accept(filename)\">Crear fichero</button>\n            </div>\n            <div class=\"flex_1\">\n              <button class=\"supermini nowrap \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        </div>`,\n        factory: {\n          data() {\n            return {\n              current_directory: this.$lsw.fs.get_current_directory(),\n              filename: \"\",\n            };\n          },\n        },\n      });\n      if (!filename) return;\n      const filepath = this.$lsw.fs.resolve_path(this.$lsw.fs.get_current_directory(), filename);\n      await this.$lsw.fs.write_file(filepath, \"\");\n      this.refresh();\n    },\n    async processToCreateDirectory() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToCreateDirectory\");\n      const filename = await this.$lsw.dialogs.open({\n        title: \"Crear directorio\",\n        template: `<div>\n          <div class=\"pad_1\">\n            <div>Estás en la carpeta:</div>\n            <div class=\"pad_2\">{{ current_directory }}</div>\n            <div>Di el nombre del nuevo directorio:</div>\n            <div class=\"pad_top_1\">\n              <input class=\"width_100\" type=\"text\" placeholder=\"myfolder\" v-model=\"filename\" v-focus v-on:keyup.enter=\"() => accept(filename)\" />\n            </div>\n          </div>\n          <hr />\n          <div class=\"flex_row centered pad_1\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 pad_right_1\">\n              <button class=\"supermini nowrap danger_button\" v-on:click=\"() => accept(filename)\">Sí, seguro</button>\n            </div>\n            <div class=\"flex_1\">\n              <button class=\"supermini nowrap \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        </div>`,\n        factory: {\n          data() {\n            return {\n              current_directory: this.$lsw.fs.get_current_directory(),\n              filename: \"\",\n            };\n          },\n        },\n      });\n      if (!filename) return;\n      const filepath = this.$lsw.fs.resolve_path(this.$lsw.fs.get_current_directory(), filename);\n      await this.$lsw.fs.make_directory(filepath);\n      this.refresh();\n    },\n    async processToDeleteDirectory() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToDeleteDirectory\");\n      const confirmation = await this.$lsw.dialogs.open({\n        title: \"Eliminar directorio\",\n        template: `<div>\n          <div class=\"pad_1\">\n            <div>¿Seguro que quieres eliminar el directorio?</div>\n            <div class=\"pad_2\">{{ current_directory }}</div>\n          </div>\n          <hr />\n          <div class=\"flex_row centered pad_1\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 pad_right_1\">\n              <button class=\"supermini nowrap danger_button\" v-on:click=\"() => accept(true)\">Sí, seguro</button>\n            </div>\n            <div class=\"flex_1\">\n              <button class=\"supermini nowrap \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        </div>`,\n        factory: {\n          data: {\n            current_directory: this.$lsw.fs.get_current_directory(),\n          }\n        }\n      });\n      if (!confirmation) return;\n      await this.$lsw.fs.delete_directory(this.$lsw.fs.get_current_directory());\n      this.refresh();\n    },\n    async processToDeleteFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToDeleteFile\");\n      const confirmation = await this.$lsw.dialogs.open({\n        title: \"Eliminar fichero\",\n        template: `<div>\n          <div class=\"pad_1\">\n            <div>¿Seguro que quieres eliminar el fichero?</div>\n            <div class=\"pad_2\">{{ current_file }}</div>\n          </div>\n          <hr />\n          <div class=\"flex_row centered pad_1\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 pad_right_1\">\n              <button class=\"supermini nowrap danger_button\" v-on:click=\"() => accept(true)\">Sí, seguro</button>\n            </div>\n            <div class=\"flex_1\">\n              <button class=\"supermini nowrap \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        </div>`,\n        factory: {\n          data: {\n            current_file: this.current_node,\n          }\n        }\n      });\n      if (!confirmation) return;\n      await this.$lsw.fs.delete_file(this.current_node);\n      const upperDir = (() => {\n        const parts = this.current_node.split(\"/\");\n        parts.pop();\n        return parts.join(\"/\");\n      })();\n      this.refresh();\n    },\n    async processToRenameFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToRenameFile\");\n      const elementType = this.current_node_is_file ? \"fichero\" : \"directorio\";\n      const newName = await this.$lsw.dialogs.open({\n        title: \"Renombrar \" + elementType,\n        template: `<div>\n          <div class=\"pad_1\">\n            <div>Refiriéndose al {{ elementType }}:</div>\n            <div class=\"pad_2\">{{ filename }}</div>\n          </div>\n          <div class=\"pad_1\">\n            <div>Di el nuevo nombre del {{ elementType }}:</div>\n            <div class=\"pad_top_1\">\n              <input v-focus class=\"width_100\" type=\"text\" placeholder=\"Nuevo nombre aquí\" v-model=\"new_filename\" v-on:keyup.enter=\"() => accept(new_filename)\" />\n            </div>\n          </div>\n          <hr />\n          <div class=\"flex_row centered\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 pad_right_1\">\n              <button class=\"supermini nowrap danger_button\" v-on:click=\"() => accept(new_filename)\">Sí, seguro</button>\n            </div>\n            <div class=\"flex_1\">\n              <button class=\"supermini nowrap \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        </div>`,\n        factory: {\n          data: {\n            elementType,\n            filename: this.current_node,\n            new_filename: this.current_node.split(\"/\").pop(),\n          }\n        }\n      });\n      if (newName === false) return;\n      if (newName.trim() === \"\") return;\n      const allParts = this.current_node.split(\"/\");\n      allParts.pop();\n      const dirPath = \"/\" + allParts.join(\"/\");\n      const newFullpath = this.$lsw.fs.resolve_path(dirPath, newName);\n      await this.$lsw.fs.rename(this.current_node, newName.replace(/^\\/+/g, \"\"));\n      await this.open(newFullpath);\n    },\n    async processToExecuteFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToExecuteFile\");\n      const editorContents = this.$refs.editor.getContents();\n      const AsyncFunction = (async function () { }).constructor;\n      const asyncFunction = new AsyncFunction(editorContents);\n      try {\n        const result = await asyncFunction.call(this);\n        this.$lsw.toasts.debug(result);\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    },\n    async processToLoadFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToLoadFile\");\n      this.is_ready = false;\n      const contents = await this.$lsw.fs.read_file(this.current_node);\n      this.current_node_contents = contents;\n      this.$nextTick(() => {\n        this.is_ready = true;\n      });\n    },\n    async processToSaveFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToSaveFile\");\n      try {\n        if (!this.$refs.editor) {\n          throw new Error(\"No hay editor ahora mismo\");\n        }\n        const editorContents = this.$refs.editor.getContents();\n        await this.$lsw.fs.write_file(this.current_node, editorContents);\n        this.$lsw.toasts.send({\n          title: \"Fichero guardado\",\n          text: \"Hablamos de: \" + this.current_node\n        });\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    },\n    _setButtonsForFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods._setButtonsForFile\");\n      this.is_ready = false;\n      this.current_node_is_file = true;\n      this.current_node_is_directory = false;\n      Setup_panel_top_on_file: {\n        this.$refs.panelTop.setButtons({\n          text: \"➜\",\n          classes: \"reversed\",\n          click: () => this.goUp(),\n        });\n      }\n      Setup_panel_right_on_file: {\n        const rightButtonsOnFile = [\n          {\n            text: \"💾\",\n            click: () => this.processToSaveFile(),\n          }, {\n            text: \"↔️\",\n            click: () => this.processToRenameFile(),\n          }, {\n            text: \"🔄\",\n            click: () => this.processToLoadFile(),\n          }, {\n            text: \"📄 🔥\",\n            classes: \"danger_button\",\n            click: () => this.processToDeleteFile(),\n          }\n        ];\n        BUTTON_INJECTION_HERE__RIGHT_PANEL: {\n          // @INJECTABLE: add custom buttons for extensions:\n          Button_to_execute_javascript: {\n            if (this.current_node.endsWith(\".js\")) {\n              rightButtonsOnFile.push({\n                text: \"⚡️ js\",\n                classes: \"danger_button\",\n                click: () => this.processToExecuteFile(),\n              });\n            }\n          }\n          Button_to_compile_markdown_to_html: {\n            if (this.current_node.endsWith(\".md\")) {\n              rightButtonsOnFile.push({\n                text: \"🔩 md\",\n                classes: \"\",\n                click: () => this.processToCompileMarkdown(),\n              });\n            }\n          }\n          Button_to_compile_pegjs_to_js: {\n            if (this.current_node.endsWith(\".pegjs\")) {\n              rightButtonsOnFile.push({\n                text: \"🔩 pegjs\",\n                classes: \"\",\n                click: () => this.processToCompilePegjs(),\n              });\n            }\n          }\n          Button_to_compile_natyscript_to_json: {\n            if (this.current_node.endsWith(\".nsc\")) {\n              rightButtonsOnFile.push({\n                text: \"🔩 nsc\",\n                classes: \"\",\n                click: () => this.processToCompileNatyscript(),\n              });\n            }\n          }\n          Button_to_format_code: {\n            if (this.current_node.endsWith(\".html\")) {\n              rightButtonsOnFile.push({\n                text: \"{html}\",\n                classes: \"\",\n                click: () => this.processToFormatHtml(),\n              });\n            } else if (this.current_node.endsWith(\".css\")) {\n              rightButtonsOnFile.push({\n                text: \"{css}\",\n                classes: \"\",\n                click: () => this.processToFormatCss(),\n              });\n            } else if (this.current_node.endsWith(\".js\")) {\n              rightButtonsOnFile.push({\n                text: \"{js}\",\n                classes: \"\",\n                click: () => this.processToFormatJs(),\n              });\n              if(typeof cordova !== \"undefined\") {\n                rightButtonsOnFile.push({\n                  text: \"📱⚡️\",\n                  classes: \"\",\n                  click: () => this.processToExecuteFileOnAndroid(),\n                });\n              }\n            }\n          }\n          Button_to_download_file: {\n            rightButtonsOnFile.push({\n              text: \"📥\",\n              classes: \"\",\n              click: () => this.processToDownloadFile(),\n            });\n          }\n          Button_to_search_replace: {\n            rightButtonsOnFile.push({\n              text: \"🔎↔️\",\n              classes: \"\",\n              click: () => this.processToSearchReplace(),\n            });\n          }\n          Button_to_validate_code: {\n            if(this.hasSyntaxValidator(this.current_node)) {\n              rightButtonsOnFile.push({\n                text: \"✅\",\n                classes: \"\",\n                click: () => this.processToValidateCode(),\n              });\n            }\n          }\n        }\n        this.$refs.panelRight.setButtons(...rightButtonsOnFile);\n      }\n      Setup_panel_bottom_on_file: {\n        const bottomButtonsOnFile = [\n          {\n            text: \"➕\",\n            click: () => this.increaseFontsize(),\n          }, {\n            text: \"➖\",\n            click: () => this.decreaseFontsize(),\n          }, {\n            text: \"✍🏻|🐒\",\n            click: () => this.toggleFontfamily(),\n          }\n        ];\n        BUTTON_INJECTION_HERE__BOTTOM_PANEL: {\n          // @INJECTABLE: add custom buttons for extensions:\n          Button_to_view_code: {\n            if (this.current_node.endsWith(\".js\")) {\n              bottomButtonsOnFile.push({\n                text: \"🌈\",\n                click: () => this.openCodeViewerForJs()\n              });\n            } else if (this.current_node.endsWith(\".css\")) {\n              bottomButtonsOnFile.push({\n                text: \"🌈\",\n                click: () => this.openCodeViewerForCss()\n              });\n            } else if (this.current_node.endsWith(\".html\")) {\n              bottomButtonsOnFile.push({\n                text: \"🌈\",\n                click: () => this.openCodeViewerForHtml()\n              });\n            } else if (this.current_node.endsWith(\".mmd\")) {\n              bottomButtonsOnFile.push({\n                text: \"🌈\",\n                click: () => this.openCodeViewerForMermaid()\n              });\n            }\n          }\n          Button_to_view_html: {\n            if (this.current_node.endsWith(\".html\")) {\n              bottomButtonsOnFile.push({\n                text: \"📻\",\n                classes: \"\",\n                click: () => this.processToViewHtml(),\n              });\n            } else if (this.current_node.endsWith(\".md\")) {\n              bottomButtonsOnFile.push({\n                text: \"📻\",\n                classes: \"\",\n                click: () => this.processToViewMarkdown(),\n              });\n            }\n          }\n        }\n        this.$refs.panelBottom.setButtons(...bottomButtonsOnFile);\n      }\n      this.$nextTick(() => {\n        this.is_ready = true;\n      });\n    },\n    _setButtonsForDirectory() {\n      this.$trace(\"lsw-filesystem-explorer.methods._setButtonsForDirectory\");\n      this.is_ready = false;\n      this.current_node_is_directory = true;\n      this.current_node_is_file = false;\n      Setup_panel_top_on_directory: {\n        if (this.current_node === \"/\") {\n          this.$refs.panelTop.setButtons();\n        } else {\n          this.$refs.panelTop.setButtons({\n            text: \"➜\",\n            classes: \"reversed\",\n            click: () => this.goUp(),\n          });\n        }\n      }\n      Setup_panel_right_on_directory: {\n        this.$refs.panelRight.setButtons({\n          text: \"📄+\",\n          click: () => this.processToCreateFile(),\n        }, {\n          text: \"📁+\",\n          click: () => this.processToCreateDirectory(),\n        }, {\n          text: \"📁 🔥\",\n          classes: \"danger_button\",\n          click: () => this.processToDeleteDirectory()\n        });\n      }\n      Setup_panel_bottom_on_directory: {\n        this.$refs.panelBottom.setButtons();\n      }\n      this.$nextTick(() => {\n        this.is_ready = true;\n      });\n    },\n    increaseFontsize() {\n      this.$trace(\"lsw-filesystem-explorer.methods.increaseFontsize\");\n      this.$refs.editor.increaseFontsize();\n    },\n    decreaseFontsize() {\n      this.$trace(\"lsw-filesystem-explorer.methods.decreaseFontsize\");\n      this.$refs.editor.decreaseFontsize();\n    },\n    toggleFontfamily() {\n      this.$trace(\"lsw-filesystem-explorer.methods.toggleFontfamily\");\n      this.$refs.editor.toggleFontfamily();\n    },\n    async _openFile(subpath) {\n      this.$trace(\"lsw-filesystem-explorer.methods._openFile\");\n      this.current_node = subpath;\n      const contents = await this.$lsw.fs.read_file(this.current_node);\n      this.current_node_contents = contents;\n      this._setButtonsForFile();\n    },\n    async _openDirectory(subpath) {\n      this.$trace(\"lsw-filesystem-explorer.methods._openDirectory\");\n      this.current_node = subpath;\n      const subnodes = await this.$lsw.fs.read_directory(this.current_node);\n      const sortedSubnodes = {\n        files: [],\n        folders: []\n      };\n      Object.keys(subnodes).forEach(id => {\n        const subnode = subnodes[id];\n        const subnodeType = typeof subnode === \"string\" ? \"files\" : \"folders\";\n        sortedSubnodes[subnodeType].push(id);\n      });\n      const formattedSubnodes = {};\n      sortedSubnodes.folders.sort().forEach(folder => {\n        formattedSubnodes[folder] = {};\n      });\n      sortedSubnodes.files.sort().forEach(file => {\n        formattedSubnodes[file] = \"...\";\n      });\n      console.log(subnodes, formattedSubnodes);\n      this.$lsw.fs.change_directory(subpath);\n      this.current_node_subnodes = formattedSubnodes;\n      this._setButtonsForDirectory();\n    },\n    __update_node_parts(newValue = this.current_node) {\n      this.$trace(\"lsw-filesystem-explorer.methods.__update_node_parts\");\n      this.current_node_parts = newValue.split(\"/\").filter(p => p !== \"\");\n    },\n    __update_current_node_basename(current_node_parts = this.current_node_parts) {\n      this.$trace(\"lsw-filesystem-explorer.methods.__update_current_node_basename\");\n      if (current_node_parts.length) {\n        this.current_node_basename = current_node_parts[current_node_parts.length - 1];\n      } else {\n        this.current_node_basename = \"/\";\n      }\n    },\n    __update_current_node_basedir(current_node_parts = this.current_node_parts) {\n      this.$trace(\"lsw-filesystem-explorer.methods.__update_current_node_basedir\");\n      if (current_node_parts.length > 1) {\n        this.current_node_basedir = \"/\" + [].concat(current_node_parts).splice(0, current_node_parts.length - 1).join(\"/\") + \"/\";\n      } else {\n        this.current_node_basedir = \"/\";\n      }\n    },\n    _updateNodeSubdata(newValue = this.current_node) {\n      this.$trace(\"lsw-filesystem-explorer.methods._updateNodeSubdata\");\n      this.__update_node_parts(newValue);\n      this.__update_current_node_basename();\n      this.__update_current_node_basedir();\n    },\n    setPanelButtons(panelOptions = {}) {\n      this.$trace(\"lsw-filesystem-explorer.methods.setPanelButtons\");\n      Validation: {\n        if (typeof panelOptions !== \"object\") {\n          throw new Error(\"Required argument «panelOptions» to be an object on «LswFilesystemExplorer.methods.setPanelButtons»\");\n        }\n        const keys = Object.keys(panelOptions);\n        if (keys.length === 0) {\n          throw new Error(\"Required argument «panelOptions» to be have 1 or more keys on «LswFilesystemExplorer.methods.setPanelButtons»\");\n        }\n        const valid_keys = [\"top\", \"bottom\", \"left\", \"right\"];\n        for (let index = 0; index < keys.length; index++) {\n          const key = keys[index];\n          if (valid_keys.indexOf(key) === -1) {\n            throw new Error(`Required argument «panelOptions[${key}]» to be a valid key out of «${valid_keys.join(\",\")}», not «${key}» on «LswFilesystemExplorer.methods.setPanelButtons»`);\n          }\n          const value = panelOptions[key];\n          if (typeof value !== \"object\") {\n            throw new Error(`Required argument «panelOptions[${key}]» to be an object or array, not ${typeof value}» on «LswFilesystemExplorer.methods.setPanelButtons»`);\n          }\n        }\n      }\n    },\n    async openCodeViewerForJs() {\n      this.$trace(\"lsw-filesystem-explorer.methods.openCodeViewerForJs\");\n      console.log(this.current_node_contents);\n      this.$lsw.dialogs.open({\n        title: \"Visualizando código JS\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"\">{{ file }}:</div>\n            <hr />\n            <lsw-code-viewer :code=\"code\" language=\"js\" />\n          </div>`,\n        factory: {\n          data: {\n            file: this.current_node,\n            code: this.$refs.editor.getContents(),\n          }\n        },\n      })\n    },\n    async openCodeViewerForCss() {\n      this.$trace(\"lsw-filesystem-explorer.methods.openCodeViewerForCss\");\n      this.$lsw.dialogs.open({\n        title: \"Visualizando código CSS\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"\">{{ file }}:</div>\n            <hr />\n            <lsw-code-viewer :code=\"code\" language=\"css\" />\n          </div>`,\n        factory: {\n          data: {\n            file: this.current_node,\n            code: this.$refs.editor.getContents(),\n          }\n        },\n      })\n    },\n    async openCodeViewerForHtml() {\n      this.$trace(\"lsw-filesystem-explorer.methods.openCodeViewerForHtml\");\n      this.$lsw.dialogs.open({\n        title: \"Visualizando código HTML\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"\">{{ file }}:</div>\n            <hr />\n            <lsw-code-viewer :code=\"code\" language=\"html\" />\n          </div>`,\n        factory: {\n          data: {\n            file: this.current_node,\n            code: this.$refs.editor.getContents(),\n          }\n        },\n      });\n    },\n    async openCodeViewerForMermaid() {\n      this.$trace(\"lsw-filesystem.explorer.methods.openCodeViewerForMermaid\");\n      this.$lsw.dialogs.open({\n        title: \"Visualizando código HTML\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"\">{{ file }}:</div>\n            <hr />\n            <lsw-mermaid-viewer :initial-source=\"code\" initial-page=\"visualizador\" />\n          </div>`,\n        factory: {\n          data: {\n            file: this.current_node,\n            code: this.$refs.editor.getContents(),\n          }\n        },\n      });\n    },\n    async processToCompileMarkdown() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToCompileMarkdown\");\n      const mdContent = this.$refs.editor.getContents();\n      const htmlContent = LswMarkdown.global.parse(mdContent);\n      const fileoutput = await this.$lsw.dialogs.open({\n        title: \"Compilar markdown a html\",\n        template: `\n          <div class=\"pad_1\">\n            <div>¿A qué fichero quieres exportar el html? Especifica solo el nombre:</div>\n            <!--lsw-sourceable :code=\"htmlContent\"-->\n            <input class=\"width_100\" type=\"text\" v-model=\"value\" />\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            value: this.current_node.replace(this.current_node_basedir, \"\").replace(/\\.md$/, \".html\"),\n          }\n        }\n      });\n      if (typeof fileoutput !== \"string\") {\n        return;\n      }\n      const filepath = this.$lsw.fs.resolve_path(this.current_node_basedir, fileoutput);\n      try {\n        this.$lsw.fs.write_file(filepath, htmlContent);\n        this.$lsw.toasts.send({\n          title: \"Markdown compilado a HTML\",\n          text: \"La salida está en: \" + filepath,\n        });\n      } catch (error) {\n        this.$lsw.toasts.showError(error, false, true);\n      }\n    },\n    async processToCompileNatyscript() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToCompileNatyscript\");\n      const currentFile = this.current_node;\n      const natyscriptContent = this.$refs.editor.getContents();\n      const jsonData = NatyScriptParser.parse(natyscriptContent);\n      const jsonContent = JSON.stringify(jsonData, null, 2);\n      const jsonFile = currentFile.replace(/\\.nsc$/g, \".json\")\n      this.$lsw.fs.write_file(jsonFile, jsonContent);\n    },\n    async processToCompilePegjs() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToCompilePegjs\");\n      const currentFile = this.current_node;\n      const pegjsContent = this.$refs.editor.getContents();\n      const parserOptions = await this.$lsw.dialogs.open({\n        title: \"Compilar pegjs a js\",\n        template: `\n          <div class=\"pad_1\">\n            <div>Global a la que exportar:</div>\n            <input class=\"width_100\" type=\"text\" v-model=\"value.exportVar\" />\n            <hr />\n            <div>Fichero final:</div>\n            <input class=\"width_100\" type=\"text\" v-model=\"value.output\" />\n            <hr />\n            <div>Formato de exportación:</div>\n            <input class=\"width_100\" type=\"text\" v-model=\"value.format\" />\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            value: {\n              format: 'globals',\n              output: this.current_node.replace(this.current_node_basedir, \"\").replace(/\\.pegjs/g, \".js\"),\n              exportVar: 'DemoParser',\n            }\n          }\n        }\n      });\n      if (typeof parserOptions !== \"object\") return;\n      const fileoutput = parserOptions.output;\n      const parserFormat = parserOptions.format;\n      const parserExporter = parserOptions.exportVar;\n      await this.$lsw.lazyLoads.loadPegjs();\n      const filepath = this.$lsw.fs.resolve_path(this.current_node_basedir, fileoutput);\n      try {\n        const jsContent = PEG.buildParser(pegjsContent, {\n          output: \"source\",\n          format: parserFormat,\n          exportVar: parserExporter,\n        });\n        this.$lsw.fs.write_file(filepath, jsContent);\n        this.$lsw.toasts.send({\n          title: \"Pegjs compilado a JavaScript\",\n          text: \"La salida está en: \" + filepath,\n        });\n      } catch (error) {\n        this.$lsw.toasts.showError(error, false, true);\n      }\n    },\n    async processToFormatHtml() {\n      this.$trace(\"lsw-filesystem.exporer.methods.processToFormatHtml\");\n      try {\n        const input = this.$refs.editor.getContents();\n        await this.$lsw.lazyLoads.loadBeautifier();\n        const output = beautifier.html(input);\n        this.$refs.editor.setContents(output);\n      } catch (error) {\n        this.$lsw.toasts.showError(error, false, true);\n      }\n    },\n    async processToFormatCss() {\n      this.$trace(\"lsw-filesystem.exporer.methods.processToFormatCss\");\n      try {\n        const input = this.$refs.editor.getContents();\n        await this.$lsw.lazyLoads.loadBeautifier();\n        const output = beautifier.css(input);\n        this.$refs.editor.setContents(output);\n      } catch (error) {\n        this.$lsw.toasts.showError(error, false, true);\n      }\n    },\n    async processToFormatJs() {\n      this.$trace(\"lsw-filesystem.exporer.methods.processToFormatJs\");\n      try {\n        const input = this.$refs.editor.getContents();\n        await this.$lsw.lazyLoads.loadBeautifier();\n        const output = beautifier.js(input);\n        this.$refs.editor.setContents(output);\n        this.$lsw.toasts.send({\n          title: \"Documento formateado\",\n          text: \"El documento fue formateado en js correctamente\"\n        });\n      } catch (error) {\n        this.$lsw.toasts.showError(error, false, true);\n      }\n    },\n    processToExecuteFileOnAndroid() {\n      this.$trace(\"lsw-filesystem.exporer.methods.processToExecuteFileOnAndroid\");\n      return LswAndroid.evalFile(this.current_node);\n    },\n    async processToDownloadFile() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToDownloadFile\");\n      const filename = this.current_node.replace(this.current_node_basedir, \"\");\n      LswUtils.debug(filename);\n      const confirmation = await this.$lsw.dialogs.open({\n        title: \"Descargar fichero\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"pad_top_1\">¿Qué nombre quieres para el fichero a descargar?</div>\n            <input type=\"text\" class=\"width_100 margin_top_1\" v-model=\"value\" /> \n            <hr />\n            <div class=\"flex_row centered pad_top_1\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini danger_button\" v-on:click=\"() => accept(value)\">\n                  Aceptar\n                </button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini \" v-on:click=\"cancel\">\n                  Cancelar\n                </button>\n              </div>\n            </div>\n          </div>`,\n        factory: {\n          data: {\n            value: filename\n          }\n        },\n      });\n      LswUtils.debug(confirmation);\n      if (typeof confirmation !== \"string\") return;\n      const filecontents = this.current_node_contents;\n      LswUtils.downloadFile(filename, filecontents);\n    },\n    processToViewHtml() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToCompilePegjs\");\n      const htmlContent = this.$refs.editor.getContents();\n      return this.$lsw.dialogs.open({\n        title: \"Ver html en vivo\",\n        template: `\n          <div class=\"pad_1\">\n            ${htmlContent}\n          </div>\n        `,\n      });\n    },\n    processToViewMarkdown() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToCompilePegjs\");\n      const mdContent = this.$refs.editor.getContents();\n      const htmlContent = LswMarkdown.global.parse(mdContent);\n      return this.$lsw.dialogs.open({\n        title: \"Ver markdown en vivo\",\n        template: `\n          <div class=\"pad_1\">\n            ${htmlContent}\n          </div>\n        `,\n      });\n    },\n    async processToSearchReplace() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToSearchReplace\");\n      let selectedText = \"\";\n      Extract_selected_text: {\n        try {\n          const textareaHtml = this.$refs.editor.$refs.editorTextarea;\n          selectedText = textareaHtml.value.substring(textareaHtml.selectionStart, textareaHtml.selectionEnd);\n        } catch (error) {\n          // @BADLUCK\n          console.log(error);\n        }\n      }\n      const fse = this;\n      const value = await this.$lsw.dialogs.open({\n        title: \"Buscar y reemplazar\",\n        template: `\n          <lsw-search-replacer\n            :input=\"input\"\n            :initial-search=\"search\"\n            :initial-replace=\"replace\"\n            :on-accept=\"out => accept(out)\"\n            :on-cancel=\"comeBack\"\n          />\n        `,\n        factory: {\n          data: {\n            input: this.$refs.editor.getContents(),\n            search: selectedText,\n            replace: selectedText,\n          },\n          methods: {\n            comeBack() {\n              this.cancel();\n              fse.$refs.editor.gainFocus();\n            }\n          }\n        }\n      });\n      if (typeof value !== \"string\") return;\n      this.$refs.editor.setContents(value);\n    },\n    processToValidateCode() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToValidateCode\");\n      const currentContents = this.$refs.editor.getContents();\n      const syntaxExtensions = Object.keys(this.syntaxValidators).map(id => \".\" + id);\n      let associatedSyntax = undefined;\n      Iterating_syntaxes:\n      for (let index = 0; index < syntaxExtensions.length; index++) {\n        const syntaxExtension = syntaxExtensions[index];\n        const isSyntaxCompliant = this.current_node.endsWith(syntaxExtension);\n        if (isSyntaxCompliant) {\n          associatedSyntax = syntaxExtension;\n          break Iterating_syntaxes;\n        }\n      }\n      if (!associatedSyntax) {\n        return -1;\n      }\n      const associatedValidator = this.syntaxValidators[associatedSyntax];\n      if (!associatedValidator) {\n        return -2;\n      }\n      try {\n        const isValid = associatedValidator(currentContents);\n        this.$lsw.toasts.debug(isValid);\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    },\n    async loadSyntaxValidators() {\n      this.$trace(\"lsw-filesystem-explorer.methods.loadSyntaxValidators\");\n      const validatorsAsMap = await this.$lsw.fs.read_directory(\"/kernel/editor/validators\");\n      const ids = Object.keys(validatorsAsMap).map(f => f.replace(/\\.js/g, \"\"));\n      const allValidators = {};\n      for(let index=0; index<ids.length; index++) {\n        const id = ids[index];\n        const validator = await this.$lsw.fs.evaluateAsJavascriptFileOrReturn(`/kernel/editor/validators/${id}.js`, () => true);\n        allValidators[id] = validator;\n      }\n      this.syntaxValidators = allValidators;\n      \n    },\n    hasSyntaxValidator(file) {\n      const currentExtension = file.replace(/^([^.]*\\.)+/g, \"\");\n      return Object.keys(this.syntaxValidators || {}).indexOf(currentExtension) !== -1;\n    },\n  },\n  watch: {\n    current_node(newValue) {\n      this.$trace(\"lsw-filesystem-explorer.watch.current_node\");\n      this._updateNodeSubdata(newValue);\n    }\n  },\n  computed: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-filesystem-explorer.mounted\");\n      await this.loadSyntaxValidators();\n      this.$lsw.fsExplorer = this;\n      // await this.initializeFilesystemForLsw();\n      await this.open(this.openedBy ?? \"/\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswFilesystemExplorer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-filesystem-explorer/lsw-filesystem-explorer/lsw-filesystem-explorer.js",
      "$location": {
        "start": {
          "offset": 12254,
          "line": 334,
          "column": 1
        },
        "end": {
          "offset": 12315,
          "line": 335,
          "column": 1
        }
      },
      "INJECTABLE": "add custom buttons for extensions:",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-filesystem-explorer/lsw-filesystem-explorer/lsw-filesystem-explorer.js",
      "$location": {
        "start": {
          "offset": 15790,
          "line": 439,
          "column": 1
        },
        "end": {
          "offset": 15851,
          "line": 440,
          "column": 1
        }
      },
      "INJECTABLE": "add custom buttons for extensions:",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-filesystem-explorer/lsw-filesystem-treeviewer/lsw-filesystem-treeviewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 146,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Filesystem Explorer API » LswFilesystemTreeviewer component",
      "$code": "Vue.component(\"LswFilesystemTreeviewer\", {\n  name: \"LswFilesystemTreeviewer\",\n  template: $template,\n  props: {\n    explorer: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    this.$trace(\"lsw-filesystem-treeviewer.data\");\n    return {};\n  },\n  watch: {},\n  methods: {\n    goUp() {\n      this.$trace(\"lsw-filesystem-treeviewer.methods.goUp\");\n      return this.explorer.goUp();\n    },\n    openSubnode(subnodeIndex) {\n      this.$trace(\"lsw-filesystem-treeviewer.methods.openSubnode\");\n      return this.explorer.open(subnodeIndex);\n    },\n    async deleteNode(subnodeIndex) {\n      this.$trace(\"lsw-filesystem-treeviewer.methods.deleteNode\");\n      const fullpath = this.$lsw.fs.resolve_path(subnodeIndex);\n      const isDirectory = await this.$lsw.fs.is_directory(fullpath);\n      const elementType = isDirectory ? 'directorio' : 'fichero';\n      const confirmation = await this.$lsw.dialogs.open({\n        title: `Proceder a eliminar ${elementType}`,\n        template: `\n          <div class=\"pad_1\">\n            <div>Seguro que quieres eliminar el {{ elementType }} «{{ fullpath }}»?</div>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_right_1\">\n                <button class=\"supermini danger_button nowrap\" v-on:click=\"() => accept(true)\">Sí, eliminar</button>\n              </div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"() => accept(false)\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            elementType,\n            fullpath,\n          }\n        }\n      });\n      if (!confirmation) return;\n      try {\n        if (isDirectory) {\n          await this.$lsw.fs.delete_directory(fullpath);\n        } else {\n          await this.$lsw.fs.delete_file(fullpath);\n        }\n        await this.explorer.refresh();\n      } catch (error) {\n        await this.$lsw.dialogs.open({\n          title: `El fichero no se pudo eliminar`,\n          template: `\n            <div class=\"pad_1\">\n              <div>El fichero «{{ fullpath }}» no se pudo eliminar debido al siguiente error:</div>\n              <hr />\n              <div v-if=\"error\">{{ error.name }}: {{ error.message }}</div>\n            </div>\n          `,\n          factory: {\n            data: {\n              error,\n              fullpath,\n            }\n          }\n        });\n      }\n    },\n    async renameNode(subnodeIndex) {\n      this.$trace(\"lsw-filesystem-treeviewer.methods.renameNode\");\n      const fullpath = this.$lsw.fs.resolve_path(subnodeIndex);\n      const isDirectory = await this.$lsw.fs.is_directory(fullpath);\n      const elementType = isDirectory ? 'directorio' : 'fichero';\n      const newName = await this.$lsw.dialogs.open({\n        title: \"Renombrar \" + elementType,\n        template: `<div>\n          <div class=\"pad_1\">\n            <div>Refiriéndose al {{ elementType }}:</div>\n            <div class=\"pad_2\">{{ filename }}</div>\n            <div>Di el nuevo nombre del {{ elementType }}:</div>\n            <input v-focus class=\"width_100\" type=\"text\" v-model=\"newFilename\" v-on:keyup.enter=\"() => accept(newFilename)\" />\n          </div>\n          <hr />\n          <div class=\"flex_row centered pad_1\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 pad_right_1\">\n              <button class=\"supermini\" v-on:click=\"() => accept(newFilename)\">Renombrar</button>\n            </div>\n            <div class=\"flex_1\">\n              <button class=\"supermini\" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        </div>`,\n        factory: {\n          data: {\n            elementType,\n            fullpath,\n            filename: subnodeIndex,\n            newFilename: subnodeIndex,\n          }\n        }\n      });\n      if (typeof newName !== \"string\") return;\n      if (newName.trim() === \"\") return;\n      await this.$lsw.fs.rename(subnodeIndex, newName.replace(/^\\/+/g, \"\"));\n      this.explorer.refresh();\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-filesystem-treeviewer.mounted\");\n    this.explorer.setPanelButtons({\n      top: [],\n      left: [],\n      right: [],\n      bottom: [],\n    })\n  },\n  unmounted() {\n    this.$trace(\"lsw-filesystem-treeviewer.unmounted\");\n  }\n});\n",
      "$code.label": "LswFilesystemTreeviewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/api/api.js",
      "$location": {
        "start": {
          "offset": 288,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 414,
          "line": 15,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswFormtypesUtils component",
      "$code": "  class LswFormtypesUtils {\n\n    static class = this;\n\n    static async submitControl() {\n      if (this.settings.parentSchemaForm) {\n        await this.validate();\n      }\n\n    }\n\n    static validateControl() {\n      return this.$refs.controller.$xform.validate();\n    }\n\n    static validateSettings() {\n      LswXForm.validateSettings(this.settings);\n      const ensureSettings = $ensure(this.settings);\n      const checkSettings = $check(this.settings);\n      ensureSettings.to.have.onlyPotentialKeys([\n        \"name\",\n        \"input\",\n        \"entity\",\n        \"database\",\n        \"table\",\n        \"column\",\n        \"initialValue\",\n        \"label\",\n        \"parentSchemaForm\",\n        \"extraAttributes\",\n        \"formtypeParameters\",\n        \"formtypeSettings\"\n      ]);\n      if (checkSettings.to.have.key(\"initialValue\")) {\n        const ensureInitialValue = ensureSettings.its(\"initialValue\").type(\"string\");\n      }\n      if (checkSettings.to.have.key(\"label\")) {\n        const ensureHasLabel = ensureSettings.its(\"label\").type([\"string\", \"undefined\", \"boolean\"]);\n      }\n    }\n\n  }\n\n  class LswFormtypes {\n\n    static class = this;\n\n    constructor() {\n      this.$formtypes = new Map();\n    }\n\n    static utils = LswFormtypesUtils;\n\n  }\n\n  window.commonFormtypes = new LswFormtypes();\n\n  return LswFormtypes;\n",
      "$code.label": "LswFormtypesUtils API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-keyboard-1/lsw-keyboard-1-text/lsw-keyboard-1-text.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 102,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswKeyboard1Text component",
      "$code": "(function () {\n\n  \n  const keyEvents = {\n    \"DefaultAction\": function (event) {\n      this.injectCharacter(event.key);\n    },\n    \"Backspace\": function () {\n      this.deleteSelectionOrCharacter(true);\n    },\n    \"Delete\": function () {\n      this.deleteSelectionOrCharacter(false);\n    },\n    \"Enter\": function () {\n      this.injectCharacter(\"\\n\");\n    },\n    \"Control\": function () {\n\n    },\n    \"Shift\": function () {\n\n    },\n    \"ArrowLeft\": function (event) {\n      if (event.ctrlKey) {\n        if (event.shiftKey) {\n          this.dragCursorWordLeft();\n        } else {\n          this.moveCursorWordLeft();\n        }\n      } else if (event.shiftKey) {\n        this.dragCursorCharacterLeft();\n      } else {\n        this.moveCursorHorizontally(-1);\n      }\n    },\n    \"ArrowRight\": function (event) {\n      if (event.ctrlKey) {\n        if (event.shiftKey) {\n          this.dragCursorWordRight();\n        } else {\n          this.moveCursorWordRight();\n        }\n      } else if (event.shiftKey) {\n        this.dragCursorCharacterRight();\n      } else {\n        this.moveCursorHorizontally(1);\n      }\n    },\n    \"ArrowUp\": function (event) {\n      if (event.shiftKey) {\n        this.dragCursorLineUp();\n      } else {\n        this.moveCursorVertically(-1);\n      }\n    },\n    \"ArrowDown\": function (event) {\n      if (event.shiftKey) {\n        this.dragCursorLineDown();\n      } else {\n        this.moveCursorVertically(1);\n      }\n    },\n    \"Home\": function (event) {\n      if (event.shiftKey) {\n        this.dragCursorToLineStart();\n      } else {\n        this.moveCursorToLineStart();\n      }\n    },\n    \"End\": function (event) {\n      if (event.shiftKey) {\n        this.dragCursorToLineEnd();\n      } else {\n        this.moveCursorToLineEnd();\n      }\n    },\n    \"PageUp\": function (event) {\n      if (event.ctrlKey) {\n        this.scrollPageUp();\n      } else if (event.shiftKey) {\n        this.dragCursorToPageUp();\n      } else {\n        this.moveCursorToPageUp();\n      }\n    },\n    \"PageDown\": function (event) {\n      if (event.ctrlKey) {\n        this.scrollPageDown();\n      } else if (event.shiftKey) {\n        this.dragCursorToPageDown();\n      } else {\n        this.moveCursorToPageDown();\n      }\n    },\n\n  };\n  let cursorLine = 0;\n  let cursorColumn = 0;\n  Vue.component(\"LswKeyboard1Text\", {\n    template: $template,\n    props: {\n      text: {\n        type: Array,\n        required: true,\n      },\n      keyboard: {\n        type: Object,\n        required: true,\n      }\n    },\n    data() {\n      this.$trace(\"lsw-keyboard-1-text.data\");\n      let pos = 0;\n      return {\n        currentText: this.text,\n        pageUpDownLines: 20,\n        textMatrix: this.getTextMatrix(this.text),\n        cursorStart: 0,\n        cursorEnd: 0,\n        cursorPosition: 0,\n        cursorLine: 0,\n        cursorColumn: 0,\n      };\n    },\n    methods: {\n      getTextMatrix(text = this.currentText) {\n        this.$trace(\"lsw-keyboard-1-text.methods.getTextMatrix\");\n        let pos = 0;\n        return text.split(/\\n/g).map(line => line.split(\"\").map(ch => {\n          return {\n            ch,\n            pos: pos++\n          }\n        }).concat([{\n          ch: \"\\n\",\n          pos: pos++,\n        }]));\n      },\n      getTextFromMatrix(matrix = this.textMatrix) {\n        this.$trace(\"lsw-keyboard-1-text.methods.getTextFromMatrix\");\n        return matrix.map(line => line.join(\"\")).join(\"\");\n      },\n      synchronizeTextFromMatrix() {\n        this.$trace(\"lsw-keyboard-1-text.methods.synchronizeMatrixFromText\");\n        this.currentText = this.getTextFromMatrix(this.textMatrix);\n      },\n      synchronizeMatrixFromText() {\n        this.$trace(\"lsw-keyboard-1-text.methods.synchronizeMatrixFromText\");\n        this.textMatrix = this.getTextMatrix(this.currentText);\n      },\n      isSelectedPosition(textPos) {\n        this.$trace(\"lsw-keyboard-1-text.methods.isSelectedPosition\");\n        return (this.cursorStart <= textPos) && (this.cursorEnd > textPos);\n      },\n      hasSelectedRange() {\n        return this.cursorStart !== this.cursorEnd;\n      },\n      setSelectedPosition(startPos, endPos = startPos, cursorPos = false) {\n        this.$trace(\"lsw-keyboard-1-text.methods.setSelectedPosition\");\n        this.cursorStart = startPos;\n        this.cursorEnd = endPos;\n        if (typeof cursorPos === \"number\") {\n          this.cursorPosition = cursorPos;\n        } else {\n          this.cursorPosition = this.cursorStart;\n        }\n        HOOKS_PARA_CADA_MOVIMIENTO_DEL_CURSOR_POR_EL_TEXTO: {\n          this.synchronizeCursorPath();\n        }\n      },\n      synchronizeCursorPath() {\n        this.$trace(\"lsw-keyboard-1-text.methods.synchronizeCursorPath\");\n        let currentPos = 0;\n        Iterating_text:\n        for(let lineIndex=0; lineIndex<this.textMatrix.length; lineIndex++) {\n          const line = this.textMatrix[lineIndex];\n          const finalLinePos = currentPos + (line.length);\n          if(finalLinePos > this.cursorPosition) {\n            for(let columnIndex=0; columnIndex<line.length; columnIndex++) {\n              const cell = line[columnIndex];\n              if(cell.pos === this.cursorPosition) {\n                this.cursorLine = lineIndex;\n                this.cursorColumn = columnIndex;\n                break Iterating_text;\n              }\n            }\n          } else if(finalLinePos === this.cursorPosition) {\n            this.cursorLine = lineIndex;\n            this.cursorColumn = line.length;\n            break Iterating_text;\n          } else {\n            currentPos = finalLinePos;\n          }\n          currentPos++;\n        }\n        \n      },\n      setFocusToKeyboard() {\n        this.$trace(\"lsw-keyboard-1-text.methods.setFocusToKeyboard\");\n        this.keyboard.gainFocus();\n      },\n      onKeyClicked(textPos) {\n        this.$trace(\"lsw-keyboard-1-text.methods.onKeyClicked\");\n        this.setSelectedPosition(textPos);\n        this.setFocusToKeyboard();\n      },\n      moveCursorHorizontally(movement) {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorHorizontally\");\n        if (this.hasSelectedRange()) {\n          if (movement < 0) {\n            this.setSelectedPosition(this.cursorStart);\n          } else {\n            this.setSelectedPosition(this.cursorEnd);\n          }\n        } else {\n          if (movement < 0) {\n            if (this.cursorStart === 0) {\n              return false;\n            }\n          } else if (movement > 0) {\n            if (this.cursorEnd >= this.currentText.length) {\n              return false;\n            }\n          }\n          this.setSelectedPosition(this.cursorStart + movement);\n        }\n      },\n      getCursorPosition() {\n        this.$trace(\"lsw-keyboard-1-text.methods.getCursorPosition\");\n        const currentKey = this.$refs.cursor[0];\n        const pos = parseInt(currentKey.getAttribute(\"data-cursor-position\"));\n        const line = parseInt(currentKey.getAttribute(\"data-cursor-line\"));\n        const ch = parseInt(currentKey.getAttribute(\"data-cursor-character\"));\n        return { pos, line, ch };\n      },\n      setCursorPath(lineIndex, columnIndex) {\n        this.$trace(\"lsw-keyboard-1-text.methods.setCursorPath\");\n        cursorLine = lineIndex;\n        cursorColumn = columnIndex;\n        return true;\n      },\n      getCursorPath() {\n        this.$trace(\"lsw-keyboard-1-text.methods.getCursorPath\");\n        return {\n          line: cursorLine,\n          column: cursorColumn\n        }\n      },\n      moveCursorVertically(movement) {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorVertically\");\n        const { pos, line, ch } = this.getCursorPosition();\n        const goesUp = movement < 0;\n        if ((line === 0) && (goesUp)) {\n          return false;\n        }\n        if ((line === this.textMatrix.length) && (!goesUp)) {\n          return false;\n        }\n        let nextPosition = undefined;\n        let nextLine = undefined;\n        let nextColumn = ch;\n        Calculate_next_line: {\n          nextLine = line + movement;\n        }\n        Calculate_next_column: {\n          const nextLineArray = this.textMatrix[nextLine];\n          if (!nextLineArray) {\n            return false;\n          }\n          if (nextLineArray.length <= ch) {\n            nextColumn = nextLineArray.length - 1;\n          }\n        }\n        Calculate_next_position: {\n          nextPosition = this.textMatrix[nextLine][nextColumn].pos;\n        }\n        this.setSelectedPosition(nextPosition);\n      },\n      dispatchKeyPress(keyId, event) {\n        this.$trace(\"lsw-keyboard-1-text.methods.dispatchKeyPress\");\n        const keyEvent = keyId in keyEvents ? keyEvents[keyId] : keyEvents.DefaultAction;\n        event.preventDefault();\n        return keyEvent.call(this, event);\n      },\n      moveCursorToLineStart() {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorToLineStart\");\n        const { pos, line, ch } = this.getCursorPosition();\n        this.setSelectedPosition(this.textMatrix[line][0].pos);\n      },\n      moveCursorToLineEnd() {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorToLineEnd\");\n        const { pos, line, ch } = this.getCursorPosition();\n        const currentLineArray = this.textMatrix[line];\n        this.setSelectedPosition(currentLineArray[currentLineArray.length - 1].pos);\n      },\n      getLineUpPosition(cursor = this.getCursorPosition()) {\n        this.$trace(\"lsw-keyboard-1-text.methods.getLineUpPosition\");\n        const { line, ch, pos } = cursor;\n        if(line === 0) {\n          // CASO 1: si no hay línea anterior, el cursor va al inicio\n          return 0;\n        }\n        const nextLineArray = this.textMatrix[line-1];\n        if(ch > nextLineArray.length) {\n          // CASO 2: si sí hay línea anterior, pero no caracter: va al final de la linea anterior\n          return nextLineArray[nextLineArray.length - 1].pos;\n        } else {\n          // CASO 3: si sí hay línea anterior, y sí hay caracter: normal\n          return nextLineArray[ch].pos;\n        }\n      },\n      getLineDownPosition(cursor = this.getCursorPosition()) {\n        this.$trace(\"lsw-keyboard-1-text.methods.getLineDownPosition\");\n        const { line, ch, pos } = cursor;\n        if(line === (this.textMatrix.length-1)) {\n          // CASO 1: si no hay línea posterior, el cursor va al final\n          return this.currentText.length - 1;\n        }\n        const nextLineArray = this.textMatrix[line+1];\n        if(ch > nextLineArray.length) {\n          // CASO 2: si sí hay línea posterior, pero no caracter: va al final de la linea posterior\n          return nextLineArray[nextLineArray.length - 1].pos;\n        } else {\n          // CASO 3: si sí hay línea posterior, y sí hay caracter: normal\n          return nextLineArray[ch].pos;\n        }\n      },\n      getWordLeftPosition() {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorWordRight\");\n        const { pos, line, ch } = this.getCursorPosition();\n        const currentLineArray = this.textMatrix[line];\n        const firstPosition = ch - 2;\n        if (firstPosition < 0) {\n          return pos;\n        }\n        for (let index = firstPosition; index >= 0; index--) {\n          const currentCh = currentLineArray[index];\n          if ([\" \", \".\", \",\"].indexOf(currentCh.ch) !== -1) {\n            return currentLineArray[index].pos + 1;\n          }\n        }\n        return currentLineArray[0].pos;\n      },\n      getWordRightPosition() {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorWordRight\");\n        const { pos, line, ch } = this.getCursorPosition();\n        const currentLineArray = this.textMatrix[line];\n        for (let index = ch + 1; index < currentLineArray.length; index++) {\n          const currentCh = currentLineArray[index];\n          if ([\" \", \".\", \",\"].indexOf(currentCh.ch) !== -1) {\n            return currentLineArray[index].pos;\n          }\n        }\n        return currentLineArray[currentLineArray.length - 1].pos;\n      },\n      moveCursorWordLeft() {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorWordLeft\");\n        const newPos = this.getWordLeftPosition();\n        return this.setSelectedPosition(newPos);\n      },\n      moveCursorWordRight() {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorWordRight\");\n        const newPos = this.getWordRightPosition();\n        return this.setSelectedPosition(newPos);\n      },\n      moveCursorToPageUp() {\n        this.$trace(\"moveCursorToPageUp\");\n        // @BYCHATGPT:\n        const { line, ch } = this.getCursorPosition();\n        const targetLine = Math.max(0, line - this.pageUpDownLines);\n        const col = Math.min(ch, this.textMatrix[targetLine].length - 1);\n        const pos = this.textMatrix[targetLine][col].pos;\n        this.setSelectedPosition(pos);\n      },\n      moveCursorToPageDown() {\n        this.$trace(\"moveCursorToPageDown\");\n        // @BYCHATGPT:\n        const { line, ch } = this.getCursorPosition();\n        const targetLine = Math.min(this.textMatrix.length - 1, line + this.pageUpDownLines);\n        const col = Math.min(ch, this.textMatrix[targetLine].length - 1);\n        const pos = this.textMatrix[targetLine][col].pos;\n        this.setSelectedPosition(pos);\n      },\n      dragCursorCharacterLeft() {\n        this.$trace(\"dragCursorCharacterLeft\");\n        // @BYME:\n        if (this.hasSelectedRange()) {\n          if (this.cursorStart === this.cursorPosition) {\n            if (this.cursorStart > 0) {\n              const finalPos = this.cursorStart - 1;\n              this.setSelectedPosition(finalPos, this.cursorEnd, finalPos);\n            }\n          } else if (this.cursorEnd === this.cursorPosition) {\n            if (this.cursorEnd > 0) {\n              const finalPos = this.cursorEnd - 1;\n              this.setSelectedPosition(this.cursorStart, finalPos, finalPos);\n            }\n          }\n        } else {\n          if (this.cursorStart > 0) {\n            const finalPos = this.cursorStart - 1;\n            this.setSelectedPosition(finalPos, this.cursorEnd, finalPos);\n          }\n        }\n      },\n      dragCursorCharacterRight() {\n        this.$trace(\"dragCursorCharacterRight\");\n        // @BYME:\n        if (this.hasSelectedRange()) {\n          if (this.cursorStart === this.cursorPosition) {\n            if (this.cursorStart < (this.currentText.length - 1)) {\n              const finalPos = this.cursorStart + 1;\n              this.setSelectedPosition(finalPos, this.cursorEnd, finalPos);\n            }\n          } else if (this.cursorEnd === this.cursorPosition) {\n            if (this.cursorEnd < (this.currentText.length - 1)) {\n              const finalPos = this.cursorEnd + 1;\n              this.setSelectedPosition(this.cursorStart, finalPos, finalPos);\n            }\n          }\n        } else {\n          if (this.cursorEnd < (this.currentText.length - 1)) {\n            const finalPos = this.cursorEnd + 1;\n            this.setSelectedPosition(this.cursorStart, finalPos, finalPos);\n          }\n        }\n      },\n      dragCursorWordRight() {\n        this.$trace(\"dragCursorWordRight\");\n        // @BYME:\n        const { line, ch, pos } = this.getCursorPosition();\n        const newPos = this.getWordRightPosition();\n        if (pos === this.cursorEnd) {\n          // CASO 1: Cuando el nuevo cursor coincide con el end: solo movemos el end\n          this.setSelectedPosition(this.cursorStart, newPos, newPos);\n        } else {\n          if (newPos > this.cursorEnd) {\n            // CASO 2: Cuando el nuevo cursor es mayor que el end: \n            return this.setSelectedPosition(this.cursorEnd, newPos, newPos);\n          } else {\n            // CASO 2: Cuando el nuevo cursor es menor que el end: \n            return this.setSelectedPosition(newPos, this.cursorEnd, newPos);\n          }\n        }\n      },\n      dragCursorWordLeft() {\n        this.$trace(\"dragCursorWordLeft\");\n        // @BYME:\n        const { line, ch, pos } = this.getCursorPosition();\n        const newPos = this.getWordLeftPosition();\n        if (pos === this.cursorStart) {\n          // CASO 1: Cuando el nuevo cursor coincide con el start: solo movemos el start\n          this.setSelectedPosition(newPos, this.cursorEnd, newPos);\n        } else if (newPos < this.cursorStart) {\n          // CASO 2: Cuando el nuevo cursor es menor que el start: \n          return this.setSelectedPosition(newPos, this.cursorStart, newPos);\n        } else {\n          // CASO 3: Cuando el nuevo cursor es mayor al start: \n          return this.setSelectedPosition(this.cursorStart, newPos, newPos);\n        }\n      },\n      dragCursorLineUp() {\n        this.$trace(\"dragCursorLineUp\");\n        // @BYME:\n        const { line, ch, pos } = this.getCursorPosition();\n        const newPos = this.getLineUpPosition();\n        if(this.cursorStart === pos) {\n          // CASO 1: si movemos desde el start (para arriba)\n          return this.setSelectedPosition(newPos, this.cursorEnd, newPos);\n        } else if(this.cursorEnd === pos) {\n          // CASO 2: si movemos desde el end\n          if(newPos <= this.cursorStart) {\n            return this.setSelectedPosition(newPos, this.cursorStart, newPos);\n          } else {\n            return this.setSelectedPosition(this.cursorStart, newPos, newPos);\n          }\n        }\n      },\n      dragCursorLineDown() {\n        this.$trace(\"dragCursorLineDown\");\n        // @BYME:\n        const { line, ch, pos } = this.getCursorPosition();\n        const newPos = this.getLineDownPosition();\n        if(this.cursorStart === pos) {\n          // CASO 1: si movemos desde el start (para abajo)\n          if(newPos > this.cursorEnd) {\n            // CASO 2: si la nueva posición está después del end: movemos el end, y el start donde el end\n            return this.setSelectedPosition(this.cursorEnd, newPos, newPos);\n          } else if(newPos <= this.cursorEnd) {\n            // CASO 3: si la nueva posición está antes del end: movemos el start\n            return this.setSelectedPosition(newPos, this.cursorEnd, newPos);\n          }\n        } else if(this.cursorEnd === pos) {\n          // CASO 4: si movemos desde el end\n          return this.setSelectedPosition(this.cursorStart, newPos, newPos);\n        }\n      },\n      dragCursorToLineStart() {\n        this.$trace(\"dragCursorToLineStart\");\n        // @BYME:\n        const { line, ch, pos } = this.getCursorPosition();\n        const newPos = this.textMatrix[line][0].pos;\n        if (pos <= this.cursorStart) {\n          // CASO 1: Cuando el viejo cursor está antes o igual que el start:\n          return this.setSelectedPosition(newPos, this.cursorEnd, newPos);\n        } else {\n          // CASO 2: Cuando el viejo cursor está después que el start (y en el end, se supone):\n          if (newPos <= this.cursorStart) {\n            // CASO 3: Cuando el nuevo cursor está antes que el start: movemos el start y el end donde el start:\n            return this.setSelectedPosition(newPos, this.cursorStart, newPos);\n          } else {\n            // CASO 4: Cuando el nuevo cursor está que el start: movemos el end solamente:\n            return this.setSelectedPosition(this.cursorStart, newPos, newPos);\n          }\n        }\n      },\n      dragCursorToLineEnd() {\n        this.$trace(\"dragCursorToLineEnd\");\n        // @TOSOLVE\n        // @BYME:\n        const { line, ch, pos } = this.getCursorPosition();\n        const currentLineArray = this.textMatrix[line];\n        const newPos = currentLineArray[this.textMatrix[line].length - 1].pos;\n        if (pos >= this.cursorEnd) {\n          // CASO 1: Cuando el viejo cursor está después o igual que el end:\n          return this.setSelectedPosition(this.cursorStart, newPos, newPos);\n        } else {\n          // CASO 2: Cuando el viejo cursor está antes que el end (y en el start, se supone):\n          if (newPos >= this.cursorEnd) {\n            // CASO 3: Cuando el nuevo cursor está antes que el start: movemos el start y el end donde el start:\n            return this.setSelectedPosition(this.cursorEnd, newPos, newPos);\n          } else {\n            // CASO 4: Cuando el nuevo cursor está que el start: movemos el end solamente:\n            return this.setSelectedPosition(newPos, this.cursorEnd, newPos);\n          }\n        }\n      },\n      dragCursorToPageUp() {\n        this.$trace(\"dragCursorToPageUp\");\n        // @TOSOLVE\n      },\n      dragCursorToPageDown() {\n        this.$trace(\"dragCursorToPageDown\");\n        // @TOSOLVE\n      },\n      scrollPageUp() {\n        this.$trace(\"scrollPageUp\");\n        // @TOSOLVE\n      },\n      scrollPageDown() {\n        this.$trace(\"scrollPageDown\");\n        // @TOSOLVE\n      },\n      injectCharacter(newCh) {\n        this.$trace(\"injectCharacter\");\n        const { pos } = this.getCursorPosition();\n        const newPos = pos + 1;\n        this.currentText = this.currentText.slice(0, pos) + newCh + this.currentText.slice(pos);\n        this.synchronizeMatrixFromText();\n        this.setSelectedPosition(newPos, newPos, newPos);\n      },\n      dropSelection() {\n        this.$trace(\"dropSelection\");\n        const { line, ch, pos } = this.getCursorPosition();\n        const posIni = this.cursorStart;\n        const posEnd = this.cursorEnd;\n        this.currentText = this.currentText.slice(0, posIni) + this.currentText.slice(posEnd);\n        this.synchronizeMatrixFromText();\n        this.setSelectedPosition(posIni, posIni, posIni);\n      },\n      deleteSelectionOrCharacter(isBackspace = false) {\n        this.$trace(\"deleteSelectionOrCharacter\");\n        if (this.hasSelectedRange()) {\n          this.dropSelection();\n        } else {\n          if (isBackspace) {\n            const { pos } = this.getCursorPosition();\n            const newPos = pos - 1;\n            if(newPos < 0) {\n              return;\n            }\n            this.currentText = this.currentText.slice(0, newPos) + this.currentText.slice(pos);\n            this.synchronizeMatrixFromText();\n            this.setSelectedPosition(newPos, newPos, newPos);\n          } else {\n            const { pos } = this.getCursorPosition();\n            const newPos = pos;\n            if(newPos >= this.currentText.length) {\n              return;\n            }\n            this.currentText = this.currentText.slice(0, newPos) + this.currentText.slice(newPos + 1);\n            this.synchronizeMatrixFromText();\n            this.setSelectedPosition(newPos, newPos, newPos);\n          }\n        }\n      }\n    },\n    watch: {\n\n    },\n    async mounted() {\n      try {\n        this.$trace(\"lsw-keyboard-1-text.mounted\");\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  });\n})();\n",
      "$code.label": "LswKeyboard1Text API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-naty-script/editor/lsw-naty-script-editor.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 123,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Wiki API » LswNatyScriptEditor component",
      "$code": "Vue.component(\"LswNatyScriptEditor\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-naty-script-editor.data\");\n    return {\n      currentPage: \"buscador\", // also: \"editor\", \"buscador\"\n      // EDITOR:\n      isOpenedFile: false,\n      input: `Dios > dice { ok }`,\n      output: false,\n      error: false,\n      errorSummary: false,\n      // BUSCADOR:\n      searcherMemory: {},\n      searchText: \"\",\n      searchOutput: [],\n      // EXPLORADOR:\n      hasSearched: false,\n      natyFiles: false,\n    };\n  },\n  methods: {\n    async runTest() {\n      this.$trace(\"lsw-naty-script-editor.methods.runTest\");\n      try {\n        this.searcherMemory = {};\n        this.output = NatyScriptParser.parse(this.input, {\n          options: {\n            memory: this.searcherMemory\n          }\n        });\n        this.setError(false);\n      } catch (error) {\n        console.error(error);\n        this.setError(error);\n      }\n    },\n    setError(error = false) {\n      this.$trace(\"lsw-naty-script-editor.methods.setError\");\n      this.error = error;\n    },\n    async load() {\n      this.$trace(\"lsw-naty-script-editor.methods.load\");\n      const filesMap = await this.$lsw.fs.read_directory(\"/kernel/natyscript/data\")\n      const filesList = Object.keys(filesMap);\n      this.natyFiles = filesList;\n    },\n    async exportAsFile() {\n      this.$trace(\"lsw-naty-script-editor.methods.exportAsFile\");\n      const filesMap = await this.$lsw.fs.read_directory(\"/kernel/natyscript/data\")\n      const filesList = Object.keys(filesMap);\n      const filename = await this.$lsw.dialogs.open({\n        title: \"Exportando fichero NatyScript\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"pad_vertical_1\">Especifica el nombre del fichero (formato .naty):</div>\n            <div class=\"pad_vertical_1 flex_row centered\">\n              <input class=\"flex_100 width_100\" type=\"text\" v-model=\"value\" v-focus />\n              <div class=\"flex_1\">.naty</div>\n            </div>\n            <hr />\n            <div class=\"pad_vertical_1 flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n            <div class=\"pad_vertical_1\">Los siguientes valores están ocupados:</div>\n            <ul class=\"pad_vertical_1\">\n              <li v-for=\"file, fileIndex in filesList\"\n                v-bind:key=\"'file_' + fileIndex\">\n                {{ file }}\n              </li>\n            </ul>\n          </div>\n        `,\n        factory: {\n          data: {\n            filesList,\n          }\n        }\n      });\n      if(typeof filename !== \"string\") {\n        return;\n      }\n      if(filename.trim() === \"\") {\n        return;\n      }\n      if(filesList.indexOf(filename + \".naty\") !== -1) {\n        const overwriteConfirmation = await this.$lsw.dialogs.open({\n          title: \"El fichero natyscript indicado ya existe\",\n          template: `\n            <div class=\"pad_1\">\n              <div class=\"pad_vertical_1\">El fichero «${filename}.naty» ya existe. ¿Desea sobreescribirlo?</div>\n              <hr />\n              <div class=\"flex_row centered\">\n                <div class=\"flex_100\"></div>\n                <div class=\"flex_1 pad_left_1\">\n                  <button class=\"supermini\" v-on:click=\"accept\">Aceptar</button>\n                </div>\n                <div class=\"flex_1 pad_left_1\">\n                  <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n                </div>\n              </div>\n            </div>\n          `\n        });\n        if(overwriteConfirmation === -1) {\n          return;\n        }\n      }\n      await this.$lsw.fs.write_file(`/kernel/natyscript/data/${filename}.naty`, this.input);\n      this.$lsw.toasts.send({\n        title: \"Exportación de natyscript exitosa\",\n        text: `Fichero «${filename}.naty» exportado correctamente`\n      });\n    },\n    openSearcher() {\n      this.$trace(\"lsw-naty-script-editor.methods.openSearcher\");\n      this.currentPage = \"buscador\";\n    },\n    openEditor() {\n      this.$trace(\"lsw-naty-script-editor.methods.openEditor\");\n      this.currentPage = \"editor\";\n    },\n    async openFile(fileId) {\n      this.$trace(\"lsw-naty-script-editor.methods.openFile\");\n      this.currentPage = \"editor\";\n      this.input = await this.$lsw.fs.read_file(`/kernel/natyscript/data/${fileId}`);\n      this.isOpenedFile = fileId;\n    },\n    async saveFile() {\n      this.$trace(\"lsw-naty-script-editor.methods.saveFile\");\n      const ruta = `/kernel/natyscript/data/${this.isOpenedFile}`;\n      await this.$lsw.fs.write_file(ruta, this.input);\n      this.$lsw.toasts.send({\n        title: \"Fichero natyscript guardado\",\n        text: `Fichero «${ruta}» correctamente`\n      });\n    },\n    clearSearch() {\n      this.$trace(\"lsw-naty-script-editor.methods.clearSearch\");\n      this.hasSearched = false;\n    },\n    digestSearch() {\n      this.$trace(\"lsw-naty-script-editor.methods.digestSearch\");\n      // @TODO....\n      // @TODO....\n      // @TODO....\n      // @TODO....\n      // @TODO....\n      // @TODO....\n      // @TODO....\n      this.searchOutput = [];\n      this.hasSearched = true;\n    }\n  },\n  watch: {\n    error(error) {\n      this.$trace(\"lsw-naty-script-editor.watch.error\");\n      if(error.expected) {\n        error.expected = LswUtils.uniquizeArray(error.expected.map(sugg => sugg.description));\n      }\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-naty-script-editor.mounted\");\n    this.load();\n  },\n  unmount() {\n    this.$trace(\"lsw-naty-script-editor.unmount\");\n  }\n});\n",
      "$code.label": "LswNatyScriptEditor API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-table/lsw-table/lsw-table.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 102,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Table API » LswTable component",
      "$code": "Vue.component(\"LswTable\", {\n  template: $template,\n  props: {\n    initialInput: {\n      type: Array,\n      default: () => []\n    },\n    initialSettings: {\n      type: Object,\n      default: () => ({})\n    },\n    rowButtons: {\n      type: Array,\n      default: () => []\n    },\n    tableButtons: {\n      type: Array,\n      default: () => []\n    },\n    selectable: {\n      type: String,\n      default: () => \"none\"\n    },\n    onChooseRow: {\n      type: Function,\n      default: () => { }\n    },\n    choosableId: {\n      type: String,\n      default: () => \"id\"\n    },\n    initialChoosenValue: {\n      type: [],\n      default: () => []\n    },\n    storageId: {\n      type: [String, Boolean],\n      default: () => false\n    },\n    storageStrategy: {\n      type: String,\n      default: () => \"ufs/lsw\", // No otras de momento.\n    }\n  },\n  data() {\n    this.$trace(\"lsw-table.data\");\n    const input = [].concat(this.initialInput);\n    return {\n      input,\n      self: this,\n      title: this.initialSettings?.title || \"\",\n      isShowingMenu: this.initialSettings?.isShowingMenu || false,\n      isShowingSubpanel: this.initialSettings?.isShowingSubpanel || \"Todo\", // \"Buscador\", ...\n      selectedRows: [],\n      choosenRows: this.initialChoosenValue || [],\n      searcher: this.initialSettings?.searcher || \"\",\n      extender: this.initialSettings?.extender || \"\",\n      filter: this.initialSettings?.filter || \"\",\n      sorter: this.initialSettings?.sorter || \"\",\n      autosorter: [],\n      itemsPerPageOnForm: this.initialSettings?.itemsPerPage || 10,\n      itemsPerPage: this.initialSettings?.itemsPerPage || 10,\n      currentPage: this.initialSettings?.currentPage || 0,\n      currentPageOnForm: (this.initialSettings?.currentPage + 1) || 1,\n      columnsAsList: this.initialSettings?.columnsAsList || [],\n      columnsOrder: this.initialSettings?.columnsOrder || [],\n      columnsOrderInput: (this.initialSettings?.columnsOrder || []).join(\", \"),\n      output: [],\n      paginatedOutput: [],\n      headers: [],\n      attachedHeaders: this._adaptRowButtonsToHeaders(this.rowButtons),\n      attachedColumns: this._adaptRowButtonsToColumns(this.rowButtons),\n      attachedTopButtons: this._adaptRowButtonsToColumns(this.tableButtons),\n      placeholderForExtensor: \"data.map(function(it, i) {\\n  return Object.assign({}, it, /* you start here */ || {});\\n});\",\n      placeholderForOrdenador: \"data.sort(function(a, b) {\\n  return /* you start here */;\\n});\",\n      placeholderForFiltro: \"data.filter(function(it, i) {\\n  return /* you start here */;\\n});\",\n      placeholderForBuscador: \"Búsqueda de texto rápida\",\n      placeholderForPaginador: \"Ítems por página. Por defecto: 10\"\n    };\n  },\n  methods: {\n    goToFirstPage() {\n      this.$trace(\"lsw-table.methods.goToFirstPage\");\n      this.currentPage = 0;\n    },\n    decreasePage() {\n      this.$trace(\"lsw-table.methods.decreasePage\");\n      if (this.currentPage > 0) {\n        this.currentPage--;\n      }\n    },\n    increasePage() {\n      this.$trace(\"lsw-table.methods.increasePage\");\n      const lastPage = Math.floor(this.output.length / this.itemsPerPage);\n      if (this.currentPage < lastPage) {\n        this.currentPage++;\n      }\n    },\n    goToLastPage() {\n      this.$trace(\"lsw-table.methods.goToLastPage\");\n      const lastPage = Math.floor(this.output.length / this.itemsPerPage);\n      if (this.currentPage !== lastPage) {\n        this.currentPage = lastPage;\n      }\n    },\n    toggleChoosenRow(rowId) {\n      this.$trace(\"lsw-table.methods.toggleChoosenRow\");\n      if (this.selectable === 'many') {\n        const pos = this.choosenRows.indexOf(rowId);\n        if (pos === -1) {\n          this.choosenRows.push(rowId);\n        } else {\n          this.choosenRows.splice(pos, 1);\n        }\n      } else if (this.selectable === 'one') {\n        const isSame = this.choosenRows === rowId;\n        if (isSame) {\n          this.choosenRows = undefined;\n        } else {\n          this.choosenRows = rowId;\n        }\n      }\n    },\n    toggleRow(rowIndex) {\n      this.$trace(\"lsw-table.methods.toggleRow\");\n      if (typeof rowIndex === \"undefined\") {\n        return this.$lsw.toasts.send({\n          title: \"La row no se desplegará\",\n          text: \"Añade «id» para que se puedan seleccionar las rows\"\n        })\n      }\n      const pos = this.selectedRows.indexOf(rowIndex);\n      if (pos === -1) {\n        this.selectedRows.push(rowIndex);\n      } else {\n        this.selectedRows.splice(pos, 1);\n      }\n    },\n    toggleMenu() {\n      this.$trace(\"lsw-table.methods.toggleMenu\");\n      this.isShowingMenu = !this.isShowingMenu;\n    },\n    reloadInput(input) {\n      this.$trace(\"lsw-table.methods.reloadInput\");\n      this.input = input;\n      this.digestOutput();\n    },\n    nextSortStateFor(header) {\n      this.$trace(\"lsw-table.methods.nextSortStateFor\");\n      const posIncrease = this.autosorter.indexOf(header);\n      const posDecrease = this.autosorter.indexOf(\"!\" + header);\n      if (posIncrease !== -1) {\n        this.autosorter.splice(posIncrease, 1, \"!\" + header);\n      } else if (posDecrease !== -1) {\n        this.autosorter.splice(posDecrease, 1);\n      } else {\n        this.autosorter.push(header);\n      }\n      this.digestOutput();\n    },\n    getAutoSorterCallback() {\n      this.$trace(\"lsw-table.methods.getAutoSorterCallback\");\n      return (a, b) => {\n        for(let indexRow=0; indexRow<this.autosorter.length; indexRow++) {\n          const header = this.autosorter[indexRow];\n          const isReversed = header.startsWith(\"!\");\n          const field = isReversed ? header.substr(1) : header.substr(0);\n          const va = a[field];\n          const vb = b[field];\n          if(typeof vb === \"undefined\") {\n            return isReversed ? 1 : -1;\n          } else if(typeof va === \"undefined\") {\n            return isReversed ? -1 : 1;\n          }\n          const van = LswUtils.toFloatOr(va, va);\n          const vbn = LswUtils.toFloatOr(vb, vb);\n          if(van < vbn) {\n            return isReversed ? 1 : -1;\n          } else if(van > vbn) {\n            return isReversed ? -1 : 1;\n          }\n        }\n        return 0;\n      };\n    },\n    digestOutput() {\n      this.$trace(\"lsw-table.methods.digestOutput\");\n      const input = this.input;\n      let temp = [];\n      const extenderExpression = this.extender.trim() || \"{}\";\n      const extenderFunction = new Function(\"it\", \"i\", `return ${extenderExpression}`);\n      const filterExpression = this.filter.trim() || \"true\";\n      const filterFunction = new Function(\"it\", \"i\", `return ${filterExpression}`);\n      const sorterExpression = this.sorter.trim() || \"0\";\n      const sorterFunction = new Function(\"a\", \"b\", `return ${sorterExpression}`);\n      let tempHeaders = new Set();\n      Iterating_rows:\n      for (let index = 0; index < input.length; index++) {\n        const row = input[index];\n        let extendedRow = undefined;\n        Apply_extender: {\n          try {\n            const extenderProduct = extenderFunction(row, index) || {};\n            extendedRow = Object.assign({}, row, extenderProduct);\n          } catch (error) {\n            extendedRow = Object.assign({}, row);\n          }\n        }\n        let isValidFinally = true;\n        Apply_searcher: {\n          if (this.searcher.trim() !== \"\") {\n            const hasMatch = JSON.stringify(extendedRow).toLowerCase().indexOf(this.searcher.toLowerCase()) !== -1;\n            if (!hasMatch) {\n              isValidFinally = isValidFinally && false;\n            }\n          }\n        }\n        Apply_filter: {\n          try {\n            const filterProduct = filterFunction(extendedRow, index);\n            if (filterProduct !== true) {\n              isValidFinally = isValidFinally && false;\n            }\n          } catch (error) {\n            // @OK.\n          }\n        }\n        Extract_row: {\n          if (isValidFinally) {\n            temp.push(extendedRow);\n          }\n        }\n        Extract_headers: {\n          try {\n            Object.keys(extendedRow).forEach(key => {\n              tempHeaders.add(key);\n            });\n          } catch (error) {\n            // @OK.\n          }\n        }\n      }\n      Apply_sorter: {\n        try {\n          if(this.autosorter.length) {\n            const autosorter = this.getAutoSorterCallback();\n            temp = temp.sort(autosorter);\n          } else {\n            temp = temp.sort(sorterFunction);\n          }\n        } catch (error) {\n          // @OK.\n        }\n        Also_to_headers: {\n          if (Array.isArray(this.columnsOrder) && this.columnsOrder.length) {\n            tempHeaders = [...tempHeaders].sort((h1, h2) => {\n              const pos1 = this.columnsOrder.indexOf(h1);\n              const pos2 = this.columnsOrder.indexOf(h2);\n              if (pos1 === -1 && pos2 === -1) {\n                return -1;\n              } else if (pos1 === -1) {\n                return 1;\n              } else if (pos2 === -1) {\n                return -1;\n              } else if (pos1 > pos2) {\n                return 1;\n              }\n              return -1;\n            });\n          }\n        }\n      }\n      this.headers = tempHeaders;\n      this.output = temp;\n      this.digestPagination();\n    },\n    digestPagination() {\n      this.$trace(\"lsw-table.methods.digestPagination\");\n      const page = this.currentPageOnForm - 1;\n      Inject_form_state_of_items_per_page_here: {\n        this.itemsPerPage = this.itemsPerPageOnForm;\n      }\n      const items = this.itemsPerPage;\n      const firstPosition = items * (page);\n      this.selectedRows = [];\n      this.paginatedOutput = [].concat(this.output).splice(firstPosition, items);\n    },\n    saveCurrentTransformer() {\n      this.$trace(\"lsw-table.methods.saveCurrentTransformer\");\n    },\n    _adaptRowButtonsToHeaders(rowButtons) {\n      const attachedHeaders = [];\n      for (let index = 0; index < rowButtons.length; index++) {\n        const attachedButton = rowButtons[index];\n        attachedHeaders.push({\n          text: attachedButton.header || \"\"\n        });\n      }\n      return attachedHeaders;\n    },\n    _adaptRowButtonsToColumns(rowButtons) {\n      const attachedColumns = [];\n      for (let index = 0; index < rowButtons.length; index++) {\n        const attachedButton = rowButtons[index];\n        attachedColumns.push({\n          text: attachedButton.text || \"\",\n          event: attachedButton.event || this.$noop,\n        });\n      }\n      return attachedColumns;\n    },\n    updateColumnsOrderFromInput() {\n      this.$trace(\"lsw-table.methods.updateColumnsOrderFromInput\");\n      this.columnsOrder = this.columnsOrderInput.split(\",\").map(it => it.trim());\n      this.digestOutput();\n    },\n    increaseItemsPerPage() {\n      this.$trace(\"lsw-table.methods.increaseItemsPerPage\");\n      this.itemsPerPageOnForm++;\n    },\n    decreaseItemsPerPage() {\n      this.$trace(\"lsw-table.methods.decreaseItemsPerPage\");\n      this.itemsPerPageOnForm--;\n    },\n    getStoragePathFor(id) {\n      this.$trace(\"lsw-table.methods.getStoragePathFor\");\n      return this.$lsw.fs.resolve_path(\"/kernel/settings/table/storage/\", id);\n    },\n    async loadState() {\n      this.$trace(\"lsw-table.methods.loadState\");\n      Check_strategy_and_validation: {\n        if (this.storageStrategy !== \"ufs/lsw\") {\n          console.log(`[*] Could not load state on lsw-table because of: UnknownStorageStrategy (=${this.storageStrategy})`);\n          return -1;\n        }\n        if (!this.storageId) {\n          // console.log(`[*] Could not load state on lsw-table because of: NoStorageId (=${this.storageId})`);\n          return -2;\n        }\n      }\n      const storagePath = this.getStoragePathFor(this.storageId);\n      const storageJson = await (() => {\n        try {\n          return this.$lsw.fs.read_file(storagePath);\n        } catch (error) {\n          console.log(`[*] Could not load state on lsw-table because of: BadStoragePath (=${this.storagePath})`);\n          return undefined;\n        }\n      })();\n      if (typeof storageJson !== \"string\") {\n        console.log(`[*] Could not load state on lsw-table because of: JsonStorageNotString (=${typeof storageJson})`);\n        return -3;\n      }\n      let storageData = undefined;\n      try {\n        storageData = JSON.parse(storageJson);\n      } catch (error) {\n        console.log(`[*] Could not load state on lsw-table because of: JsonStorageNotParseable (${error.name}=${error.message})`);\n        return -4;\n      }\n      Cargar_estado: {\n        if (typeof storageData !== \"object\") {\n          console.log(`[*] Could not load state on lsw-table because of: StorageDataNotObject (${typeof storageData})`);\n          return -5;\n        }\n        console.log(\"[*] Loading lsw-table state from: \", storageData);\n        Object.assign(this, storageData);\n      }\n    },\n    saveState() {\n      this.$trace(\"lsw-table.methods.saveState\");\n      Check_strategy_and_validation: {\n        if (this.storageStrategy !== \"ufs/lsw\") {\n          console.log(`[*] Could not save state on lsw-table because of: UnknownStorageStrategy (=${this.storageStrategy})`);\n          return -1;\n        }\n        if (!this.storageId) {\n          // console.log(`[*] Could not save state on lsw-table because of: NoStorageId (=${this.storageId})`);\n          return -2;\n        }\n      }\n      const storagePath = this.getStoragePathFor(this.storageId);\n      const storageState = this.extractState();\n      const storageJson = JSON.stringify(storageState, null, 2);\n      Guardar_estado: {\n        console.log(\"[*] Saving lsw-table state as: \", storageState);\n        this.$lsw.fs.write_file(storagePath, storageJson);\n        this.$lsw.toasts.send({\n          title: \"Estado de tabla guardado\",\n          text: \"Con identificador: \" + this.storageId,\n        });\n      }\n      return true;\n    },\n    extractState() {\n      this.$trace(\"lsw-table.methods.extractState\");\n      return LswUtils.extractPropertiesFrom(this, [\n        // \"input\",\n        \"title\",\n        \"isShowingMenu\",\n        \"isShowingSubpanel\",\n        \"selectedRows\",\n        \"choosenRows\",\n        \"searcher\",\n        \"extender\",\n        \"filter\",\n        \"sorter\",\n        \"itemsPerPageOnForm\",\n        \"itemsPerPage\",\n        \"currentPage\",\n        \"currentPageOnForm\",\n        \"columnsAsList\",\n        \"columnsOrder\",\n        \"columnsOrderInput\",\n        // \"output\",\n        // \"paginatedOutput\",\n        \"headers\",\n        // \"attachedHeaders\",\n        // \"attachedColumns\",\n        // \"attachedTopButtons\",\n        // \"placeholderForExtensor\",\n        // \"placeholderForOrdenador\",\n        // \"placeholderForFiltro\",\n        // \"placeholderForBuscador\",\n        // \"placeholderForPaginador\",\n      ], [\n        \"input\",\n        \"output\",\n        \"paginatedOutput\",\n        \"attachedHeaders\",\n        \"attachedColumns\",\n        \"attachedTopButtons\",\n        \"placeholderForExtensor\",\n        \"placeholderForOrdenador\",\n        \"placeholderForFiltro\",\n        \"placeholderForBuscador\",\n        \"placeholderForPaginador\",\n      ], {\n        isShowingMenu: false,\n        isShowingSubpanel: \"Todo\",\n      });\n    },\n  },\n  watch: {\n    itemsPerPage(value) {\n      this.$trace(\"lsw-table.watch.itemsPerPage\");\n      /// this.digestPagination();\n    },\n    currentPage(value) {\n      this.$trace(\"lsw-table.watch.currentPage\");\n      this.currentPageOnForm = value + 1;\n      this.digestPagination();\n    },\n    choosenRows(v) {\n      this.$trace(\"lsw-table.watch.value\");\n      this.onChooseRow(v, this);\n    }\n  },\n  computed: {\n    hasFiltersApplying() {\n      // @BUGGY: estos logs causan recursividad en el console-hooker\n      // this.$trace(\"lsw-table.computed.hasFiltersApplying\");\n      if (this.autosorter.length) {\n        return true;\n      }\n      if (this.extender.length) {\n        return true;\n      }\n      if (this.filter.length) {\n        return true;\n      }\n      if (this.sorter.length) {\n        return true;\n      };\n      if (this.searcher.length) {\n        return true;\n      }\n      if (this.currentPage !== 0) {\n        return true;\n      }\n      if ((this.currentPage + 1) !== this.currentPageOnForm) {\n        return true;\n      }\n      if (this.itemsPerPage < 10) {\n        return true;\n      }\n      if (this.itemsPerPageOnForm !== this.itemsPerPage) {\n        return true;\n      }\n      if ([\"id\", \"\"].indexOf(this.columnsOrderInput) === -1) {\n        return true;\n      }\n      if ([0, 1].indexOf(this.columnsOrder.length) === 1) {\n        return true;\n      }\n      return false;\n    },\n    totalOfPages() {\n      // @BUGGY: estos logs causan recursividad en el console-hooker\n      // this.$trace(\"lsw-table.computed.totalOfPages\");\n      return Math.ceil(this.output.length / this.itemsPerPage) || 1;\n    },\n    currentLastPage() {\n      this.$trace(\"lsw-table.computed.currentLastPage\");\n      return Math.floor(this.output.length / this.itemsPerPage) || 1;\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-table.mounted\");\n    this.loadState();\n    this.digestOutput();\n  }\n});\n",
      "$code.label": "LswTable API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-table/lsw-table/lsw-table.js",
      "$location": {
        "start": {
          "offset": 15624,
          "line": 462,
          "column": 1
        },
        "end": {
          "offset": 15693,
          "line": 463,
          "column": 1
        }
      },
      "BUGGY": "estos logs causan recursividad en el console-hooker",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-table/lsw-table/lsw-table.js",
      "$location": {
        "start": {
          "offset": 16609,
          "line": 500,
          "column": 1
        },
        "end": {
          "offset": 16678,
          "line": 501,
          "column": 1
        }
      },
      "BUGGY": "estos logs causan recursividad en el console-hooker",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki/lsw-wiki.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 99,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWiki component",
      "$code": "Vue.component(\"LswWiki\", {\n  name: \"LswWiki\",\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-wiki.data\");\n    return {\n      isSearching: true,\n      isShowingNavigation: false,\n      isLoadedLibros: true,\n      isLoadedCategorias: true,\n      selectedSection: 'articulos',\n    };\n  },\n  methods: {\n    selectSection(section) {\n      this.$trace(\"lsw-wiki.methods.selectSection\");\n      this.selectedSection = section;\n      this.isShowingNavigation = false;\n    },\n    toggleNavigation() {\n      this.$trace(\"lsw-wiki.methods.toggleNavigation\");\n      this.isShowingNavigation = !this.isShowingNavigation;\n    },\n    hideNavigation() {\n      this.$trace(\"lsw-wiki.methods.hideNavigation\");\n      this.isShowingNavigation = false;\n    },\n    openLibrosFolder() {\n      this.$trace(\"lsw-wiki.methods.openLibrosFolder\");\n      this.$lsw.dialogs.open({\n        id: LswRandomizer.getRandomString(10),\n        title: \"Todos los libros\",\n        template: `\n          <lsw-filesystem-explorer\n            :absolute-layout=\"true\"\n            opened-by=\"/kernel/wiki/libros\"\n          />\n        `\n      });\n    },\n    openCategoriasFile() {\n      this.$trace(\"lsw-wiki.methods.openCategoriasFile\");\n      this.$lsw.dialogs.open({\n        id: LswRandomizer.getRandomString(10),\n        title: \"Todas las categorías\",\n        template: `\n          <lsw-filesystem-explorer\n            :absolute-layout=\"true\"\n            opened-by=\"/kernel/wiki/categorias.tri\"\n          />\n        `\n      });\n    },\n    refreshLibros() {\n      this.$trace(\"lsw-wiki.methods.refreshLibros\");\n      this.isLoadedLibros = false;\n      setTimeout(() => {\n        this.isLoadedLibros = true;\n      }, 100);\n    },\n    refreshCategorias() {\n      this.$trace(\"lsw-wiki.methods.refreshCategorias\");\n      this.isLoadedCategorias = false;\n      setTimeout(() => {\n        this.isLoadedCategorias = true;\n      }, 100);\n    },\n    refreshRevistas() {\n      this.$trace(\"lsw-wiki.methods.refreshRevistas\");\n    },\n    refreshBuscador() {\n      this.$trace(\"lsw-wiki.methods.refreshBuscador\");\n    },\n    refreshArticulos() {\n      this.$trace(\"lsw-wiki.methods.refreshArticulos\");\n    },\n    goToAddArticulo() {\n      this.$trace(\"lsw-wiki.methods.goToAddArticulo\");\n      this.$lsw.dialogs.open({\n        title: \"Añadir nuevo artículo\",\n        template: `<lsw-spontaneous-form-articulo :on-submitted=\"closeAndRefresh\" />`,\n        factory: {\n          methods: {\n            closeAndRefresh() {\n              this.close();\n              // @DONT because maybe you have something in hands.\n            }\n          }\n        },\n      });\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswWiki API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-articulo-viewer/lsw-wiki-articulo-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 127,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiArticuloViewer component",
      "$code": "Vue.component(\"LswWikiArticuloViewer\", {\n  name: \"LswWikiArticuloViewer\",\n  template: $template,\n  props: {\n    articuloId: {\n      type: [Number, String],\n      required: true,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-wiki-articulo-viewer.data\");\n    return {\n      isLoaded: false,\n      selectedArticulos: false,\n      markdownContent: false,\n      error: false,\n    };\n  },\n  methods: {\n    setError(error) {\n      this.$trace(\"lsw-wiki-articulo-viewer.methods.setError\");\n      this.error = error;\n    },\n    async loadContent() {\n      this.$trace(\"lsw-wiki-articulo-viewer.methods.loadContent\");\n      const matchedRows = await this.$lsw.database.selectMany(\"Articulo\", articulo => {\n        return articulo.tiene_titulo === this.articuloId;\n      });\n      console.log(\"[*] Artículos coincidentes:\", matchedRows);\n      try {\n        if(matchedRows.length === 0) {\n          throw new Error(`Articulo no encontrado por «${this.articuloId}»`);\n        } else if(matchedRows.length === 1) {\n          this.markdownContent = LswMarkdown.global.parse(matchedRows[0].tiene_contenido);\n        } else {\n          this.markdownContent = matchedRows.map(row => LswMarkdown.global.parse(row.tiene_contenido)).join(\"\\n\\n----\\n\\n\");\n        }\n        this.selectedArticulos = matchedRows;\n      } catch (error) {\n        console.log(\"[*] Error loading articulo:\", error);\n        this.setError(error);\n      } finally {\n        this.isLoaded = true;\n      }\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-articulo-viewer.mounted\");\n      await this.loadContent();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswWikiArticuloViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-articulos/lsw-wiki-articulos.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 117,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiArticulos component",
      "$code": "Vue.component(\"LswWikiArticulos\", {\n  name: \"LswWikiArticulos\",\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-wiki-articulos.data\");\n    return {\n      articulos: false,\n      isSearching: false,\n      searchText: \"\",\n      timeoutId: undefined,\n      timeoutSeconds: 0.4,\n      openedArticulos: [],\n    };\n  },\n  methods: {\n    async loadArticulos() {\n      this.$trace(\"lsw-wiki-articulos.methods.loadArticulos\");\n      clearTimeout(this.searchTimeoutId);\n      this.isSearching = true;\n      const articulos = await (() => {\n        if(this.searchText) {\n          return this.$lsw.database.selectMany(\"Articulo\", articulo => {\n            return JSON.stringify(articulo).indexOf(this.searchText) !== -1;\n          });\n        } else {\n          return this.$lsw.database.selectMany(\"Articulo\");\n        }\n      })();\n      const articulosOrdenados = articulos.sort((a1, a2) => {\n        const f1 = a1.tiene_fecha || 0;\n        const f2 = a2.tiene_fecha || 0;\n        if(f1 < f2) return 1;\n        if(f1 > f2) return -1;\n        return -1;\n      });\n      this.openedArticulos = [];\n      this.articulos = articulosOrdenados;\n      this.isSearching = false;\n    },\n    loadArticulosDelayed() {\n      this.$trace(\"lsw-wiki-articulos.methods.loadArticulosDelayed\");\n      clearTimeout(this.searchTimeoutId);\n      this.isSearching = true;\n      this.searchTimeoutId = setTimeout(() => {\n        this.loadArticulos();\n      }, 1000 * this.timeoutSeconds);\n    },\n    toggleArticulo(articuloId) {\n      this.$trace(\"lsw-wiki-articulos.methods.toggleArticulo\");\n      const pos = this.openedArticulos.indexOf(articuloId);\n      if(pos === -1) {\n        this.openedArticulos.push(articuloId);\n      } else {\n        this.openedArticulos.splice(pos, 1);\n      }\n    },\n    async createArticulo() {\n      this.$trace(\"lsw-wiki-articulos.methods.createArticulo\");\n      const articulosComponent = this;\n      await this.$dialogs.open({\n        id: LswRandomizer.getRandomString(10),\n        title: \"Crear nuevo artículo\",\n        template: `\n          <div>\n            <lsw-schema-based-form\n              :on-submit=\"submitCallback\"\n              :model=\"{\n                  connection: $lsw.database,\n                  databaseId: 'lsw_default_database',\n                  tableId: 'Articulo',\n                  rowId: -1,\n              }\"\n            />\n          </div>\n        `,\n        factory: {\n          methods: {\n            async submitCallback(value) {\n              try {\n                this.$trace(\"Dialogs.CrearNuevoArticulo.methods.submitCallback\");\n                await this.$lsw.database.insert(\"Articulo\", value);\n                await this.$lsw.toasts.send({\n                  title: \"Artículo añadido correctamente\",\n                  text: \"El artículo ha sido añadido con éxito.\"\n                });\n                this.close();\n                articulosComponent.loadArticulos();\n              } catch (error) {\n                console.log(error);\n                await this.$lsw.toasts.send({\n                  title: \"Error al añadir artículo\",\n                  text: \"No se pudo añadir el artículo por un error: \" + error.message,\n                  background: \"red\",\n                });\n              }\n\n            }\n          }\n        }\n      })\n    },\n    async editArticulo(articulo) {\n      this.$trace(\"lsw-wiki-articulos.methods.editArticulo\");\n      const articulosComponent = this;\n      await this.$lsw.dialogs.open({\n        title: \"🔬 Editar artículo\",\n        template: `\n          <div>\n            <lsw-schema-based-form\n              :show-breadcrumb=\"false\"\n              :on-submit=\"(value) => submitCallback(value)\"\n              :on-delete-row=\"deleteCallback\"\n              :model=\"{\n                  connection: $lsw.database,\n                  databaseId: 'lsw_default_database',\n                  tableId: 'Articulo',\n                  rowId: articuloId,\n              }\"\n            />\n          </div>\n        `,\n        factory: {\n          data: { articuloId: articulo.id },\n          methods: {\n            async submitCallback(value) {\n              this.$trace(\"Dialogs.EditarArticulo.methods.submitCallback\");\n              try {\n                await this.$lsw.database.update(\"Articulo\", this.articuloId, value);\n                await this.$lsw.toasts.send({\n                  title: \"Artículo actualizado correctamente\",\n                  text: \"El artículo ha sido actualizado con éxito.\"\n                });\n                this.close();\n                articulosComponent.loadArticulos();\n              } catch (error) {\n                console.log(error);\n                await this.$lsw.toasts.send({\n                  title: \"Error al actualizar artículo\",\n                  text: \"No se pudo actualizar el artículo por un error: \" + error.message,\n                  background: \"red\",\n                });\n              }\n            },\n            async deleteCallback() {\n              this.$trace(\"Dialogs.EditarArticulo.methods.deleteCallback\");\n              this.close();\n              articulosComponent.loadArticulos();\n              await this.$lsw.toasts.send({\n                title: \"Artículo eliminado correctamente\",\n                text: \"El artículo se eliminó con éxito.\",\n              });\n            }\n          }\n        }\n      });\n      this.loadArticulos();\n    }, \n    async deleteArticulo(articulo) {\n      this.$trace(\"lsw-wiki-articulos.methods.deleteArticulo\");\n      const articulosComponent = this;\n      const respuesta = await this.$lsw.dialogs.open({\n        title: \"Eliminar artículo\",\n        template: `\n          <div class=\"pad_2\">\n            <div class=\"\">¿Estás seguro que quieres eliminar el artículo?</div>\n            <pre class=\"codeblock margin_top_2 margin_bottom_2\">{{ articulo }}</pre>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_right_1\">\n                <button class=\"flex_1\" v-on:click=\"() => accept(true)\">Aceptar</button>\n              </div>\n              <div class=\"flex_1\">\n                <button class=\"flex_1 \" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: { articulo },\n          methods: {}\n        }\n      });\n      if(respuesta !== true) return;\n      await this.$lsw.database.delete(\"Articulo\", articulo.id);\n      this.$lsw.toasts.send({\n        title: \"Artículo eliminado correctamente\",\n        text: \"El artículo fue eliminado correctamente\"\n      });\n      this.loadArticulos();\n    },\n    async sendArticuloToNotas(articulo) {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.sendArticuloToNotas\");\n      const respuesta = await this.$lsw.dialogs.open({\n        title: \"Pasar artículo a notas\",\n        template: `\n          <div class=\"pad_1\">\n            <div>Vas a pasar el siguiente artículo a nota: </div>\n            <div class=\"pad_2\">\n              <pre class=\"codeblock\">{{ articulo }}</pre>\n            </div>\n            <div>¿Estás seguro?</div>\n            <hr/>\n            <div class=\"flex_row centered text_align_right\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_right_1\">\n                <button class=\"supermini danger_button\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: { data: { articulo } },\n      });\n      if(respuesta === -1) return;\n      const notaNew = Object.assign({\n        tiene_titulo: '',\n        tiene_fecha: '',\n        tiene_estado: \"creada\",\n        tiene_categorias: '',\n        tiene_contenido: '',\n        tiene_garantia: '',\n        tiene_tags: '',\n      }, articulo);\n      delete notaNew.id;\n      await this.$lsw.database.insert(\"Nota\", notaNew);\n      await this.$lsw.database.delete(\"Articulo\", articulo.id);\n      this.$lsw.toasts.send({\n        title: \"Artículo a nota bien\",\n        text: \"El artículo ha sido pasado a nota correctamente\",\n      });\n      this.loadArticulos();\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-articulos.mounted\");\n      await this.loadArticulos();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswWikiArticulos API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-categorias/lsw-wiki-categorias.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 119,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiCategorias component",
      "$code": "Vue.component(\"LswWikiCategorias\", {\n  name: \"LswWikiCategorias\",\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-wiki-categorias.data\");\n    return {\n      categorias: false,\n    };\n  },\n  methods: {\n    async loadCategorias() {\n      this.$trace(\"LswWikiCategorias.methods.loadCategorias\");\n      this.categorias = await LswWikiUtils.getCategorias();\n    },\n    async abrirCategoria(categoria) {\n      this.$trace(\"LswWikiCategorias.methods.abrirCategoria\");\n      const articulosCategorizados = await this.$lsw.database.selectMany(\"Articulo\", articulo => {\n        return articulo.tiene_categorias.indexOf(categoria.id) !== -1;\n      })\n      console.log(categoria);\n      this.$lsw.dialogs.open({\n        id: LswRandomizer.getRandomString(10),\n        title: \"Ver categoría: \" + categoria.id,\n        template: `\n          <div>\n            <lsw-database-explorer\n              :show-breadcrumb=\"false\"\n              initial-page=\"lsw-page-rows\"\n              :initial-args=\"{\n                database: 'lsw_default_database',\n                table: 'Articulo',\n                tableStorageId: 'categoria-' + categoriaId,\n                filterCallback: it => it.tiene_categorias && (it.tiene_categorias.toLowerCase().indexOf(categoriaId.toLowerCase()) !== -1),\n              }\"\n            />\n          </div>\n        `,\n        factory: {\n          data: { categoriaId: categoria.id, articulosCategorizados }\n        }\n      });\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-categorias.mounted\");\n      await this.loadCategorias();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswWikiCategorias API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-libro-viewer/lsw-wiki-libro-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 121,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiLibroViewer component",
      "$code": "Vue.component(\"LswWikiLibroViewer\", {\n  name: \"LswWikiLibroViewer\",\n  template: $template,\n  props: {\n    idHeredado: {\n      type: Array,\n      default: () => [],\n    },\n    indiceDeArbol: {\n      type: Number,\n      default: () => 0,\n    },\n    arbol: {\n      type: Object,\n      required: true,\n    },\n    onClickLink: {\n      type: [Boolean, Function],\n      default: () => false,\n    },\n    onClickClip: {\n      type: Function,\n      default: () => {},\n    }\n  },\n  data() {\n    this.$trace(\"lsw-wiki-libro-viewer.data\");\n    return {\n      isSelected: false,\n      isShowingTree: false,\n      isShowingDefinition: false,\n    };\n  },\n  methods: {\n    getIdFor(node) {\n      this.$trace(\"lsw-wiki-libro-viewer.methods.getIdFor\");\n      const lastPartId = node.id || node.link;\n      return [].concat(this.idHeredado).concat([lastPartId]);\n    },\n    toggleState() {\n      this.$trace(\"lsw-wiki-libro-viewer.methods.toggleState\");\n      this.isSelected = !this.isSelected;\n    },\n    toggleTree() {\n      this.$trace(\"lsw-wiki-libro-viewer.methods.toggleTree\");\n      this.isShowingTree = !this.isShowingTree;\n    },\n    toggleDefinition() {\n      this.$trace(\"lsw-wiki-libro-viewer.methods.toggleDefinition\");\n      this.isShowingDefinition = !this.isShowingDefinition;\n    },\n    abrirLink(nodo) {\n      this.$trace(\"lsw-wiki-libro-viewer.methods.abrirLink\");\n      if(this.onClickLink) {\n        this.onClickLink(nodo, this);\n      } else {\n        this.toggleState();\n      }\n    },\n    abrirClip(nodo) {\n      this.$trace(\"lsw-wiki-libro-viewer.methods.abrirClip\");\n      this.onClickClip(nodo, this);\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-libro-viewer.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswWikiLibroViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-libros/lsw-wiki-libros.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 111,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiLibros component",
      "$code": "Vue.component(\"LswWikiLibros\", {\n  name: \"LswWikiLibros\",\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-wiki-libros.data\");\n    return {\n      selectedLibros: [],\n      selectedLibroInfos: [],\n      loadedLibros: {},\n      libros: false,\n    };\n  },\n  methods: {\n    async toggleLibro(libroId) {\n      this.$trace(\"LswWikiLibros.methods.loadLibros\");\n      const pos = this.selectedLibros.indexOf(libroId);\n      if(pos === -1) {\n        await this.loadLibro(libroId);\n        this.selectedLibros.push(libroId);\n      } else {\n        this.selectedLibros.splice(pos, 1);\n      }\n      this.$forceUpdate(true);\n    },\n    async toggleLibroInfo(libroId) {\n      this.$trace(\"LswWikiLibros.methods.toggleLibroInfo\");\n      const pos = this.selectedLibroInfos.indexOf(libroId);\n      if(pos === -1) {\n        this.selectedLibroInfos.push(libroId);\n      } else {\n        this.selectedLibroInfos.splice(pos, 1);\n      }\n      this.$forceUpdate(true);\n    },\n    async loadLibro(libroId) {\n      this.$trace(\"LswWikiLibros.methods.loadLibro\");\n      const libroData = await this.$lsw.fs.evaluateAsTripiFileOrReturn(`/kernel/wiki/libros/${libroId}`, false);\n      if(!libroData) return;\n      this.loadedLibros[libroId] = libroData;\n      return libroData;\n    },\n    async loadLibros() {\n      this.$trace(\"LswWikiLibros.methods.loadLibros\");\n      const librosBrute = await LswWikiUtils.getLibros();\n      this.libros = librosBrute;\n    },\n    getLibroName(file) {\n      this.$trace(\"LswWikiLibros.methods.getLibroName\");\n      return file.replace(/\\.tri(pi)?/g, \"\")\n    },\n    async abrirArticulo(articulo, componenteDeArticulo) {\n      this.$trace(\"LswWikiLibros.methods.abrirLibro\");\n      console.log(\"Abriendo artículo:\", articulo.link);\n      componenteDeArticulo.toggleState();\n    },\n    async editLibro(libro) {\n      this.$trace(\"LswWikiLibros.methods.editLibro\");\n      await this.$lsw.dialogs.open({\n        id: LswRandomizer.getRandomString(10),\n        title: \"Editar libro\",\n        template: `\n          <lsw-filesystem-explorer\n            :absolute-layout=\"true\"\n            :opened-by=\"'/kernel/wiki/libros/' + libro\"\n          />\n        `,\n        factory: {\n          data: { libro }\n        }\n      });\n    },\n    async printLibro(libroId) {\n      this.$trace(\"LswWikiLibros.methods.printLibro\");\n      const libroTree = await this.loadLibro(libroId);\n      const libroTexted = await this.resolveLibroTree(libroTree)\n      await this.$lsw.dialogs.open({\n        id: LswRandomizer.getRandomString(10),\n        title: \"Imprimir libro\",\n        template: `\n          <lsw-data-printer-report :input=\"libro\" />\n        `,\n        factory: {\n          data: { libro: libroTexted }\n        }\n      });\n    },\n    async resolveLibroTree(treeNode) {\n      this.$trace(\"LswWikiLibros.methods.resolveLibroTree\");\n      if(typeof treeNode === \"undefined\") {\n        return \"\";\n      }\n      let out = \"\";\n      const { id, link, subtree } = treeNode;\n      const reference = id || link;\n      const articulosCoincidentes = await this.$lsw.database.selectMany(\"Articulo\", articulo => {\n        return articulo.tiene_titulo === reference;\n      });\n      out += `### ${id}\\n\\n`;\n      if(articulosCoincidentes && articulosCoincidentes.length) {\n        const articuloTextualizado = articulosCoincidentes.map(articulo => articulo.tiene_contenido).join(\"\\n\\n\");\n        out += `${articuloTextualizado || \"\"}\\n\\n`;\n      }\n      if(typeof subtree === \"object\") {\n        for(let prop in subtree) {\n          out += await this.resolveLibroTree(subtree[prop]);\n        }\n      }\n      return out;\n    },\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-libros.mounted\");\n      await this.loadLibros();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswWikiLibros API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-revistas/lsw-wiki-revistas.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 115,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiRevistas component",
      "$code": "Vue.component(\"LswWikiRevistas\", {\n  name: \"LswWikiRevistas\",\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-wiki-revistas.data\");\n    return {\n      revistas: false,\n    };\n  },\n  methods: {\n    async loadRevistas() {\n      this.$trace(\"lsw-wiki.methods.loadRevistas\");\n      this.revistas = await LswWikiUtils.getRevistas();\n    },\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-revistas.mounted\");\n      await this.loadRevistas();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswWikiRevistas API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-tree/lsw-wiki-tree.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 107,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiTree component",
      "$code": "Vue.component(\"LswWikiTree\", {\n  name: \"LswWikiTree\",\n  template: $template,\n  props: {\n    initialInput: {\n      type: Array,\n      default: () => [],\n    },\n    initialSettings: {\n      type: Object,\n      default: () => {},\n    }\n  },\n  data() {\n    this.$trace(\"lsw-wiki-tree.data\");\n    const initialData = this.validateInput(this.initialInput || {});\n    return {\n      selectedNodes: [],\n      treeData: initialData,\n    };\n  },\n  methods: {\n    validateInput(jsonTree) {\n      this.$trace(\"LswWikiTree.methods.validateInput\");\n      $ensure({ jsonTree }, 1).to.be.array().its(\"length\").type(\"number\");\n      return jsonTree;\n    },\n    toggleNode(nodeId) {\n      this.$trace(\"LswWikiTree.methods.toggleNode\");\n      const pos = this.selectedNodes.indexOf(nodeId);\n      if(pos === -1) {\n        this.selectedNodes.push(nodeId);\n      } else {\n        this.selectedNodes.splice(nodeId, 1);\n      }\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-tree.mounted\");\n      \n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswWikiTree API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-treenode/lsw-wiki-treenode.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 115,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiTreenode component",
      "$code": "Vue.component(\"LswWikiTreenode\", {\n  name: \"LswWikiTreenode\",\n  template: $template,\n  props: {\n    initialInput: {\n      type: Array,\n      default: () => [],\n    },\n    initialSettings: {\n      type: Object,\n      default: () => {},\n    }\n  },\n  data() {\n    this.$trace(\"lsw-wiki-treenode.data\");\n    return {\n      treeNode: this.initialInput || [],\n    };\n  },\n  methods: {\n    \n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-treenode.mounted\");\n      \n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswWikiTreenode API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-windows/lsw-windows-main-tab/lsw-windows-main-tab.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 122,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Windows API » LswWindowsMainTab component",
      "$code": "// Change this component at your convenience:\nVue.component(\"LswWindowsMainTab\", {\n  template: $template,\n  props: {\n    viewer: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    this.$trace(\"lsw-windows-main-tab.data\");\n    return {\n      isShowingApps: false,\n    };\n  },\n  methods: {\n    async showConsole() {\n      this.$trace(\"lsw-windows-main-tab.methods.showConsole\");\n      this.$consoleHooker.toggleConsole();\n    },\n    getRandomString(len = 10) {\n      this.$trace(\"lsw-windows-main-tab.methods.getRandomString\");\n      const alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n      let out = \"\";\n      while(out.length < len) {\n        out += alphabet[Math.floor(Math.random() * alphabet.length)];\n      }\n      return out;\n    },\n    openRest() {\n      this.$trace(\"lsw-windows-main-tab.methods.openRest\");\n      this.viewer.hide();\n      this.$dialogs.open({\n        id: \"database-explorer-\" + this.getRandomString(5),\n        title: \"Database explorer\",\n        template: `<div class=\"pad_1\"><lsw-database-explorer /></div>`,\n      });\n    },\n    openFilesystem() {\n      this.$trace(\"lsw-windows-main-tab.methods.openFilesystem\");\n      this.viewer.hide();\n      this.$dialogs.open({\n        id: \"filesystem-explorer-\" + this.getRandomString(5),\n        title: \"Filesystem explorer\",\n        template: `<lsw-filesystem-explorer  :absolute-layout=\"true\" />`,\n      });\n    },\n    openWiki() {\n      this.$trace(\"lsw-windows-main-tab.methods.openWiki\");\n      this.viewer.hide();\n      this.$dialogs.open({\n        id: \"wiki-explorer-\" + this.getRandomString(5),\n        title: \"Wiki explorer\",\n        template: `<div class=\"pad_1\"><lsw-wiki /></div>`,\n      });\n    },\n    openAgenda() {\n      this.$trace(\"lsw-windows-main-tab.methods.openAgenda\");\n      this.viewer.hide();\n      this.$dialogs.open({\n        id: \"agenda-viewer-\" + this.getRandomString(5),\n        title: \"Agenda viewer\",\n        template: `<div class=\"pad_horizontal_1\"><lsw-agenda /></div>`,\n      });\n    },\n    openAutomessages() {\n      this.$trace(\"lsw-windows-main-tab.methods.openAutomessages\");\n      this.viewer.hide();\n    },\n    openNoteUploader() {\n      this.$trace(\"lsw-windows-main-tab.methods.openNoteUploader\");\n      this.viewer.hide();\n      this.$dialogs.open({\n        id: \"notas-\" + this.getRandomString(5),\n        title: \"Notas\",\n        template: `<div class=\"pad_1\"><lsw-spontaneous-table-nota /></div>`,\n      });\n    },\n    openConfigurationsPage() {\n      this.$trace(\"lsw-windows-main-tab.methods.openConfigurationsPage\");\n      this.viewer.hide();\n      this.$dialogs.open({\n        id: \"configurations-page-\" + this.getRandomString(5),\n        title: \"Configuraciones\",\n        template: `<div class=\"pad_1\"><lsw-configurations-page /></div>`,\n      });\n    },\n    closeProcess(dialog) {\n      this.$trace(\"lsw-windows-main-tab.methods.closeProcess\");\n      this.$lsw.dialogs.close(dialog.id);\n    },\n    toggleApps() {\n      this.$trace(\"lsw-windows-main-tab.methods.toggleApps\");\n      this.isShowingApps = !this.isShowingApps;\n    },\n    openApp() {\n      \n    }\n  },\n  mounted() {\n    this.$lsw.windowsMainTab = this;\n  }\n});\n",
      "$code.label": "LswWindowsMainTab API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-windows/lsw-windows-pivot-button/lsw-windows-pivot-button.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 130,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Windows API » LswWindowsPivotButton component",
      "$code": "// Change this component at your convenience:\nVue.component(\"LswWindowsPivotButton\", {\n  template: $template,\n  props: {\n    viewer: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    this.$trace(\"lsw-windows-pivot-button.data\");\n    return {\n      \n    };\n  },\n  methods: {\n    onClick(event) {\n      this.$trace(\"lsw-windows-pivot-button.methods.onClick\");\n      this.viewer.toggleState();\n    },\n  },\n});\n",
      "$code.label": "LswWindowsPivotButton API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-windows/lsw-windows-viewer/lsw-windows-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 132,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Windows API » LswWindowsViewer classes and functions",
      "$code": "// Change this component at your convenience:\nVue.component(\"LswWindowsViewer\", {\n  template: $template,\n  props: {},\n  data() {\n    return {\n      isShowing: false\n    };\n  },\n  methods: {\n    hide() {\n      this.isShowing = false;\n    },\n    show() {\n      this.isShowing = true;\n    },\n    toggleState() {\n      this.isShowing = !this.isShowing;\n      this.$forceUpdate(true);\n    },\n    selectDialog(id) {\n      this.hide();\n      this.$refs.dialogs.maximize(id);\n    }\n  },\n  mounted() {\n    this.$window.LswWindows = this;\n    this.$lsw.windows = this;\n    this.$lsw.windowsViewer = this;\n  }\n});\n",
      "$code.label": "LswWindowsViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-store/src/lib/002.store.js",
      "$location": {
        "start": {
          "offset": 280,
          "line": 14,
          "column": 1
        },
        "end": {
          "offset": 356,
          "line": 15,
          "column": 1
        }
      },
      "$section": "LswStore API » LswStore class",
      "$code": "  const Store = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor(initialState = {}, path_to_store = \"original_store.json\") {\n      this.$store = initialState;\n      this.$storePath = path_to_store;\n      this.events = {};\n    }\n\n    _triggerParentEvents(event, path, value) {\n      const originalPath = path.join(\".\");\n      if (this.events[originalPath]) {\n        this.events[originalPath].forEach((callback) => {\n          return callback(event, path, value);\n        });\n      }\n      while (path.length > 0) {\n        path.pop();\n        const parentPath = path.join(\".\");\n        if (this.events[parentPath]) {\n          this.events[parentPath].forEach((callback) => {\n            const value = this.get(path);\n            return callback(event, path, value);\n          });\n        }\n      }\n    }\n\n    get(path = []) {\n      return path.reduce((acc, key) => (acc && acc[key] !== undefined ? acc[key] : undefined), this.$store);\n    }\n\n    set(path, value) {\n      if (!Array.isArray(path) || path.length === 0) {\n        throw new Error(\"La ruta debe ser un array de strings no vacío.\");\n      }\n      const lastKey = path.pop();\n      const target = path.reduce((acc, key) => {\n        if (!acc[key]) acc[key] = {};\n        return acc[key];\n      }, this.$store);\n      target[lastKey] = value;\n      path.push(lastKey);\n      this._triggerParentEvents(\"set\", path, value);\n    }\n\n    watch(path, callback) {\n      const key = path.join(\".\");\n      if (!this.events[key]) {\n        this.events[key] = [];\n      }\n      this.events[key].push(callback);\n    }\n\n    unwatch(path, callback) {\n      const key = path.join(\".\");\n      if (this.events[key]) {\n        this.events[key] = this.events[key].filter((cb) => {\n          return cb !== callback;\n        });\n        if (this.events[key].length === 0) {\n          delete this.events[key];\n        }\n      }\n    }\n\n    delete(path) {\n      if (!Array.isArray(path) || path.length === 0) {\n        throw new Error(\"La ruta debe ser un array de strings no vacío.\");\n      }\n      const lastKey = path.pop();\n      const target = this.get(path);\n      if (target && target.hasOwnProperty(lastKey)) {\n        delete target[lastKey];\n        this._triggerParentEvents(\"delete\", path);\n      }\n    }\n\n    push(path, value) {\n      const array = this.get(path);\n      if (Array.isArray(array)) {\n        array.push(value);\n        this._triggerParentEvents(\"push\", path, array);\n      }\n    }\n\n    pop(path) {\n      const array = this.get(path);\n      if (Array.isArray(array)) {\n        const value = array.pop();\n        this._triggerParentEvents(\"pop\", path, array);\n        return value;\n      }\n    }\n\n    unshift(path, value) {\n      const array = this.get(path);\n      if (Array.isArray(array)) {\n        array.unshift(value);\n        this._triggerParentEvents(\"unshift\", path, array);\n      }\n    }\n\n    shift(path) {\n      const array = this.get(path);\n      if (Array.isArray(array)) {\n        const value = array.shift();\n        this._triggerParentEvents(\"shift\", path, array);\n        return value;\n      }\n    }\n\n    add(path, key, value) {\n      const object = this.get(path);\n      if (object && typeof object === 'object' && !Array.isArray(object)) {\n        object[key] = value;\n        this._triggerParentEvents(\"add\", path, object);\n      }\n    }\n\n    remove(path, key) {\n      const object = this.get(path);\n      if (object && typeof object === 'object' && !Array.isArray(object)) {\n        delete object[key];\n        this._triggerParentEvents(\"remove\", path, object);\n      }\n    }\n\n    splice(path, start, deleteCount, ...items) {\n      const array = this.get(path);\n      if (Array.isArray(array)) {\n        const result = array.splice(start, deleteCount, ...items);\n        this._triggerParentEvents(\"splice\", path, array);\n        return result;\n      }\n    }\n\n    extend(path, newProps) {\n      const object = this.get(path);\n      if (object && typeof object === 'object' && !Array.isArray(object)) {\n        Object.assign(object, newProps);\n        this._triggerParentEvents(\"extend\", path, object);\n      }\n    }\n\n    multiextend(...extensions) {\n      for (let index = 0; index < extensions.length; index++) {\n        const {\n          selector,\n          value: targetValue,\n          mode,\n          modifier\n        } = extensions[index];\n        this.modify(selector, currentValue => {\n          let lastValue = currentValue;\n          Set_value: {\n            if (mode === \"assign\") {\n              lastValue = Object.assign(currentValue, targetValue);\n            } else if (mode === \"default\") {\n              lastValue = Object.assign({}, targetValue, currentValue);\n            } else if (mode === \"set\") {\n              lastValue = targetValue;\n            } else if (mode === \"concat\") {\n              lastValue = currentValue.concat(targetValue);\n            }\n          }\n          Run_modifier: {\n            if (modifier) {\n              const result = modifier(lastValue);\n              if (typeof result !== \"undefined\") {\n                return result;\n              }\n            }\n            return lastValue;\n          }\n        });\n      }\n    }\n\n    modify(path, modifier) {\n      const currentValue = this.get(path);\n      const newValue = modifier(currentValue);\n      const isNotSame = newValue !== currentValue;\n      const isNotUndefined = typeof newValue !== \"undefined\";\n      if (isNotUndefined && isNotSame) {\n        this.set(path, newValue);\n      }\n    }\n\n    hydrate(file) {\n      const ufs = UFS_manager.create(this.$storePath);\n      this.$store = JSON.parse(ufs.read_file(file));\n    }\n\n    dehydrate(file) {\n      const ufs = UFS_manager.create(this.$storePath);\n      ufs.write_file(file, JSON.stringify(this.$store));\n    }\n\n  };\n\n  Store.default = Store;\n\n  return Store;\n",
      "$code.label": "LswStore class",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-accion-add/lsw-agenda-accion-add.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 147,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaAccionAdd API » LswAgendaAccionAdd component",
      "$code": "Vue.component(\"LswAgendaAccionAdd\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-accion-add.data\");\n    return {\n      // \n    };\n  },\n  methods: {\n    async insertAccion(v) {\n      this.$trace(\"lsw-agenda-accion-add.methods.insertAccion\");\n      await this.$lsw.database.insert(\"Accion\", v);\n      // *@TODO: should redirect\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-accion-add.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaAccionAdd API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-accion-search/lsw-agenda-accion-search.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 156,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaAccionSearch API » LswAgendaAccionSearch component",
      "$code": "Vue.component(\"LswAgendaAccionSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-accion-search.data\");\n    return {\n      isLoaded: false,\n    };\n  },\n  methods: {\n    async loadRows() {\n      this.$trace(\"lsw-agenda-accion-search.methods.loadRows\");\n      this.rows = await this.$lsw.database.selectMany(\"Accion\", it => true);\n      this.isLoaded = true;\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-accion-search.mounted\");\n      this.loadRows();\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaAccionSearch API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-acciones-viewer/lsw-agenda-acciones-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 162,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaAccionesViewer API » LswAgendaAccionesViewer component",
      "$code": "Vue.component(\"LswAgendaAccionesViewer\", {\n  name: \"LswAgendaAccionesViewer\",\n  template: $template,\n  props: {\n    initialDate: {\n      type: Date,\n      default: () => new Date(),\n    },\n    sorterStrategy: {\n      type: String,\n      default: () => false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-agenda-acciones-viewer.data\");\n    return {\n      isLoading: true,\n      isShowingGoals: true,\n      isShowingRandomizer: false,\n      selectedDate: this.initialDate,\n      selectedAccion: \"\",\n      selectedForm: false,\n      selectedDateTasks: undefined,\n      selectedDateTasksSorted: undefined,\n      selectedSorterStrategy: this.sorterStrategy,\n      selectedSorterMoment: false,\n      hiddenDateHours: [],\n      shownAcciones: [],\n    };\n  },\n  methods: {\n    hideRandomizer() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.hideRandomizer\");\n      this.isShowingRandomizer = false;\n    },\n    toggleRandomizer() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.toggleRandomizer\");\n      this.isShowingRandomizer = !this.isShowingRandomizer;\n    },\n    toggleSorterStrategy() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.toggleSorterStrategy\");\n      if (this.selectedSorterStrategy === \"antes\") {\n        this.selectedSorterStrategy = false;\n      } else if (this.selectedSorterStrategy === \"despues\") {\n        this.selectedSorterStrategy = \"antes\";\n      } else {\n        this.selectedSorterStrategy = \"despues\";\n      }\n      this.loadDateTasks();\n    },\n    openRandomizerFile() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.openRandomizerFile\");\n      this.hideRandomizer();\n      Load_secretly_random_actions_as_concepts: {\n        setTimeout(async () => {\n          const randomizables = await this.$lsw.fs.evaluateAsDotenvFileOrReturn(\"/kernel/settings/randomizables.env\", {});\n          const names = Object.keys(randomizables);\n          const knownNames = await this.$lsw.database.selectMany(\"Concepto\", c => {\n            return names.indexOf(c.tiene_nombre) !== -1;\n          });\n          const missingNames = LswUtils.arrays.getMissingInFirst(knownNames, names);\n          const conceptos = missingNames.map(name => {\n            return {\n              tiene_nombre: name,\n              tiene_comentarios: \"\",\n            }\n          });\n          for (let indexConcepto = 0; indexConcepto < conceptos.length; indexConcepto++) {\n            const concepto = conceptos[indexConcepto];\n            try {\n              await this.$lsw.database.insert(\"Concepto\", concepto);\n            } catch (error) {\n              // @BADLUCK\n            }\n          }\n        }, 0);\n      }\n      this.$lsw.dialogs.open({\n        title: \"Editar randomizables.env\",\n        template: `\n          <div>\n            <lsw-filesystem-explorer opened-by=\"/kernel/settings/randomizables.env\" :absolute-layout=\"true\" />\n          </div>\n        `,\n      });\n    },\n    changeDate(selectedDate) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.changeDate\");\n      this.selectedDate = selectedDate;\n      this.loadDateTasks();\n    },\n    selectForm(hora) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.selectForm\");\n      if (this.selectedForm === hora) {\n        this.selectedForm = undefined;\n      } else {\n        this.selectedForm = hora;\n      }\n    },\n    async onInsertTask(v, tarea) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.onInsertTask\");\n      const id = await this.$lsw.database.insert('Accion', v);\n      this.selectForm(id);\n      this.loadDateTasks();\n    },\n    async toggleAutogeneration(tarea) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.toggleAutogeneration\");\n      const siguientesParametros = (() => {\n        if (tarea.tiene_parametros.startsWith(\"[*autogenerada]\")) {\n          return tarea.tiene_parametros.replace(/^\\[\\*autogenerada\\] */g, \"\");\n        }\n        return \"[*autogenerada] \" + tarea.tiene_parametros;\n      })();\n      await this.$lsw.database.overwrite('Accion', tarea.id, {\n        tiene_parametros: siguientesParametros\n      });\n      await this.loadDateTasks();\n    },\n    async advanceTaskState(tarea) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.advanceTaskState\");\n      const siguienteEstado = (() => {\n        switch (tarea.tiene_estado) {\n          case \"pendiente\": return \"completada\";\n          case \"completada\": return \"fallida\";\n          case \"fallida\": return \"pendiente\";\n          default: return \"pendiente\";\n        }\n      })();\n      await this.$lsw.database.overwrite('Accion', tarea.id, {\n        tiene_estado: siguienteEstado\n      });\n      await this.loadDateTasks();\n    },\n    toggleShowAccion(accionId) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.toggleShowAccion\");\n      const pos = this.shownAcciones.indexOf(accionId);\n      if (pos === -1) {\n        this.shownAcciones.push(accionId);\n      } else {\n        this.shownAcciones.splice(pos, 1);\n      }\n    },\n    async loadDateTasks(selectedDateInput = false) {\n      this.isLoading = true;\n      const selectedDate = (() => {\n        if (selectedDateInput instanceof Date) {\n          this.selectedDate = selectedDateInput;\n        } else if (this.$refs.calendario) {\n          this.selectedDate = this.$refs.calendario.getValue();\n        }\n        console.log(this.selectedDate);\n        return this.selectedDate;\n      })();\n      console.log(\"Decidiendo selectedDate\", selectedDate)\n      const selectedDateTasks = await this.$lsw.database.selectMany(\"Accion\", valueBrute => {\n        try {\n          const valueList = LswTimer.parser.parse(valueBrute.tiene_inicio);\n          const value = valueList[0];\n          const isSameYear = value.anio === selectedDate.getFullYear();\n          const isSameMonth = value.mes === (selectedDate.getMonth() + 1);\n          const isSameDay = value.dia === selectedDate.getDate();\n          const isAccepted = isSameYear && isSameMonth && isSameDay;\n          return isAccepted;\n        } catch (error) {\n          return true;\n        }\n      });\n      Constitute_date_tasks_as_required: {\n        if (this.selectedSorterStrategy === false) {\n          this.selectedDateTasks = selectedDateTasks;\n          this.selectedDateTasksSorted = selectedDateTasks.sort((accion1, accion2) => {\n            let inicio1 = undefined;\n            let inicio2 = undefined;\n            try {\n              inicio1 = LswTimer.utils.fromDatestringToDate(accion1.tiene_inicio);\n            } catch (error) {\n              return 1;\n            }\n            try {\n              inicio2 = LswTimer.utils.fromDatestringToDate(accion2.tiene_inicio);\n            } catch (error) {\n              return -1;\n            }\n            if (inicio1 < inicio2) {\n              return -1;\n            } else if (inicio1 > inicio2) {\n              return 1;\n            } else {\n              return -1;\n            }\n          });\n        } else if (this.selectedSorterStrategy === \"despues\") {\n          this.selectedDateTasks = selectedDateTasks;\n          this.selectedSorterMoment = new Date();\n          Mostramos_las_tareas_de_la_hora_actual_en_adelante: {\n            this.selectedSorterMoment.setMinutes(0);\n          }\n          this.selectedDateTasksSorted = selectedDateTasks.filter(accion => {\n            const dateInicio = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n            try {\n              return this.selectedSorterMoment <= dateInicio;\n            } catch (error) {\n              console.log(error);\n              return false;\n            }\n          }).sort((accion1, accion2) => {\n            let inicio1 = undefined;\n            let inicio2 = undefined;\n            try {\n              inicio1 = LswTimer.utils.fromDatestringToDate(accion1.tiene_inicio);\n            } catch (error) {\n              return 1;\n            }\n            try {\n              inicio2 = LswTimer.utils.fromDatestringToDate(accion2.tiene_inicio);\n            } catch (error) {\n              return -1;\n            }\n            if (inicio1 < inicio2) {\n              return -1;\n            } else if (inicio1 > inicio2) {\n              return 1;\n            } else {\n              return -1;\n            }\n          });\n        } else if (this.selectedSorterStrategy === \"antes\") {\n          this.selectedDateTasks = selectedDateTasks;\n          this.selectedSorterMoment = new Date();\n          this.selectedDateTasksSorted = selectedDateTasks.filter(accion => {\n            const dateInicio = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n            try {\n              return this.selectedSorterMoment >= dateInicio;\n            } catch (error) {\n              console.log(error);\n              return false;\n            }\n          }).sort((accion1, accion2) => {\n            let inicio1 = undefined;\n            let inicio2 = undefined;\n            try {\n              inicio1 = LswTimer.utils.fromDatestringToDate(accion1.tiene_inicio);\n            } catch (error) {\n              return 1;\n            }\n            try {\n              inicio2 = LswTimer.utils.fromDatestringToDate(accion2.tiene_inicio);\n            } catch (error) {\n              return -1;\n            }\n            if (inicio1 < inicio2) {\n              return 1;\n            } else if (inicio1 > inicio2) {\n              return -1;\n            } else {\n              return 1;\n            }\n          });\n        }\n        this.$nextTick(() => {\n          this.isLoading = false;\n        });\n      }\n    },\n    showAllHours() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.showAllHours\");\n      this.hiddenDateHours = [];\n    },\n    hideAllHours() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.hideAllHours\");\n      this.hiddenDateHours = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\"];\n    },\n    sameDayPendingAndAutogeneratedFilter(currentDate) {\n      return (accion) => {\n        try {\n          const accionDate = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n          const sameYear = currentDate.getFullYear() === accionDate.getFullYear();\n          const sameMonth = currentDate.getMonth() === accionDate.getMonth();\n          const sameDay = currentDate.getDate() === accionDate.getDate();\n          const isPendiente = accion.tiene_estado === \"pendiente\";\n          const isAutogenerated = accion.tiene_parametros.startsWith(\"[*autogenerada]\");\n          const isValid = sameYear && sameMonth && sameDay && isPendiente && isAutogenerated;\n          if (isValid) {\n            console.log(\"!!!\", accion.en_concepto);\n          } else {\n            console.log(\"sameYear, sameMonth, sameDay, isPendiente\");\n            console.log(\"Fallo:\", sameYear, sameMonth, sameDay, isPendiente, isAutogenerated);\n          }\n          return isValid;\n        } catch (error) {\n          console.log(error);\n          return false;\n        }\n      }\n    },\n    async cleanRandomizedDays() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.cleanRandomizedDays\");\n      this.hideRandomizer();\n      const currentDate = this.selectedDate || new Date();\n      const filterAutogeneratedPendingOfCurrentDate = this.sameDayPendingAndAutogeneratedFilter(currentDate);\n      const matchedAcciones = await this.$lsw.database.selectMany(\"Accion\", filterAutogeneratedPendingOfCurrentDate);\n      if (!matchedAcciones.length) {\n        return this.$lsw.toasts.send({\n          title: \"No hay acciones randomizadas\",\n          text: \"Niniguna acción fue eliminada por ello.\"\n        });\n      }\n      const respuesta = await this.$lsw.dialogs.open({\n        title: \"Eliminar registros randomizados\",\n        template: `<div>\n                    <div class=\"pad_1\">\n                    <div>¿Estás seguro que quieres eliminar los registros randomizados?</div>\n                    <div>Se eliminarán {{ accionesToDelete.length }} registros de acciones randomizados de hoy.</div>\n                    <hr />\n                    <div class=\"flex_row pad_1\">\n                        <div class=\"flex_100\"></div>\n                        <div class=\"flex_1 pad_left_1\">\n                        <button v-on:click=\"() => accept(true)\" class=\"supermini danger_button\">Eliminar</button>\n                        </div>\n                        <div class=\"flex_1 pad_left_1\">\n                        <button v-on:click=\"cancel\" class=\"supermini\">Cancelar</button>\n                        </div>\n                    </div>\n                    </div>\n                </div>`,\n        factory: {\n          data: {\n            accionesToDelete: matchedAcciones\n          }\n        }\n      });\n      if (respuesta !== true) return;\n      await this.$lsw.database.deleteMany(\"Accion\", filterAutogeneratedPendingOfCurrentDate);\n      await this.loadDateTasks(currentDate);\n    },\n    async randomizeDay() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.randomizeDay\");\n      this.hideRandomizer();\n      const respuesta = await this.$dialogs.open({\n        title: \"Cuestionario de randomizar día\",\n        template: `<div>\n            <div class=\"pad_1 pad_bottom_0\">\n                <div class=\"pad_1 pad_bottom_0\">¿Qué duración quieres para las acciones de randomizado de día?</div>\n                <div class=\"pad_1 pad_top_2 pad_bottom_0\">\n                    <lsw-duration-control ref=\"duracion\" :settings=\"{name:'duracion',initialValue:'20min'}\" :skip-label=\"true\" />\n                </div>\n                <hr />\n                <div class=\"pad_1 pad_bottom_0\">¿Desde qué hora quieres randomizar? Mínimo: 0.</div>\n                <div class=\"pad_1 pad_top_2 pad_bottom_0\">\n                    <lsw-text-control ref=\"hora_inicio\" :settings=\"{name:'hora_inicio',initialValue:currentHour}\" :skip-label=\"true\" />\n                </div>\n                <hr />\n                <div class=\"pad_1 pad_bottom_0\">¿Hasta qué hora quieres randomizar? Máximo: 24</div>\n                <div class=\"pad_1 pad_top_2 pad_bottom_0\">\n                    <lsw-text-control ref=\"hora_final\" :settings=\"{name:'hora_final',initialValue:'24'}\" :skip-label=\"true\" />\n                </div>\n            </div>\n            <div class=\"box_error_layout\" v-if=\"error\">\n                <hr/>\n                <div class=\"box_error_container error_is_affecting_field\" v-on:click=\"() => setError(false)\">\n                    <div class=\"box_error_content\">{{ error.name }}: {{ error.message }}</div>\n                </div>\n            </div>\n            <hr />\n            <div class=\"text_align_right pad_right_1\">\n                <button class=\"supermini danger_button\" v-on:click=\"submit\">Randomizar día</button>\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n            </div>\n        </div>`,\n        factory: {\n          data: {\n            error: false,\n            currentHour: (new Date()).getHours() + \"\",\n          },\n          methods: {\n            setError(error) {\n              this.error = error;\n            },\n            submit() {\n              this.$trace(\"Dialogs.randomizar_dia.methos.submit\");\n              try {\n                const valor = this.$refs.duracion.value;\n                const ast = LswTimer.parser.parse(valor);\n                const esValido = (valor.trim() !== \"\") && (typeof ast[0] === \"object\") && (ast[0].tipo === \"Duracion\");\n                if (!esValido) return;\n                this.value = {\n                  duracion: valor,\n                  hora_inicio: parseInt(this.$refs.hora_inicio.value),\n                  hora_final: parseInt(this.$refs.hora_final.value),\n                };\n                if (this.value.hora_inicio < 0) {\n                  throw new Error(\"Hora de inicio debe ser mayor que 0\");\n                }\n                if (this.value.hora_inicio > 24) {\n                  throw new Error(\"Hora de inicio debe ser menor o igual que 24\");\n                }\n                if (this.value.hora_final < 0) {\n                  throw new Error(\"Hora de final debe ser mayor que 0\");\n                }\n                if (this.value.hora_final > 24) {\n                  throw new Error(\"Hora de final debe ser menor o igual que 24\");\n                }\n                return this.accept();\n              } catch (error) {\n                console.log(error);\n                this.setError(error);\n              }\n            }\n          }\n        }\n      });\n      const {\n        duracion: duracion_de_bloques,\n        hora_inicio,\n        hora_final\n      } = respuesta;\n      if (typeof duracion_de_bloques !== \"string\") return;\n      const currentDate = this.selectedDate;\n      const accionesDelDia = await this.$lsw.database.select(\"Accion\", accion => {\n        try {\n          const accionDate = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n          const sameYear = currentDate.getFullYear() === accionDate.getFullYear();\n          const sameMonth = currentDate.getMonth() === accionDate.getMonth();\n          const sameDay = currentDate.getDate() === accionDate.getDate();\n          const isNotPendiente = accion.tiene_estado !== \"pendiente\";\n          const isValid = sameYear && sameMonth && sameDay && isNotPendiente;\n          return isValid;\n        } catch (error) {\n          console.log(error);\n          return false;\n        }\n      });\n      const momentoInicio = new Date(this.selectedDate);\n      Configurar_hora_de_inicio: {\n        momentoInicio.setHours(hora_inicio);\n        momentoInicio.setMinutes(0);\n        momentoInicio.setSeconds(0);\n        momentoInicio.setMilliseconds(0);\n      }\n      const momentoFinal = new Date(this.selectedDate);\n      Configurar_hora_de_final: {\n        momentoFinal.setHours(hora_final - 1);\n        momentoFinal.setMinutes(0);\n        momentoFinal.setSeconds(0);\n        momentoFinal.setMilliseconds(0);\n      }\n      const randomizableRules = await this.$lsw.fs.evaluateAsDotenvFileOrReturn(\"/kernel/settings/randomizables.env\", {});\n      const accionesAutogeneradas = LswAgendaRandomizer.generar(\n        randomizableRules,\n        accionesDelDia,\n        momentoInicio,\n        duracion_de_bloques,\n        momentoFinal,\n        0.2\n      );\n      accionesAutogeneradas.forEach(accion => {\n        delete accion.id;\n        accion.tiene_estado = \"pendiente\";\n        accion.tiene_parametros = (\"[*autogenerada] \" + (accion.tiene_parametros.replace(/^\\[\\*autogenerada\\]/g, \"\"))).trim();\n      });\n      Insertar_rows: {\n        await this.$lsw.database.insertMany(\"Accion\", accionesAutogeneradas);\n        await this.loadDateTasks(this.selectedDate);\n      }\n    },\n    async openDeleteTaskDialog(tarea, e) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.openDeleteTaskDialog\");\n      const confirmed = await Vue.prototype.$dialogs.open({\n        title: \"Eliminar registro\",\n        template: `\n          <div>\n            <div class=\"pad_2\">¿Seguro que quieres eliminar el registro?</div>\n            <hr class=\"margin_0\" />\n            <div class=\"pad_2 text_align_right\">\n              <button class=\"supermini danger_button\" v-on:click=\"() => accept(true)\">Eliminar</button>\n              <button class=\"supermini \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        `,\n      });\n      if (!confirmed) return false;\n      await this.$lsw.database.delete(\"Accion\", tarea.id);\n      this.selectedForm = undefined;\n      this.loadDateTasks();\n    },\n    async onUpdateTask(v, tarea) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.onUpdateTask\");\n      await this.$lsw.database.update('Accion', tarea.id, v);\n      this.selectedForm = tarea.id;\n      this.loadDateTasks();\n    },\n    openNewRowDialog() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.openNewRowDialog\");\n      const that = this;\n      this.$lsw.dialogs.open({\n        title: \"Crear acción\",\n        template: `\n          <lsw-schema-based-form\n            :on-submit=\"v => onInsertTask(v)\"\n            :on-delete-row=\"loadDateTasks\"\n            :overriden-values=\"{\n              tiene_estado: 'pendiente',\n              tiene_inicio: $lsw.timer.utils.formatDatestringFromDate(selectedDate, 1)\n              + ' '\n              + $lsw.timer.utils.fromDateToHour(selectedDate, true)\n            }\"\n            :model=\"{\n              connection: $lsw.database,\n              databaseId: 'lsw_default_database',\n              rowId: -1,\n              tableId: 'Accion',\n            }\"\n          />\n        `,\n        factory: {\n          data: {\n            selectedDate: that.selectedDate,\n          },\n          methods: {\n            onInsertTask(v) {\n              that.onInsertTask(v)\n              this.cancel();\n            },\n            loadDateTasks() {\n              that.loadDateTasks();\n              this.cancel();\n            },\n          }\n        }\n      });\n    },\n    openEditRowDialog(accion) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.openEditRowDialog\");\n      const that = this;\n      this.$lsw.dialogs.open({\n        title: \"Editar acción\",\n        template: `\n\n          <lsw-schema-based-form\n            :on-submit=\"v => onUpdateTask(v, accion)\"\n            :on-delete-row=\"loadDateTasks\"\n            :overriden-values=\"{\n                tiene_inicio: accion.tiene_inicio\n            }\"\n            :model=\"{\n                connection: $lsw.database,\n                databaseId: 'lsw_default_database',\n                rowId: accion.id,\n                tableId: 'Accion',\n            }\"\n          />\n        `,\n        factory: {\n          data: {\n            accion,\n            selectedDate: that.selectedDate,\n          },\n          methods: {\n            onUpdateTask(v, accion) {\n              that.onUpdateTask(v, accion);\n              this.cancel();\n            },\n            loadDateTasks() {\n              that.loadDateTasks();\n              this.cancel();\n            },\n          }\n        }\n      });\n    },\n    getDateIcon(someDate) {\n      const theDate = someDate.getDate();\n      if (theDate === 30) return \"🐶\";\n      if (theDate === 29) return \"🐱\";\n      if (theDate === 28) return \"🐭\";\n      if (theDate === 27) return \"🐹\";\n      if (theDate === 26) return \"🐰\";\n      if (theDate === 25) return \"🦊\";\n      if (theDate === 24) return \"🐻\";\n      if (theDate === 23) return \"🐼\";\n      if (theDate === 22) return \"🐻‍❄️\";\n      if (theDate === 21) return \"🐨\";\n      if (theDate === 20) return \"🐯\";\n      if (theDate === 19) return \"🦁\";\n      if (theDate === 18) return \"🐮\";\n      if (theDate === 17) return \"🐷\";\n      if (theDate === 16) return \"🐽\";\n      if (theDate === 15) return \"🐸\";\n      if (theDate === 14) return \"🐵\";\n      if (theDate === 13) return \"🙈\";\n      if (theDate === 12) return \"🙉\";\n      if (theDate === 11) return \"🙊\";\n      if (theDate === 10) return \"🐒\";\n      if (theDate === 9) return \"🐔\";\n      if (theDate === 8) return \"🐧\";\n      if (theDate === 7) return \"🐦\";\n      if (theDate === 6) return \"🐦‍⬛\";\n      if (theDate === 5) return \"🐤\";\n      if (theDate === 4) return \"🐣\";\n      if (theDate === 3) return \"🐥\";\n      if (theDate === 2) return \"🦆\";\n      if (theDate === 1) return \"🦅\";\n      return \"⭐️\";\n    },\n  },\n  watch: {\n\n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-agenda-acciones-viewer.mounted\");\n      await this.loadDateTasks();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaAccionesViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-breadcrumb/lsw-agenda-breadcrumb.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 150,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaBreadcrumb API » LswAgendaBreadcrumb component",
      "$code": "Vue.component(\"LswAgendaBreadcrumb\", {\n  name: \"LswAgendaBreadcrumb\",\n  template: $template,\n  props: {\n    agenda: {\n      type: Object,\n      default: () => null\n    },\n    pathItems: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    this.$trace(\"lsw-agenda-breadcrumb.data\");\n    return {\n      \n    };\n  },\n  methods: {\n    goToSection(section) {\n      this.$trace(\"lsw-agenda-breadcrumb.methods.goToSection\");\n      if(this.agenda) {\n        this.agenda.selectContext(section);\n      }\n    }\n  },\n  watch: {\n\n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-agenda-breadcrumb.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaBreadcrumb API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-concepto-add/lsw-agenda-concepto-add.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 153,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaConceptoAdd API » LswAgendaConceptoAdd component",
      "$code": "Vue.component(\"LswAgendaConceptoAdd\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-concepto-add.data\");\n    return {\n      // \n    };\n  },\n  methods: {\n    async insertConcepto(v) {\n      this.$trace(\"lsw-agenda-concepto-add.methods.insertConcepto\");\n      await this.$lsw.database.insert(\"Concepto\", v);\n      // *@TODO: should redirect\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-concepto-add.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaConceptoAdd API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-concepto-search/lsw-agenda-concepto-search.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 162,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaConceptoSearch API » LswAgendaConceptoSearch component",
      "$code": "Vue.component(\"LswAgendaConceptoSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-concepto-search.data\");\n    return {\n      isLoaded: false,\n    };\n  },\n  methods: {\n    async loadRows() {\n      this.$trace(\"lsw-agenda-concepto-search.methods.loadRows\");\n      this.rows = await this.$lsw.database.selectMany(\"Concepto\", it => true);\n      this.isLoaded = true;\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-concepto-search.mounted\");\n      this.loadRows();\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaConceptoSearch API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-evento-search/lsw-agenda-evento-search.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 156,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaEventoSearch API » LswAgendaEventoSearch component",
      "$code": "Vue.component(\"LswAgendaEventoSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-evento-search.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-evento-search.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaEventoSearch API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-form/lsw-agenda-form.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 132,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaForm API » LswAgendaForm component",
      "$code": "Vue.component(\"LswAgendaForm\", {\n  template: $template,\n  props: {\n    formMetadata: {\n      type: Object,\n      required: true,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-agenda-form.data\");\n    this.validateFormMetadata(this.formMetadata);\n    return {\n      expandedExplanations: [],\n      formScope: {},\n      formState: {}\n    };\n  },\n  methods: {\n    validateFormMetadata(v) {\n      const isObject = typeof v === \"object\";\n      const hasFormAsObject = typeof v.form === \"object\";\n      const hasFieldsAsArray = Array.isArray(v.fields);\n      if(!isObject) {\n        throw new Error(\"Required parameter «formMetadata» to be an object on «LswAgendaForm.methods.validateFormMetadata»\");\n      }\n      if(!hasFormAsObject) {\n        throw new Error(\"Required parameter «formMetadata.form» to be an object on «LswAgendaForm.methods.validateFormMetadata»\");\n      }\n      if(!hasFieldsAsArray) {\n        throw new Error(\"Required parameter «formMetadata.fields» to be an array on «LswAgendaForm.methods.validateFormMetadata»\");\n      }\n    },\n    toggleExplanation(id) {\n      const pos = this.expandedExplanations.indexOf(id);\n      if(pos === -1) {\n        this.expandedExplanations.push(id);\n      } else {\n        this.expandedExplanations.splice(pos, 1);\n      }\n    },\n    loadFields() {\n      this.$window.F = this.$refs.agenda_form;\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-form.mounted\");\n      this.loadFields();\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaForm API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-impresion-add/lsw-agenda-impresion-add.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 156,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaImpresionAdd API » LswAgendaImpresionAdd component",
      "$code": "Vue.component(\"LswAgendaImpresionAdd\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-impresion-add.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-impresion-add.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaImpresionAdd API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-impresion-search/lsw-agenda-impresion-search.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 165,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaImpresionSearch API » LswAgendaImpresionSearch component",
      "$code": "Vue.component(\"LswAgendaImpresionSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-impresion-search.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-impresion-search.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaImpresionSearch API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-infraccion-search/lsw-agenda-infraccion-search.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 168,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaInfraccionSearch API » LswAgendaInfraccionSearch component",
      "$code": "Vue.component(\"LswAgendaInfraccionSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-infraccion-search.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-infraccion-search.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaInfraccionSearch API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-limitador-add/lsw-agenda-limitador-add.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 156,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaLimitadorAdd API » LswAgendaLimitadorAdd component",
      "$code": "Vue.component(\"LswAgendaLimitadorAdd\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-limitador-add.data\");\n    return {\n      // \n    };\n  },\n  methods: {\n    async insertLimitador(v) {\n      this.$trace(\"lsw-agenda-limitador-add.methods.insertLimitador\");\n      await this.$lsw.database.insert(\"Limitador\", v);\n      // *@TODO: should redirect\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-limitador-add.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaLimitadorAdd API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-limitador-search/lsw-agenda-limitador-search.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 165,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaLimitadorSearch API » LswAgendaLimitadorSearch component",
      "$code": "Vue.component(\"LswAgendaLimitadorSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-limitador-search.data\");\n    return {\n      isLoaded: false,\n    };\n  },\n  methods: {\n    async loadRows() {\n      this.$trace(\"lsw-agenda-limitador-search.methods.loadRows\");\n      this.rows = await this.$lsw.database.selectMany(\"Limitador\", it => true);\n      this.isLoaded = true;\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-limitador-search.mounted\");\n      this.loadRows();\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaLimitadorSearch API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-limitador-viewer/lsw-agenda-limitador-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 165,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaLimitadorViewer API » LswAgendaLimitadorViewer component",
      "$code": "Vue.component(\"LswAgendaLimitadorViewer\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-limitador-viewer.data\");\n    return {\n      isLoaded: false,\n      limitadores: undefined,\n      infracciones: [],\n    };\n  },\n  methods: {\n    fixAsyncCode(asyncCode) {\n      if(asyncCode.trim().startsWith(\"async \")) {\n        return `return await (${asyncCode}).call(this)`\n      }\n      return asyncCode;\n    },\n    async executeLimitadores() {\n      const lims = this.limitadores;\n      for(let index=0; index<lims.length; index++) {\n        const limitador = lims[index];\n        const asyncCode = limitador.tiene_funcion;\n        const AsyncFunc = (async function() {}).constructor;\n        const fixedAsyncCode = this.fixAsyncCode(asyncCode);\n        const asyncFunc = new AsyncFunc(fixedAsyncCode);\n        console.log(asyncFunc);\n        try {\n          await asyncFunc.call(this);\n        } catch (error) {\n          this.infracciones.push(error);\n        }\n      }\n    },\n    async loadLimitadores() {\n      this.$trace(\"lsw-agenda-limitador-viewer.methods.loadLimitadores\");\n      const limitadores = await this.$lsw.database.selectMany(\"Limitador\");\n      this.limitadores = limitadores;\n      await this.executeLimitadores();\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-agenda-limitador-viewer.mounted\");\n      await this.loadLimitadores();\n      this.isLoaded = true;\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaLimitadorViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-postimpresion-search/lsw-agenda-postimpresion-search.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 177,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaPostimpresionSearch API » LswAgendaPostimpresionSearch component",
      "$code": "Vue.component(\"LswAgendaPostimpresionSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-postimpresion-search.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-postimpresion-search.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaPostimpresionSearch API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-propagacion-search/lsw-agenda-propagacion-search.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 171,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaPropagacionSearch API » LswAgendaPropagacionSearch component",
      "$code": "Vue.component(\"LswAgendaPropagacionSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-propagacion-search.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-propagacion-search.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaPropagacionSearch API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-propagador-search/lsw-agenda-propagador-search.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 168,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaPropagadorSearch API » LswAgendaPropagadorSearch component",
      "$code": "Vue.component(\"LswAgendaPropagadorSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-propagador-search.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-propagador-search.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswAgendaPropagadorSearch API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-bars-graph/components/lsw-bars-graph-bar/lsw-bars-graph-bar.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 100,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswBarsGraphBar component",
      "$code": "Vue.component(\"LswBarsGraphBar\", {\n  template: $template,\n  props: {\n    value: {\n      type: Number,\n      required: true,\n    },\n    text: {\n      type: [String, Boolean],\n      required: true,\n    },\n    onClick: {\n      type: Function,\n      default: () => {},\n    },\n    color: {\n      type: [String, Boolean],\n      default: () => false\n    }\n  },\n  data() {\n    this.$trace(\"lsw-bars-graph-bar.data\");\n    return {\n      \n    };\n  },\n  methods: {\n    \n  },\n  mounted() {\n    this.$trace(\"lsw-bars-graph-bar.mounted\");\n    \n  },\n  unmount() {\n    this.$trace(\"lsw-bars-graph-bar.unmounted\");\n  }\n});\n",
      "$code.label": "LswBarsGraphBar API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-form-builder/lsw-form-builder.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 118,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswFormBuilder component",
      "$code": "Vue.component(\"LswFormBuilder\", {\n  template: $template,\n  props: {\n    validate: {\n      type: Object,\n      default: () => ({})\n    },\n    submit: {\n      type: Object,\n      default: () => ({})\n    },\n    fields: {\n      type: Array,\n      required: true,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-form-builder.data\");\n    this.formatFields();\n    return {\n      formMetadata: false,\n    };\n  },\n  methods: {\n    setError(error) {\n      this.$trace(\"lsw-form-builder.setError\");\n      this.error = error;\n    },\n    formatFields(value = this.fields) {\n      this.$trace(\"lsw-form-builder.formatFields\");\n      try {\n        const $outterScope = {};\n        if (value.length === 0) {\n          throw new Error(\"Required property «prop.fields» to be an array on «LswFormBuilder.props.fields.validator»\");\n        }\n        const fields = [];\n        const form = {\n          scope: $outterScope,\n          id: \"form.default\"\n        };\n        const metadata = { fields, form, scope: $outterScope };\n        form.vForm = {\n          selfScope: $outterScope,\n          selfId: form.id,\n          onValidate: typeof this.validate.onClick === 'function' ? this.validate.onClick : this.$noop,\n          onSubmit: typeof this.submit.onClick === 'function' ? this.submit.onClick : this.$noop,\n        }\n        for (let index = 0; index < value.length; index++) {\n          const row = value[index];\n          if (typeof row !== \"object\") {\n            throw new Error(`Required all rows on «prop.fields» to be an object but row «${index}» does not on «LswFormBuilder.props.fields.validator»`)\n          }\n          if (!(\"type\" in row)) {\n            throw new Error(`Required all rows on «prop.fields» to have property «type» but row «${index}» does not on «LswFormBuilder.props.fields.validator»`)\n          }\n          if (typeof row.type !== \"string\") {\n            throw new Error(`Required all rows on «prop.fields» to have property «type» as a string but row «${index}» does not on «LswFormBuilder.props.fields.validator»`)\n          }\n          if (!(\"name\" in row)) {\n            throw new Error(`Required all rows on «prop.fields» to have property «name» but row «${index}» does not on «LswFormBuilder.props.fields.validator»`)\n          }\n          if (typeof row.name !== \"string\") {\n            throw new Error(`Required all rows on «prop.fields» to have property «name» as a string but row «${index}» does not on «LswFormBuilder.props.fields.validator»`)\n          }\n          const $innerScope = {};\n          row.vForm = {\n            parentScope: $outterScope,\n            parentId: metadata.form.id,\n            selfScope: $innerScope,\n            selfId: row.name,\n            name: row.name,\n          };\n          if (row.type === \"point\") {\n            row.dimensions = [];\n            row.vFormForPoint = {\n              parentScope: $innerScope,\n              parentId: row.name,\n              selfScope: $innerScope,\n              selfId: \"point.control\",\n              name: null,\n            };\n            row.dimensions = [{\n              label: \"Axis 1:\",\n              vForm: {\n                parentScope: $innerScope,\n                parentId: \"point.control\",\n                name: \"axis_1\"\n              }\n            }, {\n              label: \"Axis 2:\",\n              vForm: {\n                parentScope: $innerScope,\n                parentId: \"point.control\",\n                name: \"axis_2\"\n              }\n            }];\n            if (row.dimensions.length < 2) {\n              throw new Error(`Required property «row.dimensions» to have more than 1 item on row «${index}» on «adaptRowToVForm»`);\n            }\n            for (let indexDimension = 0; indexDimension < row.dimensions.length; indexDimension++) {\n\n            }\n          }\n          fields.push(row);\n        }\n        this.formMetadata = Object.freeze(metadata);\n      } catch (error) {\n        console.log(error);\n        this.setError(error);\n      }\n    },\n    adaptRowToVForm(row, metadata, indexRow) {\n      this.$trace(\"lsw-form-builder.adaptRowToVForm\");\n\n    }\n  },\n  watch: {},\n  mount() {\n    try {\n      this.$trace(\"lsw-form-builder.mount\");\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  mounted() {\n    try {\n      this.$trace(\"lsw-form-builder.mounted\");\n      this.formatFields();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswFormBuilder API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-volatile-db/components/lsw-volatile-ui/lsw-volatile-ui.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 96,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » LswVolatileUi component",
      "$code": "Vue.component(\"LswVolatileUi\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-volatile-ui.data\");\n    return {\n      // BUTTONS:\n      tablePageButtons: [\n        { text: '⬅️ Atrás', event: () => this.selectPage('tables'), },\n        { text: 'Fila ➕', event: this.openCreateRowDialog, }\n      ],\n      tablesPageButtons: [\n        { text: 'Tabla ➕', event: this.openCreateTableDialog }\n      ],\n      // STATE:\n      currentPage: \"tables\",\n      currentTable: false,\n      isMetadataLoaded: false,\n      isDataLoaded: false,\n      isExpandedRow: {},\n      // METADATA:\n      allTables: false,\n      // DATA:\n      allRows: false,\n    };\n  },\n  methods: {\n    expandValue(table, rowId) {\n      this.$trace(\"lsw-volatile-ui.methods.expandValue\");\n      this.isExpandedRow[table + \"::\" + rowId] = true;\n      this.$forceUpdate(true);\n    },\n    unexpandValue(table, rowId) {\n      this.$trace(\"lsw-volatile-ui.methods.unexpandValue\");\n      this.isExpandedRow[table + \"::\" + rowId] = false;\n      this.$forceUpdate(true);\n    },\n    loadData() {\n      this.$trace(\"lsw-volatile-ui.methods.loadData\");\n      this.isDataLoaded = false;\n      this.allRows = LswVolatileDB.global.data[this.currentTable].selectAll();\n      this.$nextTick(() => {\n        this.isDataLoaded = true;\n      });\n    },\n    loadMetadata() {\n      this.$trace(\"lsw-volatile-ui.methods.loadMetadata\");\n      this.isMetadataLoaded = false;\n      this.allTables = LswVolatileDB.global.getSchema({ sorted: true });\n      this.$nextTick(() => {\n        this.isMetadataLoaded = true;\n      });\n    },\n    selectPage() {\n      this.$trace(\"lsw-volatile-ui.methods.selectPage\");\n      this.currentPage = \"tables\";\n      this.currentTable = undefined;\n    },\n    selectTable(tableId) {\n      this.$trace(\"lsw-volatile-ui.methods.selectTable\");\n      this.currentTable = tableId;\n      this.currentPage = \"table\";\n      this.loadData();\n    },\n    async openCreateTableDialog() {\n      this.$trace(\"lsw-volatile-ui.methods.openCreateTableDialog\");\n      const tableId = await this.$lsw.dialogs.open({\n        title: \"Crear tabla volátil\",\n        template: `\n          <div class=\"pad_1\">\n            <div>Especifica el nombre de la tabla:</div>\n            <input class=\"width_100\" type=\"text\" v-model=\"value\" v-on:keypress.enter=\"accept\" v-focus />\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `\n      });\n      if(typeof tableId !== 'string') return;\n      if(tableId.trim() === '') return;\n      LswVolatileDB.global.createTable(tableId);\n      this.loadMetadata();\n    },\n    async openCreateRowDialog() {\n      this.$trace(\"lsw-volatile-ui.methods.openCreateRowDialog\");\n      const rowData = await this.$lsw.dialogs.open({\n        title: \"Crear fila volátil\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\">Propiedades:</div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini width_100\" v-on:click=\"increasePropiedades\">➕ Nueva propiedad</button>\n              </div>\n            </div>\n            <div class=\"propiedades_list\">\n              <div class=\"propiedad_item\"\n                v-for=\"propiedad, propIndex in propiedades\"\n                v-bind:key=\"'propiedad_' + propIndex\">\n                <div class=\"flex_row centered\">\n                  <div class=\"flex_100\">Propiedad:</div>\n                  <div class=\"flex_1 pad_left_1\">\n                    <button class=\"supermini\" v-on:click=\"deletePropiedad(propIndex)\">❌</button>\n                  </div>\n                </div>\n                <div class=\"pad_vertical_1\">\n                  <input class=\"supermini width_100\" type=\"text\" v-model=\"propiedades[propIndex].nombre\" />\n                </div>\n                <div>Valor:</div>\n                <textarea class=\"width_100\" v-model=\"propiedades[propIndex].valor\" spellcheck=\"false\" />\n              </div>\n            </div>\n            <div class=\"flex_row centered pad_top_1\" v-if=\"Object.keys(propiedades).length\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini width_100\" v-on:click=\"increasePropiedades\">➕ Nueva propiedad</button>\n              </div>\n            </div>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button v-on:click=\"() => accept(propiedades)\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            propiedades: []\n          },\n          methods: {\n            deletePropiedad(propIndex) {\n              this.$trace(\"lsw-volatile-ui.methods.openCreateRowDialog.Dialog.methods.deletePropiedad\");\n              this.propiedades.splice(propIndex, 1);\n            },\n            increasePropiedades() {\n              this.$trace(\"lsw-volatile-ui.methods.openCreateRowDialog.Dialog.methods.increasePropiedades\");\n              this.propiedades.push({\n                nombre: \"\",\n                valor: \"\",\n              });\n            }\n          }\n        }\n      });\n      if(!Array.isArray(rowData)) {\n        return; \n      }\n      const dataObject = this.fromArrayToObject(rowData, \"nombre\", \"valor\");\n      LswVolatileDB.global.data[this.currentTable].insert(dataObject);\n      this.loadData();\n    },\n    fromArrayToObject(rowData, propId, valId) {\n      this.$trace(\"lsw-volatile-ui.methods.fromArrayToObject\");\n      const output = {};\n      for(let index=0; index<rowData.length; index++) {\n        const rowDataItem = rowData[index];\n        const nombre = rowDataItem[propId];\n        const valor = rowDataItem[valId];\n        output[nombre] = valor;\n      }\n      return output;\n    },\n    deleteRow(table, rowId) {\n      this.$trace(\"lsw-volatile-ui.methods.deleteRow\");\n      LswVolatileDB.global.data[table].delete(rowId);\n      this.loadData();\n    },\n    async deleteTable(tableId) {\n      this.$trace(\"lsw-volatile-ui.methods.deleteTable\");\n      const confirmation = await this.$lsw.dialogs.open({\n        title: `Eliminando tabla`,\n        template: `\n          <div>\n            <div class=\"pad_1\">\n              <div class=\"pad_vertical_1\">¿Seguro que quieres eliminar tabla «{{ tableId }}»?</div>\n              <div class=\"pad_vertical_1\">Tiene «{{ rowsLength }}» filas dentro.</div>\n            </div>\n            <hr/>\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"danger_button\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            tableId,\n            rowsLength: Object.keys(LswVolatileDB.global.data[tableId].data).length,\n            value: true,\n          }\n        }\n      });\n      if(confirmation !== true) {\n        return;\n      }\n      delete LswVolatileDB.global.data[tableId];\n      LswVolatileDB.global.persist();\n      this.loadMetadata();\n    },\n    async openEditRowPropertyDialog(tableId, rowId, propertyId, currentValue) {\n      this.$trace(\"lsw-volatile-ui.methods.openEditRowPropertyDialog\");\n      const newValue = await this.$lsw.dialogs.open({\n        title: `Editando propiedad «${propertyId}» de ${tableId} #${rowId}`,\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"pad_vertical_1\">{{ tableId }}#{{ rowId }}/{{ propertyId }}</div>\n            <div class=\"pad_vertical_1\">Valor anterior:</div>\n            <div class=\"pad_vertical_1 cursor_pointer\" v-on:click=\"expandValue\" v-if=\"isNotExpanded\">\n              <b>{{ LswUtils.subtextualize(currentValue, 30) }}</b>\n            </div>\n            <div class=\"pad_vertical_1\" v-on:click=\"expandValue\" v-else>\n              <pre><b>{{ currentValue }}</b></pre>\n            </div>\n            <div class=\"pad_vertical_1\">\n              <div class=\"\">Valor nuevo:</div>\n            </div>\n            <div class=\"pad_vertical_1\">\n              <div class=\"\">\n                <textarea v-model=\"value\" v-focus spellcheck=\"false\" />\n              </div>\n            </div>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            isNotExpanded: true,\n            tableId,\n            rowId,\n            propertyId,\n            currentValue,\n            value: currentValue,\n          },\n          methods: {\n            expandValue() {\n              this.isNotExpanded = false;\n            }\n          }\n        }\n      });\n      if(typeof newValue !== \"string\") {\n        return;\n      }\n      LswVolatileDB.global.data[tableId].update(rowId, { [propertyId]: newValue });\n      this.loadData();\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-volatile-ui.mounted\");\n    this.loadMetadata();\n  },\n  unmount() {\n    this.$trace(\"lsw-volatile-ui.unmounted\");\n  }\n});\n",
      "$code.label": "LswVolatileUi API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/partials/lsw-control-error/lsw-control-error.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 120,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswControlError component",
      "$code": "Vue.component(\"LswControlError\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-control-error-control.data\");\n    return {\n      \n    };\n  },\n  methods: {\n    removeError() {\n      this.$trace(\"lsw-control-error-control.methods.removeError\");\n      this.$refs.errorBox.$xform.$clearError();\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-control-error-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswControlError API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/partials/lsw-control-label/lsw-control-label.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 120,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswControlLabel component",
      "$code": "Vue.component(\"LswControlLabel\", {\n  template: $template,\n  props: {\n    parentFormtype: {\n      type: Object,\n      required: false,\n    },\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-control-label-control.data\");\n    this.validateSettings();\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      isShowingDescription: false,\n      name: this.settings?.name,\n      label: (typeof (this.settings?.label) !== \"undefined\") ? this.settings.label : this.settings?.column?.hasLabel,\n      description: this.settings?.column?.hasDescription\n    };\n  },\n  methods: {\n    toggleDescription() {\n      this.isShowingDescription = !this.isShowingDescription;\n    },\n    validateSettings() {\n      this.$trace(\"lsw-control-label-control.methods.validateSettings\");\n      LswXForm.validateSettings(this.settings);\n      const ensureSettings = $ensure(this.settings);\n      const checkSettings = $check(this.settings);\n      // @OK\n    },\n    makeEditable() {\n      this.$trace(\"lsw-control-label-control.methods.makeEditable\");\n      Behaviour_for_controls: {\n        const immediateControl = LswVue2.getClosestParent(this, component => {\n          return component.$el.classList.contains(\"lsw_form_control\");\n        });\n        if (immediateControl) {\n          immediateControl.isEditable = true;\n          // immediateControl.$forceUpdate(true);\n        }\n      }\n      Behaviour_for_schema_forms: {\n        \n      }\n    },\n    makeUneditable() {\n      this.$trace(\"lsw-control-label-control.methods.makeUneditable\");\n      Behaviour_for_controls: {\n        const immediateControl = LswVue2.getClosestParent(this, component => {\n          return component.$el.classList.contains(\"lsw_form_control\");\n        });\n        if (immediateControl) {\n          immediateControl.isEditable = false;\n          // immediateControl.$forceUpdate(true);\n        }\n\n      }\n      Behaviour_for_schema_forms: {\n        \n      }\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-control-label-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswControlLabel API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/partials/lsw-error-viewer/lsw-error-viewer.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 130,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswSyntaxErrorViewer component",
      "$code": "Vue.component(\"LswSyntaxErrorViewer\", {\n  template: $template,\n  props: {\n    error: {\n      type: [Object, Boolean],\n      default: () => false\n    },\n    onClearError: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  data() {\n    this.$trace(\"lsw-syntax-error-viewer.data\");\n    return {\n      currentError: this.error,\n    };\n  },\n  methods: {\n    setError(error = undefined) {\n      this.$trace(\"lsw-syntax-error-viewer.methods.setError\");\n      this.currentError = error;\n      if(typeof error === \"undefined\") {\n        this.onClearError();\n      }\n    },\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-syntax-error-viewer.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSyntaxErrorViewer API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-boolean-control/lsw-boolean-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 124,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswBooleanControl component",
      "$code": "Vue.component(\"LswBooleanControl\", {\n  template: $template,\n  props: {\n    configurations: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    this.$trace(\"lsw-boolean-control.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-boolean-control.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswBooleanControl API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-button-action-control/lsw-button-action-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 134,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswButtonActionControl component",
      "$code": "Vue.component(\"LswButtonActionControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-button-action-control.data\");\n    this.validateSettings();\n    const value = this.settings?.initialValue || this.settings?.column.hasDefaultValue || \"\";\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value,\n      isEditable: true,\n    };\n  },\n  methods: {\n    async submit() {\n      this.$trace(\"lsw-text-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-button-action-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswButtonActionControl API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-date-control/lsw-date-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 118,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswDateControl component",
      "$code": "Vue.component(\"LswDateControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n    mode: {\n      type: String,\n      default: () => \"date\" // can be: date, datetime, time\n    }\n  },\n  data() {\n    this.$trace(\"lsw-date-control.data\");\n    this.validateMode();\n    this.validateSettings();\n    const respectivePlaceholder = this.generatePlaceholder();\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value: this.settings?.initialValue || this.settings?.column?.hasInitialValue?.call() || \"\",\n      isEditable: true,\n      isShowingCalendar: false,\n      respectivePlaceholder,\n      formMode: this.settings?.column?.isFormSubtype || this.mode || \"datetime\",\n    };\n  },\n  methods: {\n    toggleCalendar() {\n      this.$trace(\"LswDateControl.methods.toggleCalendar\", arguments);\n      this.isShowingCalendar = !this.isShowingCalendar;\n    },\n    generatePlaceholder() {\n      return this.settings.column.isFormSubtype === \"date\" ? 'Ej: 2025/01/01' :\n        this.settings.column.isFormSubtype === \"datetime\" ? 'Ej: 2025/01/01 00:00' :\n        this.settings.column.isFormSubtype === \"time\" ? 'Ej: 00:00' : ''\n    },\n    async submit() {\n      this.$trace(\"lsw-text-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n    },\n    validate() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    },\n    validateMode() {\n      this.$trace(\"lsw-date-control.methods.validateSettings\");\n      $ensure({mode: this.mode}, 1).to.be.oneOf([\"date\", \"time\", \"datetime\"]);\n    },\n    setValueFromCalendar(v) {\n      this.$trace(\"lsw-date-control.methods.setValueFromCalendar\");\n      console.log(\"Valor:\", v);\n      const value = LswTimer.utils.formatDatestringFromDate(v, false, false, true);\n      if(this.formMode === \"datetime\") {\n        this.value = value;\n      } else if(this.formMode === \"date\") {\n        this.value = value.split(\" \")[0];\n      } else if(this.formMode === \"time\") {\n        this.value = value.split(\" \")[1];\n      } else {\n        this.value = value;\n      }\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-date-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswDateControl API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-duration-control/lsw-duration-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 126,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswDurationControl component",
      "$code": "Vue.component(\"LswDurationControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n    skipLabel: {\n      type: Boolean,\n      default: () => false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-duration-control.data\");\n    this.validateSettings();\n    const value = this.settings?.initialValue || this.settings?.column?.hasDefaultValue || \"\";\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value,\n      isEditable: true,\n      isShowingDetails: true,\n      submitError: false,\n      validateError: false,\n    };\n  },\n  methods: {\n    async submit() {\n      this.$trace(\"lsw-text-control.methods.submit\");\n      try {\n        return LswFormtypes.utils.submitControl.call(this);\n      } catch (error) {\n        this.submitError = error;\n        throw error;\n      }\n    },\n    validate() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      try {\n        return LswFormtypes.utils.validateControl.call(this);\n      } catch (error) {\n        this.validateError = error;\n        throw error;\n      }\n    },\n    validateSettings() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    },\n    toggleDetails() {\n      this.$trace(\"lsw-duration-control.methods.toggleDetails\");\n      this.isShowingDetails = !this.isShowingDetails;\n    },\n    setValue(v) {\n      this.$trace(\"lsw-duration-control.methods.setValue\");\n      this.value = v;\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-duration-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswDurationControl API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-long-text-control/lsw-long-text-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 126,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswLongTextControl component",
      "$code": "Vue.component(\"LswLongTextControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-long-text-control.data\");\n    this.validateSettings();\n    const value = this.settings?.initialValue || this.settings?.column.hasDefaultValue || \"\";\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value,\n      isEditable: true,\n    };\n  },\n  methods: {\n    async submit() {\n      this.$trace(\"lsw-text-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-long-text-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswLongTextControl API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-number-control/lsw-number-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 122,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswNumberControl component",
      "$code": "Vue.component(\"LswNumberControl\", {\n  template: $template,\n  props: {\n    configurations: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    this.$trace(\"lsw-number-control.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-number-control.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswNumberControl API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-options-control/lsw-options-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 124,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswOptionsControl component",
      "$code": "Vue.component(\"LswOptionsControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-options-control.data\");\n    this.validateSettings();\n    const value = this.settings?.initialValue || this.settings?.column?.hasInitialValue?.call() || \"\";\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value,\n      isEditable: true,\n      parameters: this.settings?.hasFormtypeParameters || {}\n    };\n  },\n  methods: {\n    async submit() {\n      this.$trace(\"lsw-text-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n    },\n    validate() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-options-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswOptionsControl API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-ref-list-control/lsw-ref-list-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 124,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswRefListControl component",
      "$code": "Vue.component(\"LswRefListControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-ref-list-control.data\");\n    this.validateSettings();\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value: this.settings.initialValue || [],\n      isValueLoaded: false,\n      isEditable: true,\n      isShownSelector: false,\n      isShownInfo: false,\n      rows: []\n    };\n  },\n  methods: {\n    toggleSelector() {\n      this.$trace(\"lsw-ref-list-control.methods.toggleSelector\");\n      this.isShownSelector = !this.isShownSelector;\n    },\n    toggleInfo() {\n      this.$trace(\"lsw-ref-list-control.methods.toggleInfo\");\n      this.isShownInfo = !this.isShownInfo;\n    },\n    async submit() {\n      this.$trace(\"lsw-ref-list-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-ref-list-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-ref-list-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    },\n    async loadRows() {\n      this.$trace(\"lsw-page-rows.methods.loadRows\", arguments);\n      const selection = await this.$lsw.database.select(this.settings.column.refersTo.table, it => true);\n      this.rows = selection;\n      return selection;\n    },\n    async loadValue() {\n      this.$trace(\"lsw-ref-list-control.methods.loadValue\");\n      const selection = await this.$lsw.database.select(this.settings.tableId, it => true);\n    },\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-ref-list-control.mounted\");\n      await this.loadRows();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswRefListControl API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-ref-object-by-label-control/lsw-ref-object-by-label-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 142,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswRefObjectByLabelControl component",
      "$code": "Vue.component(\"LswRefObjectByLabelControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-ref-object-by-label-control.data\");\n    this.validateSettings();\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value: this.settings.initialValue || [],\n      isLoaded: false,\n      isValueLoaded: false,\n      isEditable: true,\n      isShownSelector: true,\n      isShownInfo: false,\n      rows: []\n    };\n  },\n  methods: {\n    toggleSelector() {\n      this.$trace(\"lsw-ref-object-by-label-control.methods.toggleSelector\");\n      this.isShownSelector = !this.isShownSelector;\n    },\n    toggleInfo() {\n      this.$trace(\"lsw-ref-object-by-label-control.methods.toggleInfo\");\n      this.isShownInfo = !this.isShownInfo;\n    },\n    async submit() {\n      this.$trace(\"lsw-ref-object-by-label-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-ref-object-by-label-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-ref-object-by-label-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    },\n    async loadRows() {\n      this.$trace(\"lsw-page-rows.methods.loadRows\", arguments);\n      const selection = await this.$lsw.database.select(this.settings.column.refersTo.table, it => true);\n      this.rows = selection;\n      this.isLoaded = true;\n      return selection;\n    },\n    async loadValue() {\n      this.$trace(\"lsw-ref-object-by-label-control.methods.loadValue\");\n      const selection = await this.$lsw.database.select(this.settings.tableId, it => true);\n    },\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-ref-object-by-label-control.mounted\");\n      await this.loadRows();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswRefObjectByLabelControl API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-ref-object-control/lsw-ref-object-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 128,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswRefObjectControl component",
      "$code": "Vue.component(\"LswRefObjectControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n    labelField: {\n      type: String,\n      required: true,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-ref-object-control.data\");\n    this.validateSettings();\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value: this.settings.initialValue || [],\n      isLoaded: false,\n      isValueLoaded: false,\n      isEditable: true,\n      isShownSelector: true,\n      isShownInfo: false,\n      rows: [],\n    };\n  },\n  methods: {\n    toggleSelector() {\n      this.$trace(\"lsw-ref-object-control.methods.toggleSelector\");\n      this.isShownSelector = !this.isShownSelector;\n    },\n    toggleInfo() {\n      this.$trace(\"lsw-ref-object-control.methods.toggleInfo\");\n      this.isShownInfo = !this.isShownInfo;\n    },\n    async submit() {\n      this.$trace(\"lsw-ref-object-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-ref-object-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-ref-object-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    },\n    async loadRows() {\n      this.$trace(\"lsw-page-rows.methods.loadRows\", arguments);\n      const selection = await this.$lsw.database.select(this.settings.column.refersTo.table, it => true);\n      this.rows = selection;\n      this.isLoaded = true;\n      return selection;\n    },\n    async loadValue() {\n      this.$trace(\"lsw-ref-object-control.methods.loadValue\");\n      const selection = await this.$lsw.database.select(this.settings.tableId, it => true);\n    },\n    selectRow(row) {\n      this.$trace(\"lsw-ref-object-control.methods.selectRow\");\n      this.value = row;\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-ref-object-control.mounted\");\n      await this.loadRows();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswRefObjectControl API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-ref-relation-control/lsw-ref-relation-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 132,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswRefRelationControl component",
      "$code": "Vue.component(\"LswRefRelationControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-ref-relation-control.data\");\n    this.validateSettings();\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value: this.settings?.initialValue || \"\",\n      isEditable: true,\n    };\n  },\n  methods: {\n    async submit() {\n      this.$trace(\"lsw-ref-relation-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-ref-relation-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-ref-relation-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-ref-relation-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswRefRelationControl API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-source-code-control/lsw-source-code-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 130,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswSourceCodeControl component",
      "$code": "Vue.component(\"LswSourceCodeControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n    skipLabel: {\n      type: Boolean,\n      default: () => false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-source-code-control.data\");\n    this.validateSettings();\n    const value = this.settings?.initialValue || this.settings?.column.hasDefaultValue || \"\";\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value,\n      isEditable: true,\n      currentFontsize: 10,\n      currentFontfamily: \"monospace\",\n    };\n  },\n  methods: {\n    increaseFontsize(points = 1) {\n      this.$trace(\"lsw-source-code-control.methods.increaseFontsize\");\n      this.currentFontsize += points;\n    },\n    alternateFontfamily() {\n      this.$trace(\"lsw-source-code-control.methods.alternateFontfamily\");\n      if(this.currentFontfamily === 'monospace') {\n        this.currentFontfamily = 'Arial';\n      } else {\n        this.currentFontfamily = 'monospace';\n      }\n    },\n    async submit() {\n      this.$trace(\"lsw-source-code-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-source-code-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-source-code-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-source-code-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswSourceCodeControl API",
      "$output": "index.html"
    },
    {
      "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-text-control/lsw-text-control.js",
      "$location": {
        "start": {
          "offset": 0,
          "line": 1,
          "column": 1
        },
        "end": {
          "offset": 118,
          "line": 2,
          "column": 1
        }
      },
      "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswTextControl component",
      "$code": "Vue.component(\"LswTextControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n    skipLabel: {\n      type: Boolean,\n      default: () => false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-text-control.data\");\n    this.validateSettings();\n    const value = this.settings?.initialValue || this.settings?.column?.hasDefaultValue || \"\";\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value,\n      isEditable: true,\n      submitError: false,\n      validateError: false,\n    };\n  },\n  methods: {\n    async submit() {\n      this.$trace(\"lsw-text-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    }\n  },\n  watch: {},\n  computed: {\n    getSettingsInputEvents() {\n      const base0 = this.settings.input?.events || false;\n      if(typeof base0 === \"object\") {\n        return base0;\n      }\n      return {};\n    },\n    getSettingsInputProps() {\n      const base0 = this.settings.input?.props || false;\n      if(typeof base0 === \"object\") {\n        return base0;\n      }\n      return {};\n    }\n  },\n  mounted() {\n    try {\n      this.$trace(\"lsw-text-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
      "$code.label": "LswTextControl API",
      "$output": "index.html"
    }
  ],
  "book": {
    "files": {
      "index.html": {
        "sections": {
          "Index of document": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/bootloader/runner.js",
              "$location": {
                "start": {
                  "offset": 904,
                  "line": 33,
                  "column": 1
                },
                "end": {
                  "offset": 941,
                  "line": 34,
                  "column": 1
                }
              },
              "DONE": "en desarrollo:",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-agenda-randomizer/lsw-agenda-randomizer.js",
              "$location": {
                "start": {
                  "offset": 805,
                  "line": 32,
                  "column": 1
                },
                "end": {
                  "offset": 858,
                  "line": 33,
                  "column": 1
                }
              },
              "TODO": "esto no está valiendo ahora mismo.",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-database/browsie.unbundled.js",
              "$location": {
                "start": {
                  "offset": 1615,
                  "line": 61,
                  "column": 1
                },
                "end": {
                  "offset": 1645,
                  "line": 62,
                  "column": 1
                }
              },
              "INJECTION": "from LSW",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-filesystem/ufs-v1.0.2.js",
              "$location": {
                "start": {
                  "offset": 1025,
                  "line": 38,
                  "column": 1
                },
                "end": {
                  "offset": 1055,
                  "line": 39,
                  "column": 1
                }
              },
              "INJECTION": "from LSW",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-filesystem/ufs-v1.0.2.js",
              "$location": {
                "start": {
                  "offset": 13383,
                  "line": 365,
                  "column": 1
                },
                "end": {
                  "offset": 13413,
                  "line": 366,
                  "column": 1
                }
              },
              "INJECTION": "from LSW",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-intruder/lsw-intruder.js",
              "$location": {
                "start": {
                  "offset": 714,
                  "line": 35,
                  "column": 1
                },
                "end": {
                  "offset": 744,
                  "line": 36,
                  "column": 1
                }
              },
              "INJECTION": "from LSW",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-utils/lsw-utils.js",
              "$location": {
                "start": {
                  "offset": 16001,
                  "line": 439,
                  "column": 7
                },
                "end": {
                  "offset": 16096,
                  "line": 440,
                  "column": 1
                }
              },
              "OK": "No escapamos, porque se entiende que no se va a usar ese string en el concepto nunca.",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
              "$location": {
                "start": {
                  "offset": 6216,
                  "line": 160,
                  "column": 1
                },
                "end": {
                  "offset": 6259,
                  "line": 161,
                  "column": 1
                }
              },
              "DONE": "insertar names en Concepto",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
              "$location": {
                "start": {
                  "offset": 7098,
                  "line": 182,
                  "column": 1
                },
                "end": {
                  "offset": 7164,
                  "line": 183,
                  "column": 1
                }
              },
              "DONE": "insertar name+params+code en Propagador_prototipo",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
              "$location": {
                "start": {
                  "offset": 20369,
                  "line": 468,
                  "column": 1
                },
                "end": {
                  "offset": 20433,
                  "line": 469,
                  "column": 1
                }
              },
              "TODO": "fabricar la función propagadora y enchufarla.",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
              "$location": {
                "start": {
                  "offset": 20433,
                  "line": 469,
                  "column": 1
                },
                "end": {
                  "offset": 20497,
                  "line": 470,
                  "column": 1
                }
              },
              "TODO": "fabricar la función propagadora y enchufarla.",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
              "$location": {
                "start": {
                  "offset": 20497,
                  "line": 470,
                  "column": 1
                },
                "end": {
                  "offset": 20561,
                  "line": 471,
                  "column": 1
                }
              },
              "TODO": "fabricar la función propagadora y enchufarla.",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
              "$location": {
                "start": {
                  "offset": 20561,
                  "line": 471,
                  "column": 1
                },
                "end": {
                  "offset": 20625,
                  "line": 472,
                  "column": 1
                }
              },
              "TODO": "fabricar la función propagadora y enchufarla.",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
              "$location": {
                "start": {
                  "offset": 20625,
                  "line": 472,
                  "column": 1
                },
                "end": {
                  "offset": 20689,
                  "line": 473,
                  "column": 1
                }
              },
              "TODO": "fabricar la función propagadora y enchufarla.",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-configurations-page/lsw-configurations-page.js",
              "$location": {
                "start": {
                  "offset": 5047,
                  "line": 130,
                  "column": 1
                },
                "end": {
                  "offset": 5129,
                  "line": 131,
                  "column": 1
                }
              },
              "TODO": "importar texto de un JSON file con un input type file y tol royo.",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-configurations-page/lsw-configurations-page.js",
              "$location": {
                "start": {
                  "offset": 12489,
                  "line": 317,
                  "column": 1
                },
                "end": {
                  "offset": 12537,
                  "line": 318,
                  "column": 1
                }
              },
              "TODO": "esta función no está terminada.",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-dialogs/lsw-dialogs.js",
              "$location": {
                "start": {
                  "offset": 3492,
                  "line": 103,
                  "column": 1
                },
                "end": {
                  "offset": 3566,
                  "line": 104,
                  "column": 1
                }
              },
              "OK": "El ID debería ser único o no se abrirán las duplicadas.",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-dialogs/lsw-dialogs.js",
              "$location": {
                "start": {
                  "offset": 3566,
                  "line": 104,
                  "column": 1
                },
                "end": {
                  "offset": 3636,
                  "line": 105,
                  "column": 1
                }
              },
              "PERO": "Pero por algo lo tenía así también y no recuerdo.",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-naty-script/fix.js",
              "$location": {
                "start": {
                  "offset": 225,
                  "line": 6,
                  "column": 1
                },
                "end": {
                  "offset": 296,
                  "line": 7,
                  "column": 1
                }
              },
              "DONE": "Comentado porque se mete en el builder del framework aparte:",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-test-context-viewer/lsw-test-context-viewer.js",
              "$location": {
                "start": {
                  "offset": 1491,
                  "line": 48,
                  "column": 1
                },
                "end": {
                  "offset": 1537,
                  "line": 49,
                  "column": 1
                }
              },
              "TODO": "call all the tests from here:",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-tests-page--prev/lsw-tests-page.js",
              "$location": {
                "start": {
                  "offset": 2888,
                  "line": 95,
                  "column": 1
                },
                "end": {
                  "offset": 2930,
                  "line": 96,
                  "column": 1
                }
              },
              "TODO": "continue running tests:",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-filesystem-explorer/lsw-filesystem-explorer/lsw-filesystem-explorer.js",
              "$location": {
                "start": {
                  "offset": 12254,
                  "line": 334,
                  "column": 1
                },
                "end": {
                  "offset": 12315,
                  "line": 335,
                  "column": 1
                }
              },
              "INJECTABLE": "add custom buttons for extensions:",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-filesystem-explorer/lsw-filesystem-explorer/lsw-filesystem-explorer.js",
              "$location": {
                "start": {
                  "offset": 15790,
                  "line": 439,
                  "column": 1
                },
                "end": {
                  "offset": 15851,
                  "line": 440,
                  "column": 1
                }
              },
              "INJECTABLE": "add custom buttons for extensions:",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-table/lsw-table/lsw-table.js",
              "$location": {
                "start": {
                  "offset": 15624,
                  "line": 462,
                  "column": 1
                },
                "end": {
                  "offset": 15693,
                  "line": 463,
                  "column": 1
                }
              },
              "BUGGY": "estos logs causan recursividad en el console-hooker",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-table/lsw-table/lsw-table.js",
              "$location": {
                "start": {
                  "offset": 16609,
                  "line": 500,
                  "column": 1
                },
                "end": {
                  "offset": 16678,
                  "line": 501,
                  "column": 1
                }
              },
              "BUGGY": "estos logs causan recursividad en el console-hooker",
              "$output": "index.html"
            }
          ],
          "Lsw LswAsserter API » LswAsserter class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-asserter/lsw-asserter.js",
              "$location": {
                "start": {
                  "offset": 288,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 377,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "Lsw LswAsserter API » LswAsserter class",
              "$code": "  const LswAssertion = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    trace(msg) {\n      if(this.$asserter.$options.trace) {\n        console.log(\"[trace][lsw-assertion] \" + msg);\n      }\n    }\n\n    constructor(asserter, message) {\n      this.$asserter = asserter;\n      this.$message = message;\n      this.$result = undefined;\n    }\n\n    that(booleanExpression) {\n      this.trace(\"that\");\n      this.$result = booleanExpression;\n      if(this.$result === true) {\n        this.$asserter.onAssertionSuccess(this.$message, this.$result, this, this.$asserter);\n      } else {\n        this.$asserter.onAssertionError(this.$message, this.$result, this, this.$asserter);\n      }\n    }\n\n  }\n\n  const LswAsserter = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    static Assertion = LswAssertion;\n\n    static defaultEvents = {\n      onSuccess: () => {},\n      onError: () => {},\n    };\n\n    static defaultOptions = {\n      trace: false,\n    }\n\n    trace(msg) {\n      if(this.$options.trace) {\n        console.log(\"[trace][lsw-asserter] \" + msg);\n      }\n    }\n\n    constructor(customEvents = {}, customOptions = {}) {\n      const events = Object.assign({}, this.constructor.defaultEvents, customEvents);\n      const options = Object.assign({}, this.constructor.defaultOptions, customOptions);\n      this.$events = events;\n      this.$options = options;\n      this.$onAssertionSuccess = events.onSuccess;\n      this.$onAssertionError = events.onError;\n    }\n\n    onAssertionSuccess(assertionObject) {\n      this.trace(\"onAssertionSuccess\");\n      console.log(\"[*] Assertion success:\", assertionObject);\n      console.log(\"[*] Assertion success:\", assertionObject.$message);\n      this.$onAssertionSuccess(assertionObject, this);\n    }\n\n    onAssertionError(assertionObject) {\n      this.trace(\"onAssertionError\");\n      console.log(\"[!] Assertion error:\", assertionObject.$message);\n      const assertionError = new Error(`Assertion error on: «${assertionObject.$message}»`);\n      Vue.prototype.$lsw.toasts.showError(assertionError);\n      this.$onAssertionError(assertionObject, this, assertionError);\n    }\n\n    as(message) {\n      this.trace(\"as\");\n      console.log(\"Message:\", message);\n      return LswAssertion.create(this, message);\n    }\n\n  };\n\n  return LswAsserter;\n",
              "$code.label": "LswAsserter class",
              "$output": "index.html"
            }
          ],
          "Lsw Backuper API » LswBackuper class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-backuper/lsw-backuper.js",
              "$location": {
                "start": {
                  "offset": 288,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 374,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "Lsw Backuper API » LswBackuper class",
              "$code": "\n  const LswBackuper = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    static get defaultOptions() {\n      return {\n        storageId: \"lsw_default_database_backup_1\",\n        trace: Vue.prototype.$lsw.logger.$options.active,\n      };\n    }\n\n    $trace(method, args = []) {\n      if(this.options.trace) {\n        console.log(`[lsw][trace][lsw-backuper] ${method}: ${Array.from(args).length}`);\n      }\n    }\n\n    constructor(options = {}) {\n      this.options = Object.assign({}, this.constructor.defaultOptions, options);\n    }\n\n    getLastBackup() {\n      this.$trace(\"getLastBackup\", arguments);\n      try {\n        const jsonData = localStorage[this.options.storageId] || \"{}\";\n        const data = JSON.parse(jsonData);\n        return data;\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    }\n\n    setLastBackup(backupJson) {\n      this.$trace(\"setLastBackup\", arguments);\n      localStorage[this.options.storageId] = JSON.stringify(backupJson, null, 2);\n    }\n\n    deleteLastBackup() {\n      this.$trace(\"deleteLastBackup\", arguments);\n      delete localStorage[this.options.storageId];\n    }\n\n  };\n\n  return LswBackuper;\n",
              "$code.label": "LswBackuper class",
              "$output": "index.html"
            }
          ],
          "Lsw Circuiter API » LswCircuiter class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-circuiter/async-circuit.js",
              "$location": {
                "start": {
                  "offset": 288,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 377,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "Lsw Circuiter API » LswCircuiter class",
              "$code": "  class AsyncCircuit {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor() {\n      this.middlewares = [];\n    }\n\n    hook(callback) {\n      this.middlewares.push(callback);\n      return this;\n    }\n\n    prehook(callback) {\n      this.middlewares.unshift(callback);\n      return this;\n    }\n\n    unhook(callback) {\n      const pos = this.middlewares.indexOf(callback);\n      if(pos !== -1) {\n        this.middlewares.splice(pos, 1);\n      }\n      return this;\n    }\n\n    // Función principal para parsear el árbol\n    parse(node) {\n      // Si el nodo es un array (ejecutar en paralelo)\n      if (Array.isArray(node)) {\n        const code = node.map(cb => this.parse(cb)).join(',');\n        return `Promise.all([${code}])`; // Convertimos todo en un Promise.all\n      }\n\n      // Si es un objeto con $type y $callbacks\n      if (node && typeof node === 'object') {\n        Inject_middlewares: {\n          for(let index__middleware=0; index__middleware<this.middlewares.length; index__middleware++) {\n            const middleware = this.middlewares[index__middleware];\n            const result = middleware(node);\n          }\n        }\n        const { $type, $callbacks } = node;\n        const callbacks = $callbacks.map(cb => (typeof cb === 'function' ? `(${cb.toString()})()` : this.parse(cb)));\n        // Dependiendo del tipo, generamos el código adecuado\n        switch ($type) {\n          case 'parallel':\n            return `Promise.all([\\n  ${callbacks.join(',')}\\n  ])`; // Ejecutar en paralelo\n          case 'serie':\n            return `(async () => {\\n  ${callbacks.map(cb => `await ${cb}`).join('; ')}\\n  })()`; // Ejecutar en serie\n          case 'race':\n            return `Promise.race([\\n  ${callbacks.join(',')}\\n  ])`; // Ejecutar en carrera\n          case 'sync':\n            return `(() => {\\n  ${callbacks.join(';\\n  ')};\\n  return Promise.resolve();\\n  })()`; // Ejecutar síncrono\n          default:\n            throw new Error(`Required property «$type» to be one known but found «${$type}» on «this.parse»`);\n        }\n      }\n\n      // Si el nodo es una función, la transformamos directamente\n      if (typeof node === 'function') {\n        return `(${node.toString()})()`; // Convertimos la función en una llamada inmediata\n      }\n\n      throw new Error(`Required argument «node» to be of known type but found «${typeof $type}» on «this.parse»`);\n    }\n\n    // Método que ejecuta el código generado por eval\n    async execute(node, externalScope = {}) {\n      const code = this.parse(node);\n      const AsyncFunction = (async function() {}).constructor;\n      const argKeys = Object.keys(externalScope).join(\", \");\n      const argValues = Object.values(externalScope);\n      const asyncFunction = new AsyncFunction(argKeys, code);\n      return await asyncFunction(...argValues); // Ejecutamos el código generado con eval\n    }\n  }\n",
              "$code.label": "LswCircuiter class",
              "$output": "index.html"
            }
          ],
          "Lsw ClassRegister API » LswClassRegister class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-class-register/lsw-class-register.js",
              "$location": {
                "start": {
                  "offset": 300,
                  "line": 14,
                  "column": 3
                },
                "end": {
                  "offset": 530,
                  "line": 25,
                  "column": 6
                }
              },
              "$section": "Lsw ClassRegister API » LswClassRegister class\n",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "LswClassRegister",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-class-register/lsw-class-register.js",
              "$location": {
                "start": {
                  "offset": 531,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 632,
                  "line": 27,
                  "column": 1
                }
              },
              "$section": "Lsw ClassRegister API » LswClassRegister class",
              "$code": "  class LswClassRegister {\n\n    constructor() {\n      this.$classes = {};\n    }\n\n    register(id, classDefinition, forceOverwrite = false) {\n      $ensure({id},1).type(\"string\");\n      $ensure({classDefinition},1).type(\"function\");\n      if(!forceOverwrite) {\n        $ensure({$classes:this.$classes},1).to.not.have.key(id);\n      }\n      this.$classes[id] = classDefinition;\n    }\n\n    unregister(id, silenceError = false) {\n      if(!silenceError) {\n        $ensure({$classes:this.$classes},1).to.have.key(id);\n      }\n      delete this.$classes[id];\n    }\n\n    instantiate(id, ...args) {\n      $ensure({id},1).type(\"string\");\n      $ensure({$classes:this.$classes},1).to.have.key(id);\n      const clazz = this.$classes[id];\n      const objeto = new clazz(...args);\n      return objeto;\n    }\n\n    async initialize(id, ...args) {\n      $ensure({id},1).type(\"string\");\n      $ensure({$classes:this.$classes},1).to.have.key(id);\n      const clazz = this.$classes[id];\n      const objeto = new clazz(...args);\n      if(typeof objeto.initialize === \"function\") {\n        await objeto.initialize();\n      }\n      return objeto;\n    }\n\n  }\n",
              "$code.label": "LswClassRegister class",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-compromiser/lsw-compromiser.js",
              "$location": {
                "start": {
                  "offset": 294,
                  "line": 14,
                  "column": 3
                },
                "end": {
                  "offset": 524,
                  "line": 25,
                  "column": 6
                }
              },
              "$section": "Lsw ClassRegister API » LswClassRegister class\n",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "LswClassRegister",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-compromiser/lsw-compromiser.js",
              "$location": {
                "start": {
                  "offset": 525,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 625,
                  "line": 27,
                  "column": 1
                }
              },
              "section": "Lsw ClassRegister API » LswClassRegister class",
              "$code": "  Promise_extensions: {\n    \n    globalThis.Promise.prototype.chain = function (nextPromise) {\n      return this.then(() => nextPromise);\n    };\n  }\n",
              "$code.label": "LswClassRegister class",
              "$output": "index.html"
            }
          ],
          "Lsw Commander API » LswCommander class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-commander/url-command.js",
              "$location": {
                "start": {
                  "offset": 797,
                  "line": 31,
                  "column": 3
                },
                "end": {
                  "offset": 1015,
                  "line": 42,
                  "column": 6
                }
              },
              "$section": "Lsw Commander API » LswCommander class\n",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "LswCommander",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-commander/url-command.js",
              "$location": {
                "start": {
                  "offset": 1016,
                  "line": 43,
                  "column": 1
                },
                "end": {
                  "offset": 1105,
                  "line": 44,
                  "column": 1
                }
              },
              "$section": "Lsw Commander API » LswCommander class",
              "$code": "  const LswCommander = class {\n\n    static from(...args) {\n      return new this(...args);\n    }\n\n    onRun(callback, args) {\n      try {\n        let output = undefined;\n        if (typeof this.$beforeRun === \"function\") {\n          this.$beforeRun(...args);\n        }\n        output = callback(...args);\n        if (typeof this.$afterRun === \"function\") {\n          this.$afterRun(...args);\n        }\n        return output;\n      } catch (error) {\n        if (typeof this.$onError === \"function\") {\n          const output = this.$onError(error);\n          if (typeof output !== \"undefined\") {\n            return output;\n          }\n        }\n        throw error;\n      }\n    }\n\n    constructor(handlers) {\n      this.$handlers = handlers;\n      this.$beforeRun = undefined;\n      this.$afterRun = undefined;\n      this.$onError = undefined;\n      this.command = (url, queryParamsExtender = {}) => {\n        if (!url) throw new Error(\"URL is required\");\n        if (typeof url !== \"string\") throw new Error(\"URL must be a string\");\n        if (typeof this.$handlers !== \"object\" || this.$handlers === null) {\n          throw new Error(\"Handlers must be a valid object\");\n        }\n        const [path, queryString] = url.split(\"?\");\n        const queryParams = queryString ? Object.fromEntries(new URLSearchParams(queryString).entries()) : {};\n        Object.assign(queryParams, queryParamsExtender);\n        const pathParts = path.split(\"/\").filter(Boolean);\n        let currentHandler = this.$handlers;\n        for (const part of pathParts) {\n          if (currentHandler[part] === undefined) {\n            throw new Error(`Handler for path \"${path}\" not found`);\n          }\n          currentHandler = currentHandler[part];\n        }\n        if (typeof currentHandler !== \"function\") {\n          throw new Error(`Handler at path \"${path}\" is not a function`);\n        }\n        const isSpreadable = isOnlyConsecutiveNumbers(queryParams);\n        if (isSpreadable && isSpreadable.length) {\n          return this.onRun(currentHandler, isSpreadable);\n        } else if (queryParams.argumentsOrder) {\n          const args = [];\n          const argKeys = queryParams.argumentsOrder.split(\",\").map(arg => arg.trim());\n          for (let index = 0; index < argKeys.length; index++) {\n            const argKey = argKeys[index];\n            const argValue = queryParams[argKey] || null;\n            args.push(argValue);\n          }\n          return this.onRun(currentHandler, args);\n        } else {\n          return this.onRun(currentHandler, [queryParams]);\n        }\n      };\n    }\n    get run() {\n      return this.command;\n    }\n    beforeRun(callback) {\n      if (typeof callback !== \"function\") {\n        throw new Error(\"Required parameter «callback» to be a function on «beforeRun»\");\n      }\n      this.$beforeRun = callback;\n    }\n    afterRun(callback) {\n      if (typeof callback !== \"function\") {\n        throw new Error(\"Required parameter «callback» to be a function on «afterRun»\");\n      }\n      this.$afterRun = callback;\n    }\n    onError(callback) {\n      if (typeof callback !== \"function\") {\n        throw new Error(\"Required parameter «callback» to be a function on «onError»\");\n      }\n      this.$onError = callback;\n    }\n  };\n",
              "$code.label": "LswCommander class",
              "$output": "index.html"
            }
          ],
          "Lsw Compromiser API » LswCompromiser class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-compromiser/lsw-compromiser.js",
              "$location": {
                "start": {
                  "offset": 816,
                  "line": 35,
                  "column": 3
                },
                "end": {
                  "offset": 1039,
                  "line": 45,
                  "column": 6
                }
              },
              "$section": "Lsw Compromiser API » LswCompromiser class",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "LswCompromiser",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-compromiser/lsw-compromiser.js",
              "$location": {
                "start": {
                  "offset": 1040,
                  "line": 46,
                  "column": 1
                },
                "end": {
                  "offset": 1134,
                  "line": 47,
                  "column": 1
                }
              },
              "section": "Lsw Compromiser API » LswCompromiser class",
              "$code": "  class PromiseMap {\n\n    constructor(keys) {\n      this.promises = new Map();\n\n      keys.forEach(key => {\n        this.set(key);\n      });\n    }\n\n    static create(keys) {\n      return new this(keys);\n    }\n\n    has(key) {\n      return this.promises.has(key);\n    }\n\n    get(key) {\n      if (!this.has(key)) {\n        throw new Error(`Required argument «key» to be an existing key (not «${key}») on «PromiseMap.get»`);\n      }\n      return this.promises.get(key);\n    }\n\n    set(key) {\n      if (this.has(key)) {\n        throw new Error(`Required argument «key» to not be an existing key (not «${key}») on «PromiseMap.set»`);\n      }\n      let resolve, reject;\n      const promise = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n      });\n      this.promises.set(key, { promise, resolve, reject });\n    }\n\n    unset(key) {\n      if (!this.has(key)) {\n        throw new Error(`Required argument «key» to be an existing key (not «${key}») on «PromiseMap.unset»`);\n      }\n      this.promises.delete(key);\n    }\n\n    on(key) {\n      if (!this.has(key)) {\n        throw new Error(`Required argument «key» to be an existing key (not «${key}») on «PromiseMap.on»`);\n      }\n      return this.promises.get(key).promise;\n    }\n\n    bind(key, key2) {\n      this.on(key).then(output => this.get(key2).resolve(output));\n    }\n\n    propagate(key) {\n      return {\n        to: (key2) => {\n          this.bind(key, key2);\n          return this.propagate(key2);\n        }\n      }\n    }\n\n  }\n",
              "$code.label": "LswCompromiser class",
              "$output": "index.html"
            }
          ],
          "Lsw Configurer API » LswConfigurer class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-configurer/lsw-configurer.js",
              "$location": {
                "start": {
                  "offset": 294,
                  "line": 14,
                  "column": 3
                },
                "end": {
                  "offset": 514,
                  "line": 24,
                  "column": 6
                }
              },
              "$section": "Lsw Configurer API » LswConfigurer class",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "LswConfigurer",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-configurer/lsw-configurer.js",
              "$location": {
                "start": {
                  "offset": 515,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 606,
                  "line": 26,
                  "column": 1
                }
              },
              "section": "Lsw Configurer API » LswConfigurer class",
              "$code": "  const LswConfigurer = class {\n\n    constructor(parentConfigurer = null) {\n      this.$parent = parentConfigurer;\n      this.$state = {};\n    }\n\n    configure(stateOptions = {}) {\n      Object.assign(this.$state, stateOptions);\n    }\n\n    get(key, defaultValue = undefined) {\n      let target = this;\n      Iterating_parents:\n      while(!!target) {\n        if(key in target.$state) {\n          return target.$state[key];\n        }\n        target = target.$parent;\n      }\n      return defaultValue;\n    }\n\n  }\n",
              "$code.label": "LswConfigurer class",
              "$output": "index.html"
            }
          ],
          "Lsw Constants API » LswConstants class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-constants/lsw-constants.js",
              "$location": {
                "start": {
                  "offset": 288,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 376,
                  "line": 15,
                  "column": 1
                }
              },
              "section": "Lsw Constants API » LswConstants class",
              "$code": "\n  const LswConstants = class {\n\n    static THROW_ERROR = {};\n    static global = new this();\n\n    constructor() {\n      this.$values = {};\n    }\n\n    define(key, value) {\n      if(key in this.$values) {\n        throw new Error(`Cannot override constant «${key}» on «LswConstants.define»`);\n      }\n      this.$values[key] = value;\n    }\n\n    pick(key, defaultValue = LswConstants.THROW_ERROR) {\n      if(!(key in this.$values)) {\n        if(defaultValue === LswConstants.THROW_ERROR) {\n          console.log(\"[!] Known keys only:\", Object.keys(this.$values));\n          throw new Error(`Could not find constant «${key}» on «LswConstants.pick»`);\n        }\n      }\n      return this.$values[key] || defaultValue;\n    }\n\n  };\n  \n  return LswConstants;\n\n",
              "$code.label": "LswConstants class",
              "$output": "index.html"
            }
          ],
          "Lsw Cycler API » LswCycler class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-cycler/lsw-cycler.js",
              "$location": {
                "start": {
                  "offset": 309,
                  "line": 16,
                  "column": 1
                },
                "end": {
                  "offset": 388,
                  "line": 17,
                  "column": 1
                }
              },
              "section": "Lsw Cycler API » LswCycler class",
              "$code": "  class LswCyclerSet {\n    constructor(value) {\n      this.value = value;\n    }\n  }\n\n  class LswCyclerReturn {\n    constructor(value) {\n      this.value = value;\n    }\n  }\n\n  class LswCyclerReturner {\n    constructor(value) {\n      if(typeof value !== \"function\") {\n        throw new Error(\"Required argument «value» to be a function on «LswCyclerReturner.constructor»\");\n      }\n      this.value = value;\n    }\n  }\n\n  class LswCycler {\n\n    static Return = LswCyclerReturn;\n    static Returner = LswCyclerReturner;\n    static Set = LswCyclerSet;\n\n    static returner(value) {\n      return new this.Returner(value);\n    }\n\n    static return(value) {\n      return new this.Return(value);\n    }\n\n    static set(value) {\n      return new this.Set(value);\n    }\n\n    constructor($object, exposedProps = []) {\n      this.$object = $object;\n      if(exposedProps === \"*\") {\n        Object.assign(this, $object);\n      } else {\n        for(let index=0; index<exposedProps.length; index++) {\n          const exposedProp = exposedProps[index];\n          this[exposedProp] = $object[exposedProp];\n        }\n      }\n    }\n\n    static from(...args) {\n      return new this(...args);\n    }\n\n    async run(steps, parameters) {\n      let original = [];\n      let output = original;\n      Iterate_cycle:\n      for (let j = 0; j < steps.length; j++) {\n        let step = steps[j];\n        let fn = this.$object[step];\n        if (typeof fn !== \"function\") {\n          throw new Error(\"Required step «\" + step + \"» to be a function on round \" + j + \" on «LswCycler.run»\");\n        }\n        const result = await fn.call(this.$object, parameters);\n        Apply_intercycle_signals: {\n          if (result instanceof this.constructor.Set) {\n            output = await result.value;\n          } else if (result instanceof this.constructor.Return) {\n            return result.value;\n          } else if (result instanceof this.constructor.Returner) {\n            return result.value(output, original);\n          }\n        }\n        Append_result_if_not_changed_output: {\n          original.push(result);\n        }\n      }\n      return output;\n    }\n\n  }\n",
              "$code.label": "LswCycler class",
              "$output": "index.html"
            }
          ],
          "Lsw Database API » LswDatabase class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-database/browsie.unbundled.js",
              "$location": {
                "start": {
                  "offset": 287,
                  "line": 15,
                  "column": 3
                },
                "end": {
                  "offset": 501,
                  "line": 25,
                  "column": 6
                }
              },
              "$section": "Lsw Database API » LswDatabase class",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "LswDatabase",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-database/browsie.unbundled.js",
              "$location": {
                "start": {
                  "offset": 502,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 587,
                  "line": 27,
                  "column": 1
                }
              },
              "section": "Lsw Database API » LswDatabase class",
              "$code": "  class BrowsieCheckersAPI {\n\n    static mustBeString(obj, method = \"Browsie.mustBeString\", id = \"?\") {\n      if (typeof obj !== \"string\") {\n        throw new Error(`Required «${id}» to be a string on «${method}»`);\n      }\n    }\n\n    static mustBeArray(obj, method = \"Browsie.mustBeArray\", id = \"?\") {\n      if (!Array.isArray(obj)) {\n        throw new Error(`Required «${id}» to be an array on «${method}»`);\n      }\n    }\n\n    static mustBeObject(obj, method = \"Browsie.mustBeObject\", id = \"?\") {\n      if (typeof obj !== \"object\") {\n        throw new Error(`Required «${id}» to be an object on «${method}»`);\n      }\n    }\n\n    static mustBeGreaterThan(obj, comparison = 0, method = \"Browsie.mustBeObject\", id = \"?\") {\n      if (obj <= comparison) {\n        throw new Error(`Required «${id}» to be greater than «${comparison}» on «${method}»`);\n      }\n    }\n  }\n\n  class BrowsieStaticAPI extends BrowsieCheckersAPI {\n\n    static openedConnections = [];\n\n    static _trace = true;\n\n    static trace(methodName, args = []) {\n      // @INJECTION: from LSW\n      const traceActivatedGlobally = (typeof Vue === \"undefined\") || (typeof Vue.prototype.$lsw === \"undefined\") || ((typeof Vue !== \"undefined\") && (typeof Vue.prototype.$lsw !== \"undefined\") && (Vue.prototype.$lsw.logger.$options.active));\n      if (this._trace && traceActivatedGlobally) {\n        console.log(\"[browsie][\" + methodName + \"]\", args.length + \" args: \" + Array.from(args).map(arg => typeof (arg)).join(\", \"));\n      }\n    }\n\n    static async listDatabases() {\n      this.trace(\"Browsie.listDatabases\", arguments);\n      try {\n        const databases = await indexedDB.databases();\n        console.log('Bases de datos disponibles:', databases);\n        return databases;\n      } catch (error) {\n        console.error('Error al obtener las bases de datos:', error);\n      }\n    }\n\n    static createDatabase(dbName, schemaDefinition = null, version = 1, versionUpgrades = {}) {\n      this.trace(\"Browsie.createDatabase\", arguments);\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.open(dbName, version);\n        request.onsuccess = () => {\n          console.log(`[SUCCESS] Database \"${dbName}\" created/opened successfully.`);\n          request.result.close();\n          resolve(request.result);\n        };\n        request.onerror = (error) => {\n          console.error(`[ERROR] Failed to create/open database \"${dbName}\":`, error);\n          reject(error);\n        };\n        request.onupgradeneeded = async (event) => {\n          const db = event.target.result;\n          console.log(`[UPGRADE] Upgrading database \"${dbName}\" from version ${event.oldVersion} to ${version}.`);\n          // Si hay una definición de esquema inicial, crear los almacenes e índices\n          if (schemaDefinition && event.oldVersion === 0) {\n            console.log(\"[SCHEMA] Applying initial schema definition.\");\n            Object.keys(schemaDefinition).forEach((storeName) => {\n              if (!db.objectStoreNames.contains(storeName)) {\n                const objectStore = db.createObjectStore(storeName, {\n                  keyPath: \"id\",\n                  autoIncrement: true,\n                });\n                if (!Array.isArray(schemaDefinition[storeName])) {\n                  console.log(schemaDefinition);\n                  throw new Error(`Required property «schemaDefinition.${storeName}» to be an array on «LswDatabase.createDatabase»`);\n                }\n                schemaDefinition[storeName].forEach((index) => {\n                  const indexName = index.replace(/^\\!/, \"\");\n                  objectStore.createIndex(indexName, indexName, {\n                    unique: index.startsWith(\"!\")\n                  });\n                });\n              }\n            });\n          }\n          // Aplicar las transformaciones de esquema para cada versión\n          for (let v = event.oldVersion + 1; v <= version; v++) {\n            if (versionUpgrades[v]) {\n              console.log(`[VERSION ${v}] Applying upgrade function.`);\n              await versionUpgrades[v](db);\n            } else {\n              console.log(`[VERSION ${v}] No upgrade function defined.`);\n            }\n          }\n        };\n      });\n    }\n\n    static async exportDatabase(dbName) {\n      this.trace(\"Browsie.exportDatabase\", arguments);\n      const schema = await this.getSchema(dbName);\n      const storeIds = Object.keys(schema);\n      const allData = {};\n      for(let indexStore=0; indexStore<storeIds.length; indexStore++) {\n        const storeId = storeIds[indexStore];\n        const storeData = await this.getAllDataFromStore(dbName, storeId);\n        allData[storeId] = storeData;\n      }\n      return allData;\n    }\n\n    static async importToDatabase(dbName, storesData = {}) {\n      this.trace(\"Browsie.importToDatabase\", arguments);\n      const storeIds = Object.keys(storesData);\n      const connection = await this.open(dbName);\n      for(let indexStore=0; indexStore<storeIds.length; indexStore++) {\n        const storeId = storeIds[indexStore];\n        const allData = storesData[storeId];\n        console.log(`[*] Importing store «${storeId}»`);\n        await connection.insertMany(storeId, allData);\n      }\n    }\n\n    // Obtener todos los datos de un store\n    static async getAllDataFromStore(dbName, storeName) {\n      this.trace(\"Browsie.getAllDataFromStore\", arguments);\n      return await new Promise((resolve, reject) => {\n        const request = indexedDB.open(dbName);\n\n        request.onsuccess = (event) => {\n          const db = event.target.result;\n          const transaction = db.transaction(storeName, 'readonly');\n          const store = transaction.objectStore(storeName);\n\n          const getAllRequest = store.getAll();\n          getAllRequest.onsuccess = () => resolve(getAllRequest.result);\n          getAllRequest.onerror = () => {\n            db.close();\n            reject(new Error('Error al obtener los datos del store'));\n          };\n        };\n\n        request.onerror = () => {\n          reject(new Error('Error al abrir la base de datos'));\n        };\n      });\n    }\n\n    // Insertar datos en un store\n    static async insertDataIntoStore(dbName, storeName, data) {\n      this.trace(\"Browsie.insertDataIntoStore\", arguments);\n      return await new Promise((resolve, reject) => {\n        const request = indexedDB.open(dbName);\n\n        request.onsuccess = (event) => {\n          const db = event.target.result;\n          const transaction = db.transaction(storeName, 'readwrite');\n          const store = transaction.objectStore(storeName);\n\n          data.forEach(item => store.add(item));\n\n          transaction.oncomplete = () => resolve();\n          transaction.onerror = () => {\n            db.close();\n            reject(new Error('Error al insertar los datos en el store'));\n          };\n        };\n\n        request.onerror = () => {\n          reject(new Error('Error al abrir la base de datos'));\n        };\n      });\n    }\n\n    // Eliminar una base de datos\n    static deleteDatabase(dbName) {\n      this.trace(\"Browsie.deleteDatabase\", arguments);\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.deleteDatabase(dbName);\n\n        request.onblocked = () => {\n          // db.close();\n          reject(new Error(\"Error al eliminar la base de datos porque está bloqueada\"));\n        };\n        request.onsuccess = () => resolve();\n        request.onerror = () => {\n          // db.close();\n          reject(new Error('Error al eliminar la base de datos'));\n        };\n      }).then(() => {\n        console.log(`[!] Base de datos «${dbName}» eliminada correctamente.`);\n      });\n    }\n\n    static async getSchema(dbName) {\n      this.trace(\"Browsie.getSchema\", arguments);\n      let db = undefined;\n      try {\n        // Abrir la base de datos en modo solo lectura\n        const request = indexedDB.open(dbName);\n\n        db = await new Promise((resolve, reject) => {\n          request.onsuccess = (event) => resolve(event.target.result);\n          request.onerror = () => {\n            reject(new Error('Error al abrir la base de datos'));\n          };\n        });\n\n        // Construir el esquema a partir de los almacenes\n        const schema = {};\n        const objectStoreNames = Array.from(db.objectStoreNames); // Lista de stores\n\n        objectStoreNames.forEach(storeName => {\n          const transaction = db.transaction(storeName, 'readonly');\n          const store = transaction.objectStore(storeName);\n\n          const storeInfo = {\n            keyPath: store.keyPath,\n            autoIncrement: store.autoIncrement,\n            indexes: []\n          };\n\n          // Recorrer los índices del store\n          const indexNames = Array.from(store.indexNames); // Lista de índices\n          indexNames.forEach(indexName => {\n            const index = store.index(indexName);\n            storeInfo.indexes.push({\n              name: index.name,\n              keyPath: index.keyPath,\n              unique: index.unique,\n              multiEntry: index.multiEntry\n            });\n          });\n\n          schema[storeName] = storeInfo;\n        });\n\n        return schema;\n      } catch (error) {\n        console.error('Error al obtener el esquema:', error);\n        throw error;\n      } finally {\n        if (db) {\n          db.close();\n        }\n      }\n    }\n\n    static async pickRow(databaseId, tableId, rowId) {\n      this.trace(\"Browsie.pickRow\", arguments);\n      $ensure(databaseId).type(\"string\");\n      $ensure(tableId).type(\"string\");\n      $ensure(rowId).type(\"number\");\n      let connection = undefined;\n      try {\n        connection = await this.open(databaseId);\n        const rows = await connection.selectMany(tableId, v => v.id === rowId);\n        if (rows.length === 1) {\n          return rows[0];\n        } else if (rows.length === 0) {\n          return undefined;\n        }\n      } catch (error) {\n        throw error;\n      } finally {\n        try {\n          await connection.close();\n        } catch (error) {\n          console.log(\"Could not close connection on picking row\");\n        }\n      }\n    }\n\n  }\n\n  class BrowsieTriggersAPI extends BrowsieStaticAPI {\n\n    static globMatch = TriggersClass.globMatch;\n\n    triggers = new TriggersClass();\n\n  }\n\n\n  class BrowsieCrudAPI extends BrowsieTriggersAPI {\n\n    static async open(...args) {\n      this.trace(\"Browsie.open\", arguments);\n      const db = new this(...args);\n      await db.open();\n      return db;\n    }\n\n    // Constructor que abre la base de datos\n    constructor(dbName, trace = false) {\n      super();\n      this.$dbName = dbName;\n      this.$db = null;\n      this.$innerSchema = null;\n      this._trace = trace;\n    }\n\n    getInnerSchema() {\n      this.constructor.trace(\"browsie.getInnerSchema\", arguments);\n      return this.$innerSchema;\n    }\n\n    setInnerSchema(innerSchema) {\n      this.constructor.trace(\"browsie.setInnerSchema\", arguments);\n      if (!(innerSchema instanceof LswSchema)) {\n        throw new Error(`Required parameter «innerSchema» to be an instance of LswSchema on «browsie.setInnerSchema»`);\n      }\n      this.$innerSchema = innerSchema;\n    }\n\n    // Abre la base de datos\n    open() {\n      this.constructor.trace(\"browsie.open\", arguments);\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.open(this.$dbName);\n\n        request.onsuccess = () => {\n          this.$db = request.result;\n          resolve(this.$db);\n        };\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.open» operation over database «${this.$dbName}»: `));\n      });\n    }\n\n    close(...args) {\n      this.constructor.trace(\"browsie.close\", arguments);\n      return this.$db.close(...args);\n    }\n\n    // Método para seleccionar 1 elemento de un store con un filtro\n    select(store, filter = {}) {\n      this.constructor.trace(\"browsie.select\", arguments);\n      this.triggers.emit(`crud.select.one.${store}`, { store, filter });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readonly');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.getAll();\n        request.onsuccess = () => {\n          const result = request.result.filter(item => {\n            return Object.keys(filter).every(key => item[key] === filter[key]);\n          });\n          resolve(result);\n        };\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.select» operation over store «${store}»: `));\n      });\n    }\n\n    // Método para insertar un solo item en un store\n    insert(store, item) {\n      this.constructor.trace(\"browsie.insert\", arguments);\n      this.triggers.emit(`crud.insert.one.${store}`, { store, item });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readwrite');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.add(item);\n\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.insert» operation over store «${store}»: `));\n      });\n    }\n\n    // Método para actualizar un item en un store\n    update(store, id, item) {\n      this.constructor.trace(\"browsie.update\", arguments);\n      this.triggers.emit(`crud.update.one.${store}`, { store, id, item });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readwrite');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.put({ ...item, id });\n\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.update» operation over store «${store}»: `));\n      });\n    }\n\n    // Método tipo upsert: que cambia solo los campos que le proporcionas (hace entre 1 y 2 queries)\n    async overwrite(store, idOrItem, item) {\n      this.constructor.trace(\"browsie.overwrite\", arguments);\n      this.triggers.emit(`crud.overwrite.one.${store}`, { store, idOrItem, item });\n      const isId = (typeof idOrItem === \"string\") || (typeof idOrItem === \"number\");\n      const isItem = typeof idOrItem === \"object\";\n      let previousItem = undefined;\n      if (isItem) {\n        previousItem = idOrItem;\n      } else if (isId) {\n        const matches = await this.select(store, it => it.id === idOrItem);\n        if (matches.length === 0) {\n          throw new Error(`Zero rows on overwrite operator. Cannot overwrite a row that does not exist on «browsie.overwrite»`);\n        } else if (matches.length > 1) {\n          throw new Error(`Multiple rows on overwrite operation. Cannot overwrite multiple rows. Ensure store «${store}» is using index «id» as unique value to complete this operation`);\n        }\n        previousItem = matches[0];\n      } else {\n        throw new Error(`Required parameter «idOrItem» to be a string or an object on «browsie.overwrite»`);\n      }\n      const newItem = Object.assign({}, previousItem, item);\n      return await this.update(store, newItem.id, newItem);\n    }\n\n    // Método para eliminar un item de un store por ID\n    delete(store, id) {\n      this.constructor.trace(\"browsie.delete\", arguments);\n      this._ensureIntegrity(store, id);\n      this.triggers.emit(`crud.delete.one.${store}`, { store, id });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readwrite');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.delete(id);\n        request.onsuccess = () => resolve();\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.delete» operation over store «${store}»: `));\n      });\n    }\n\n    _getSchemaEntityByStoreName(store) {\n      this.constructor.trace(\"browsie._ensureIntegrity\", arguments);\n      const innerSchema = this.getInnerSchema().$schema;\n      const tableIds = Object.keys(innerSchema.hasTables);\n      Iterating_tables:\n      for (let indexTables = 0; indexTables < tableIds.length; indexTables++) {\n        const tableId = tableIds[indexTables];\n        if (tableId === store) {\n          return innerSchema.hasTables[tableId];\n        }\n      }\n      return undefined;\n    }\n\n    _ensureIntegrity(store, id) {\n      this.constructor.trace(\"browsie._ensureIntegrity\", arguments);\n      const innerSchema = this.getInnerSchema().$schema;\n      const tableIds = Object.keys(innerSchema.hasTables);\n      const sourceEntity = innerSchema.hasTables[store];\n      const sourceEntityId = sourceEntity.hasEntityId;\n      const boundColumns = [];\n      Iterating_tables:\n      for (let indexTables = 0; indexTables < tableIds.length; indexTables++) {\n        const tableId = tableIds[indexTables];\n        const tableData = innerSchema.hasTables[tableId];\n        const columnIds = Object.keys(tableData.hasColumns);\n        Iterating_columns:\n        for (let indexColumns = 0; indexColumns < columnIds.length; indexColumns++) {\n          const columnId = columnIds[indexColumns];\n          const columnData = tableData.hasColumns[columnId];\n          When_it_has_references: {\n            if (!columnData.refersTo) {\n              break When_it_has_references;\n            }\n            const { entity: schemaEntityId, property: entityColumnId, constraint = true } = columnData.refersTo;\n            if (!constraint) {\n              break When_it_has_references;\n            }\n            const isSameEntity = schemaEntityId === sourceEntityId;\n            if (!isSameEntity) {\n              break When_it_has_references;\n            }\n            boundColumns.push({\n              source: [store, entityColumnId],\n              mustCheck: [tableId, columnId]\n            });\n          }\n        }\n      }\n      console.log(`BOUND COLUMNS to ${store}:`, boundColumns);\n    }\n\n    _expandError(errorObject, baseMessage = false) {\n      this.constructor.trace(\"browsie._expandError\", arguments);\n      let error = errorObject;\n      if (errorObject instanceof Error) {\n        error = errorObject;\n      } else if (errorObject.target && errorObject.target.error) {\n        error = errorObject.target.error;\n      } else {\n        error = new Error(errorObject);\n      }\n      if (baseMessage) {\n        const errorTemp = new Error(error.message ?? error);\n        Object.assign(errorTemp, error);\n        errorTemp.message = baseMessage + errorTemp.message;\n        error = errorTemp;\n      }\n      return error;\n    }\n\n    // Método para seleccionar elementos de un store con un filtro\n    select(store, filter) {\n      this.constructor.trace(\"browsie.select\", arguments);\n      this.triggers.emit(`crud.select.one.${store}`, { store, filter });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readonly');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.getAll();\n\n        request.onsuccess = () => {\n          const result = request.result.filter(item => {\n            try {\n              return filter(item);\n            } catch (error) {\n              console.error(\"Error arised from filter callback on «browsie.select»\");\n              return false;\n            }\n          });\n          resolve(result);\n        };\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.select» operation over store «${store}»: `));\n      });\n    }\n\n    selectMany(store, filterFn = i => true) {\n      this.constructor.trace(\"browsie.selectMany\", arguments);\n      this.triggers.emit(`crud.select.many.${store}`, { store, filterFn });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readonly');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.openCursor(); // Usa cursor para recorrer la BD sin cargar todo en memoria\n        const results = [];\n        request.onsuccess = (event) => {\n          const cursor = event.target.result;\n          if (cursor) {\n            let isAccepted = undefined;\n            try {\n              isAccepted = filterFn(cursor.value);\n            } catch (error) {\n              console.error(`Silent error arised from filter callback on «browsie.selectMany» against store «${store}»`, error);\n            }\n            if (isAccepted) { // Aplica la función de filtro\n              results.push(cursor.value);\n            }\n            cursor.continue(); // Avanza al siguiente registro\n          } else {\n            resolve(results); // Se terminó el recorrido\n          }\n        };\n        request.onerror = (error) =>\n          reject(this._expandError(error, `Error on «browsie.selectMany» operation over store «${store}»: `));\n      });\n    }\n\n    // Método para insertar varios items en un store\n    insertMany(store, items) {\n      this.constructor.trace(\"browsie.insertMany\", arguments);\n      this.triggers.emit(`crud.insert.many.${store}`, { store, items });\n      this.constructor.mustBeString(store, \"insertMany\", \"arguments[0]\");\n      this.constructor.mustBeArray(items, \"insertMany\", \"arguments[1]\");\n      return new Promise((resolve, reject) => {\n        if (items.length === 0) {\n          return resolve(false);\n        }\n        const transaction = this.$db.transaction(store, 'readwrite');\n        const objectStore = transaction.objectStore(store);\n        let insertedCount = 0;\n        items.forEach(item => {\n          const request = objectStore.add(item);\n          request.onsuccess = () => {\n            insertedCount++;\n            if (insertedCount === items.length) resolve();\n          };\n          request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.insertMany» operation over store «${store}» inserting «${items.length}» items: `));\n        });\n      });\n    }\n\n    // Método para actualizar varios items en un store\n    updateMany(store, filter, item) {\n      this.constructor.trace(\"browsie.updateMany\", arguments);\n      this.triggers.emit(`crud.update.many.${store}`, { store, filter, item });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readwrite');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.openCursor();\n        let updatedCount = 0;\n        request.onsuccess = () => {\n          const cursor = request.result;\n          if (cursor) {\n            if (Object.keys(filter).every(key => cursor.value[key] === filter[key])) {\n              const updatedItem = { ...cursor.value, ...item };\n              const updateRequest = cursor.update(updatedItem);\n              updateRequest.onsuccess = () => {\n                updatedCount++;\n                if (updatedCount === cursor.value.length) resolve();\n              };\n            }\n            cursor.continue();\n          }\n        };\n\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.updateMany» operation over store «${store}»: `));\n      });\n    }\n\n    // Método a tipo upsertAll para llenar los valores pero dejar los que no\n    async overwriteMany(store, filter, item) {\n      this.constructor.trace(\"browsie.overwriteMany\", arguments);\n      this.triggers.emit(`crud.overwrite.many.${store}`, { store, filter, item });\n      const allMatches = await this.selectMany(store, filter);\n      const allResults = [];\n      for (let indexRow = 0; indexRow < allMatches.length; indexRow++) {\n        const row = allMatches[indexRow];\n        const result = await this.overwrite(store, row, item);\n        allResults.push(result);\n      }\n      return allResults;\n    }\n\n    // Método para eliminar varios items de un store según un filtro\n    deleteMany(store, filterCallback) {\n      this.constructor.trace(\"browsie.deleteMany\", arguments);\n      this.triggers.emit(`crud.delete.many.${store}`, { store, filterCallback });\n      return new Promise((resolve, reject) => {\n        const transaction = this.$db.transaction(store, 'readwrite');\n        const objectStore = transaction.objectStore(store);\n        const request = objectStore.openCursor();\n        let deletedCount = 0;\n        request.onsuccess = () => {\n          const cursor = request.result;\n          if (!cursor) {\n            return resolve();\n          }\n          const isAccepted = filterCallback(cursor.value);\n          if (isAccepted) {\n            const deleteRequest = cursor.delete();\n            deleteRequest.onsuccess = () => {\n              deletedCount++;\n              if (deletedCount === cursor.value.length) {\n                return resolve();\n              }\n            };\n            deleteRequest.onerror = (error) => reject(this._expandError(error, `Error on «browsie.deleteMany» operation over store «${store}» and id «${cursor.value.id}»: `));\n          }\n          cursor.continue();\n        };\n        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.deleteMany» operation over store «${store}»: `));\n      });\n    }\n  }\n\n  // @TOCONTINUEFROM\n  class BrowsieMigration {\n\n    static from(...args) {\n      return new this(...args);\n    }\n\n    static createTable(arg) {\n      return this.from({\n        operation: \"createTable\",\n        parameters: arg\n      });\n    }\n\n    static renameTable(arg) {\n      return this.from({\n        operation: \"renameTable\",\n        parameters: arg\n      });\n    }\n\n    static deleteTable(arg) {\n      return this.from({\n        operation: \"deleteTable\",\n        parameters: arg\n      });\n    }\n\n    static createColumn(arg) {\n      return this.from({\n        operation: \"createColumn\",\n        parameters: arg\n      });\n    }\n\n    static renameColumn(arg) {\n      return this.from({\n        operation: \"renameColumn\",\n        parameters: arg\n      });\n    }\n\n    static deleteColumn(arg) {\n      return this.from({\n        operation: \"deleteColumn\",\n        parameters: arg\n      });\n    }\n\n    constructor(options = {}) {\n      LswDatabase.trace(\"LswDatabaseMigration.constructor\");\n      const { operation, parameters } = options;\n      this.$validateOperation(operation);\n      this.$validateParameters(parameters);\n      this.operation = operation;\n      this.parameters = parameters;\n      this.config = {\n        temporaryDatabase: this.parameters.fromDatabase + \"_\" + this.$getRandomString(5),\n      };\n      this.migrated = false;\n    }\n\n    $getRandomString(len = 10) {\n      LswDatabase.trace(\"LswDatabaseMigration.$getRandomString\");\n      const alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n      let out = \"\";\n      while (out.length < len) {\n        out += alphabet[Math.floor(Math.random() * alphabet.length)];\n      }\n      return out;\n    };\n\n    $validateOperation(operation) {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateOperation\");\n      if ([\"createTable\", \"renameTable\", \"deleteTable\", \"createColumn\", \"renameColumn\", \"deleteColumn\", \"cloneDatabase\", \"moveDatabase\"].indexOf(operation) === -1) {\n        throw new Error(\"Required «operation» to be a valid operation on «LswDatabaseMigration.$validateOperation»\");\n      }\n    }\n\n    $validateParameters(parameters) {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateParameters\");\n      if (typeof parameters !== \"object\") {\n        throw new Error(\"Required «parameters» to be an object on «LswDatabaseMigration.$validateParameters»\");\n      }\n    }\n\n    async $$transferBackTemporaryDatabase() {\n      await LswDatabase.deleteDatabase(this.parameters.fromDatabase);\n      await this.$replicateSchema({\n        fromDatabase: this.config.temporaryDatabase,\n        toDatabase: this.parameters.fromDatabase,\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.config.temporaryDatabase,\n        toDatabase: this.parameters.fromDatabase,\n      });\n      await LswDatabase.deleteDatabase(this.config.temporaryDatabase);\n    }\n\n    commit() {\n      LswDatabase.trace(\"LswDatabaseMigration.commit\");\n      return this[\"$$\" + this.operation].call(this).finally(() => {\n        this.migrated = true;\n      });\n    }\n\n    $validateCreateTableParameters() {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateCreateTableParameters\");\n      if (typeof this.parameters.fromDatabase !== \"string\") {\n        throw new Error(\"Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateCreateTableParameters»\");\n      }\n      if (typeof this.parameters.table !== \"string\") {\n        throw new Error(\"Required «parameters.table» to be a string on «LswDatabaseMigration.$validateCreateTableParameters»\");\n      }\n      if (typeof this.parameters.tableDefinition !== \"object\") {\n        throw new Error(\"Required «parameters.tableDefinition» to be an object on «LswDatabaseMigration.$validateCreateTableParameters»\");\n      }\n    }\n\n    async $$cloneDatabase() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$cloneDatabase\");\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.parameters.toDatabase,\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.parameters.toDatabase,\n      });\n    }\n\n    async $$moveDatabase() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$moveDatabase\");\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.parameters.toDatabase,\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.parameters.toDatabase,\n      });\n      await LswDatabase.deleteDatabase(this.parameters.fromDatabase);\n    }\n\n    async $$createTable() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$createTable\");\n      this.$validateCreateTableParameters();\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onAlterSchema: schema => {\n          schema[this.parameters.table] = this.parameters.tableDefinition;\n          return schema;\n        },\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onMapTableId: false,\n        onMapColumnId: false,\n      });\n      await this.$$transferBackTemporaryDatabase();\n    }\n\n    $validateDeleteTableParameters() {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateDeleteTableParameters\");\n      if (typeof this.parameters.fromDatabase !== \"string\") {\n        throw new Error(\"Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»\");\n      }\n      if (typeof this.parameters.table !== \"string\") {\n        throw new Error(\"Required «parameters.table» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»\");\n      }\n    }\n\n    async $$deleteTable() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$deleteTable\");\n      this.$validateDeleteTableParameters();\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onAlterSchema: schema => {\n          delete schema[this.parameters.table];\n          return schema;\n        },\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onMapTableId: false,\n        onMapColumnId: false,\n      });\n      await this.$$transferBackTemporaryDatabase();\n    }\n\n    $validateRenameTableParameters() {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateRenameTableParameters\");\n      if (typeof this.parameters.fromDatabase !== \"string\") {\n        throw new Error(\"Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»\");\n      }\n      if (typeof this.parameters.tableSource !== \"string\") {\n        throw new Error(\"Required «parameters.tableSource» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»\");\n      }\n      if (typeof this.parameters.tableDestination !== \"string\") {\n        throw new Error(\"Required «parameters.tableDestination» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»\");\n      }\n    }\n\n    async $$renameTable() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$renameTable\");\n      this.$validateRenameTableParameters();\n      const currentSchema = await LswDatabase.getSchema(this.parameters.fromDatabase);\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onAlterSchema: schema => {\n          delete schema[this.parameters.tableSource];\n          const tableInput = this.$adaptSchemaTableAsSchemaDefinition(currentSchema[this.parameters.tableSource]);\n          schema[this.parameters.tableDestination] = tableInput;\n          return schema;\n        },\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onMapTableId: tableId => {\n          return this.parameters.tableDestination;\n        },\n        onMapColumnId: false,\n      });\n      await this.$$transferBackTemporaryDatabase();\n    }\n\n    $validateCreateColumnParameters() {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateCreateColumnParameters\");\n      if (typeof this.parameters.fromDatabase !== \"string\") {\n        throw new Error(\"Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateCreateColumnParameters»\");\n      }\n      if (typeof this.parameters.table !== \"string\") {\n        throw new Error(\"Required «parameters.table» to be a string on «LswDatabaseMigration.$validateCreateColumnParameters»\");\n      }\n      if (typeof this.parameters.column !== \"string\") {\n        throw new Error(\"Required «parameters.column» to be a string on «LswDatabaseMigration.$validateCreateColumnParameters»\");\n      }\n      if (typeof this.parameters.columnDefinition !== \"object\") {\n        throw new Error(\"Required «parameters.columnDefinition» to be an object on «LswDatabaseMigration.$validateCreateColumnParameters»\");\n      }\n    }\n\n    async $$createColumn() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$createColumn\");\n      this.$validateCreateColumnParameters();\n      const isUnique = !!this.parameters.columnDefinition.isUnique;\n      const columnSymbol = `${isUnique ? \"!\" : \"\"}${this.parameters.column}`;\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        table: this.parameters.table,\n        onAlterSchema: schema => {\n          schema[this.parameters.table].push(columnSymbol);\n          return schema;\n        },\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onMapTableId: false,\n        onMapColumnId: false,\n      });\n      await this.$$transferBackTemporaryDatabase();\n    }\n\n    $validateDeleteColumnParameters() {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateDeleteColumnParameters\");\n      if (typeof this.parameters.fromDatabase !== \"string\") {\n        throw new Error(\"Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateDeleteColumnParameters»\");\n      }\n      if (typeof this.parameters.table !== \"string\") {\n        throw new Error(\"Required «parameters.table» to be a string on «LswDatabaseMigration.$validateDeleteColumnParameters»\");\n      }\n      if (typeof this.parameters.column !== \"string\") {\n        throw new Error(\"Required «parameters.column» to be a string on «LswDatabaseMigration.$validateDeleteColumnParameters»\");\n      }\n    }\n\n    async $$deleteColumn() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$deleteColumn\");\n      this.$validateDeleteColumnParameters();\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onAlterSchema: schema => {\n          console.log(schema);\n          const columnPosition = schema[this.parameters.table].indexOf(this.parameters.column);\n          schema[this.parameters.table].splice(columnPosition, 1);\n          return schema;\n        },\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        // !@TOCONFIGURE: $$deleteColumn needs a specific hook (or none).\n        onMapTableId: false,\n        onMapColumnId: false,\n      });\n      await this.$$transferBackTemporaryDatabase();\n    }\n\n    $validateRenameColumnParameters() {\n      LswDatabase.trace(\"LswDatabaseMigration.$validateRenameColumnParameters\");\n      if (typeof this.parameters.fromDatabase !== \"string\") {\n        throw new Error(\"Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateRenameColumnParameters»\");\n      }\n      if (typeof this.parameters.table !== \"string\") {\n        throw new Error(\"Required «parameters.table» to be a string on «LswDatabaseMigration.$validateRenameColumnParameters»\");\n      }\n      if (typeof this.parameters.columnSource !== \"string\") {\n        throw new Error(\"Required «parameters.columnSource» to be a string on «LswDatabaseMigration.$validateRenameColumnParameters»\");\n      }\n      if (typeof this.parameters.columnDestination !== \"string\") {\n        throw new Error(\"Required «parameters.columnDestination» to be a string on «LswDatabaseMigration.$validateRenameColumnParameters»\");\n      }\n    }\n\n    async $$renameColumn() {\n      LswDatabase.trace(\"LswDatabaseMigration.$$renameColumn\");\n      this.$validateRenameColumnParameters();\n      await this.$replicateSchema({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onAlterSchema: schema => {\n          console.log(schema);\n          const columnPosition = schema[this.parameters.table].indexOf(this.parameters.columnSource);\n          schema[this.parameters.table].splice(columnPosition, 1);\n          schema[this.parameters.table].push(this.parameters.columnDestination);\n          return schema;\n        },\n      });\n      await this.$populateDatabase({\n        fromDatabase: this.parameters.fromDatabase,\n        toDatabase: this.config.temporaryDatabase,\n        onMapTableId: false,\n        onMapColumnId: (columnId) => {\n          return columnId;\n        },\n      });\n      await this.$$transferBackTemporaryDatabase();\n    }\n\n    $adaptSchemaAsSchemaDefinition(schemaDefinition) {\n      const output = {};\n      const tableIds = Object.keys(schemaDefinition);\n      for (let index = 0; index < tableIds.length; index++) {\n        const storeId = tableIds[index];\n        const tableDefinition = schemaDefinition[storeId];\n        const columns = tableDefinition.indexes;\n        if (!(storeId in output)) {\n          output[storeId] = [];\n        }\n        for (let indexColumn = 0; indexColumn < columns.length; indexColumn++) {\n          const column = columns[indexColumn];\n          const columnId = column.name;\n          const columnInput = this.$adaptSchemaColumnAsSchemaDefinition(column, columnId);\n          output[storeId].push(columnInput);\n        }\n      }\n      return output;\n    }\n\n    $adaptSchemaTableAsSchemaDefinition(tableDefinition) {\n      const output = [];\n      const columns = tableDefinition.indexes;\n      for (let indexColumn = 0; indexColumn < columns.length; indexColumn++) {\n        const column = columns[indexColumn];\n        const columnId = column.name;\n        const columnInput = this.$adaptSchemaColumnAsSchemaDefinition(column, columnId);\n        output.push(columnInput);\n      }\n      return output;\n    }\n\n    $adaptSchemaColumnAsSchemaDefinition(column, columnId) {\n      if (column.unique) {\n        return \"!\" + columnId;\n      } else {\n        return columnId;\n      }\n    }\n\n    async $replicateSchema(scenario) {\n      LswDatabase.trace(\"LswDatabaseMigration.$replicateSchema\");\n      const { fromDatabase, toDatabase, onAlterSchema } = scenario;\n      console.log(`⌛️ Replicating database from «${fromDatabase}» to «${toDatabase}» on «LswDatabaseMigration.$replicateSchema»`);\n      const schemaDefinition = await LswDatabase.getSchema(fromDatabase);\n      const schemaInput = this.$adaptSchemaAsSchemaDefinition(schemaDefinition);\n      let alteredSchema = schemaInput;\n      if (onAlterSchema) {\n        alteredSchema = onAlterSchema(schemaInput);\n        if (typeof alteredSchema === \"undefined\") {\n          throw new Error(\"Required «onAlterSchema» to return an object on «LswDatabaseMigration.$replicateSchema»\")\n        }\n      }\n      console.log(\"Replicated schema:\", alteredSchema);\n      await LswDatabase.createDatabase(toDatabase, alteredSchema);\n    }\n\n    async $populateDatabase(scenario) {\n      LswDatabase.trace(\"LswDatabaseMigration.$populateDatabase\");\n      const { fromDatabase, toDatabase, onMapTableId = false, onMapColumnId = false } = scenario;\n      console.log(`⌛️ Populating database from «${fromDatabase}» to «${toDatabase}» on «LswDatabaseMigration.$populateDatabase»`);\n      const schemaDefinition = await LswDatabase.getSchema(fromDatabase);\n      const tableIds = Object.keys(schemaDefinition);\n      let fromConnection = undefined;\n      let toConnection = undefined;\n      let indexTable = 0;\n      let indexColumn = 0;\n      let tableId = undefined;\n      let alteredTableId = undefined;\n      try {\n        fromConnection = new LswDatabase(fromDatabase);\n        toConnection = new LswDatabase(toDatabase);\n        await fromConnection.open();\n        await toConnection.open();\n        for (indexTable = 0; indexTable < tableIds.length; indexTable++) {\n          tableId = tableIds[indexTable];\n          console.log(\"table:\", tableId);\n          Transfering_tables: {\n            console.log(`⌛️ Transfering table «${tableId}» on «LswDatabaseMigration.$populateDatabase»`);\n            let allRows = await fromConnection.selectMany(tableId, v => true);\n            console.log(\"[*] Getting table id\");\n            alteredTableId = tableId;\n            if (onMapTableId) {\n              alteredTableId = onMapTableId(tableId);\n            }\n            console.log(\"[*] Getting column id\");\n            if (onMapColumnId) {\n              allRows = allRows.reduce((output, row) => {\n                const allKeys = Object.keys(row);\n                const alteredRow = {};\n                for (let indexKeys = 0; indexKeys < allKeys.length; indexKeys++) {\n                  console.log(\"column:\", indexKeys);\n                  const columnId = allKeys[indexKeys];\n                  const alteredColumnId = onMapColumnId(columnId, tableId, alteredTableId, {\n                    fromConnection,\n                    toConnection\n                  }) || columnId;\n                  alteredRow[alteredColumnId] = row[columnId];\n                }\n                output.push(alteredRow);\n                return output;\n              }, []);\n            }\n            console.log(\"[*] Got:\", alteredTableId, allRows);\n            await toConnection.insertMany(alteredTableId, allRows);\n            console.log(\"What??? 444\")\n          }\n        }\n      } catch (error) {\n        console.log(`💥 Error while populating database on table ${tableId || \"-\"} (alias «${alteredTableId}»):`, error);\n      } finally {\n        try {\n          await fromConnection.close();\n        } catch (error) {\n          console.log(error);\n        }\n        try {\n          await toConnection.close();\n        } catch (error) {\n          console.log(error);\n        }\n        console.log(`[*] Database «${toDatabase}» population finished successfully.`);\n      }\n    }\n\n  }\n\n  class LswDatabaseMigration extends BrowsieMigration {\n\n  }\n\n  LswDatabaseMigration.default = LswDatabaseMigration;\n  window.LswDatabaseMigration = LswDatabaseMigration;\n  window.BrowsieMigration = BrowsieMigration;\n\n  class BrowsieMigrable extends BrowsieCrudAPI {\n\n    static migration = LswDatabaseMigration;\n\n  }\n\n  window.Browsie = BrowsieMigrable;\n  Browsie.default = BrowsieMigrable;\n\n  /* Extended API */\n\n  class LswDatabase extends BrowsieMigrable {\n\n    class = this.constructor;\n\n  }\n\n  LswDatabase.default = LswDatabase;\n  window.LswDatabase = LswDatabase;\n",
              "$code.label": "LswDatabase class",
              "$output": "index.html"
            }
          ],
          "Lsw DatabaseVirtualizer API » LswDatabaseVirtualizer class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-database-virtualizer/lsw-database-virtualizer.js",
              "$location": {
                "start": {
                  "offset": 310,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 428,
                  "line": 15,
                  "column": 1
                }
              },
              "section": "Lsw DatabaseVirtualizer API » LswDatabaseVirtualizer class",
              "$code": "  const LswDatabaseVirtualizer = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    static start(...args) {\n      const virtualization = new this(...args);\n      return virtualization;\n    }\n\n    $lifecycle = [\n      \"onStart\",\n      \"onStartValidation\",\n      \"onValidateConnection\",\n      \"onValidateSchema\",\n      \"onFinishValidation\",\n      \"onDeleteVirtualDatabase\",\n      \"onStartClonation\",\n      \"onCloneDatabase\",\n      \"onFinishClonation\",\n      \"onStartVirtualization\",\n      \"onVirtualizeSchema\",\n      \"onVirtualizeTables\",\n      \"onVirtualizeColumns\",\n      \"onFinishVirtualization\",\n      \"onStartFormalization\",\n      \"onFormalizeColumns\",\n      \"onFormalizeTables\",\n      \"onFormalizeSchema\",\n      \"onReport\",\n      \"onFinishFormalization\",\n      \"onFinish\",\n    ];\n\n    $defaultConfigurations = {\n      trace: (Vue?.prototype?.$lsw?.logger?.$options?.active ),\n    };\n\n    $trace(method, args) {\n      if(this.$configurations.trace) {\n        const methodArgs = Array.from(args);\n        console.log(`[trace][lsw-database-virtualizer] ${method}: (${methodArgs.length}) ${methodArgs.map(e => typeof e).join(\", \")}`);\n      }\n    }\n\n    constructor(configurations = {}) {\n      this.$configurations = Object.assign({}, this.$defaultConfigurations, configurations || {});\n      this.$trace(\"constructor\", arguments);\n      this.triggers = new TriggersClass();\n      this.physicalConnection = undefined;\n      this.virtualConnection = undefined;\n      this.schema = undefined;\n    }\n\n    configure(options = {}) {\n      this.$trace(\"configure\", arguments);\n      $ensure({ options }, 1).to.have.uniquelyKeys([\"physicalConnection\", \"virtualConnection\", \"schema\"]);\n      Object.assign(this, options);\n      return this;\n    }\n\n    setPhysicalConnection(physicalConnection) {\n      this.$trace(\"setPhysicalConnection\", arguments);\n      this.physicalConnection = physicalConnection;\n      return this;\n    }\n\n    setVirtualConnection(virtualConnection) {\n      this.$trace(\"setVirtualConnection\", arguments);\n      this.virtualConnection = virtualConnection;\n      return this;\n    }\n\n    setSchema(schema) {\n      this.$trace(\"setSchema\", arguments);\n      this.schema = schema;\n      return this;\n    }\n\n    start() {\n      this.$trace(\"start\", arguments);\n      return LswCycler.from(this, \"*\").run(this.$lifecycle);\n    }\n\n    async onStart() {\n      this.$trace(\"onStart\", arguments);\n      // *@TODO:\n    }\n\n    async onStartValidation() {\n      this.$trace(\"onStartValidation\", arguments);\n      // *@TODO:\n    }\n\n    async onValidateConnection() {\n      this.$trace(\"onValidateConnection\", arguments);\n      // *@TODO:\n    }\n\n    async onValidateSchema() {\n      this.$trace(\"onValidateSchema\", arguments);\n      // *@TODO:\n    }\n\n    async onFinishValidation() {\n      this.$trace(\"onFinishValidation\", arguments);\n      // *@TODO:\n    }\n\n    async onDeleteVirtualDatabase() {\n      this.$trace(\"onDeleteVirtualDatabase\", arguments);\n      // *@TODO:\n    }\n\n    async onStartClonation() {\n      this.$trace(\"onStartClonation\", arguments);\n      // *@TODO:\n    }\n\n    async onCloneDatabase() {\n      this.$trace(\"onCloneDatabase\", arguments);\n      // *@TODO:\n    }\n\n    async onFinishClonation() {\n      this.$trace(\"onFinishClonation\", arguments);\n      // *@TODO:\n    }\n\n    async onStartVirtualization() {\n      this.$trace(\"onStartVirtualization\", arguments);\n      // *@TODO:\n    }\n\n    async onVirtualizeSchema() {\n      this.$trace(\"onVirtualizeSchema\", arguments);\n      // *@TODO:\n    }\n\n    async onVirtualizeTables() {\n      this.$trace(\"onVirtualizeTables\", arguments);\n      // *@TODO:\n    }\n\n    async onVirtualizeColumns() {\n      this.$trace(\"onVirtualizeColumns\", arguments);\n      // *@TODO:\n    }\n\n    async onFinishVirtualization() {\n      this.$trace(\"onFinishVirtualization\", arguments);\n      // *@TODO:\n    }\n\n    async onStartFormalization() {\n      this.$trace(\"onStartFormalization\", arguments);\n      // *@TODO:\n    }\n\n    async onFormalizeColumns() {\n      this.$trace(\"onFormalizeColumns\", arguments);\n      // *@TODO:\n    }\n\n    async onFormalizeTables() {\n      this.$trace(\"onFormalizeTables\", arguments);\n      // *@TODO:\n    }\n\n    async onFormalizeSchema() {\n      this.$trace(\"onFormalizeSchema\", arguments);\n      // *@TODO:\n    }\n\n    async onFinishFormalization() {\n      this.$trace(\"onFinishFormalization\", arguments);\n      // *@TODO:\n    }\n\n    async onReport() {\n      this.$trace(\"onReport\", arguments);\n      // *@TODO:\n    }\n\n    async onFinish() {\n      this.$trace(\"onFinish\", arguments);\n      // *@TODO:\n    }\n\n  }\n",
              "$code.label": "LswDatabaseVirtualizer class",
              "$output": "index.html"
            }
          ],
          "Lsw Depender API » LswDepender class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-depender/lsw-depender.js",
              "$location": {
                "start": {
                  "offset": 288,
                  "line": 14,
                  "column": 3
                },
                "end": {
                  "offset": 502,
                  "line": 24,
                  "column": 6
                }
              },
              "$section": "Lsw Depender API » LswDepender class",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "LswDepender",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-depender/lsw-depender.js",
              "$location": {
                "start": {
                  "offset": 503,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 588,
                  "line": 26,
                  "column": 1
                }
              },
              "section": "Lsw Depender API » LswDepender class",
              "$code": "  const Definition = class {\n    constructor({ id, dependencies = [] }) {\n      this.id = id;\n      this.dependencies = dependencies;\n    }\n  };\n\n  const LswDepender = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor(definitions = {}) {\n      this.$definitions = definitions;\n    }\n\n    hasDefined(name) {\n      if (name in this.$definitions) {\n        if (this.$definitions[name] instanceof Definition) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    define(...args) {\n      if (typeof args[0] === \"string\") {\n        return this.addDefinition(...args);\n      }\n      return this.addUniqueDefinitions(...args);\n    }\n\n    resolve(idsInput = this, defs = this.$definitions) {\n      const ids = idsInput === this ? Object.keys(this.$definitions) : idsInput;\n      let resolved = new Set();\n      let resultado = [];\n      const resolverNodo = function(id) {\n        console.log(\"resolviendo nodo:\", id, defs);\n        if (resolved.has(id)) return;\n        if (!defs[id]) return; // Si no está definido, lo ignoramos\n        for (let dep of defs[id].dependencies || []) {\n          resolverNodo(dep);\n        }\n        resolved.add(id);\n        resultado.push(id);\n      }\n      for (let id of [].concat(ids)) {\n        resolverNodo(id);\n      }\n      return resultado;\n    }\n\n    addDefinition(name, definition, shouldFailOnRedundancy = 1, shouldOverrideOnRedundancy = 1) {\n      Validation: {\n        if (this.hasDefined(name)) {\n          if (shouldFailOnRedundancy) {\n            throw new Error(`Dependency «${name}» is already defined and should not redund on «LswDepender.define»`);\n          } else if (!shouldOverrideOnRedundancy) {\n            return false; // !@BREAK: the fallback must not override it\n          } else if (shouldOverrideOnRedundancy) {\n            // !@OK: the fallback will override it\n          } else {\n            throw new Error(\"Cannot logically happen (1)\");\n          }\n        }\n      }\n      Define_it: {\n        if (typeof definition !== \"object\") {\n          throw new Error(`Required definition of «${name}» to be an object on «LswDepender.define»`);\n        } else if (typeof definition.id !== \"string\") {\n          definition.id = name;\n        } else if (Array.isArray(definition.dependencies)) {\n          throw new Error(`Required definition of «${name}» its property «dependencies» to be a array on «LswDepender.define»`);\n        } else {\n          for (let indexDependency = 0; indexDependency < definition.dependencies.length; indexDependency++) {\n            const dependencyRef = definition.dependencies[indexDependency];\n            if (typeof dependencyRef !== \"string\") {\n              throw new Error(`Required definition of «${name}» its property «dependencies» on its index «${indexDependency}» to be a string on «LswDepender.define»`);\n            }\n          }\n        }\n        this.$definitions[name] = new Definition(definition);\n      }\n    }\n\n    addUniqueDefinitions(moreDefinitions = {}) {\n      const definitionIds = Object.keys(moreDefinitions);\n      for (let indexId = 0; indexId < definitionIds.length; indexId++) {\n        const definitionId = definitionIds[indexId];\n        const definitionInstance = moreDefinitions[definitionId];\n        this.define(definitionId, definitionInstance, 1);\n      }\n    }\n\n    addMissingDefinitions(moreDefinitions = {}) {\n      const definitionIds = Object.keys(moreDefinitions);\n      for (let indexId = 0; indexId < definitionIds.length; indexId++) {\n        const definitionId = definitionIds[indexId];\n        const definitionInstance = moreDefinitions[definitionId];\n        this.define(definitionId, definitionInstance, 0, 0);\n      }\n    }\n\n    resetDefinitions(moreDefinitions = {}) {\n      const definitionIds = Object.keys(moreDefinitions);\n      for (let indexId = 0; indexId < definitionIds.length; indexId++) {\n        const definitionId = definitionIds[indexId];\n        const definitionInstance = moreDefinitions[definitionId];\n        this.define(definitionId, definitionInstance, 0, 1);\n      }\n    }\n\n    deleteDefinitions(definitionsInput = []) {\n      const definitions = Array.isArray(definitionsInput) ? definitionsInput : [definitionsInput];\n      for (let indexDefinition = 0; indexDefinition < definitions.length; indexDefinition++) {\n        const definitionId = definitions[indexDefinition];\n        delete this.$definitions[definitionId];\n      }\n    }\n\n  }\n\n  LswDepender.default = LswDepender;\n",
              "$code.label": "LswDepender class",
              "$output": "index.html"
            }
          ],
          "Lsw Dom Irruptor API » LswDomIrruptor class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-dom/lsw-dom-irruptor.js",
              "$location": {
                "start": {
                  "offset": 292,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 387,
                  "line": 15,
                  "column": 1
                }
              },
              "section": "Lsw Dom Irruptor API » LswDomIrruptor class",
              "$code": "  const LswDomIrruptor = class {\n\n    static async aniadirNota() {\n      LswDom.querySelectorFirst(\".home_bottom_panel > button\", \"+ 💬\").click();\n    }\n    static async verNotas() {\n      LswDom.querySelectorFirst(\".home_mobile_off_panel > .mobile_off_panel_cell\", \"💬\").click();\n    }\n    static async abrirHomepage() {\n      LswDom.querySelectorFirst(\".main_topbar_button\", \"📟\").click();\n    }\n    static async calendario() {\n      LswDom.querySelectorFirst(\".home_mobile_off_panel > .mobile_off_panel_cell\", \"📅\").click();\n    }\n    static async abrirCalendario() {\n      LswDom.querySelectorFirst(\".main_topbar_button\", \"📆\").click();\n    }\n    static async reportesDeCalendario() {\n      LswDom.querySelectorFirst(\".home_mobile_off_panel > .mobile_off_panel_cell\", \"📅\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"button.nowrap\", \"📊\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"button\", \"🔮 Iniciar conductometría\").click();\n      \n    }\n    static async abrirNavegacionRapida() {\n      LswDom.querySelectorFirst(\".main_topbar_button\", \"📟\").click();\n    }\n    static async abrirBinarios() {\n      LswDom.querySelectorFirst(\".main_topbar_button\", \"📟\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\".lista_apps div\", \"💣 Binarios\").click();\n    }\n    static async abrirBaseDeDatos() {\n      LswDom.querySelectorFirst(\".main_topbar_button\", \"📟\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"div\", \"📦 Base de datos\").click();\n    }\n    static async abrirBaseDeDatosPorTabla(tabla) {\n      LswDom.querySelectorFirst(\".main_topbar_button\", \"📟\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"div\", \"📦 Base de datos\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"span.table_name\", tabla).click();\n    }\n    static async abrirBaseDeDatosPorNuevoDatoDeTabla(tabla) {\n      this.abrirBaseDeDatosPorTabla(tabla);\n      await LswDom.waitForMilliseconds(500);\n      LswDom.querySelectorFirst(\"button\", \"➕\").click();\n    }\n    static async abrirAccionesVirtuales() {\n      await this.abrirBaseDeDatos();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"button\", \"Accion_virtual\").click();\n    }\n    static async abrirTareasPosterioresDeNavegacionRapida() {\n      LswDom.querySelectorFirst(\".lista_apps button\", \"🕓 Tareas posteriores\").click();\n    }\n    static async abrirRecords() {\n      this.abrirTareasPosterioresDeNavegacionRapida();\n      await LswDom.waitForMilliseconds(500);\n      LswDom.querySelectorFirst(\"button\", \"📷📊\").click();\n    }\n    static async configuraciones() {\n      LswDom.querySelectorFirst(\"#windows_pivot_button\", \"🔵\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"button.main_tab_topbar_button\", \"🔧\").click();\n    }\n    static async abrirConfiguraciones() {\n      LswDom.querySelectorFirst(\"#windows_pivot_button\", \"🔵\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"button.main_tab_topbar_button\", \"🔧\").click();\n    }\n    static async abrirFicheros() {\n      LswDom.querySelectorFirst(\"#windows_pivot_button\", \"🔵\").click();\n      await LswDom.waitForMilliseconds(200);\n      LswDom.querySelectorFirst(\"button.main_tab_topbar_button\", \"📂\").click();\n    }\n    static async abrirWiki() {\n      LswDom.querySelectorFirst(\".mobile_off_panel_cell\", \"🔬\").click();\n    }\n    static async abrirWikiArticulos() {\n      await this.abrirWiki();\n      await LswDom.waitForMilliseconds();\n      Abrir_articulos: {\n        await LswDom.waitForMilliseconds(200);\n        LswDom.querySelectorFirst(\".lsw_wiki button.supermini\", \"🔬\").click();\n        return;\n      }\n    }\n    static async abrirWikiLibros() {\n      await this.abrirWiki();\n      await LswDom.waitForMilliseconds();\n      Abrir_libros: {\n        await LswDom.waitForMilliseconds(200);\n        LswDom.querySelectorFirst(\".lsw_wiki button.supermini\", \"📚\").click();\n      }\n    }\n    static async abrirWeekPlanner() {\n      await this.abrirCalendario();\n      Abrir_planificador: {\n        await LswDom.waitForMilliseconds(1000);\n        LswDom.querySelectorFirst(\"button\", \"7️⃣\").click();\n      }\n    }\n    static async abrirAcciones() {\n      await this.abrirBaseDeDatos();\n      Abrir_planificador: {\n        await LswDom.waitForMilliseconds(1000);\n        LswDom.querySelectorFirst(\"button\", \"7️⃣\").click();\n      }\n    }\n    \n    static async abrirNuevaFeature() {\n      await this.abrirHomepage();\n      Abrir_planificador: {\n        await LswDom.waitForMilliseconds(1000);\n        LswDom.querySelectorFirst(\"div\", \"✨ Nueva feature\").click();\n      }\n    }\n\n    static async abrirJsInspector() {\n      await this.abrirHomepage();\n      Abrir_inspector: {\n        await LswDom.waitForMilliseconds(1000);\n        LswDom.querySelectorFirst(\"div\", \"🪲 Inspector de JS\").click();\n      }\n    }\n\n    static async abrirTestsDeAplicacion() {\n      await this.abrirHomepage();\n      Abrir_tests: {\n        await LswDom.waitForMilliseconds(200);\n        LswDom.querySelectorFirst(\"div\", \"✅ Tests de aplicación\").click();\n      }\n    }\n\n    static async arrancarTestsDeAplicacion() {\n      await this.abrirTestsDeAplicacion();\n      Abrir_tests: {\n        await LswDomIrruptor.abrirTestsDeAplicacion();\n        await LswUtils.waitForMilliseconds(1000);\n        await LswDom.querySelectorFirst(\"button\", \"🧪 ↗️\").click();\n        await LswUtils.waitForMilliseconds(1000);\n        await LswDom.querySelectorFirst(\"button\", \"▶️ Iniciar tests\").click();\n      }\n    }\n\n    static async getRutinerTimeout() {\n      const rutinerConfig = await Vue.prototype.$lsw.fs.evaluateAsDotenvFileOrReturn(\"/kernel/settings/rutiner.config.env\", []);\n      LswTimer.utils.fromDurationstringToMilliseconds(rutinerConfig.timeout);\n      return rutinerConfig.timeout;\n    }\n\n    static async setRutinerTimeout(durationstring) {\n      LswTimer.utils.fromDurationstringToMilliseconds(durationstring);\n      await Vue.prototype.$lsw.fs.write_file(\"/kernel/settings/rutiner.config.env\", \"timeout=\" + durationstring);\n    }\n\n    static async configurarRutinerTimeout() {\n      const currentTimeout = await LswDomIrruptor.getRutinerTimeout();\n      const duracion = await Vue.prototype.$lsw.dialogs.open({\n        title: \"Configurar frecuencia de mensaje rutinario\",\n        template: `\n          <div class=\"pad_1\" v-xform.form=\"{ onSubmit }\" ref=\"formulario\">\n            <div class=\"pad_bottom_1\">Especifica la duración preferida:</div>\n            <lsw-duration-control :settings=\"{name:'duracion',initialValue}\" />\n            <hr/>\n            <div class=\"flex_row centered pad_1\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"submitForm\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            initialValue: currentTimeout,\n          },\n          methods: {\n            onSubmit(formdata) {\n              return this.accept(formdata.duracion);\n            },\n            async submitForm() {\n              this.$trace(\"Dialogs.configurar-frecuencia-rutiner.methods.submitForm\");\n              return await this.$refs.formulario.$xform.submit();\n            }\n          },\n        }\n      });\n      if(duracion === -1) {\n        return;\n      }\n      if(typeof duracion !== \"string\") {\n        console.log(\"duracion\", duracion);\n      }\n      const milliseconds = LswTimer.utils.fromDurationstringToMilliseconds(duracion);\n      return await LswDomIrruptor.setRutinerTimeout(duracion);\n    }\n\n  }\n\n  return LswDomIrruptor;\n",
              "$code.label": "LswDomIrruptor class",
              "$output": "index.html"
            }
          ],
          "Lsw Dom API » LswDom class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-dom/lsw-dom.js",
              "$location": {
                "start": {
                  "offset": 281,
                  "line": 15,
                  "column": 3
                },
                "end": {
                  "offset": 480,
                  "line": 25,
                  "column": 6
                }
              },
              "$section": "Lsw Dom API » LswDom class",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "LswDom",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-dom/lsw-dom.js",
              "$location": {
                "start": {
                  "offset": 481,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 551,
                  "line": 27,
                  "column": 1
                }
              },
              "section": "Lsw Dom API » LswDom class",
              "$code": "  const LswDom = class {\n\n    static collectLeaves(originalCollection, selectorSequence = []) {\n      $ensure(originalCollection).type(\"object\");\n      $ensure(selectorSequence).type(\"object\").to.be.array();\n      let collection = Array.isArray(originalCollection) ? originalCollection : [originalCollection];\n      const mapperFactory = selector => element => {\n        return [].concat(element.querySelectorAll(selector));\n      };\n      for(let indexSelector=0; indexSelector<selectorSequence.length; indexSelector++) {\n        const selector = selectorSequence[indexSelector];\n        const subnodes = collection.map(mapperFactory(selector)).flat();\n        collection = [].concat(subnodes);\n      }\n      return collection;\n    }\n\n    static getClosestParent(originalElement, selector) {\n      $ensure(originalElement).type(\"object\").to.be.instanceOf(HTMLElement);\n      $ensure(selector).type(\"string\");\n      let element = originalElement.parentElement;\n      while(element && (element !== document)) {\n        if(element.matches(selector)) {\n          return element;\n        }\n        element = element.parentElement;\n      }\n      return null;\n    }\n\n    static getClosestChildren(originalElement, selector) {\n      $ensure(originalElement).type(\"object\").to.be.instanceOf(HTMLElement);\n      $ensure(selector).type(\"string\");\n      return [...originalElement.querySelectorAll(selector)].filter(element => {\n        return this.getClosestParent(element, selector) === originalElement;\n      });\n    }\n\n    static querySelectorFirst(selector, matchingText = false, originalElement = document) {\n      const all = originalElement.querySelectorAll(selector);\n      const matched = Array.from(all).filter(element => {\n        return element.textContent.trim().toLowerCase() === matchingText.toLowerCase();\n      });\n      return matched.length ? matched[0] : null;\n    }\n\n    static findVue(selector, matchingText = false, base = document) {\n      const all = base.querySelectorAll(selector);\n      const matched = Array.from(all).filter(element => {\n        if(!matchingText) {\n          return true;\n        }\n        return element.textContent.trim().toLowerCase() === matchingText.toLowerCase();\n      });\n      return matched.length ? matched[0].__vue__ : null;\n    }\n\n    static waitForMilliseconds(ms) {\n      return new Promise((resolve, reject) => {\n        setTimeout(resolve, ms);\n      });\n    }\n\n    static extractPlaintextFromHtmltext(htmlText) {\n      const el1 = document.createElement(\"div\");\n      el1.innerHTML = htmlText;\n      return el1.textContent;\n    }\n\n    static findCssRulesContaining(selector) {\n      const matchingRules = [];\n      for (const styleSheet of document.styleSheets) {\n        let rules;\n        try {\n          rules = styleSheet.cssRules || styleSheet.rules;\n        } catch (e) {\n          // Evita errores por CORS en hojas de estilo externas\n          continue;\n        }\n        if (!rules) continue;\n        for (const rule of rules) {\n          if (rule.selectorText && rule.selectorText.includes(selector)) {\n            matchingRules.push(rule);\n          }\n        }\n      }\n      return matchingRules;\n    }\n\n    static hasCssRulesContaining(selector) {\n      const matchingRules = [];\n      for (const styleSheet of document.styleSheets) {\n        let rules;\n        try {\n          rules = styleSheet.cssRules || styleSheet.rules;\n        } catch (e) {\n          // Evita errores por CORS en hojas de estilo externas\n          continue;\n        }\n        if (!rules) continue;\n        for (const rule of rules) {\n          if (rule.selectorText && rule.selectorText.includes(selector)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n  };\n",
              "$code.label": "LswDom class",
              "$output": "index.html"
            }
          ],
          "Lsw Vue2 API » LswVue2 class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-dom/lsw-vue2.js",
              "$location": {
                "start": {
                  "offset": 280,
                  "line": 14,
                  "column": 3
                },
                "end": {
                  "offset": 482,
                  "line": 24,
                  "column": 6
                }
              },
              "$section": "Lsw Vue2 API » LswVue2 class",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "LswVue2",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-dom/lsw-vue2.js",
              "$location": {
                "start": {
                  "offset": 483,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 556,
                  "line": 26,
                  "column": 1
                }
              },
              "section": "Lsw Vue2 API » LswVue2 class",
              "$code": "  const LswVue2 = class {\n\n    static getClosestParent(component, filterCallback) {\n      $ensure(component).type(\"object\");\n      $ensure(filterCallback).type(\"function\");\n      let parentOf = component;\n      do {\n        parentOf = parentOf.$parent;\n        const isValid = filterCallback(parentOf);\n        if (isValid) {\n          return parentOf;\n        }\n      } while (typeof parentOf !== \"undefined\");\n      return undefined;\n    }\n\n    static extendComponent(baseComponent = {}) {\n      const extendedComponent = Object.assign({}, baseComponent);\n      extendedComponent.props = Object.assign({}, baseComponent.props || {});\n      extendedComponent.methods = Object.assign({}, baseComponent.methods || {});\n      extendedComponent.watch = Object.assign({}, baseComponent.watch || {});\n      extendedComponent.computed = Object.assign({}, baseComponent.computed || {});\n      return extendedComponent;\n    }\n\n  }\n",
              "$code.label": "LswVue2 class",
              "$output": "index.html"
            }
          ],
          "Lsw Ensurer API » LswEnsurer class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-ensurer/ensure.js",
              "$location": {
                "start": {
                  "offset": 286,
                  "line": 14,
                  "column": 3
                },
                "end": {
                  "offset": 497,
                  "line": 24,
                  "column": 6
                }
              },
              "$section": "Lsw Ensurer API » LswEnsurer class",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "LswEnsurer",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-ensurer/ensure.js",
              "$location": {
                "start": {
                  "offset": 498,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 580,
                  "line": 26,
                  "column": 1
                }
              },
              "section": "Lsw Ensurer API » LswEnsurer class",
              "$code": "  class AssertionError extends Error {\n\n    constructor(...args) {\n      super(...args);\n      this.name = \"AssertionError\";\n    }\n\n  }\n\n  class Ensurement {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor(source, asLabeledObject = 0) {\n      Resolve_subject: {\n        if ((asLabeledObject === 1) && (typeof source === \"object\")) {\n          const sourceKeys = Object.keys(source);\n          if (sourceKeys.length !== 1) {\n            throw new Error(`The first parameter of $ensure or $check {when $2 is literally 1} must have 1 property (not ${sourceKeys.length}) on «Ensurement.constructor»`);\n          }\n          this.$subjectId = sourceKeys[0];\n          this.$subject = source[this.$subjectId];\n        } else if(typeof asLabeledObject === \"string\") {\n          this.$subjectId = asLabeledObject;\n          this.$subject = source;\n        } else {\n          this.$subjectId = \"@\";\n          this.$subject = source;\n        }\n      }\n      this.$operation = undefined;\n      this.$objectation = undefined;\n      this.asBoolean = false;\n    }\n    type(value) {\n      this.$operation = \"is of type\";\n      this.$objectation = value;\n      if(typeof value === \"string\") {\n        if (typeof this.$subject !== value) {\n          return this.$asFailed();\n        }\n      } else if(Array.isArray(value)) {\n        if(value.indexOf(typeof this.$subject) === -1) {\n          return this.$asFailed();\n        }\n      } else {\n        throw new Error(`Bad parameter on «$ensure(...).type(?)» (${typeof value} not admitted)`);\n      }\n      return this.$asResolved();\n    }\n    notType(value) {\n      this.$operation = \"is not of type\";\n      this.$objectation = value;\n      if (typeof this.$subject === value) {\n        return this.$asFailed();\n      }\n      return this.$asResolved();\n    }\n    is(value) {\n      this.$operation = \"is\";\n      this.$objectation = value;\n      if (this.$subject !== value) {\n        return this.$asFailed();\n      }\n      return this.$asResolved();\n    }\n    isnt(value) {\n      this.$operation = \"is not\";\n      this.$objectation = value;\n      if (this.$subject === value) {\n        return this.$asFailed();\n      }\n      return this.$asResolved();\n    }\n    can(value) {\n      this.$operation = \"can\";\n      this.$objectation = value;\n      if (!value(this.$subject)) {\n        return this.$asFailed();\n      }\n      return this.$asResolved();\n    }\n    cant(value) {\n      this.$operation = \"cant\";\n      this.$objectation = value;\n      if (value(this.$subject)) {\n        return this.$asFailed();\n      }\n      return this.$asResolved();\n    }\n    throws(value) {\n      this.$operation = \"throws\";\n      this.$objectation = value;\n      try {\n        objectation(this.$subject);\n        return this.$asFailed();\n      } catch (error) {\n        return this.$asResolved();\n      }\n    }\n    doesntThrow(value) {\n      this.$operation = \"doesntThrow\";\n      this.$objectation = value;\n      try {\n        value(this.$subject);\n        return this.$asFailed();\n      } catch (error) {\n        return this.$asResolved();\n      }\n    }\n    $asFailed(operation = this.$operation) {\n      if (this.asBoolean) {\n        return false;\n      }\n      throw new AssertionError(\"could not ensure «\" + this.$subjectId + \"» \" + operation + (this.$objectation ? \" «\" + this.$getObjectationAsString() + \"»\": \"\") + \"\");\n    }\n    $getObjectationAsString() {\n      return JSON.stringify(this.$objectation);\n    }\n    $asResolved() {\n      if (this.asBoolean) {\n        return true;\n      } else {\n        return this;\n      }\n    }\n  };\n\n  const BasicToBeInterface = class {\n    $isNegated = false;\n    set $operation(value) {\n      this.$ensurement.$operation = value;\n    }\n    get $operation() {\n      return this.$ensurement.$operation;\n    }\n    set $objectation(value) {\n      this.$ensurement.$objectation = value;\n    }\n    get $objectation() {\n      return this.$ensurement.$objectation;\n    }\n    constructor(ensurement) {\n      this.$ensurement = ensurement;\n      this.$subject = this.$ensurement.$subject;\n    }\n    $makeNegable(condition) {\n      return this.$isNegated === true ? !condition : condition;\n    }\n    $asFailed() {\n      return this.$ensurement.$asFailed();\n    }\n    $resolveNegableString(text) {\n      return text.replace(/\\{not\\?\\} */g, this.$isNegated ? \"not \" : \"\");\n    }\n  };\n\n  const ToBeInterface = class extends BasicToBeInterface {\n    string() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be string\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof this.$subject !== \"string\")) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    number() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be number\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof this.$subject !== \"number\") || Number.isNaN(this.$subject)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    object() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be object\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof this.$subject !== \"object\")) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    null() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be null\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof this.$subject !== null)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    undefined() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be undefined\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof this.$subject !== \"undefined\")) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    boolean() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be boolean\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof this.$subject !== \"boolean\")) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    instanceOf(clazz) {\n      this.$operation = this.$resolveNegableString(\"to {not?} be instanceOf\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(!(this.$subject instanceof clazz))) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    array() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be array\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(!Array.isArray(this.$subject))) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    function() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be function\");\n      this.$objectation = undefined;\n      if (this.$makeNegable(typeof (this.$subject) !== \"function\")) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    empty() {\n      this.$operation = this.$resolveNegableString(\"to {not?} be empty\");\n      this.$objectation = undefined;\n      const isEmpty = (() => {\n        const s = this.$subject;\n        if (Array.isArray(s)) {\n          return s.length === 0;\n        } else if (typeof s === \"object\") {\n          return s === null || Object.keys(s).length === 0;\n        } else if (typeof s === \"string\") {\n          return s === \"\";\n        } else if (typeof s === \"number\") {\n          return s === 0;\n        } else if (typeof s === \"boolean\") {\n          return s === false;\n        } else {\n          return true;\n        }\n      })();\n      if (this.$makeNegable(!isEmpty)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    equalTo(value) {\n      this.$operation = this.$resolveNegableString(\"to {not?} be equal to\");\n      this.$objectation = value;\n      let isEqual = this.$subject === value;\n      if (this.$makeNegable(!isEqual)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    equalOrGreaterThan(value) {\n      this.$operation = this.$resolveNegableString(\"to {not?} be equal or greater than\");\n      this.$objectation = value;\n      let isGreaterOrEqual = this.$subject >= value;\n      if (this.$makeNegable(!isGreaterOrEqual)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    greaterThan(value) {\n      this.$operation = this.$resolveNegableString(\"to {not?} be greater than\");\n      this.$objectation = value;\n      let isGreater = this.$subject > value;\n      if (this.$makeNegable(!isGreater)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    greaterOrEqualTo(...args) {\n      return this.equalOrGreaterThan(...args);\n    }\n    equalOrLowerThan(value) {\n      this.$operation = this.$resolveNegableString(\"to {not?} equal or lower than\");\n      this.$objectation = value;\n      let isGreaterOrEqual = this.$subject <= value;\n      if (this.$makeNegable(!isGreaterOrEqual)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    lowerThan(value) {\n      this.$operation = this.$resolveNegableString(\"to {not?} be lower than\");\n      this.$objectation = value;\n      let isGreater = this.$subject < value;\n      if (this.$makeNegable(!isGreater)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    lowerOrEqualTo(value) {\n      return this.equalOrLowerThan(...args);\n    }\n    oneOf(value) {\n      this.$operation = this.$resolveNegableString(\"to {not?} be one of\");\n      this.$objectation = value;\n      if(!Array.isArray(value)) {\n        throw new Error(`Required on «$ensure(...).to.be.oneOf(!)» to provide an array on «ToBeInterface.oneOf»`);\n      }\n      let isOne = this.$objectation.indexOf(this.$subject) !== -1;\n      if (this.$makeNegable(!isOne)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n  };\n\n  const ToNotBeInterface = class extends ToBeInterface {\n    $isNegated = true;\n  };\n\n  const ToHaveInterface = class extends BasicToBeInterface {\n\n    text(prop) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have text\");\n      this.$objectation = prop;\n      const hasSubstring = this.$subject.indexOf(prop) !== -1;\n      if (this.$makeNegable(!hasSubstring)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n    \n    key(prop) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have key\");\n      this.$objectation = prop;\n      const keys = Object.keys(this.$subject);\n      const hasKey = keys.indexOf(prop) !== -1;\n      if (this.$makeNegable(!hasKey)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n    value(prop) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have value\");\n      this.$objectation = prop;\n      const values = Object.values(this.$subject);\n      const hasValue = values.indexOf(prop) !== -1;\n      if (this.$makeNegable(!hasValue)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n    onlyPotentialKeys(props) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have only potential keys\");\n      this.$objectation = props;\n      const keys = Object.keys(this.$subject);\n      let hasOnly = true;\n      Iterating_props:\n      for (let index = 0; index < keys.length; index++) {\n        const key = keys[index];\n        if (props.indexOf(key) === -1) {\n          hasOnly = false;\n          break Iterating_props;\n        }\n      }\n      if (this.$makeNegable(!hasOnly)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n    keys(props) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have keys\");\n      this.$objectation = props;\n      const keys = Object.keys(this.$subject);\n      let hasKeys = true;\n      Iterating_props:\n      for (let index = 0; index < props.length; index++) {\n        const prop = props[index];\n        if (keys.indexOf(prop) === -1) {\n          hasKeys = false;\n          break Iterating_props;\n        }\n      }\n      if (this.$makeNegable(!hasKeys)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n    values(props) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have values\");\n      this.$objectation = props;\n      const values = Object.values(this.$subject);\n      let hasValues = true;\n      Iterating_props:\n      for (let index = 0; index < props.length; index++) {\n        const prop = props[index];\n        if (values.indexOf(prop) === -1) {\n          hasValues = false;\n          break Iterating_props;\n        }\n      }\n      if (this.$makeNegable(!hasValues)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n    uniquelyKeys(props) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have uniquelyKeys\");\n      this.$objectation = props;\n      const keys = Object.keys(this.$subject);\n      let hasKeys = true;\n      Iterating_props:\n      for (let index = 0; index < keys.length; index++) {\n        const key = keys[index];\n        if (props.indexOf(key) === -1) {\n          hasKeys = false;\n          break Iterating_props;\n        }\n      }\n      if (this.$makeNegable(!hasKeys)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n    uniquelyValues(props) {\n      this.$operation = this.$resolveNegableString(\"to {not?} have uniquelyValues\");\n      this.$objectation = props;\n      const values = Object.values(this.$subject);\n      let hasValues = true;\n      Iterating_props:\n      for (let index = 0; index < values.length; index++) {\n        const value = values[index];\n        if (props.indexOf(value) === -1) {\n          hasValues = false;\n          break Iterating_props;\n        }\n      }\n      if (this.$makeNegable(!hasValues)) return this.$asFailed();\n      return this.$ensurement.$asResolved();\n    }\n\n  };\n\n  const ToNotHaveInterface = class extends ToHaveInterface {\n    $isNegated = true;\n  };\n\n  const EnsurementV1 = class extends Ensurement {\n\n    selfExtend(obj) {\n      return Object.assign(this, obj);\n    }\n\n    get $toNotBe() {\n      return new ToNotBeInterface(this);\n    }\n\n    get $toNotHave() {\n      return new ToNotHaveInterface(this);\n    }\n\n    get $toNot() {\n      return {\n        be: this.$toNotBe,\n        have: this.$toNotHave,\n      }\n    }\n\n    get $toBe() {\n      return new ToBeInterface(this);\n    }\n\n    get $toHave() {\n      return new ToHaveInterface(this);\n    }\n\n    get to() {\n      return {\n        be: this.$toBe,\n        have: this.$toHave,\n        not: this.$toNot,\n      };\n    }\n\n    its(id) {\n      return this.constructor.create({\n        [id]: this.$subject[id]\n      }, 1).selfExtend({\n        $parent: this,\n        asBoolean: this.asBoolean,\n      });\n    }\n\n    getSubject() {\n      return this.$subject;\n    }\n\n    safelyBack(levels = 1) {\n      for (let index = 0; index < levels; index++) {\n        try {\n          parent = this.$parent;\n        } catch (error) {\n          // @OK.\n        }\n      }\n    }\n\n    back(levels = 1) {\n      let parent = this;\n      for (let index = 0; index < levels; index++) {\n        try {\n          parent = this.$parent;\n        } catch (error) {\n          throw new Error(`Ensurement could not go «back» reaching parent on level «${index}» on «ensure(...).back»`);\n        }\n      }\n      return parent;\n    }\n\n    static $or(options) {\n      let correctOption = undefined;\n      const allIds = Object.keys(options);\n      const orError = new Error(`could not ensure «or» group with options: «${allIds.join(\"», «\")}»`);\n      for(let index=0; index<allIds.length; index++) {\n        const currentId = allIds[index];\n        const currentOptionCallback = options[currentId];\n        try {\n          currentOptionCallback();\n          return currentId;\n        } catch (error) {\n          orError.appendError(error);\n        }\n      }\n      throw orError.unified();\n    }\n    \n    static id(obj) {\n      return this.create(obj,1);\n    }\n    \n    static ensure(...args) {\n      return this.create(...args);\n    }\n\n    static check(...args) {\n      return this.create(...args).selfExtend({\n        asBoolean: true\n      });\n    }\n\n    static assert(condition, errorMessage = \"Assertion error happened\") {\n      if (!condition) {\n        throw new AssertionError(errorMessage);\n      }\n      return true;\n    }\n\n    static fails(callback, errorMessage = \"Assertion error happened\") {\n      let passes = true;\n      try {\n        callback();\n        passes = false;\n      } catch (error) {\n        return true;\n      }\n      if (!passes) {\n        throw new AssertionError(errorMessage);\n      }\n    }\n\n    static AssertionError = AssertionError;\n\n  };\n\n  Export_to_globals: {\n    globalThis.$fails = EnsurementV1.fails.bind(EnsurementV1);\n    globalThis.$ensure = EnsurementV1.ensure.bind(EnsurementV1);\n    globalThis.$ensure.id = EnsurementV1.id.bind(EnsurementV1);\n    globalThis.$ensure.check = EnsurementV1.check.bind(EnsurementV1);\n    globalThis.$ensure.assert = EnsurementV1.assert.bind(EnsurementV1);\n    globalThis.$ensure.fails = EnsurementV1.fails.bind(EnsurementV1);\n    globalThis.$check = EnsurementV1.check.bind(EnsurementV1);\n    globalThis.$assert = EnsurementV1.assert.bind(EnsurementV1);\n    // globalThis.AssertionError = AssertionError;\n    globalThis.$ensure.$or = EnsurementV1.$or;\n  }\n  \n  return EnsurementV1;\n",
              "$code.label": "LswEnsurer class",
              "$output": "index.html"
            }
          ],
          "Lsw ErrorManager API » LswErrorManager class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-error-manager/lsw-error-manager.js",
              "$location": {
                "start": {
                  "offset": 2,
                  "line": 3,
                  "column": 1
                },
                "end": {
                  "offset": 208,
                  "line": 13,
                  "column": 4
                }
              },
              "$section": "Lsw ErrorManager API » LswErrorManager class",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "LswErrorManager",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-error-manager/lsw-error-manager.js",
              "$location": {
                "start": {
                  "offset": 209,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 304,
                  "line": 15,
                  "column": 1
                }
              },
              "section": "Lsw ErrorManager API » LswErrorManager class",
              "$code": "\nglobalThis.ErrorSummary = class {\n  constructor(data) {\n    Object.assign(this, data);\n  }\n  toString() {\n    return JSON.stringify(this, null, 2);\n  }\n}\n\nglobalThis.Error = class AccumulableError extends Error {\n  constructor(...args) {\n    super(...args);\n    this.$accumulatedErrors = [];\n  }\n  toString() {\n    return JSON.stringify(this, null, 2);\n  }\n  toJSON() {\n    const data = {\n      name: this.name || \"Error\",\n      message: this.message || \"\",\n      stack: this.stack ? this.stack.split(\"\\n    at \") : \"\",\n      ...this,\n    };\n    if (this.$accumulatedErrors && this.$accumulatedErrors.length) {\n      data.$accumulatedErrors = this.$accumulatedErrors;\n    }\n    return data;\n  }\n  unified() {\n    this.message = this.message + \"\\n\" + this.$accumulatedErrors.map((e, i) => (i + 1) + ': ' + e.name + ': ' + e.message).join(\"\\n\");\n    this.$accumulatedErrors = [];\n    return this;\n  }\n  prependError(error) {\n    this.$accumulatedErrors.unshift(error);\n    return this;\n  }\n  appendError(error) {\n    this.$accumulatedErrors.push(error);\n    return this;\n  }\n  summarized() {\n    let uniqueTraces = [];\n    let commonTraces = [];\n    // Recopilar las trazas de la pila de errores acumulados\n    const allStacks = this.$accumulatedErrors.map(\n      (error) => (error.stack ? error.stack.split(\"\\n    at \") : [])\n    );\n    // Si no hay acumulados, no hay comunes ni únicos\n    if (allStacks.length === 0) {\n      return new ErrorSummary({\n        name: this.name,\n        message: this.message,\n        stack: this.stack ? this.stack.split(\"\\n\").map(line => line.split(\"@\")) : [],\n        uniqueTraces: uniqueTraces,\n        commonTraces: commonTraces,\n      });\n    }\n    // Identificar trazas comunes\n    const firstStack = allStacks[0];\n    for (let i = 0; i < firstStack.length; i++) {\n      const trace = firstStack[i];\n      let isCommon = true;\n      for (let j = 1; j < allStacks.length; j++) {\n        if (!allStacks[j].includes(trace)) {\n          isCommon = false;\n          break;\n        }\n      }\n      if (isCommon) {\n        commonTraces.push(trace);\n      }\n    }\n    // Identificar trazas únicas\n    for (let i = 0; i < allStacks.length; i++) {\n      const uniqueForStack = [];\n      for (let j = 0; j < allStacks[i].length; j++) {\n        const trace = allStacks[i][j];\n        if (!commonTraces.includes(trace)) {\n          uniqueForStack.push(trace);\n        }\n      }\n      uniqueTraces.push(uniqueForStack);\n    }\n    return new ErrorSummary({\n      ...this,\n      name: this.name,\n      message: this.message,\n      stack: this.stack ? this.stack.split(\"\\n    at \") : [],\n      uniqueTraces: uniqueTraces,\n      commonTraces: commonTraces,\n    });\n  }\n\n}\n\n",
              "$code.label": "LswErrorManager class",
              "$output": "index.html"
            }
          ],
          "UFS Manager API » UFS_manager class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-filesystem/ufs-v1.0.2.js",
              "$location": {
                "start": {
                  "offset": 326,
                  "line": 9,
                  "column": 1
                },
                "end": {
                  "offset": 408,
                  "line": 10,
                  "column": 1
                }
              },
              "section": "UFS Manager API » UFS_manager class",
              "$code": "(function (factory) {\n  const name = \"UFS_manager\";\n  const modulo = factory();\n  if (typeof window !== 'undefined') {\n    window[name] = modulo;\n  }\n  if (typeof module !== 'undefined') {\n    module.exports = modulo;\n  }\n  if (typeof global !== 'undefined') {\n    global[name] = modulo;\n  }\n  return modulo;\n})(function () {\n  const FilesystemError = class extends Error {\n    constructor(...args) {\n      super(...args);\n      this.name = \"FilesystemError\";\n    }\n  }\n  const UFS_manager_for_node = class {\n    constructor() {\n      // @OK\n    }\n    init() {\n      return this;\n    }\n    trace(method, args = []) {\n      // @INJECTION: from LSW\n      const traceActivatedGlobally = (typeof Vue === \"undefined\") || (typeof Vue.prototype.$lsw === \"undefined\") || ((typeof Vue !== \"undefined\") && (typeof Vue.prototype.$lsw !== \"undefined\") && (Vue.prototype.$lsw.logger.$options.active));\n      if(traceActivatedGlobally) {\n        console.log(\"[ufs][node-driver][\" + method + \"]\", Array.from(args).map(arg => typeof (arg) + \": \" + arg).join(\", \"));\n      }\n    }\n    resolve_path(...args) {\n      this.trace(\"resolve_path\", arguments);\n      return require(\"path\").resolve(...args);\n    }\n    get_current_directory() {\n      this.trace(\"get_current_directory\", arguments);\n      return process.cwd();\n    }\n    change_directory(node) {\n      this.trace(\"change_directory\", arguments);\n      return process.chdir(node);\n    }\n    rename(node, node2) {\n      this.trace(\"rename\", arguments);\n      return require(\"fs\").renameSync(node, node2);\n    }\n    read_directory(node) {\n      this.trace(\"read_directory\", arguments);\n      return require(\"fs\").readdirSync(node).reduce((out, item) => {\n        const subnode_fullpath = require(\"path\").resolve(node, item);\n        out[item] = require(\"fs\").lstatSync(subnode_fullpath).isFile() ? \"...\" : {};\n        return out;\n      }, {});\n    }\n    read_file(node) {\n      this.trace(\"read_file\", arguments);\n      return require(\"fs\").readFileSync(node).toString();\n    }\n    make_directory(node) {\n      this.trace(\"make_directory\", arguments);\n      return require(\"fs\").mkdirSync(node);\n    }\n    write_file(node, contents) {\n      this.trace(\"write_file\", arguments);\n      return require(\"fs\").writeFileSync(node, contents);\n    }\n    exists(node) {\n      this.trace(\"exists\", arguments);\n      return require(\"fs\").existsSync(node);\n    }\n    is_file(node) {\n      this.trace(\"is_file\", arguments);\n      return require(\"fs\").lstatSync(node).isFile();\n    }\n    is_directory(node) {\n      this.trace(\"is_directory\", arguments);\n      return require(\"fs\").lstatSync(node).isDirectory();\n    }\n    delete_file(node) {\n      this.trace(\"delete_file\", arguments);\n      return require(\"fs\").unlinkSync(node);\n    }\n    delete_directory(node) {\n      this.trace(\"delete_directory\", arguments);\n      return require(\"fs\").rmdirSync(node, { recursive: true });\n    }\n  }\n\n  const UFS_manager_for_localstorage = class extends UFS_manager_for_node {\n    constructor(storage_id = \"ufs_main_storage\") {\n      super();\n      this.storage_id = storage_id;\n      this.current_directory = this.environment === \"node\" ? process.cwd : \"/\";\n    }\n    trace(method, args = []) {\n      console.log(\"[ufs][ls-driver][\" + method + \"]\", Array.from(args).map(arg => typeof (arg) + \": \" + arg).join(\", \"));\n    }\n    get_persisted_data() {\n      this.trace(\"get_persisted_data\", arguments);\n      if (!(this.storage_id in localStorage)) {\n        localStorage[this.storage_id] = '{\"files\":{}}';\n      }\n      const data = JSON.parse(localStorage[this.storage_id]);\n      return data;\n    }\n    set_persisted_data(data) {\n      this.trace(\"set_persisted_data\", arguments);\n      localStorage[this.storage_id] = JSON.stringify(data);\n    }\n    remove_slash_end(txt) {\n      // this.trace(\"remove_slash_end\", arguments);\n      const txt2 = txt.replace(/\\/$/g, \"\");\n      if (txt2.length === 0) {\n        return \"/\";\n      }\n      return txt2;\n    }\n    remove_repeated_slahes(txt) {\n      // this.trace(\"remove_repeated_slahes\", arguments);\n      return txt.replace(/\\/(\\/)+/g, \"/\");\n    }\n    resolve_path(...args) {\n      this.trace(\"resolve_path\", arguments);\n      Validate_args: {\n        if (args.length === 0) {\n          throw new Error(\"Method «resolve_path» requires 1 or more parameters\");\n        }\n        for (let index_parameter = 0; index_parameter < args.length; index_parameter++) {\n          const arg = args[index_parameter];\n          if (typeof arg !== \"string\") {\n            throw new Error(\"Method «resolve_path» requires only strings as parameters (on index «\" + index_parameter + \"»)\");\n          }\n        }\n      }\n      let path_parts = [];\n      Format_path: {\n        const replace_last_slash_for_nothing = arg => this.remove_slash_end(arg);\n        path_parts = args.map(replace_last_slash_for_nothing);\n        if (!path_parts[0].startsWith(\"/\")) {\n          path_parts.unshift(this.current_directory.replace(/\\/$/g, \"\"));\n        }\n      }\n      let path_text = \"\";\n      Join_path: {\n        const replace_fist_slash_for_nothing = arg => arg.replace(/^\\//g, \"\");\n        for (let index_part = 0; index_part < path_parts.length; index_part++) {\n          const path_part = path_parts[index_part];\n          if (path_part.startsWith(\"/\")) {\n            path_text = path_part;\n          } else {\n            if (path_text !== \"/\") {\n              path_text += \"/\";\n            }\n            path_text += path_part.replace(replace_fist_slash_for_nothing);\n          }\n        }\n      }\n      Fix_slash_repetitions: {\n        path_text = this.remove_repeated_slahes(path_text);\n      }\n      Resolve_double_dots: {\n        const parts = path_text.split(\"/\");\n        const stack = [];\n        Iterating_parts:\n        for (const part of parts) {\n          if (part === \"\" || part === \".\") {\n            continue Iterating_parts;\n          } else if (part === \"..\") {\n            if (stack.length > 0) {\n              stack.pop();\n            }\n          } else {\n            stack.push(part);\n          }\n        }\n        path_text = \"/\" + stack.join(\"/\");\n      }\n      return path_text;\n    }\n    get_current_directory() {\n      this.trace(\"get_current_directory\", arguments);\n      return this.resolve_path(this.current_directory);\n    }\n    change_directory(node) {\n      this.trace(\"change_directory\", arguments);\n      const is_directory = this.exists(node);\n      if (!is_directory) {\n        throw new FilesystemError(\"Cannot «change_directory» because destination does not exist at: «\" + this.resolve_path(node) + \"»\");\n      }\n      this.current_directory = this.resolve_path(node);\n      return this.current_directory;\n    }\n    operate_on_node(node, callback, should_persist = true) {\n      this.trace(\"operate_on_node\", arguments);\n      const data = this.get_persisted_data();\n      const node_solved = this.resolve_path(node);\n      const node_parts = node_solved.split(\"/\").filter(p => p !== \"\");\n      const root = data.files;\n      const current_index = [\"data\"];\n      let pivot = root;\n      let output = undefined;\n      if (node_parts.length === 0) {\n        output = callback(data, \"files\", current_index);\n      } else {\n        for (let index_part = 0; index_part < node_parts.length; index_part++) {\n          const node_part = node_parts[index_part];\n          if (index_part === (node_parts.length - 1)) {\n            output = callback(pivot, node_part, current_index);\n          } else {\n            pivot = pivot[node_part];\n          }\n          current_index.push(node_part);\n        }\n      }\n      if (should_persist) {\n        this.set_persisted_data(data);\n      }\n      return output;\n    }\n    read_directory(node) {\n      this.trace(\"read_directory\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (!(last_property in pivot)) {\n          throw new FilesystemError(\"Cannot «read_directory» because node does not exist at: «\" + this.resolve_path(node) + \"»\");\n        }\n        if (typeof pivot[last_property] !== \"object\") {\n          throw new FilesystemError(\"Cannot «read_directory» because node is a file at: «\" + this.resolve_path(node) + \"»\");\n        }\n        return pivot[last_property];\n      });\n    }\n    read_file(node) {\n      this.trace(\"read_file\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (!(last_property in pivot)) {\n          throw new FilesystemError(\"Cannot «read_file» because node does not exist at: «\" + this.resolve_path(node) + \"»\");\n        }\n        if (typeof pivot[last_property] !== \"string\") {\n          throw new FilesystemError(\"Cannot «read_file» because node is a directory at: «\" + this.resolve_path(node) + \"»\");\n        }\n        return pivot[last_property];\n      });\n    }\n    make_directory(node) {\n      this.trace(\"make_directory\", arguments);\n      this.operate_on_node(node, (pivot, last_property, index) => {\n        if (last_property in pivot) {\n          throw new FilesystemError(\"Cannot «make_directory» because node already exists at: «\" + this.resolve_path(node) + \"»\");\n        }\n        pivot[last_property] = {};\n      });\n    }\n    write_file(node, contents) {\n      this.trace(\"write_file\", arguments);\n      this.operate_on_node(node, (pivot, last_property, index) => {\n        if (last_property in pivot) {\n          if (typeof pivot[last_property] !== \"string\") {\n            throw new FilesystemError(\"Cannot «write_file» because node is a directory at: «\" + this.resolve_path(node) + \"»\");\n          }\n        }\n        pivot[last_property] = contents;\n      });\n    }\n    exists(node) {\n      this.trace(\"exists\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (!(last_property in pivot)) {\n          return false;\n        }\n        return true;\n      }, false);\n    }\n    is_file(node) {\n      this.trace(\"is_file\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (!(last_property in pivot)) {\n          return false;\n        }\n        if (typeof pivot[last_property] !== \"string\") {\n          return false;\n        }\n        return true;\n      }, false);\n    }\n    is_directory(node) {\n      this.trace(\"is_directory\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (!(last_property in pivot)) {\n          return false;\n        }\n        if (typeof pivot[last_property] !== \"object\") {\n          return false;\n        }\n        return true;\n      }, false);\n    }\n    delete_file(node) {\n      this.trace(\"delete_file\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (typeof pivot[last_property] === \"undefined\") {\n          throw new FilesystemError(\"Cannot «delete_file» because node does not exist at: «\" + this.resolve_path(node) + \"»\");\n        }\n        if (typeof pivot[last_property] !== \"string\") {\n          throw new FilesystemError(\"Cannot «delete_file» because node is a directory at: «\" + this.resolve_path(node) + \"»\");\n        }\n        delete pivot[last_property];\n        return true;\n      }, true);\n    }\n    delete_directory(node) {\n      this.trace(\"delete_directory\", arguments);\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (typeof pivot[last_property] === \"undefined\") {\n          console.log(pivot);\n          console.log(last_property);\n          throw new FilesystemError(\"Cannot «delete_directory» because does not exists at: «\" + this.resolve_path(node) + \"»\");\n        }\n        if (typeof pivot[last_property] !== \"object\") {\n          throw new FilesystemError(\"Cannot «delete_directory» because node is a file at: «\" + this.resolve_path(node) + \"»\");\n        }\n        delete pivot[last_property];\n        return true;\n      }, true);\n    }\n    rename(node, node2) {\n      this.trace(\"rename\", arguments);\n      const last_name = this.resolve_path(node2).split(\"/\").filter(p => p !== \"\").pop();\n      return this.operate_on_node(node, (pivot, last_property, index) => {\n        if (typeof pivot[last_property] === \"undefined\") {\n          throw new FilesystemError(\"Cannot «rename» because does not exists at: «\" + this.resolve_path(node) + \"»\");\n        }\n        pivot[last_name] = pivot[last_property];\n        pivot[last_property] = undefined;\n        delete pivot[last_property];\n        return true;\n      }, true);\n    }\n\n  }\n\n  const UFS_manager_for_idb = class extends UFS_manager_for_localstorage {\n\n    constructor(db_name = \"ufs_db\") {\n      super();\n      this.db_name = db_name;\n      this.db = null;\n      this.current_directory = \"/\";\n    }\n\n    trace(method, args = []) {\n      const traceActivatedGlobally = (typeof Vue === \"undefined\") || (typeof Vue.prototype.$lsw === \"undefined\") || ((typeof Vue !== \"undefined\") && (typeof Vue.prototype.$lsw !== \"undefined\") && (Vue.prototype.$lsw.logger.$options.active));\n      // @INJECTION: from LSW\n      if(traceActivatedGlobally) {\n        console.log(\"[ufs][idb-driver][\" + method + \"]\", Array.from(args).map(arg => typeof (arg) + \": \" + arg).join(\", \"));\n      }\n    }\n\n    init() {\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.open(this.db_name, 1);\n        request.onupgradeneeded = (event) => {\n          let db = event.target.result;\n          if (!db.objectStoreNames.contains(\"ufs\")) {\n            let store = db.createObjectStore(\"ufs\", {\n              keyPath: \"id\",\n              autoIncrement: true,\n            });\n            store.createIndex(\"filepath\", \"filepath\", { unique: true });\n          }\n        };\n        request.onsuccess = (event) => {\n          this.db = event.target.result;\n          resolve();\n        };\n        request.onerror = (event) => reject(event.target.error);\n      });\n    }\n\n    _get_filename(somepath) {\n      return somepath.split(\"/\").filter(p => typeof (p) !== \"undefined\").pop();\n    }\n\n    isImmediateSubpathFrom(subpath, matchable) {\n      const matchablePos = matchable.length;\n      const coincidesParentPath = subpath.substr(0, matchablePos) === matchable;\n      if (!coincidesParentPath) return false;\n      const hasNoMoreSlashes = subpath.substr(matchablePos).indexOf(\"/\") === -1;\n      if (!hasNoMoreSlashes) return false;\n      return true;\n    }\n\n    read_directory(parentIdInput = \"/\") {\n      this.trace(\"read_directory\", arguments);\n      const parentId = this.resolve_path(parentIdInput);\n      return new Promise((resolve, reject) => {\n        The_previous_process: {\n          break The_previous_process;\n          const transaction = this.db.transaction(\"ufs\", \"readonly\");\n          const store = transaction.objectStore(\"ufs\");\n          const index = store.index(\"filepath\");\n          const request = index.getAll(parentId);\n          request.onsuccess = () => {\n            let result = {};\n            for (let item of request.result) {\n              result[item.name] = item.type === \"file\" ? \"...\" : {};\n            }\n            resolve(result);\n          };\n        }\n        const transaction = this.db.transaction(\"ufs\", 'readonly');\n        const objectStore = transaction.objectStore(\"ufs\");\n        const request = objectStore.openCursor(); // Usa cursor para recorrer la BD sin cargar todo en memoria\n        const results = [];\n        const matchableSubpath = (parentId === \"/\") ? parentId : (parentId + \"/\");\n        request.onsuccess = (event) => {\n          const cursor = event.target.result;\n          if (cursor) {\n            let isAccepted = false;\n            try {\n              isAccepted = cursor.value.filepath.startsWith(matchableSubpath);\n              isAccepted = isAccepted && this.isImmediateSubpathFrom(cursor.value.filepath, matchableSubpath);\n            } catch (error) {\n              console.error(\"Error arised from filter callback on «browsie.selectMany»\", error);\n            }\n            if (isAccepted) {\n              // Añade a la colección de salida\n              results.push(cursor.value);\n            }\n            cursor.continue(); // Avanza al siguiente registro\n          } else {\n            // Se formatean los resultados:\n            const formattedResults = {};\n            results.forEach(row => {\n              const rowName = this._get_filename(row.filepath);\n              formattedResults[rowName] = row.type === \"file\" ? \"...\" : {};\n            });\n            resolve(formattedResults);\n          }\n        };\n        request.onerror = () => reject(request.error);\n      });\n    }\n\n    read_file(nodeInput) {\n      this.trace(\"read_file\", arguments);\n      const node = this.resolve_path(nodeInput);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", \"readonly\");\n        const store = transaction.objectStore(\"ufs\");\n        const indexStore = store.index(\"filepath\");\n        const request = indexStore.get(node);\n        request.onsuccess = () => {\n          resolve(request.result ? request.result.content : null);\n        };\n        request.onerror = () => reject(request.error);\n      });\n    }\n\n    async write_file(nodeInput, contents) {\n      this.trace(\"write_file\", arguments);\n      const node = this.resolve_path(nodeInput);\n      const file = await this.$filepath(node);\n      return await new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", \"readwrite\");\n        const store = transaction.objectStore(\"ufs\");\n        const filedata = { filepath: node, type: \"file\", content: contents };\n        if (file) {\n          filedata.id = file.id;\n        }\n        store.put(filedata);\n        transaction.oncomplete = () => resolve();\n        transaction.onerror = () => reject(transaction.error);\n      });\n    }\n\n    async make_directory(nodeInput) {\n      this.trace(\"make_directory\", arguments);\n      const node = this.resolve_path(nodeInput);\n      return await new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", \"readwrite\");\n        const store = transaction.objectStore(\"ufs\");\n        store.put({ filepath: node, type: \"directory\" });\n        transaction.oncomplete = () => resolve();\n        transaction.onerror = () => reject(transaction.error);\n      });\n    }\n\n    exists(nodeInput) {\n      this.trace(\"exists\", arguments);\n      const node = this.resolve_path(nodeInput);\n      return new Promise((resolve) => {\n        const transaction = this.db.transaction(\"ufs\", \"readonly\");\n        const store = transaction.objectStore(\"ufs\");\n        const indexStore = store.index(\"filepath\");\n        const request = indexStore.get(node);\n        request.onsuccess = () => resolve(!!request.result);\n        request.onerror = () => resolve(false);\n      });\n    }\n\n    is_file(nodeInput) {\n      this.trace(\"is_file\", arguments);\n      const node = this.resolve_path(nodeInput);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", \"readonly\");\n        const store = transaction.objectStore(\"ufs\");\n        const indexStore = store.index(\"filepath\");\n        const request = indexStore.get(node);\n        request.onsuccess = () => resolve(request.result ? request.result.type === \"file\" : false);\n        request.onerror = () => reject(request.error);\n      });\n    }\n\n    is_directory(nodeInput) {\n      this.trace(\"is_directory\", arguments);\n      const node = this.resolve_path(nodeInput);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", \"readonly\");\n        const store = transaction.objectStore(\"ufs\");\n        const indexStore = store.index(\"filepath\");\n        const request = indexStore.get(node);\n        request.onsuccess = () => resolve(request.result ? request.result.type === \"directory\" : false);\n        request.onerror = () => reject(request.error);\n      });\n    }\n\n    delete_file(nodeInput) {\n      this.trace(\"delete_file\", arguments);\n      const node = this.resolve_path(nodeInput);\n      return this.$deleteMany(file => {\n        return (file.type === \"file\") && (file.filepath === node);\n      });\n    }\n\n    async delete_directory(nodeInput) {\n      this.trace(\"delete_directory\", arguments);\n      const node = this.resolve_path(nodeInput);\n      await this.$deleteMany(file => file.filepath.startsWith(node));\n      await this.$deleteMany(file => file.filepath === node);\n    }\n\n    $updateMany(filterCallback, expanderCallback) {\n      this.trace(\"$updateMany\", arguments);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", 'readwrite');\n        const objectStore = transaction.objectStore(\"ufs\");\n        const request = objectStore.openCursor();\n        let updatedCount = 0;\n        request.onsuccess = () => {\n          const cursor = request.result;\n          if (cursor) {\n            const isAccepted = filterCallback(cursor.value, cursor);\n            if (isAccepted) {\n              const expanderItem = expanderCallback({ ...cursor.value }, cursor);\n              const updatedItem = { ...cursor.value, ...expanderItem };\n              const updateRequest = cursor.update(updatedItem);\n              updateRequest.onsuccess = () => {\n                updatedCount++;\n              };\n            }\n            cursor.continue();\n          } else {\n            return resolve(updatedCount);\n          }\n        };\n        request.onerror = () => reject(transaction.error);\n      });\n    }\n\n    $deleteMany(filterCallback) {\n      this.trace(\"$deleteMany\", arguments);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", 'readwrite');\n        const objectStore = transaction.objectStore(\"ufs\");\n        const request = objectStore.openCursor();\n        let deletedCount = 0;\n        request.onsuccess = () => {\n          const cursor = request.result;\n          if (cursor) {\n            const isAccepted = filterCallback(cursor.value, cursor);\n            if (isAccepted) {\n              const deleteRequest = cursor.delete();\n              deleteRequest.onsuccess = () => {\n                deletedCount++;\n              };\n            }\n            cursor.continue();\n          } else {\n            return resolve(deletedCount);\n          }\n        };\n        request.onerror = () => reject(transaction.error);\n      });\n    }\n\n    rename(nodeInput, newName) {\n      this.trace(\"rename\", arguments);\n      const node = this.resolve_path(nodeInput);\n      const newNode = node.split(\"/\").slice(0, -1).concat(newName).join(\"/\") || \"/\";\n      const pathBegin = node.replace(/\\/$/g, \"\") + \"/\";\n      const newNodeBegin = newNode.replace(/\\/$/g, \"\") + \"/\";\n      console.log(\"Buscando nodos que empiecen por: «\" + pathBegin + \"»\");\n      const renameSubnodes = async () => {\n        const allSubnodes = await this.$selectMany(file => file.filepath.startsWith(pathBegin));\n        const allPromises = [];\n        for (let index = 0; index < allSubnodes.length; index++) {\n          const subnode = allSubnodes[index];\n          const newSubpath = subnode.filepath.replace(pathBegin, newNodeBegin);;\n          console.log(\"Reemplazando a:\", subnode.filepath, \"Por:\", newSubpath);\n          const subpromise = this.$update(subnode.id, { filepath: newSubpath });\n          allPromises.push(subpromise);\n        }\n        return await Promise.all(allPromises);\n      };\n      const renameNode = () => new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", \"readwrite\");\n        const store = transaction.objectStore(\"ufs\");\n        const indexStore = store.index(\"filepath\");\n        const request = indexStore.get(node);\n        request.onsuccess = () => {\n          if (!request.result) {\n            reject(new Error(\"Node not found\"));\n            return;\n          }\n          const data = request.result;\n          data.filepath = newNode;\n          store.put(data);\n          transaction.oncomplete = () => resolve();\n          transaction.onerror = () => reject(transaction.error);\n        };\n        request.onerror = () => reject(request.error);\n      });\n      return Promise.all([\n        renameNode().then(() => renameSubnodes()),\n      ]);\n    }\n\n    async $filepath(filepath) {\n      const selection = await this.$selectMany(file => file.filepath === filepath);\n      if (selection.length === 1) {\n        return selection[0];\n      } else if (selection.length > 1) {\n        return selection;\n      }\n      return null;\n    }\n\n    $selectMany(filterCallback) {\n      this.trace(\"$selectMany\", arguments);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", 'readonly');\n        const objectStore = transaction.objectStore(\"ufs\");\n        const request = objectStore.openCursor(); // Usa cursor para recorrer la BD sin cargar todo en memoria\n        const results = [];\n        request.onsuccess = (event) => {\n          const cursor = event.target.result;\n          if (cursor) {\n            let isAccepted = undefined;\n            try {\n              isAccepted = filterCallback(cursor.value);\n            } catch (error) {\n              console.error(\"Error arised from filter callback on «selectMany»\", error);\n            }\n            if (isAccepted) { // Aplica la función de filtro\n              results.push(cursor.value);\n            }\n            cursor.continue(); // Avanza al siguiente registro\n          } else {\n            resolve(results); // Se terminó el recorrido\n          }\n        };\n        request.onerror = () => reject(request.error);\n      });\n    }\n\n    $update(id, item) {\n      this.trace(\"$update\", arguments);\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction(\"ufs\", 'readwrite');\n        const objectStore = transaction.objectStore(\"ufs\");\n        const request0 = objectStore.get(id);\n        request0.onsuccess = () => {\n          const originalState = request0.result;\n          if (!originalState) return reject(`No item found by id «${id}» on «$update»`);\n          const request = objectStore.put({ ...originalState, ...item, id });\n          request.onsuccess = () => resolve(request.result);\n          request.onerror = () => reject(request.error);\n        };\n        request0.onerror = () => reject(request0.error);\n      });\n    }\n\n  }\n\n  const api = {\n    node_driver: UFS_manager_for_node,\n    localstorage_driver: UFS_manager_for_localstorage,\n    idb_driver: UFS_manager_for_idb,\n    create(...args) {\n      const clazz = typeof global !== \"undefined\" ? UFS_manager_for_node : UFS_manager_for_localstorage;\n      return new clazz(...args);\n    },\n    driver(id) {\n      const driverId = id.toLowerCase() + \"_driver\";\n      if (!(driverId in api)) {\n        throw new Error(`Cannot find driver «${driverId}» on «UFS_manager.driver»`);\n      }\n      return {\n        create(...args) {\n          const clazz = api[driverId];\n          return new clazz(...args);\n        }\n      }\n    }\n  };\n\n  return api;\n",
              "$code.label": "UFS_manager class",
              "$output": "index.html"
            }
          ],
          "Lsw Intruder API » LswIntruder class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-intruder/lsw-intruder.js",
              "$location": {
                "start": {
                  "offset": 288,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 373,
                  "line": 15,
                  "column": 1
                }
              },
              "section": "Lsw Intruder API » LswIntruder class",
              "$code": "\n  const IntruderJob = class {\n\n    constructor(options = {}) {\n      Object.assign(this, options);\n    }\n\n  };\n\n  const LswIntruder = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    static defaultOptions = {\n      trace: (Vue?.prototype?.$lsw?.logger?.$options?.active ),\n    };\n\n    $trace(method, args) {\n      // @INJECTION: from LSW\n      const traceActivatedGlobally = (typeof Vue === \"undefined\") || (typeof Vue.prototype.$lsw === \"undefined\") || ((typeof Vue !== \"undefined\") && (typeof Vue.prototype.$lsw !== \"undefined\") && (Vue.prototype.$lsw.logger.$options.active));\n      if(this.$options.trace && traceActivatedGlobally) {\n        console.log(\"[trace][lsw-intruder] \" + method, Array.from(args));\n      }\n    }\n\n    constructor(options = {}) {\n      this.$jobs = {};\n      this.$options = Object.assign({}, this.constructor.defaultOptions, options);\n    }\n\n    addJob(options = {}) {\n      this.$trace(\"addJob\", []);\n      const {\n        id = LswRandomizer.getRandomString(7),\n        timeout = 0,\n        dialog = false\n      } = options;\n      $ensure({id},1).type(\"string\");\n      $ensure({timeout},1).type(\"number\");\n      $ensure({dialog},1).type(\"object\").to.have.keys([\"title\", \"template\"]);\n      const startDate = new Date();\n      const timeoutDate = new Date(startDate.getTime() + (timeout));\n      this.$jobs[id] = {\n        id,\n        timeout,\n        dialog,\n        state: \"created\",\n        createdAt: startDate,\n        firedAt: timeoutDate,\n      };\n      this.$jobs[id].timeoutId = setTimeout(() => {\n        this.startJob(id);\n      }, timeout);\n      return this.$jobs[id];\n    }\n\n    removeJob(id) {\n      this.$trace(\"removeJob\", []);\n      if(!(id in this.$jobs)) {\n        return false;\n      }\n      clearTimeout(this.$jobs[id].timeout);\n      delete this.$jobs[id];\n    }\n\n    startJob(id, parameters = []) {\n      this.$trace(\"startJob\", []);\n      const job = this.$jobs[id];\n      const isStarted = job.state === \"started\";\n      if(isStarted) {\n        throw new Error(`Job «${id}» is already started`);\n      }\n      if(!Vue.prototype.$lsw) {\n        throw new Error(`Job «${id}» could not find lsw api from Vue.prototype.$lsw`);\n      }\n      return Vue.prototype.$lsw.dialogs.open(job.dialog).finally(() => {\n        this.removeJob(id);\n      });\n    }\n\n  }\n\n  return LswIntruder;\n\n",
              "$code.label": "LswIntruder class",
              "$output": "index.html"
            }
          ],
          "Lsw Launcher API » LswLauncher global registry": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-launcher/lsw-launchables.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 103,
                  "line": 2,
                  "column": 1
                }
              },
              "section": "Lsw Launcher API » LswLauncher global registry",
              "$code": "\nLswLauncher.global.register(\"dia\", \"🕓 Ahora\", (launchable) => LswLauncher.openDialog('<lsw-agenda context=\"calendario\" />', launchable.name));\nLswLauncher.global.register(\"base-de-datos\", \"📦 Base de datos\", (launchable) => LswLauncher.openDialog('<lsw-database-explorer/>', launchable.name));\nLswLauncher.global.register(\"sistema-de-ficheros\", \"📂 Sistema de ficheros\", (launchable) => LswLauncher.openDialog('<lsw-filesystem-explorer />', launchable.name));\nLswLauncher.global.register(\"binarios\", \"💣 Binarios\", (launchable) => LswLauncher.openDialog('<lsw-bin-directory />', launchable.name));\nLswLauncher.global.register(\"calendario\", \"📆 Calendario\", (launchable) => LswLauncher.openDialog('<lsw-agenda />', launchable.name));\nLswLauncher.global.register(\"notas\", \"💬 Notas\", (launchable) => LswLauncher.openDialog('<lsw-spontaneous-table-nota />', launchable.name));\nLswLauncher.global.register(\"nueva-nota\", \"💬➕ Nueva nota\", (launchable) => LswLauncher.openDialog('<lsw-spontaneous-form-nota />', launchable.name));\nLswLauncher.global.register(\"enciclopedia\", \"🔬 Enciclopedia\", (launchable) => LswLauncher.openDialog('<lsw-wiki />', launchable.name));\nLswLauncher.global.register(\"nuevo-artículo\", \"🔬➕ Nuevo artículo\", (launchable) => LswLauncher.openDialog('<lsw-spontaneous-form-articulo />', launchable.name));\nLswLauncher.global.register(\"inspector-de-js\", \"🪲 Inspector de JS\", (launchable) => LswLauncher.openDialog('<lsw-js-inspector />', launchable.name));\nLswLauncher.global.register(\"consola-de-js\", \"💻 Consola de JS\", () => LswConsoleHooker.toggleConsole());\nLswLauncher.global.register(\"datos-volátiles\", \"♨️ Datos volátiles\", (launchable) => LswLauncher.openDialog('<lsw-volatile-ui />', launchable.name));\nLswLauncher.global.register(\"tests-de-aplicación\", \"✅ Tests de aplicación\", (launchable) => LswLauncher.openDialog('<lsw-tests-page />', launchable.name));\nLswLauncher.global.register(\"emojis-picker\", \"🐱 Emojis\", (launchable) => LswLauncher.openDialog('<lsw-emojis-picker />', launchable.name));\nLswLauncher.global.register(\"configuraciones\", \"🔧 Configuraciones\", (launchable) => LswLauncher.openDialog('<lsw-configurations-page />', launchable.name));\nLswLauncher.global.register(\"trackeables\", \"📹 Trackeables\", (launchable) => LswLauncher.openDialog('<lsw-event-tracker />', launchable.name));\nLswLauncher.global.register(\"nueva-feature\", \"✨ Nueva feature\", (launchable) => LswLauncher.openDialog('<lsw-nueva-feature />', launchable.name));\n\n",
              "$code.label": "LswLauncher global registry",
              "$output": "index.html"
            }
          ],
          "Lsw Launcher API » LswLauncher class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-launcher/lsw-launcher.js",
              "$location": {
                "start": {
                  "offset": 288,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 373,
                  "line": 15,
                  "column": 1
                }
              },
              "section": "Lsw Launcher API » LswLauncher class",
              "$code": "\n  class LswLauncher {\n\n    static openDialog(template, title = \"Diálogo del launcher\", otros = {}) {\n      return Vue.prototype.$lsw.dialogs.open({\n        title,\n        template: `<div class=\"pad_1\">${template}</div>`,\n        ...otros\n      });\n    }\n\n    programs = {};\n\n    register(id, name, callback) {\n      $ensure({ id },1).type(\"string\");\n      $ensure({ name },1).type(\"string\");\n      $ensure({ callback },1).type(\"function\");\n      this.programs[id] = { id, name, callback };\n    }\n\n    unregister(id) {\n      delete this.programs[id];\n    }\n\n    start(app, ...args) {\n      const isKnown = app in this.programs;\n      if(!isKnown) {\n        return Vue.prototype.$lsw.toasts.showError(new Error(`The app «${app}» is not known by the launcher on «LswLauncher.start»`));\n      }\n      const appMetadata = this.programs[app];\n      appMetadata.callback.call(this, appMetadata, ...args);\n    }\n\n  };\n\n  LswLauncher.global = new LswLauncher();\n\n  return LswLauncher;\n\n",
              "$code.label": "LswLauncher class",
              "$output": "index.html"
            }
          ],
          "Lsw LazyLoader API » LswLazyLoads class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-lazy-loader/lazy-loads.js",
              "$location": {
                "start": {
                  "offset": 288,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 377,
                  "line": 15,
                  "column": 1
                }
              },
              "section": "Lsw LazyLoader API » LswLazyLoads class",
              "$code": "  \n  LswLazyLoader.global.register({\n    alias: \"highlight.js:global\",\n    url: \"assets/lib/highlight/highlight.js\",\n    confirmer: () => typeof hljs !== \"undefined\",\n    getter: () => hljs,\n    type: \"scriptSrc\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"highlight.js:themes:default\",\n    url: \"assets/lib/highlight/styles/default.min.css\",\n    type: \"linkStylesheet\",\n    once: true,\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"highlight.js:themes:monokai\",\n    url: \"assets/lib/highlight/styles/monokai.min.css\",\n    type: \"linkStylesheet\",\n    once: true,\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"pegjs\",\n    url: \"assets/lib/pegjs/pegjs.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof pegjs !== \"undefined\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"beautifier\",\n    url: \"assets/lib/beautifier/beautifier.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof beautifier !== \"undefined\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"babel\",\n    url: \"assets/lib/babel/babel.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof Babel !== \"undefined\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"eruda\",\n    url: \"assets/lib/eruda/eruda.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof eruda !== \"undefined\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"jmespath\",\n    url: \"assets/lib/jmespath/jmespath.min.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof jmespath !== \"undefined\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"jquery\",\n    url: \"assets/lib/jquery/jquery-v3.7.1.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof jQuery !== \"undefined\",\n  });\n  \n  LswLazyLoader.global.register({\n    alias: \"qunit.js\",\n    url: \"assets/lib/qunit/qunit.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof QUnit !== \"undefined\",\n  });\n\n  LswLazyLoader.global.register({\n    alias: \"qunit.css\",\n    url: \"assets/lib/qunit/qunit.css\",\n    type: \"linkStylesheet\",\n    once: true,\n    confirmer: () => typeof QUnit !== \"undefined\",\n  });\n\n  LswLazyLoader.global.register({\n    alias: \"ejs\",\n    url: \"assets/lib/ejs/ejs.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof ejs !== \"undefined\",\n  });\n\n  LswLazyLoader.global.register({\n    alias: \"sqlite3\",\n    url: \"assets/lib/sqlite/sqlite3.js\",\n    type: \"scriptSrc\",\n    once: true,\n    confirmer: () => typeof sqlite3InitModule !== \"undefined\",\n  });\n\n  LswLazyLoader.global.register({\n    alias: \"lsw-sqlite\",\n    url: \"assets/lib/lsw-sqlite/lsw-sqlite.dist.js\",\n    type: \"scriptAsync\",\n    once: true,\n    confirmer: () => typeof LswSqlite !== \"undefined\",\n  });\n\n  class LswLazyLoads {\n\n    static loadHighlightJs() {\n      return Promise.all([\n        LswLazyLoader.global.load(\"highlight.js:global\"),\n        // LswLazyLoader.global.load(\"highlight.js:themes:default\"),\n        LswLazyLoader.global.load(\"highlight.js:themes:monokai\"),\n      ]).then(() => {\n        hljs.highlightAll();\n      });\n    }\n\n    static loadPegjs() {\n      return LswLazyLoader.global.load(\"pegjs\");\n    }\n\n    static loadBeautifier() {\n      return LswLazyLoader.global.load(\"beautifier\");\n    }\n\n    static loadHtml2Pdf() {\n      return LswLazyLoader.global.load(\"html2pdf\");\n    }\n\n    static loadBabel() {\n      return LswLazyLoader.global.load(\"babel\");\n    }\n\n    static loadEruda() {\n      return LswLazyLoader.global.load(\"eruda\");\n    }\n\n    static loadJmespath() {\n      return LswLazyLoader.global.load(\"jmespath\");\n    }\n\n    static loadJquery() {\n      return LswLazyLoader.global.load(\"jquery\");\n    }\n\n    static loadQunit() {\n      return Promise.all([\n        LswLazyLoader.global.load(\"jquery\"),\n        LswLazyLoader.global.load(\"qunit.css\"),\n        LswLazyLoader.global.load(\"qunit.js\"),\n      ]);\n    }\n\n    static loadEjs() {\n      return LswLazyLoader.global.load(\"ejs\");\n    }\n\n    static async loadSqlite() {\n      if(!(\"sqlite3\" in window)) {\n        await LswLazyLoader.global.load(\"sqlite3\");\n        const sqlite3 = await sqlite3InitModule();\n        Export_globally_sqlite3: {\n          window.sqlite3 = sqlite3;\n        }\n      }\n      if(!(\"LswSqlite\" in window)) {\n        await LswLazyLoader.global.load(\"lsw-sqlite\");\n      }\n      return LswSqlite;\n    }\n\n  };\n\n  return LswLazyLoads;\n\n",
              "$code.label": "LswLazyLoads class",
              "$output": "index.html"
            }
          ],
          "Lsw LazyLoader API » LswLazyLoader class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-lazy-loader/lsw-lazy-loader.js",
              "$location": {
                "start": {
                  "offset": 290,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 381,
                  "line": 15,
                  "column": 1
                }
              },
              "section": "Lsw LazyLoader API » LswLazyLoader class",
              "$code": "\n  const $defaultScope = {};\n\n  const UnsolvedLazyLoadModule = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n  };\n\n  const LswLazyLoader = class {\n\n    static UnsolvedLazyLoadModule = UnsolvedLazyLoadModule;\n\n    static global = new this();\n\n    constructor() {\n      this.$loads = {};\n      this.$alias = {};\n    }\n\n    register(options = {}) {\n      const url = options.url;\n      this.$loads[url] = Object.assign({}, {\n        alias: false,\n        scope: $defaultScope,\n        getter: options.getter || Vue.prototype.$noop,\n        confirmer: options.confirmer || Vue.prototype.$noop,\n        confirmation: true,\n        once: false,\n        onceDone: false,\n      }, options);\n      if (this.$loads[url].alias) {\n        this.$alias[this.$loads[url].alias] = url;\n      }\n    }\n\n    $solveAlias(urlOrAlias) {\n      const hasAlias = urlOrAlias in this.$alias;\n      if (hasAlias) {\n        return this.$alias[urlOrAlias];\n      }\n      return urlOrAlias;\n    }\n\n    $softRegister(url, options = {}) {\n      if (!this.hasLoaded(url)) {\n        this.register(url, options);\n      }\n    }\n\n    hasLoaded(url) {\n      return url in this.$loads;\n    }\n\n    $loadLocally(url) {\n      const options = this.$loads[url] || {};\n      const _getter = options.getter || Vue.prototype.$noop;\n      const _confirmer = options.confirmer || Vue.prototype.$noop;\n      const _confirmation = options.confirmation || Vue.prototype.$noop;\n      const _once = options.once || false;\n      const _onceDone = options.onceDone || false;\n      const currentGetterValue = (() => {\n        try {\n          return _getter();\n        } catch (error) {\n          return undefined;\n        }\n      })();\n      Kick_by_getter: {\n        const hasGetterOk = typeof currentGetterValue !== \"undefined\";\n        if (hasGetterOk) {\n          return currentGetterValue;\n        }\n      }\n      Kick_by_confirmer: {\n        const currentConfirmerValue = _confirmer();\n        const hasConfirmerOk = currentConfirmerValue === true;\n        if (hasConfirmerOk) {\n          return _confirmation;\n        }\n      }\n      Kick_by_once_flag: {\n        if(_once) {\n          if(_onceDone) {\n            return;\n          }\n        }\n      }\n      this.$loads[url].onceDone = true;\n      return this.constructor.UnsolvedLazyLoadModule.create(url);\n    }\n\n    loadScriptAsync(url) {\n      const value = this.$loadLocally(url);\n      if (!(value instanceof this.constructor.UnsolvedLazyLoadModule)) {\n        return value;\n      }\n      this.$softRegister(url, {});\n      const options = this.$loads[url];\n      const _scope = options.scope || $defaultScope;\n      return importer.scriptAsync(url, _scope);\n    }\n\n    loadScriptSrc(url) {\n      const value = this.$loadLocally(url);\n      if (!(value instanceof this.constructor.UnsolvedLazyLoadModule)) {\n        return value;\n      }\n      this.$softRegister(url, {});\n      const options = this.$loads[url];\n      const _scope = options.scope || $defaultScope;\n      return importer.scriptSrc(url, _scope);\n    }\n\n    loadScriptSrcModule(url) {\n      const value = this.$loadLocally(url);\n      if (!(value instanceof this.constructor.UnsolvedLazyLoadModule)) {\n        return value;\n      }\n      this.$softRegister(url, {});\n      const options = this.$loads[url];\n      const _scope = options.scope || $defaultScope;\n      return importer.scriptSrcModule(url, _scope);\n    }\n\n    loadLinkStylesheet(url) {\n      const value = this.$loadLocally(url);\n      if (!(value instanceof this.constructor.UnsolvedLazyLoadModule)) {\n        return value;\n      }\n      this.$softRegister(url, {});\n      const options = this.$loads[url];\n      const _scope = options.scope || $defaultScope;\n      return importer.linkStylesheet(url);\n    }\n\n    load(aliasOrUrl) {\n      const url = this.$solveAlias(aliasOrUrl);\n      const value = this.$loadLocally(url);\n      if (!(value instanceof this.constructor.UnsolvedLazyLoadModule)) {\n        return value;\n      }\n      this.$softRegister(url, {});\n      const options = this.$loads[url];\n      const _scope = options.scope || $defaultScope;\n      const _type = options.type || \"scriptSrc\";\n      if (!(_type in importer)) {\n        throw new Error(`Required «type» from «${url}» options to be a known method for $importer on «LswLazyLoader.load»`);\n      }\n      return importer[_type](url, _scope);\n    }\n\n  };\n\n  return LswLazyLoader;\n\n",
              "$code.label": "LswLazyLoader class",
              "$output": "index.html"
            }
          ],
          "Lsw LswLifecycle API » LswLifecycle class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-lifecycle/lsw-lifecycle.js",
              "$location": {
                "start": {
                  "offset": 288,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 379,
                  "line": 15,
                  "column": 1
                }
              },
              "section": "Lsw LswLifecycle API » LswLifecycle class",
              "$code": "\n  const cycle = LswCycler.from({\n\n    steps: [\n      \"onStarted\",\n      \"onInitialize\",\n      \"onInitialized\",\n      \"onBoot\",\n      \"onBooted\",\n      \"onLoadSchema\",\n      \"onSchemaLoaded\",\n      \"onLoadDatabase\",\n      \"onDatabaseLoaded\",\n      \"onLoadComponents\",\n      \"onComponentsLoaded\",\n      \"onLoadCordovaSupport\",\n      \"onCordovaSupportLoaded\",\n      \"onLoadModules\",\n      \"onModulesLoaded\",\n      \"onInstallModules\",\n      \"onModulesInstalled\",\n      \"onLoadApplication\",\n      \"onApplicationLoaded\",\n      \"onAllLoaded\",\n      \"onRunApplication\",\n      \"onApplicationDeployed\",\n      \"onFinished\",\n    ],\n\n    hooks: TriggersClass.create(),\n\n    $trace: function(method, args) {\n      if(Vue.prototype.$trace) {\n        Vue.prototype.$trace(\"lsw-app-lifecycle.\" + method, args);\n      }\n    },\n\n    onStarted: function () {\n      this.$trace(\"onStarted\", []);\n      return this.hooks.emit(\"app:started\");\n    },\n\n    onInitialize: function () {\n      this.$trace(\"onInitialize\", []);\n      return this.hooks.emit(\"app:initialize\");\n    },\n\n    onInitialized: function () {\n      this.$trace(\"onInitialized\", []);\n      return this.hooks.emit(\"app:initialized\");\n    },\n\n    onBoot: function () {\n      this.$trace(\"onBoot\", []);\n      return this.hooks.emit(\"app:boot\");\n    },\n\n    onBooted: function () {\n      this.$trace(\"onBooted\", []);\n      return this.hooks.emit(\"app:booted\");\n    },\n\n    onLoadModules: function () {\n      this.$trace(\"onLoadModules\", []);\n      if (!Vue.options.components.App) {\n        throw new Error(\"Required Vue.js (v2) component «App» to be defined on «LswLifecycle.onRunApplication» for hook «app:run_application»\");\n      }\n      return this.hooks.emit(\"app:load_modules\");\n    },\n\n    onModulesLoaded: function () {\n      this.$trace(\"onModulesLoaded\", []);\n      return this.hooks.emit(\"app:modules_loaded\");\n    },\n    onInstallModules: function () {\n      this.$trace(\"onInstallModules\", []);\n      return this.hooks.emit(\"app:install_modules\");\n    },\n    onModulesInstalled: function () {\n      this.$trace(\"onModulesInstalled\", []);\n      return this.hooks.emit(\"app:modules_installed\");\n    },\n    onLoadSchema: async function () {\n      this.$trace(\"onLoadSchema\", []);\n      let hasNeededTables = false;\n      Check_if_has_needed_tables: {\n        try {\n          const currentSchema = await LswDatabase.getSchema(\"lsw_default_database\");\n          const neededTables = [\n            \"Accion\",\n            \"Automensaje\",\n            \"Categoria_de_concepto\",\n            \"Concepto\",\n            \"Impresion_de_concepto\",\n            \"Limitador\",\n            \"Nota\",\n            \"Propagador_de_concepto\",\n            \"Propagador_prototipo\",\n            \"Lista\",\n            \"Recordatorio\",\n          ];\n          Iterating_needed_tables: {\n            const currentTables = Object.keys(currentSchema);\n            for(let index=0; index<neededTables.length; index++) {\n              const neededTable = neededTables[index];\n              const containsTable = currentTables.indexOf(neededTable) !== -1;\n              if(!containsTable) {\n                hasNeededTables = false;\n                break Iterating_needed_tables;\n              }\n            }\n            Confirm_it_contains_tables: {\n              hasNeededTables = true;\n            }\n          }\n        } catch (error) {\n          // @OK\n          console.log(\"Error:\", error);\n        }\n      }\n      if (!hasNeededTables) {\n        await LswDatabase.deleteDatabase(\"lsw_default_database\");\n      }\n      $lswSchema.loadSchemaByProxies(\"SchemaEntity\");\n      const databaseSchema = await $lswSchema.getDatabaseSchemaForLsw();\n      console.log(\"[*] Creating database from schema by proxies:\", \"\\n - \" + Object.keys(databaseSchema).join(\"\\n - \"));\n      await LswDatabase.createDatabase(\"lsw_default_database\", databaseSchema);\n      return await this.hooks.emit(\"app:load_schema\");\n    },\n    onSchemaLoaded: function () {\n      this.$trace(\"onSchemaLoaded\", []);\n      return this.hooks.emit(\"app:schema_loaded\");\n    },\n    onSeedDatabase: async function () {\n      this.$trace(\"onSeedDatabase\", []);\n      Fill_with_your_own_requirements: {\n        // @TOFILLIFNEEDED:\n      }\n      return await this.hooks.emit(\"app:seed_database\");\n    },\n    onDatabaseSeeded: async function () {\n      this.$trace(\"onDatabaseSeeded\", []);\n      Fill_with_your_own_requirements: {\n        // @TOFILLIFNEEDED:\n      }\n      return await this.hooks.emit(\"app:database_seeded\");\n    },\n    onLoadDatabase: async function () {\n      this.$trace(\"onLoadDatabase\", []);\n      Load_database_connection: {\n        Vue.prototype.$lsw.database = await LswDatabase.open(\"lsw_default_database\");\n        Vue.prototype.$lsw.database.setInnerSchema($lswSchema);\n      }\n      let hasNeededRows = false;\n      if(!hasNeededRows) {\n        await this.onSeedDatabase();\n        await this.onDatabaseSeeded();\n      }\n      return await this.hooks.emit(\"app:load_database\");\n    },\n    onDatabaseLoaded: function () {\n      this.$trace(\"onDatabaseLoaded\", []);\n      return this.hooks.emit(\"app:database_loaded\");\n    },\n    onLoadComponents: async function () {\n      this.$trace(\"onLoadComponents\", []);\n      Load_components: {\n        const allComponents = await Vue.prototype.$lsw.fs.read_directory(\"/kernel/components\");\n        const errores = [];\n        for(let componentId in allComponents) {\n          try {\n            await Vue.prototype.$lsw.fs.import_as_component(`/kernel/components/${componentId}/${componentId}`);\n          } catch (error) {\n            errores.push(error);\n          }\n        }\n        if(errores.length) {\n          console.log(\"[!] Errores en onLoadComponents:\");\n          console.log(errores);\n        }\n      }\n      return this.hooks.emit(\"app:load_components\");\n    },\n    onComponentsLoaded: function () {\n      this.$trace(\"onComponentsLoaded\", []);\n      return this.hooks.emit(\"app:components_loaded\");\n    },\n    onLoadCordovaSupport: async function() {\n      this.$trace(\"onLoadCordovaSupport\", []);\n      Try_to_download_cordova: {\n        await importer.scriptSrc(\"cordova.js\").then(() => {\n          console.log(\"[*] Cordova support loaded\");\n          this.hooks.register(\"app:application_mounted\", \"cordova_loaded:org.allnulled.lsw.mobile\", function() {\n            try {\n              Vue.prototype.$lsw.toasts.send({\n                title: \"Cordova was enabled\",\n                text: \"You can access Cordova APIs\"\n              });\n            } catch (error) {\n              console.error(error);\n            }\n          });\n          return true;\n        }).catch(error => {\n          console.error(error);\n          console.log(\"[!] Support for Cordova was dismissed\");\n          this.hooks.register(\"app:application_mounted\", \"cordova_loaded:org.allnulled.lsw.mobile\", function() {\n            try {\n              Vue.prototype.$lsw.toasts.send({\n                title: \"Cordova was not enabled\",\n                text: \"Cordova APIs are not accessible\"\n              });\n            } catch (error) {\n              console.error(error);\n            }\n          });\n          return false;\n        });\n      }\n      return await this.hooks.emit(\"app:load_cordova_support\");\n    },\n    onCordovaSupportLoaded: async function() {\n      this.$trace(\"onCordovaSupportLoaded\", []);\n      return await this.hooks.emit(\"app:cordova_support_loaded\");\n    },\n    onLoadApplication: function () {\n      this.$trace(\"onLoadApplication\", []);\n      return this.hooks.emit(\"app:load_application\");\n    },\n    onApplicationLoaded: function () {\n      this.$trace(\"onApplicationLoaded\", []);\n      return this.hooks.emit(\"app:application_loaded\");\n    },\n    onAllLoaded: function () {\n      this.$trace(\"onAllLoaded\", []);\n      return this.hooks.emit(\"app:all_loaded\");\n    },\n    onRunApplication: function() {\n      this.$trace(\"onRunApplication\", []);\n      if(!Vue.options.components.App) {\n        throw new Error(\"Required Vue.js (v2) component «App» to be defined on «LswLifecycle.onRunApplication» for hook «app:run_application»\");\n      }\n      const vueInstance = new Vue({\n        render: h => h(Vue.options.components.App),\n      }).$mount(\"#app\");\n      return this.hooks.emit(\"app:run_application\");\n    },\n    onApplicationDeployed: function () {\n      this.$trace(\"onApplicationDeployed\", []);\n      return this.hooks.emit(\"app:application_deployed\");\n    },\n    onFinished: function () {\n      this.$trace(\"onFinished\", []);\n      return this.hooks.emit(\"app:finished\");\n    },\n\n    loadModule: function (moduleId) {\n      this.$trace(\"loadModule\", []);\n      return Vue.prototype.$lsw.importer.scriptAsync(`modules/${moduleId}/load.js`);\n    },\n\n    loadSubmodule: function (moduleId, subpath) {\n      this.$trace(\"loadSubmodule\", []);\n      return Vue.prototype.$lsw.importer.scriptAsync(`modules/${moduleId}/${subpath}`);\n    },\n\n    onApplicationMounted: function() {\n      this.$trace(\"onApplicationMounted\", []);\n      return this.hooks.emit(\"app:application_mounted\");\n    },\n\n    start: function () { \n      this.$trace(\"start\", []);\n      return this.run(this.steps);\n    },\n\n  }, \"*\");\n\n  return cycle;\n  \n",
              "$code.label": "LswLifecycle class",
              "$output": "index.html"
            }
          ],
          "LswLogger API » Superlogger API »  Superlogger class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-logger/superlogger.unbundled.js",
              "$location": {
                "start": {
                  "offset": 377,
                  "line": 17,
                  "column": 3
                },
                "end": {
                  "offset": 607,
                  "line": 27,
                  "column": 6
                }
              },
              "$section": "LswLogger API » Superlogger API »  Superlogger class",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "Superlogger",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-logger/superlogger.unbundled.js",
              "$location": {
                "start": {
                  "offset": 608,
                  "line": 28,
                  "column": 1
                },
                "end": {
                  "offset": 710,
                  "line": 29,
                  "column": 1
                }
              },
              "$section": "LswLogger API » Superlogger API »  Superlogger class",
              "$code": "  const Superlogger = class {\n\n    static create(id, options) {\n      return new this(id, options);\n    }\n\n    static levels = {\n      trace: 4,\n      debug: 3,\n      log: 2,\n      warn: 1,\n      error: 0,\n    };\n\n    static defaultOptions = {\n      // active: true,\n      active: false,\n      level: \"trace\"\n    };\n\n    static loggers = {};\n\n    static alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\n    static generateRandomString(len /* istanbul ignore next */  = 5) {\n      let out = \"\";\n      while(out.length < len) {\n        out += this.alphabet[Math.floor(Math.random() * this.alphabet.length - 1)];\n      }\n      return out;\n    }\n\n    constructor(idInput = false, options = {}) {\n      const id = idInput || this.constructor.generateRandomString(10);\n      if (typeof id !== \"string\") {\n        throw new Error(\"Required parameter «id» to be a string on «Superlogger.constructor»\");\n      }\n      if (id in this.constructor.loggers) {\n        throw new Error(\"Required parameter «id» to be a unique string on «Superlogger.constructor»\");\n      }\n      if (typeof options !== \"object\") {\n        throw new Error(\"Required parameter «options» to be an object on «Superlogger.constructor»\");\n      }\n      this.$id = id;\n      this.$options = Object.assign({}, this.constructor.defaultOptions, options);\n      this.$source = undefined;\n      this.$events = {};\n      this.$callbacks = {\n        before: undefined,\n        after: undefined,\n      };\n      this.resetEvents();\n      this.resetCallbacks();\n      this.constructor.loggers[id] = this;\n    }\n\n    activate() {\n      this.$options.active = true;\n    }\n\n    deactivate() {\n      this.$options.active = false;\n    }\n\n    setSource(source) {\n      this.source = source;\n    }\n\n    setLevel(level) {\n      if (!(level in this.constructor.levels)) {\n        throw new Error(\"Required parameter «level» to be a recognized level on «Superlogger.setLevel»\");\n      }\n      this.$options.level = this.constructor.levels[level];\n    }\n\n    setEvent(id, callback) {\n      this.$events[id] = callback;\n    }\n\n    resetEvents() {\n      this.$events = {\n        trace: undefined,\n        debug: undefined,\n        log: undefined,\n        warn: undefined,\n        error: undefined,\n      };\n    }\n\n    setBefore(callback) {\n      this.$callbacks.before = callback;\n    }\n\n    setAfter(callback) {\n      this.$callbacks.after = callback;\n    }\n\n    resetCallbacks() {\n      this.$callbacks = {\n        after: undefined,\n        before: undefined,\n      };\n    }\n\n    replacerFactory() {\n      const visited = new WeakMap();\n      return (key, value) => {\n        if (typeof value === \"function\") {\n          return \"[Function] \" + value.toString();\n        }\n        if (typeof value === \"object\" && value !== null) {\n          if (visited.has(value)) {\n            return \"[Circular]\";\n          }\n          visited.set(value, true);\n        } else /* istanbul ignore else */ {}\n        return value;\n      }\n    }\n\n    stringifyForDebugging(obj) {\n      return JSON.stringify(obj, this.replacerFactory(), 2);\n    }\n\n    stringifyForTracing(obj) {\n      if(typeof obj === \"object\") {\n        if(obj._isVue) {\n          return \"[Vue instance::\" + obj.$options.name + \"]\";\n        } else if(obj === window) {\n          return \"[Window instance]\";\n        }\n      }\n      return JSON.stringify(obj, this.replacerFactory(), 2);\n    }\n\n    $emit(event, args) {\n      if(!(event in this.$events)) {\n        return \"void::event not defined\";\n      }\n      const callback = this.$events[event];\n      if(typeof callback === \"undefined\") {\n        return \"void::callback not defined\";\n      }\n      return callback(this, args);\n    }\n\n    $log(levelId, elements, methodId = false) {\n      if(!(levelId in this.constructor.levels)) {\n        throw new Error(\"Required parameter «levelId» to be an identified level on «Superlogger.$log»\");\n      }\n      const level = this.constructor.levels[levelId];\n      if (!this.$options.active) {\n        return \"void::currently active=false state\";\n      }\n      if (this.$options.level < level) {\n        return \"void::level of tracing out of bounds\";\n      }\n      let message = `[${this.$id}][${levelId}]`;\n      if (methodId !== false) {\n        message += `[${methodId}]`;\n      }\n      for (let index = 0; index < elements.length; index++) {\n        const element = elements[index];\n        const stringification = typeof element === \"string\" ? element : this.stringifyForTracing(element);\n        message += \" \" + stringification;\n      }\n      Event_triggering: {\n        if(typeof this.$callbacks.before !== \"undefined\") {\n          this.$callbacks.before(message, this, levelId, elements, methodId);\n        }\n        console.log(message);\n        if(typeof this.$callbacks.after !== \"undefined\") {\n          this.$callbacks.after(message, this, levelId, elements, methodId);\n        }\n        this.$emit(levelId, {elements, methodId});\n      }\n    }\n\n    trace(methodId, ...data) {\n      return this.$log(\"trace\", data, methodId);\n    }\n\n    debug(...data) {\n      return this.$log(\"debug\", data);\n    }\n\n    log(...data) {\n      return this.$log(\"log\", data);\n    }\n\n    warn(...data) {\n      return this.$log(\"warn\", data);\n    }\n\n    error(...data) {\n      return this.$log(\"error\", data);\n    }\n\n  };\n",
              "$code.label": "Superlogger class",
              "$output": "index.html"
            }
          ],
          "LswProxifier API » LswProxifier class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-proxifier/proxifier.unbundled.js",
              "$location": {
                "start": {
                  "offset": 290,
                  "line": 14,
                  "column": 3
                },
                "end": {
                  "offset": 506,
                  "line": 24,
                  "column": 6
                }
              },
              "$section": "LswProxifier API » LswProxifier class",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "LswProxifier",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-proxifier/proxifier.unbundled.js",
              "$location": {
                "start": {
                  "offset": 507,
                  "line": 25,
                  "column": 1
                },
                "end": {
                  "offset": 595,
                  "line": 26,
                  "column": 1
                }
              },
              "$section": "LswProxifier API » LswProxifier class",
              "$code": "  class BaseClass {\n    initialize(...args) {\n      const promise = this.onInitialize(...args);\n      if (promise instanceof Promise) {\n        return promise.then(output => {\n          return this;\n        });\n      }\n      return this;\n    }\n    onInitialize() {\n      return this;\n    }\n  }\n\n  const AbstractProxy = class {\n    constructor(value) {\n      this.value = value;\n    }\n  }\n  class AbstractVirtualizer extends AbstractProxy {}\n  class AbstractSchemaEntity extends AbstractProxy {\n    static toObject() {\n      return {\n        entityId: this.getEntityId(),\n        name: this.getName(),\n        version: this.getVersion(),\n        properties: this.getProperties(),\n        externalProperties: this.getExternalProperties(),\n        methods: this.getMethods(),\n        virtualizerId: this.getVirtualizerId(),\n        formSettings: this.getFormSettings(),\n        extraAttributes: this.getExtraAttributes(),\n      };\n    }\n    static getEntityId() {\n      throw new Error(`Required method «getEntityId» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getEntityId»`);\n    }\n    static getName() {\n      throw new Error(`Required method «getName» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getName»`);\n    }\n    static getVersion() {\n      throw new Error(`Required method «getVersion» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getVersion»`);\n    }\n    static getProperties() {\n      throw new Error(`Required method «getProperties» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getProperties»`);\n    }\n    static getExternalProperties() {\n      return {};\n    }\n    static getMethods() {\n      throw new Error(`Required method «getMethods» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getMethods»`);\n    }\n    static getVirtualizerId() {\n      throw new Error(`Required method «getVirtualizerId» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getVirtualizerId»`);\n    }\n    static getFormSettings() {\n      throw new Error(`Required method «getFormSettings» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getFormSettings»`);\n    }\n    static getExtraAttributes() {\n      throw new Error(`Required method «getExtraAttributes» to be overriden by «AbstractSchemaEntity» inherited class on «AbstractSchemaEntity.getExtraAttributes»`);\n    }\n  }\n  class AbstractItem { }\n  class AbstractList {\n    constructor(value) {\n      this.value = Array.isArray(value) ? value : [];\n    }\n    forEach(callback) {\n      this.value.forEach(callback);\n      return this;\n    }\n    filter(callback) {\n      this.value = this.value.filter(callback);\n      return this;\n    }\n    map(callback) {\n      this.value = this.value.map(callback);\n      return this;\n    }\n    reduce(callback, initialValue = []) {\n      this.value = this.value.reduce(callback, initialValue);\n      return this;\n    }\n    modify(callback) {\n      this.value = callback(this.value);\n      return this;\n    }\n    concat(...lists) {\n      this.value = this.value.concat(...lists);\n      return this;\n    }\n    onlyProp(prop) {\n      this.value = this.value.map(it => it[prop]);\n      return this;\n    }\n    onlyProps(props) {\n      this.value = this.value.map(it => {\n        const out = {};\n        props.forEach(prop => {\n          out[prop] = it[prop];\n        });\n        return out;\n      });\n      return this;\n    }\n    removeProp(prop) {\n      return this.removeProps([prop]);\n    }\n    removeProps(props) {\n      this.value = this.value.map(it => {\n        const out = {};\n        const keys = Object.keys(it).filter(prop => {\n          return props.indexOf(prop) === -1;\n        });\n        keys.forEach(key => {\n          out[key] = it[key];\n        });\n        return out;\n      });\n      return this;\n    }\n    deduplicate() {\n      const out = [];\n      this.value.forEach(it => {\n        if (out.indexOf(it) === -1) {\n          out.push(it);\n        }\n      });\n      this.value = out;\n      return this;\n    }\n    sort(callback) {\n      this.value = this.value.sort(callback);\n      return this;\n    }\n  };\n\n  class LswProxifier {\n    static create(...args) {\n      return new this(...args);\n    }\n    AbstractProxy = AbstractProxy;\n    AbstractSchemaEntity = AbstractSchemaEntity;\n    AbstractVirtualizer = AbstractVirtualizer;\n    AbstractItem = AbstractItem;\n    AbstractList = AbstractList;\n    constructor(mainInjection = {}) {\n      this.$definitions = {};\n      this.$mainInjection = mainInjection;\n      this.$splitterChar = \"@\";\n    }\n    define(name, classesDef) {\n      if(!(name in this.$definitions)) {\n        this.$definitions[name] = {};\n      }\n      if(typeof classesDef !== \"object\") {\n        throw new Error(`Required parameter «classesDef» to be a class on «LswProxifier.define»`)\n      }\n      const classesIds = Object.keys(classesDef);\n      for(let index=0; index<classesIds.length; index++) {\n        const classId = classesIds[index];\n        const classDef = classesDef[classId];\n        if(typeof classDef !== \"function\") {\n          throw new Error(`Required proxy class «${classId}» to be a class on «LswProxifier.define»`)\n        }\n      }\n      Object.assign(this.$definitions[name], classesDef);\n    }\n    find(selector) {\n      const [name, aspectId = false] = selector.split(this.$splitterChar);\n      if(!(name in this.$definitions)) {\n        throw new Error(`Could not find proxy classes from name «${name}» on «LswProxifier.find»`);\n      }\n      if(!aspectId) {\n        return this.$definitions[name];\n      }\n      if(!(aspectId in this.$definitions[name])) {\n        throw new Error(`Could not find proxy aspect «${aspectId}» from class «${name}» on «LswProxifier.find»`);\n      }\n      return this.$definitions[name][aspectId];\n    }\n    getFactory() {\n      return this.proxify.bind(this);\n    }\n    proxify(obj) {\n      return {\n        as: (typeSelector = \"\", proxyExtraArguments = []) => {\n          if(typeof typeSelector !== \"string\") {\n            throw new Error(`Required parameter «typeSelector» to be a string on «proxify(@).as(@)»`);\n          }\n          const [definitionId, aspectId = \"Item\"] = typeSelector.split(this.$splitterChar);\n          if(!(definitionId in this.$definitions)) {\n            throw new Error(`Required parameter «definitionId» [«${definitionId}»] to exist in «proxifier.$definitions» but it does not on «proxify(@).as(@)`);\n          }\n          if(!(aspectId in this.$definitions[definitionId])) {\n            throw new Error(`Required parameter «aspectId» [«${aspectId}»] to exist in «proxifier.$definitions[${JSON.stringify(definitionId)}]» but it does not on «proxify(@).as(@)`);\n          }\n          const proxyClass = this.$definitions[definitionId][aspectId];\n          const proxyInstance = new proxyClass(obj, ...proxyExtraArguments);\n          if(typeof this.$mainInjection === \"function\") {\n            this.$mainInjection(proxyInstance, proxyClass);\n          } else if(typeof this.$mainInjection === \"object\") {\n            Object.assign(proxyInstance, this.$mainInjection);\n          }\n          return proxyInstance;\n        }\n      };\n    }\n  };\n\n  LswProxifier.default = LswProxifier;\n\n  globalThis.$proxifier = LswProxifier.create();\n",
              "$code.label": "LswProxifier class",
              "$output": "index.html"
            }
          ],
          "LswRandomizer API » LswRandomizer class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-randomizer/lsw-randomizer.js",
              "$location": {
                "start": {
                  "offset": 293,
                  "line": 15,
                  "column": 3
                },
                "end": {
                  "offset": 512,
                  "line": 25,
                  "column": 6
                }
              },
              "$section": "LswRandomizer API » LswRandomizer class",
              "type": "class",
              "extends": "Object",
              "vendor": "lsw",
              "namespace": "LswRandomizer",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-randomizer/lsw-randomizer.js",
              "$location": {
                "start": {
                  "offset": 513,
                  "line": 26,
                  "column": 1
                },
                "end": {
                  "offset": 604,
                  "line": 27,
                  "column": 1
                }
              },
              "$section": "LswRandomizer API » LswRandomizer class",
              "$code": "  const LswRandomizer = class {\n\n    static $defaultAlphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    static $defaultVocals = \"aeiou\";\n    static $defaultConsonants = \"bcdfghjklmnpqrstvwxyz\";\n\n    static getRandomIntegerBetween(start = 0, end = 100) {\n      const min = Math.ceil(Math.min(start, end));\n      const max = Math.floor(Math.max(start, end));\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    static getRandomString(len, alphabet = this.$defaultAlphabet) {\n      let out = \"\";\n      while (out.length < len) {\n        out += alphabet[Math.floor(Math.random() * alphabet.length)];\n      }\n      return out;\n    }\n\n    static getRandomConsonant(len = 1) {\n      return this.getRandomString(len, this.$defaultConsonants);\n    }\n\n    static getRandomVocal(len = 1) {\n      return this.getRandomString(len, this.$defaultVocals);\n    }\n\n    static getRandomWord(silabas = [2,3], capitalized = false) {\n      let salida = \"\";\n      let silabasCounter = 0;\n      if(!Array.isArray(silabas)) {\n        throw new Error(\"Required «silabas» to be an array on «LswRandomizer.getRandomWord»\");\n      }\n      const silabasLen = this.getRandomIntegerBetween(silabas[0], silabas[1]);\n      while(silabasCounter < silabasLen) {\n        silabasCounter++;\n        salida += this.getRandomConsonant();\n        salida += this.getRandomVocal();\n      }\n      if(capitalized) {\n        salida = salida.substr(0,1).toUpperCase() + salida.substr(1);\n      }\n      return salida;\n    }\n\n    static getRandomItem(list) {\n      return list[Math.floor(Math.random() * list.length)];\n    }\n\n    static getRandomObject(totalProps = [0, 10], listOf = false) {\n      let randomProps = totalProps;\n      if (Array.isArray(totalProps)) {\n        randomProps = this.getRandomIntegerBetween(...totalProps);\n      }\n      const buildRandomObject = () => {\n        const randomObject = {};\n        while (Object.keys(randomObject).length < randomProps) {\n          const key = this.getRandomString(5);\n          const value = this.getRandomString(10);\n          randomObject[key] = value;\n        }\n        return randomObject;\n      };\n      if (listOf === false) {\n        return buildRandomObject();\n      }\n      const randomList = [];\n      for(let index=0; index<listOf; index++) {\n        const randomObject = buildRandomObject();\n        randomList.push(randomObject);\n      }\n      return randomList;\n    }\n\n    static getRandomList(listOf = 10, totalProps = [0,10]) {\n      return this.getRandomObject(totalProps, listOf);\n    }\n\n    static getRandomTypedObject(props = [], listOf = false) {\n      const buildRandomObject = () => {\n        const randomObject = {};\n        for(let indexProp=0; indexProp<props.length; indexProp++) {\n          const key = props[indexProp];\n          const value = this.getRandomWord([2,5], true);\n          randomObject[key] = value;\n        }\n        return randomObject;\n      };\n      if (listOf === false) {\n        return buildRandomObject();\n      }\n      const randomList = [];\n      for(let index=0; index<listOf; index++) {\n        const randomObject = buildRandomObject();\n        randomList.push(randomObject);\n      }\n      return randomList;\n    }\n\n    static getRandomTypedList(listOf = 10, totalProps = [\"id\", \"name\", \"city\"]) {\n      return this.getRandomTypedObject(totalProps, listOf);\n    }\n\n  }\n\n  return LswRandomizer;\n",
              "$code.label": "LswRandomizer class",
              "$output": "index.html"
            }
          ],
          "LswReloader API » LswReloadable injection": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-reloader/reloadable.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 95,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "LswReloader API » LswReloadable injection",
              "$code": "const serverUrl = 'http://127.0.0.1';\nconst serverPort = 3000;\n\nif (process?.env?.NODE_ENV === \"test\") {\n  const socket = io(`${serverUrl}:${serverPort}`);\n  socket.on('refrescar', () => {\n    console.log('Recibida la señal de refrescar desde el servidor');\n    location.reload();\n  });\n}\n",
              "$code.label": "LswReloadable injection",
              "$output": "index.html"
            }
          ],
          "LswControlledFunction API » ControlledFunction API » ControlledFunction classes": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-returner/controlled-function.js",
              "$location": {
                "start": {
                  "offset": 300,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 437,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "LswControlledFunction API » ControlledFunction API » ControlledFunction classes",
              "$code": "  const ReturnControl = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n\n  const MutateControl = class {\n    constructor(mutator = {}) {\n      this.mutator = mutator;\n    }\n  };\n\n  const ReturnController = class {\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor() {\n      this.results = new Map();\n      this.functions = new Map();\n      this.middlewares = [];\n      this.properties = new Map();\n    }\n\n    prehook(middleware) {\n      this.middlewares.unshift(middleware);\n      return this;\n    }\n\n    hook(middleware) {\n      this.middlewares.push(middleware);\n      return this;\n    }\n\n    unhook(middleware) {\n      this.middlewares = this.middlewares.filter(m => m !== middleware);\n      return this;\n    }\n\n    prop(properties = {}) {\n      Object.assign(this.properties, properties);\n      return this;\n    }\n\n    hasProp(id) {\n      return this.properties.has(id);\n    }\n\n    getProp(id, defaultValue = undefined) {\n      if (!this.properties.has(id)) {\n        return defaultValue;\n      }\n      return this.properties.get(id);\n    }\n\n    setProp(id, value) {\n      this.properties.set(id, value);\n      return this;\n    }\n\n    load(functions) {\n      this.functions = new Map(Object.entries(functions));\n      return this;\n    }\n\n    solved(name) {\n      return this.results.get(name);\n    }\n\n    pipe(outputName, functionNames, parameters = []) {\n      for (let fnName of functionNames) {\n        const fnCallback = this.functions.get(fnName);\n        if (fnCallback) {\n          const result = fnCallback(...parameters);\n          if (this.processResult(result, outputName)) {\n            return this.solved(outputName);\n          }\n        }\n        for (const middleware of this.middlewares) {\n          const result = middleware(this);\n          if (this.processResult(result, outputName)) {\n            return this.solved(outputName);\n          }\n        }\n      }\n      return null;\n    }\n\n    processResult(result, outputName) {\n      if (result instanceof ReturnControl) {\n        this.results.set(outputName, result.value);\n        return true;\n      } else if (result instanceof MutateControl) {\n        const mutator = result.mutator;\n        if (typeof mutator === \"function\") {\n          const mutatorResult = mutator(this);\n          if (typeof mutatorResult === \"object\") {\n            Object.assign(this.properties, mutatorResult);\n          } else if (mutatorResult !== undefined) {\n            throw new Error(\n              `MutateControl's function mutator must return an object or undefined, found: ${typeof mutatorResult}`\n            );\n          }\n        } else if (typeof mutator === \"object\") {\n          Object.assign(this, mutator);\n        } else {\n          throw new Error(\n            `MutateControl's mutator must be a function or object, found: ${typeof mutator}`\n          );\n        }\n      }\n      return false;\n    }\n\n    reset() {\n      this.results.clear();\n      this.properties.clear();\n      return this;\n    }\n  };\n\n  const ControlledFunction = {\n    MutateControl,\n    ReturnControl,\n    ReturnController,\n  };\n\n  ControlledFunction.default = ControlledFunction;\n\n  return ControlledFunction;\n",
              "$code.label": "ControlledFunction global",
              "$output": "index.html"
            }
          ],
          "Lsw Schema API » LswSchema class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-schema/lsw-schema.js",
              "$location": {
                "start": {
                  "offset": 627,
                  "line": 30,
                  "column": 3
                },
                "end": {
                  "offset": 807,
                  "line": 38,
                  "column": 6
                }
              },
              "$section": "Lsw Schema API » LswSchema class",
              "type": "Class",
              "vendor": "lsw",
              "namespace": "LswSchema",
              "source code": "La clase está definida así:\n",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-schema/lsw-schema.js",
              "$location": {
                "start": {
                  "offset": 808,
                  "line": 39,
                  "column": 1
                },
                "end": {
                  "offset": 887,
                  "line": 40,
                  "column": 1
                }
              },
              "section": "Lsw Schema API » LswSchema class",
              "$code": "  const LswSchema = class {\n\n    $trace(methodId, argsList) {\n      if(this.$options && this.$options.trace) {\n        console.log(\"[trace][lsw-schema][\" + methodId + \"] \" + argsList.length);\n      }\n    }\n\n    static Signature = LswSchemaSignature;\n\n    static createSignature(creatorCallback, creatorParameters, creatorScope) {\n      return this.Signature.create(creatorCallback, creatorParameters, creatorScope);\n    }\n\n    onValidateSchema(schema) {\n      this.$trace(\"onValidateSchema\", arguments);\n      // @OVERRIDABLE\n    }\n\n    onValidateTable(id, definition, schema) {\n      this.$trace(\"onValidateTable\", arguments);\n      // @OVERRIDABLE\n    }\n\n    onValidateColumn(id, definition, tableId, schema) {\n      this.$trace(\"onValidateColumn\", arguments);\n      // @OVERRIDABLE\n    }\n\n    onFusionateSchema(schema) {\n      this.$trace(\"onFusionateSchema\", arguments);\n      // @OVERRIDABLE\n    }\n\n    onFusionateTable(table, tableId, schema) {\n      this.$trace(\"onFusionateTable\", arguments);\n      // @OVERRIDABLE\n    }\n\n    onFusionateColumn(column, columnId, tableId, schema) {\n      this.$trace(\"onFusionateColumn\", arguments);\n      // @OVERRIDABLE\n    }\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor(options = {}) {\n      this.$cache = {\n        schemaForLsw: null\n      };\n      this.$schema = {\n        hasTables: {\n\n        }\n      };\n      this.$options = options;\n    }\n    \n    getDatabaseSchemaForLsw(refresh = false) {\n      this.$trace(\"getDatabaseSchemaForLsw\", arguments);\n      if(refresh) {\n        this.$cache.schemaForLsw = null;\n      }\n      if(this.$cache.schemaForLsw) {\n        return this.$cache.schemaForLsw;\n      }\n      const schemaForLsw = {};\n      for(let tableId in this.$schema.hasTables) {\n        const tableData = this.$schema.hasTables[tableId];\n        let tableSchema = [];\n        for(let columnId in tableData.hasColumns) {\n          const columnData = tableData.hasColumns[columnId];\n          const prefix = columnData.isUnique ? \"!\" : \"\";\n          tableSchema.push(prefix + columnId);\n        }\n        schemaForLsw[tableId] = tableSchema;\n      }\n      this.$cache.schemaForLsw = schemaForLsw;\n      return schemaForLsw;\n    }\n\n    loadSchemaByProxies(aspectId = \"SchemaEntity\") {\n      this.$trace(\"loadSchemaByProxies\", arguments);\n      const schema = this.getSchemaByProxies(aspectId);\n      return this.registerSchema(schema);\n    }\n\n    getSchemaByProxies(aspectId = \"SchemaEntity\") {\n      this.$trace(\"getSchemaByProxies\", arguments);\n      const allSchemaEntities = Object.values($proxifier.$definitions).filter(d => d[aspectId]).map(d => d[aspectId]);\n      const schemaTemp = new LswSchema();\n      for(let index=0; index<allSchemaEntities.length; index++) {\n        const SchemaEntityClass = allSchemaEntities[index];\n        const lswDatabaseSchema = this.adaptSchemaEntityToDatabaseSchema(SchemaEntityClass);\n        schemaTemp.registerSchema(lswDatabaseSchema);\n      }\n      return schemaTemp.$schema;\n    }\n\n    adaptSchemaEntityToDatabaseSchema(SchemaEntityClass) {\n      this.$trace(\"adaptSchemaEntityToDatabaseSchema\", arguments);\n      const schema = { hasTables: {} };\n      const data = SchemaEntityClass.toObject();\n      schema.hasTables[data.name] = {\n        ...data,\n        hasEntityId: SchemaEntityClass.getEntityId(),\n        hasColumns: data.properties,\n        hasExtraAttributes: data.extraAttributes,\n      };\n      return schema;\n    }\n\n    registerSchema(partialSchema = {}) {\n      this.$trace(\"registerSchema\", arguments);\n      if (typeof partialSchema !== \"object\") {\n        throw new Error(\"Required parameter «partialSchema» to be an object on «LswSchema.registerSchema»\");\n      }\n      this.$validateSchema(partialSchema);\n      this.$fusionateSchema(partialSchema);\n      return this;\n    }\n\n    $validateSchema(schema) {\n      this.$trace(\"$validateSchema\", arguments);\n      Native: {\n        this.$validateSchemaNative(schema);\n      }\n      Core_process: {\n        if (\"hasTables\" in schema) {\n          const tableIds = Object.keys(schema.hasTables);\n          Iterating_tables:\n          for (let indexTable = 0; indexTable < tableIds.length; indexTable++) {\n            const tableId = tableIds[indexTable];\n            const table = schema.hasTables[tableId];\n            this.$validateTableNative(table, tableId, schema);\n            if (!(\"hasColumns\" in table)) {\n              continue Iterating_tables;\n            }\n            const columnIds = Object.keys(table.hasColumns);\n            Iterating_columns:\n            for (let indexColumn = 0; indexColumn < columnIds.length; indexColumn++) {\n              const columnId = columnIds[indexColumn];\n              const column = table.hasColumns[columnId];\n              this.$validateColumnNative(column, columnId, tableId, schema);\n            }\n          }\n        }\n      }\n      User: {\n        this.onValidateSchema(schema);\n      }\n    }\n\n    $fusionateSchema(partialSchema) {\n      this.$trace(\"$fusionateSchema\", arguments);\n      const tableIds = Object.keys(partialSchema?.hasTables || {});\n      Debug_purposes: {\n        const columnIds = tableIds.map(tableId => Object.keys(partialSchema.hasTables[tableId].hasColumns || {}).map(columnId => [tableId, columnId].join(\".\")));\n        const tablesMessage = tableIds.length === 0 ? \"No tables to fusionate\" : \"Tables to fusionate:\\n - \" + tableIds.join(\"\\n - \");\n        const columnsMessage = columnIds.length === 0 ? \"No columns to fusionate\" : \"Columns to fusionate:\\n - \" + columnIds.join(\"\\n - \");\n        this.$trace(`[*] ${tablesMessage}`, []);\n        this.$trace(`[*] ${columnsMessage}`, []);\n      }\n      this.$fusionateSchemaNative(partialSchema);\n      Iterating_tables:\n      for (let indexTable = 0; indexTable < tableIds.length; indexTable++) {\n        const tableId = tableIds[indexTable];\n        const tableInfo = partialSchema.hasTables[tableId];\n        this.$fusionateTableNative(tableInfo, tableId, partialSchema);\n        const columnIds = Object.keys(tableInfo.columns || {});\n        Iterating_columns:\n        for (let indexColumn = 0; indexColumn < columnIds.length; indexColumn++) {\n          const columnId = columnIds[indexColumn];\n          const columnInfo = tableInfo.columns[columnId];\n          this.$fusionateColumnNative(columnInfo, columnId, tableId, partialSchema);\n        }\n      }\n    }\n\n    $validateSchemaNative(schema) {\n      this.$trace(\"$validateSchemaNative\", arguments);\n      Native: {\n        const ensureSchema = $ensure(schema).type(\"object\").to.have.key(\"hasTables\");\n        ensureSchema.its(\"hasTables\").type(\"object\");\n      }\n      User: {\n        this.onValidateSchema(schema);\n      }\n    }\n\n    $validateTableNative(definition, id, schema) {\n      this.$trace(\"$validateTableNative\", arguments);\n      Native: {\n        const ensureTable = $ensure(definition).type(\"object\").to.have.key(\"hasColumns\");\n        const ensureHasColumns = ensureTable.its(\"hasColumns\").type(\"object\");\n        const columnIds = Object.keys(ensureHasColumns.$subject);\n        for(let index=0; index<columnIds.length; index++) {\n          const columnId = columnIds[index];\n          const ensureColumn = ensureHasColumns.its(columnId).type(\"object\");\n          ensureColumn.its(\"isType\").type(\"string\");\n          ensureColumn.its(\"isUnique\").type([\"boolean\", \"undefined\"]);\n          ensureColumn.its(\"refersTo\").type([\"object\", \"undefined\", \"boolean\"]);\n          if(typeof ensureColumn.$subject.refersTo === \"object\") {\n            const ensureRefersTo = ensureColumn.its(\"refersTo\").type(\"object\");\n            ensureRefersTo.to.have.keys([\"entity\", \"property\"]);\n            ensureRefersTo.its(\"entity\").type(\"string\");\n            ensureRefersTo.its(\"property\").type(\"string\");\n          }\n          ensureColumn.its(\"isFormType\").type(\"string\");\n          ensureColumn.its(\"hasValidator\").type([\"string\", \"boolean\", \"function\", \"undefined\"]);\n          ensureColumn.its(\"hasFormatter\").type([\"string\", \"boolean\", \"function\", \"undefined\"]);\n          ensureColumn.its(\"hasLabel\").type([\"string\", \"boolean\", \"undefined\"]);\n          ensureColumn.its(\"hasDescription\").type([\"string\", \"boolean\", \"undefined\"]);\n          ensureColumn.its(\"hasPlaceholder\").type([\"string\", \"boolean\", \"undefined\"]);\n        }\n      }\n      User: {\n        this.onValidateTable(id, definition, schema);\n      }\n    }\n\n    $validateColumnNative(id, definition, tableId, schema) {\n      this.$trace(\"$validateColumnNative\", arguments);\n      Native: {\n        // !@OK: the validation is already made on the $validateTableNative\n      }\n      User: {\n        this.onValidateColumn(id, definition, tableId, schema);\n      }\n    }\n\n    $fusionateSchemaNative(partialSchema) {\n      this.$trace(\"$fusionateSchemaNative\", arguments);\n      Native_fusion: {\n        \n      }\n      User_fusion: {\n        this.onFusionateSchema(partialSchema);\n      }\n    }\n\n    $fusionateTableNative(tableInfo, tableId, partialSchema) {\n      this.$trace(\"$fusionateTableNative\", arguments);\n      Native_fusion: {\n        const isKnown = tableId in this.$schema.hasTables;\n        if(!isKnown) {\n          this.$schema.hasTables[tableId] = tableInfo;\n        } else {\n          throw new Error(`Schema cannot fusionate table «${tableId}» to schema for second time on «$fusionateTableNative»`);\n        }\n      }\n      User_fusion: {\n        this.onFusionateTable(tableInfo, tableId, partialSchema);\n      }\n    }\n\n    $fusionateColumnNative(columnInfo, columnId, tableId, partialSchema) {\n      this.$trace(\"$fusionateColumnNative\", arguments);\n      Native_fusion: {\n        const isKnown = columnId in this.$schema.hasTables[tableId].hasColumns;\n        if(!isKnown) {\n          this.$schema.hasTables[tableId].hasColumns[columnId] = columnInfo;\n        } else {\n          throw new Error(`Schema cannot fusionate column «${tableId}.${columnId}» to schema for second time on «$fusionateTableNative»`);\n        }\n      }\n      User_fusion: {\n        this.onFusionateColumn(columnInfo, columnId, tableId, partialSchema);\n      }\n    }\n\n  };\n  \n  // Last global injection for a unique main instance:\n  window.$lswSchema = LswSchema.create();\n",
              "$code.label": "LswSchema class",
              "$output": "index.html"
            }
          ],
          "LswTester API » LswTester classes and functions": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-tester/lsw-tester.js",
              "$location": {
                "start": {
                  "offset": 282,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 375,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "LswTester API » LswTester classes and functions",
              "$code": "  const LswAssertion = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    $trace(method) {\n      this.$tester.$trace(method);\n    }\n\n    constructor(tester, submodule, result = undefined, message = undefined) {\n      this.$tester = tester;\n      this.$module = submodule;\n      this.$moduleId = submodule.id;\n      this.$result = result;\n      this.$message = message;\n    }\n\n    as(message = undefined) {\n      this.$trace(\"LswAssertion.as\");\n      this.$message = message;\n      return this;\n    }\n\n    that(result = undefined) {\n      this.$trace(\"LswAssertion.that\");\n      this.$result = result;\n      if(this.$result === true) {\n        this.$tester.hookedBy(\"onSuccessAssertion\", { tester: this.$tester, value: this.$module, assertionText: this.$message, assertionResult: this.$result });\n      } else {\n        this.$tester.hookedBy(\"onErrorAssertion\", { tester: this.$tester, value: this.$module, assertionText: this.$message, assertionResult: this.$result });\n      }\n    }\n\n  };\n\n  const createAssert = (tester, submodule) => {\n    return LswAssertion.create(tester, submodule);\n  };\n\n  const LswTester_BasicLayer = class {\n\n    async innerLoad() {\n      this.$trace(\"LswTester.innerLoad\");\n      return this.innerLoadTest(this.$composition, [], null);\n    }\n\n    innerCheckIsNotTyped(val, path) {\n      this.$trace(\"LswTester.innerCheckIsNotTyped\");\n      if (typeof val.fromType === \"string\") {\n        throw new Error(`Required test on index «${path.join(\".\")}» to not have property «fromType» resolved on «LswTester.innerCheckIsNotTyped»`);\n      }\n    }\n\n    innerTypeAsUrl(val, path) {\n      this.$trace(\"LswTester.innerTypeAsUrl\");\n      this.innerCheckIsNotTyped(val, path);\n      val.fromType = \"url\";\n    }\n\n    innerTypeAsFile(val, path) {\n      this.$trace(\"LswTester.innerTypeAsFile\");\n      this.innerCheckIsNotTyped(val, path);\n      val.fromType = \"file\";\n    }\n\n    innerTypeAsId(val, path) {\n      this.$trace(\"LswTester.innerTypeAsId\");\n      this.innerCheckIsNotTyped(val, path);\n      val.fromType = \"id\";\n    }\n\n    innerTypeAsCallback(val, path) {\n      this.$trace(\"LswTester.innerTypeAsCallback\");\n      this.innerCheckIsNotTyped(val, path);\n      val.fromType = \"callback\";\n    }\n\n    innerTypeAsCollection(val, path) {\n      this.$trace(\"LswTester.innerTypeAsCollection\");\n      this.innerCheckIsNotTyped(val, path);\n      val.fromType = \"collection\";\n    }\n\n    addDefinition(test, pathToTest = false) {\n      this.$trace(\"LswTester.addDefinition\");\n      if (pathToTest) {\n        test.path = pathToTest;\n      }\n      if (test.id in this.$definitions) {\n        throw new Error(`Required property «id» in test on index «${pathToTest.join(\".\")}» to be a non-duplicated id for «this.$definitions» on «LswTester.addDefinition»`);\n      }\n      this.$definitions[test.id] = test.path;\n    }\n\n    innerLoadTest(val, path, parent = null, parentIndex = []) {\n      this.$trace(\"LswTester.innerLoadTest\");\n      this.addDefinition(val, path);\n      if (val.fromUrl) {\n        this.innerTypeAsUrl(val, path);\n      }\n      if (val.fromFile) {\n        this.innerTypeAsFile(val, path);\n      }\n      if (val.fromId) {\n        this.innerTypeAsId(val, path);\n      }\n      if (val.fromCallback) {\n        this.innerTypeAsCallback(val, path);\n      }\n      if (val.fromCollection) {\n        this.innerTypeAsCollection(val, path);\n        for (let index = 0; index < val.fromCollection.length; index++) {\n          const subval = val.fromCollection[index];\n          this.innerLoadTest(subval, path.concat([\"fromCollection\", index]), val, path);\n        }\n      }\n    }\n\n    async innerRun() {\n      this.$trace(\"LswTester.innerRun\");\n      this.hookedBy(\"onStartTester\", []);\n      let results = new Error(`Tester «${this.$composition.id}» was not started yet`);\n      try {\n        results = await this.innerRunTests(this.$composition, [], null, [], []);\n        this.hookedBy(\"onSuccessTester\", [results]);\n      } catch (error) {\n        this.hookedBy(\"onErrorTester\", [error]);\n        results = results.concat([error]);\n      } finally {\n        this.hookedBy(\"onEndTester\", [results]);\n        return results;\n      }\n    }\n\n    innerHandleCallback(val, path, parent, parentIndex, accumulated) {\n      this.$trace(\"LswTester.innerHandleCallback\");\n      return val.fromCallback.call(this, {\n        $tester: this,\n        $test: val,\n        $testPath: path,\n        $testParent: parent,\n        $testParentPath: parentIndex,\n        $accumulated: accumulated,\n        assert: createAssert(this, val),\n      });\n    }\n\n    async innerHandleUrl(val, path, parent, parentIndex, accumulated) {\n      this.$trace(\"LswTester.innerHandleUrl\");\n      const testSource = await importer.text(val.fromUrl);\n      const testParameters = {\n        $tester: this,\n        $test: val,\n        $testPath: path,\n        $testParent: parent,\n        $testParentPath: parentIndex,\n        $accumulated: accumulated,\n        assert: createAssert(this, val),\n      };\n      const testCallback = LswUtils.createAsyncFunction(testSource, Object.keys(testParameters));\n      return await testCallback.call(this, ...Object.values(testParameters));\n    }\n\n    innerHandleFile(val, path, parent, parentIndex, accumulated) {\n      this.$trace(\"LswTester.innerHandleFile\");\n      return Vue.prototype.$lsw.fs.evaluateAsJavascriptFile(val.fromFile);\n    }\n\n    async innerRunTests(val, path, parent = null, parentIndex = [], accumulated = []) {\n      this.$trace(\"LswTester.innerRunTests\");\n      this.hookedBy(\"onStartModule\", { tester:this, value:val, path, parent, parentIndex, accumulated });\n      let reported = undefined;\n      RunningTest: {\n        try {\n          Manage_bad_inputs: {\n            if (typeof val !== \"object\") {\n              throw new Error(`[ERROR: LswTester complain x004006] Required type of test «${typeof val}» on index «${path.join(\".\")}» to be an object in order to process module as test by «LswTester» instance on «LswTester.innerRunTests»`);\n            }\n            if (val === null) {\n              break RunningTest;\n            }\n            if (!val.id) {\n              throw new Error(`[ERROR: LswTester complain x004001] Required test «${typeof val}» on index «${path.join(\".\")}» to have property «id» in order to process module as test by «LswTester» instance on «LswTester.innerRunTests»`);\n            }\n            if (typeof val.id !== \"string\") {\n              throw new Error(`[ERROR: LswTester complain x004002] Required test «${typeof val}» on index «${path.join(\".\")}» to have a string on property «id» in order to process module as test by «LswTester» instance on «LswTester.innerRunTests»`);\n            }\n            if (typeof val.fromType !== \"string\") {\n              throw new Error(`[ERROR: LswTester complain x004003] Required test «${typeof val}» on index «${path.join(\".\")}» to have a string on property «fromType» in order to process module as test by «LswTester» instance. This indicates that the previous step «LswTester.innerLoad» DID NOT (while it SHOULD, or SHOULD HAVE arised an error otherwise) mark this test module as a known type on «LswTester.innerRunTests»`);\n            }\n            const validTypes = [\"url\", \"file\", \"collection\", \"callback\"];\n            if (validTypes.indexOf(val.fromType) === -1) {\n              throw new Error(`[ERROR: LswTester complain x004008] Required test «${typeof val}» on index «${path.join(\".\")}» to have property «fromType» with a valid type instead of «${val.fromType}» in order to process module as test by «LswTester» instance. This indicates that the previous step «LswTester.innerLoad» DID NOT (while it SHOULD, or SHOULD HAVE arised an error otherwise) mark this test module as a known type on «LswTester.innerRunTests»`);\n            }\n          }\n          if (val.fromType === \"url\") {\n            reported = await this.innerHandleUrl(val, path, parent, parentIndex, accumulated);\n          } else if (val.fromType === \"callback\") {\n            reported = await this.innerHandleCallback(val, path, parent, parentIndex, accumulated);\n          } else if (val.fromType === \"file\") {\n            reported = await this.innerHandleFile(val, path, parent, parentIndex, accumulated);\n          } else if (val.fromType === \"collection\") {\n            const collection = val.fromCollection;\n            reported = [];\n            for (let index = 0; index < collection.length; index++) {\n              const item = collection[index];\n              try {\n                const result = await this.innerRunTests(item, path.concat([\"fromCollection\", index]), val, path, accumulated);\n                reported.push(result);\n              } catch (error) {\n                if (this.$options.continueOnErrors === false) {\n                  throw error;\n                }\n              }\n            }\n          }\n          this.hookedBy(\"onSuccessModule\", { tester:this, value:val, path, parent, parentIndex, accumulated });\n        } catch (error) {\n          this.$trace(`Error on test artifact «${val.id}» located at «${path.join(\".\")}» on LswTester instance`);\n          if (this.$options.printErrors === true) {\n            console.error(error);\n          }\n          this.hookedBy(\"onErrorModule\", { tester:this, value:val, error, path, parent, parentIndex, accumulated });\n          if (this.$options.continueOnErrors === false) {\n            throw error;\n          } else {\n            reported = error;\n          }\n        }\n      }\n      this.hookedBy(\"onEndModule\", { tester:this, value:val, path, parent, parentIndex, accumulated, reported });\n      if (path.length === 0) {\n        this.$result = reported\n      }\n      return reported;\n    }\n\n  }\n\n  const LswTester = class extends LswTester_BasicLayer {\n\n    static Assertion = LswAssertion;\n\n    static createAssertion(...args) {\n      return new this.Assertion(...args);\n    }\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    $trace(method) {\n      if (Vue?.prototype.$lsw?.logger?.$options.active) {\n        console.log(`[trace][lsw-tester][${method}]`);\n      }\n    }\n\n    static defaultOptions = {\n      continueOnErrors: false,\n      printErrors: true,\n      onAnything: false,\n      onStartTester: false,\n      onEndTester: false,\n      onSuccessTester: false,\n      onErrorTester: false,\n      onStartModule: false,\n      onFinishModule: false,\n      onSuccessModule: false,\n      onErrorModule: false,\n      onSuccessAssertion: false,\n      onErrorAssertion: false,\n    };\n\n    static noop() { }\n\n    constructor() {\n      super();\n      this.reset();\n    }\n\n    reset() {\n      this.$isLoaded = false;\n      this.$isExecuted = false;\n      this.$definitions = {};\n      this.$options = Object.assign({}, this.constructor.defaultOptions);\n      this.$composition = undefined;\n    }\n\n    hookedBy(callbackId, uniqueParameter = {}) {\n      this.$trace(\"LswTester.hookedBy\");\n      const isAnyEventCallback = typeof this.$options.onAnything === \"function\";\n      if (isAnyEventCallback) {\n        this.$options.onAnything.call(this, { eventType: callbackId }, uniqueParameter);\n      }\n      const isCallback = typeof this.$options[callbackId] === \"function\";\n      if (!isCallback) {\n        return false;\n      }\n      return this.$options[callbackId].call(this, uniqueParameter);\n    }\n\n    validateComposition(composition) {\n      this.$trace(\"LswTester.validateComposition\");\n      $ensure(composition).type(\"object\");\n    }\n\n    define(composition = {}) {\n      this.$trace(\"LswTester.define\");\n      if (typeof this.$composition !== \"undefined\") {\n        throw new Error(\"Required property «$composition» to not be defined before on «LswTester.define»\");\n      }\n      this.validateComposition(composition);\n      this.$composition = composition;\n      return this;\n    }\n\n    options(options) {\n      this.$trace(\"LswTester.options\");\n      this.$options = Object.assign({}, this.constructor.defaultOptions, options);\n      return this;\n    }\n\n    onAnything(callback) {\n      this.$trace(\"LswTester.onAnything\");\n      this.$options.onAnything = callback;\n      return this;\n    }\n\n    onStartTester(callback) {\n      this.$trace(\"LswTester.onStartTester\");\n      this.$options.onStartTester = callback;\n      return this;\n    }\n\n    onEndTester(callback) {\n      this.$trace(\"LswTester.onEndTester\");\n      this.$options.onEndTester = callback;\n      return this;\n    }\n\n    onSuccessTester(callback) {\n      this.$trace(\"LswTester.onSuccessTester\");\n      this.$options.onSuccessTester = callback;\n      return this;\n    }\n\n    onErrorTester(callback) {\n      this.$trace(\"LswTester.onErrorTester\");\n      this.$options.onErrorTester = callback;\n      return this;\n    }\n\n    onStartModule(callback) {\n      this.$trace(\"LswTester.onStartModule\");\n      this.$options.onStartModule = callback;\n      return this;\n    }\n\n    onFinishModule(callback) {\n      this.$trace(\"LswTester.onFinishModule\");\n      this.$options.onFinishModule = callback;\n      return this;\n    }\n\n    onSuccessModule(callback) {\n      this.$trace(\"LswTester.onSuccessModule\");\n      this.$options.onSuccessModule = callback;\n      return this;\n    }\n\n    onErrorModule(callback) {\n      this.$trace(\"LswTester.onErrorModule\");\n      this.$options.onErrorModule = callback;\n      return this;\n    }\n\n    onSuccessAssertion(callback) {\n      this.$trace(\"LswTester.onSuccessAssertion\");\n      this.$options.onSuccessAssertion = callback;\n      return this;\n    }\n\n    onErrorAssertion(callback) {\n      this.$trace(\"LswTester.onErrorAssertion\");\n      this.$options.onErrorAssertion = callback;\n      return this;\n    }\n\n    async load() {\n      this.$trace(\"LswTester.load\");\n      try {\n        await this.innerLoad();\n        this.$isLoaded = true;\n        return this;\n      } catch (error) {\n        console.error(\"[!] Failed «LswTester» on «load» phase with:\", error);\n        throw error;\n      }\n    }\n\n    async run(skipLoad = false) {\n      this.$trace(\"LswTester.run\");\n      try {\n        if(!skipLoad) {\n          await this.load();\n        }\n        await this.innerRun();\n        this.$isExecuted = true;\n      } catch (error) {\n        console.error(\"[!] Failed «LswTester» on «run» phase with:\", error);\n        throw error;\n      } finally {\n        return this;\n      }\n    }\n\n    getStatus() {\n      this.$trace(\"LswTester.getStatus\");\n      return this.$composition;\n    }\n\n  };\n\n  LswTester.global = LswTester.create();\n",
              "$code.label": "LswTester API",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-tester-prev/lsw-tester.js",
              "$location": {
                "start": {
                  "offset": 282,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 375,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "LswTester API » LswTester classes and functions",
              "$code": "  const TestSettings = class {\n    static AVAILABLE_MODES = [\"normally\", \"never\", \"always\", \"only\"];\n    constructor(testObject) {\n      this.$test = testObject;\n    }\n    timeout(value = undefined) {\n      if(typeof value !== \"number\") {\n        throw new Error(`Required parameter 1 «value=${typeof value}» to be number on «TestSettings.mode»`)\n      }\n      this.$test.timeoutLimit = value;\n      return this;\n    }\n    mode(mode) {\n      if(this.constructor.AVAILABLE_MODES.indexOf(mode) === -1) {\n        throw new Error(`Required parameter 1 «mode=${mode}» to be one of: «${this.constructor.AVAILABLE_MODES.join(\"|\")}» on «TestSettings.mode»`)\n      }\n      this.$test.mode = mode;\n      return this;\n    }\n    onError(onErrorCallback) {\n      if(typeof onErrorCallback !== \"function\") {\n        throw new Error(`Required parameter 1 «onErrorCallback=${typeof onErrorCallback}» to be string on «TestSettings.onError»`)\n      }\n      this.$test.errorHandler = onErrorCallback;\n      return this;\n    }\n    onSuccess(onSuccessCallback) {\n      if(typeof onSuccessCallback !== \"function\") {\n        throw new Error(`Required parameter 1 «onSuccessCallback=${typeof onSuccessCallback}» to be string on «TestSettings.onError»`)\n      }\n      this.$test.successHandler = onSuccessCallback;\n      return this;\n    }\n  };\n\n  const LswTester = class {\n\n    static run(...args) {\n      return this.create(...args).run();\n    }\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    static STATES = {\n      DEFINED: \"defined\",\n      STARTED: \"started\",\n      PASSED: \"passed\",\n      FAILED: \"failed\",\n    }\n\n    static formatDate(dateObject = new Date()) {\n      const anio = (\"\" + (dateObject.getFullYear() ?? 0)).padStart(4, '0');\n      const mes = (\"\" + ((dateObject.getMonth() ?? 0) + 1)).padStart(2, '0');\n      const dia = (\"\" + (dateObject.getDate() ?? 0)).padStart(2, '0');\n      const hora = (\"\" + (dateObject.getHours() ?? 0)).padStart(2, '0');\n      const minuto = (\"\" + (dateObject.getMinutes() ?? 0)).padStart(2, '0');\n      const segundo = (\"\" + (dateObject.getSeconds() ?? 0)).padStart(2, '0');\n      const milisegundo = (\"\" + (dateObject.getMilliseconds() ?? 0)).padStart(3, '0');\n      const laHora = `${hora}:${minuto}:${segundo}.${milisegundo}`;\n      return `${anio}/${mes}/${dia} ${laHora}`;\n    }\n\n    static getTimeDifferenceBetweenDates(dateStr1, dateStr2) {\n      const date1 = new Date(dateStr1);\n      const date2 = new Date(dateStr2);\n      return date2 - date1;\n    }\n\n    static getDefaultOptions(overrider = {}) {\n      return Object.assign({}, {\n        trace: (Vue?.prototype?.$lsw?.logger?.$options?.active ),\n        successHandler: false,\n        errorHandler: false,\n        failureHandler: false,\n        finishHandler: false,\n      }, overrider);\n    };\n\n    constructor(id, callback, options = {}) {\n      if(typeof id !== \"string\") throw new Error(\"Required argument 1 to be string on «LswTester.constructor»\");\n      if(typeof callback !== \"function\") throw new Error(\"Required argument 2 to be function on «LswTester.constructor»\");\n      this.$options = this.constructor.getDefaultOptions(options);\n      this.$id = id;\n      this.$callback = callback;\n      this.$queue = [];\n      this.$state = {\n        testCollectionId: this.$id,\n        loaded: false,\n        createdAt: this.constructor.formatDate(),\n        startedAt: false,\n        finishedAt: false,\n        loadedAt: false,\n        timeoutLimit: 4000,\n        tests: {\n          ids: [],\n          all: [],\n        },\n      };\n      Validate_parameters: {\n        if(typeof this.$id !== \"string\") throw new Error(`Required parameter 1 «id=${typeof this.$id}» to be string on «LswTester.constructor»`);\n        if(typeof this.$callback !== \"function\") throw new Error(`Required parameter 2 «callback=${typeof this.$callback}» to be function on «LswTester.constructor»`);\n        if(typeof this.$options !== \"object\") throw new Error(`Required parameter 3 «options=${typeof this.$options}» to be object on «LswTester.constructor»`);\n        if(!Array.isArray(this.$queue)) throw new Error(`Required property «$queue=${typeof this.$queue}» to be object on «LswTester.constructor»`);\n        if(typeof this.$state !== \"object\") throw new Error(`Required property «$state=${typeof this.$state}» to be object on «LswTester.constructor»`);\n      }\n    }\n\n    $trace(method) {\n      if(this.$options.trace) {\n        console.log(`[trace][lsw-tester] ${method}`);\n      }\n    }\n\n    $createTestObject(id, action, attachedMode = \"normally\") {\n      this.$trace(\"$createTestObject\");\n      return {\n        id: id,\n        // Property «currently» can be: \"started\", \"passed\", \"failed\" or \"defined\".\n        currently: this.constructor.STATES.DEFINED,\n        took: undefined,\n        action: action,\n        mode: attachedMode,\n        successHandler: undefined,\n        errorHandler: undefined,\n        timeoutLimit: undefined,\n      };\n    }\n\n    $createItFunction() {\n      this.$trace(\"$createItFunction\");\n      let it2 = undefined;\n      // Cuidaico con esta variable porque si llamas al mismo «it» 2 veces, puede jugártela.\n      let testObject = undefined;\n      const it = function(id, action, attachedMode = \"normally\") {\n        Ensure_id_uniqueness: {\n          if(this.$state.tests.ids.indexOf(id) !== -1) {\n            console.log(this.$state.tests.ids);\n            throw new Error(`Required parameter 1 «id=${id}» to not be a repeated test identifier on «LswTester.it»`);\n          }\n        }\n        Append_test_object: {\n          testObject = this.$createTestObject(id, action, attachedMode);\n          this.$state.tests.ids.push(id);\n          this.$state.tests.all.push(testObject);\n        }\n        return it2;\n      };\n      it2 = it.bind(this);\n      it2.always = (id, action) => it2(id, action, \"always\");\n      it2.normally = (id, action) => it2(id, action, \"normally\");\n      it2.only = (id, action) => it2(id, action, \"only\");\n      it2.never = (id, action) => it2(id, action, \"never\");\n      it2.timeout = this.timeout.bind(this);\n      it2.onSuccess = this.onSuccess.bind(this);\n      it2.onError = this.onError.bind(this);\n      it2.onFailure = this.onFailure.bind(this);\n      return it2;\n    }\n\n    $handleLoadError(error) {\n      this.$trace(\"$handleLoadError\");\n      console.error(\"LswTester failed on «load» step:\", error);\n      throw error;\n    }\n\n    $handleRunError(error) {\n      this.$trace(\"$handleRunError\");\n      console.error(\"LswTester arised error on «run» step:\", error);\n      throw error;\n    }\n\n    $handleTestError(error, lastStartedTest) {\n      this.$trace(\"$handleTestError\");\n      By_tester_first: {\n        if(typeof this.$options.errorHandler === \"function\") {\n          const handlerFeedback = this.$options.errorHandler(error, lastStartedTest);\n          if(typeof handlerFeedback !== \"undefined\") {\n            return handlerFeedback;\n          }\n        }\n      }\n      By_test_second: {\n        if(typeof lastStartedTest.errorHandler === \"function\") {\n          const testHandlerFeedback = lastStartedTest.errorHandler(error, lastStartedTest);\n          if(typeof testHandlerFeedback !== \"undefined\") {\n            return testHandlerFeedback;\n          }\n        } else {\n          console.error(\"LswTester arised error on «test» step:\", error);\n          throw error;\n        }\n      }\n    }\n\n    $handleTestSuccess(lastStartedTest) {\n      this.$trace(\"$handleTestSuccess\");\n      By_tester_first: {\n        if(typeof this.$options.successHandler === \"function\") {\n          const handlerFeedback = this.$options.successHandler(lastStartedTest);\n          if(typeof handlerFeedback !== \"undefined\") {\n            return handlerFeedback;\n          }\n        }\n      }\n      By_test_second: {\n        if(typeof lastStartedTest.successHandler === \"function\") {\n          const testHandlerFeedback = lastStartedTest.successHandler(lastStartedTest);\n          if(typeof testHandlerFeedback !== \"undefined\") {\n            return testHandlerFeedback;\n          }\n        } else {\n          // @OK.\n        }\n      }\n      if(typeof lastStartedTest.successHandler === \"function\") {\n        return lastStartedTest.successHandler(lastStartedTest);\n      } else {\n        // @OK.\n      }\n    }\n\n    $handleTestTimeout(indexTest) {\n      const testObject = this.$state.tests.all[indexTest];\n      const isStarted = testObject.currently === this.constructor.STATES.STARTED;\n      if(isStarted) {\n        testObject.currently = this.constructor.STATES.FAILED;\n        testObject.failureReason = \"timed out\";\n      }\n    }\n\n    timeout(limit) {\n      this.$trace(\"timeout\");\n      this.$state.timeoutLimit = limit;\n    }\n\n    onSuccess(successHandler) {\n      this.$trace(\"onSuccess\");\n      this.$options.successHandler = successHandler;\n    }\n\n    onError(errorHandler) {\n      this.$trace(\"onError\");\n      this.$options.errorHandler = errorHandler;\n    }\n\n    onFailure(failureHandler) {\n      this.$trace(\"onFailure\");\n      this.$options.failureHandler = failureHandler;\n    }\n\n    async load(ignoreDuplication = false) {\n      this.$trace(\"load\");\n      try {\n        Validate_state_before_reloading_by_error: {\n          const wasLoadedBefore = typeof this.$state.loadedAt === \"string\";\n          const allowsDuplication = !ignoreDuplication;\n          if(wasLoadedBefore && !allowsDuplication) {\n            throw new Error(\"Cannot call «LswTester.load» more than once\");\n          }\n        }\n        this.$state.loadedAt = this.constructor.formatDate();\n        const it = this.$createItFunction();\n        await this.$callback(it);\n        this.$state.loaded = true;\n      } catch (error) {\n        this.$handleLoadError(error);\n      }\n    }\n\n    async run() {\n      this.$trace(\"run\");\n      try {\n        await this.load();\n        const testList = this.$state.tests.all;\n        const wasActivatedOnlyMode = this.$state.tests.all.reduce((out, testObject) => {\n          out = out || (testObject.mode === 'only');\n          return out;\n        }, false);\n        let lastStartedTest = undefined;\n        this.$state.startedAt = this.constructor.formatDate();\n        Executing_tests:\n        for(let indexTest=0; indexTest<testList.length; indexTest++) {\n          try {\n            const testObject = testList[indexTest];\n            lastStartedTest = testObject;\n            const {\n              id,\n              mode,\n              action,\n              currently,\n            } = testObject;\n            let testTimeoutId = undefined;\n            Ignore_by_mode: {\n              if(mode === \"never\") {\n                continue Executing_tests;\n              }\n              if(wasActivatedOnlyMode) {\n                if(mode === \"normally\") {\n                  continue Executing_tests;\n                }\n              }\n            }\n            Throw_on_state_conflict: {\n              if(currently !== this.constructor.STATES.DEFINED) {\n                throw new Error(`Cannot run test «${id}» because its state is «${currently}» on «LswTester.run»`);\n              }\n            }\n            Change_state_to_started: {\n              this.$state.tests.all[indexTest].currently = this.constructor.STATES.STARTED;\n              this.$state.tests.all[indexTest].startedAt = this.constructor.formatDate();\n            }\n            let testPromise = undefined;\n            Execute_test_and_reserve_promise: {\n              const testSettings = new TestSettings(testObject);\n              testPromise = action(testSettings);\n            }\n            Start_timeout_callback_to_fail_test: {\n              // Priorizamos el timeout del test al del tester:\n              const timeoutLimit = testObject.timeoutLimit || this.$state.timeoutLimit;\n              if((typeof timeoutLimit !== \"number\") || (timeoutLimit < 0)) {\n                break Start_timeout_callback_to_fail_test;\n              }\n              const timeoutHandler = () => {\n                this.$handleTestTimeout(indexTest);\n              };\n              testTimeoutId = setTimeout(timeoutHandler.bind(this), timeoutLimit);\n            }\n            Wait_for_test: {\n              await testPromise;\n            }\n            Check_state_before_confirm_test_is_passed: {\n              clearTimeout(testTimeoutId);\n              const currentState = this.$state.tests.all[indexTest].currently;\n              const isStarted = currentState === this.constructor.STATES.STARTED;\n              if(!isStarted) {\n                throw new Error(`Test «${id}» was already considered «${currentState}» and cannot promote it to «passed» on «LswTester.run»`);\n              }\n            }\n            Change_state_to_passed: {\n              this.$state.tests.all[indexTest].finishedAt = this.constructor.formatDate();\n              this.$state.tests.all[indexTest].currently = this.constructor.STATES.PASSED;\n              this.$state.tests.all[indexTest].took = this.constructor.getTimeDifferenceBetweenDates(this.$state.tests.all[indexTest].startedAt, this.$state.tests.all[indexTest].finishedAt);\n            }\n            Trigger_success_handler: {\n              await this.$handleTestSuccess(lastStartedTest);\n            }\n          } catch (error) {\n            let errorFeedback = undefined;\n            Change_state_to_failed: {\n              this.$state.tests.all[indexTest].finishedAt = this.constructor.formatDate();\n              this.$state.tests.all[indexTest].currently = this.constructor.STATES.FAILED;\n              this.$state.tests.all[indexTest].took = this.constructor.getTimeDifferenceBetweenDates(this.$state.tests.all[indexTest].startedAt, this.$state.tests.all[indexTest].finishedAt);\n              this.$state.tests.all[indexTest].failureReason = error instanceof Error ? `${error.name}: ${error.message}` : error;\n              console.log(error);\n            }\n            Trigger_error_handler: {\n              errorFeedback = await this.$handleTestError(error, lastStartedTest);\n            }\n            Interrupt_tests_if_handler_returns_0: {\n              if(errorFeedback === false) {\n                break Executing_tests;\n              }\n            }\n          }\n        }\n      } catch (error) {\n        this.$handleRunError(error);\n      } finally {\n        this.$state.finishedAt = this.constructor.formatDate();\n        if(typeof this.$options.finishHandler === \"function\") {\n          this.$options.finishHandler(this.getReport(), this);\n        }\n        return this;\n      }\n    }\n\n    getReport() {\n      this.$trace(\"getReport\");\n      let testResult = \"passed\";\n      for(let index=0; index<this.$state.tests.all.length; index++) {\n        const testObject = this.$state.tests.all[index];\n        const isOk = [\"passed\", \"defined\"].indexOf(testObject.currently) !== -1;\n        if(!isOk) {\n          testResult = testObject.currently;\n        }\n      }\n      const tookMilliseconds = this.constructor.getTimeDifferenceBetweenDates(this.$state.startedAt, this.$state.finishedAt);\n      return {\n        result: testResult,\n        took: tookMilliseconds,\n        ...this.$state,\n      };\n    }\n\n    getReportAsJson(compressed = false) {\n      this.$trace(\"getReportAsJson\");\n      const report = this.getReport();\n      if(!compressed) {\n        return JSON.stringify(report, null, 2);\n      } else {\n        return JSON.stringify(report);\n      }\n    }\n\n    static collection = this.run;\n\n  };\n",
              "$code.label": "LswTester API",
              "$output": "index.html"
            }
          ],
          "LswTests API » LswTests classes and functions": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-tester/lsw-tests.js",
              "$location": {
                "start": {
                  "offset": 280,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 370,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "LswTests API » LswTests classes and functions",
              "$code": "  \n  // Example of usage:\n  //* \n  LswTestRegistry.collect(\"Lsw Fifth Test\", async function (test) {\n    test(\"can wait 1 second\", async function () {\n      await new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve();\n        }, 1000);\n      });\n    });\n  });\n  //*/\n\n  return LswTestRegistry;\n",
              "$code.label": "LswTests API",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-tester-prev/lsw-tests.js",
              "$location": {
                "start": {
                  "offset": 280,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 370,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "LswTests API » LswTests classes and functions",
              "$code": "  \n  // Example of usage:\n  /* \n  LswTestRegistry.collect(\"Lsw Fifth Test\", async function (test) {\n    test(\"can wait 1 second\", async function () {\n      await new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve();\n        }, 1000);\n      });\n    });\n  });\n  //*/\n\n  return LswTestRegistry;\n",
              "$code.label": "LswTests API",
              "$output": "index.html"
            }
          ],
          "LswTestRegistry API » LswTestRegistry classes and functions": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-tester-prev/lsw-test-registry.js",
              "$location": {
                "start": {
                  "offset": 296,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 407,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "LswTestRegistry API » LswTestRegistry classes and functions",
              "$code": "  const LswTestRegistry = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor() {\n      this.$tests = {};\n    }\n\n    define(id, callback) {\n      this.mustMiss(id);\n      this.$tests[id] = callback;\n    }\n\n    mustHave(id) {\n      if(typeof id !== \"string\") {\n        throw new Error(`Required parameter 1 «id=${id}» to be string in «$tests» on «LswTestRegistry.mustHave»`);\n      }\n      if(!(id in this.$tests)) {\n        throw new Error(`Required parameter 1 «id=${id}» to be an identifier in «$tests» on «LswTestRegistry.mustHave»`);\n      }\n    }\n\n    mustMiss(id) {\n      if(typeof id !== \"string\") {\n        throw new Error(`Required parameter 1 «id=${id}» to be string in «$tests» on «LswTestRegistry.mustMiss»`);\n      }\n      if(id in this.$tests) {\n        throw new Error(`Required parameter 1 «id=${id}» to NOT be an identifier in «$tests» on «LswTestRegistry.mustMiss»`);\n      }\n    }\n\n    pick(id) {\n      this.mustHave(id);\n      return this.$tests[id];\n    }\n\n    run(id) {\n      this.mustHave(id);\n      return this.$tests[id].call();\n    }\n\n    all() {\n      const allKeys = Object.keys(this.$tests);\n      const output = [];\n      for(let index=0; index<allKeys.length; index++) {\n        const key = allKeys[index];\n        const testCallback = this.$tests[key];\n        testCallback.$lswTestId = key;\n        output.push(testCallback);\n      }\n      return Object.values(this.$tests);\n    }\n\n    collect(id, testCallback) {\n      this.mustMiss(id);\n      const testSource = testCallback.toString();\n      const testFunction = new Function(`return LswTester.collection(${JSON.stringify(id)}, ${testSource});`)\n      this.$tests[id] = testFunction;\n      return {\n        [id]: testFunction.toString().length + \" chars\",\n      };\n    }\n\n  };\n\n  LswTestRegistry.defaultInstance = LswTestRegistry.create();\n\n  return LswTestRegistry.defaultInstance;\n",
              "$code.label": "LswTestRegistry API",
              "$output": "index.html"
            }
          ],
          "LswTimer API » LswTimer classes and functions": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-timer/lsw-timer.api.js",
              "$location": {
                "start": {
                  "offset": 280,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 370,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "LswTimer API » LswTimer classes and functions",
              "$code": "  // exported to LswTimer\n  const LswTimer = {\n    utils: {},\n    parser: Timeformat_parser,\n  };\n\n  LswTimer.utils.formatHour = function (horaInput, minutoInput) {\n    const hora = (\"\" + horaInput).padStart(2, '0');\n    const minuto = (\"\" + minutoInput).padStart(2, '0');\n    return `${hora}:${minuto}`;\n  };\n\n  LswTimer.utils.formatDatestringFromDate = function (dateObject, setUntilDay = false, setMeridian = false, setSeconds = false, setOnlyHour = false, setMilliseconds = false) {\n    if (typeof dateObject === \"undefined\") {\n      return undefined;\n    }\n    const anio = (\"\" + (dateObject.getFullYear() ?? 0)).padStart(4, '0');\n    const mes = (\"\" + ((dateObject.getMonth() ?? 0) + 1)).padStart(2, '0');\n    const dia = (\"\" + (dateObject.getDate() ?? 0)).padStart(2, '0');\n    if (setUntilDay) {\n      return `${anio}/${mes}/${dia}`;\n    }\n    const hora = (\"\" + (dateObject.getHours() ?? 0)).padStart(2, '0');\n    const minuto = (\"\" + (dateObject.getMinutes() ?? 0)).padStart(2, '0');\n    const segundo = setSeconds ? (\"\" + (dateObject.getSeconds() ?? 0)).padStart(2, '0') : false;\n    let milisegundo = false;\n    if(setMilliseconds) {\n      milisegundo = dateObject.getMilliseconds();\n    }\n    const laHora = `${hora}:${minuto}${typeof segundo !== \"boolean\" ? (':' + segundo) : ''}${milisegundo ? '.' + milisegundo : ''}${setMeridian ? hora >= 12 ? 'pm' : 'am' : ''}`;\n    if (setOnlyHour) {\n      return laHora;\n    }\n    return `${anio}/${mes}/${dia} ${laHora}`;\n  };\n\n  LswTimer.utils.fromDateToDatestring = LswTimer.utils.formatDatestringFromDate;\n\n  LswTimer.utils.getDateFromMomentoText = function (momentoText, setMeridian = false) {\n    const momentoBrute = Timeformat_parser.parse(momentoText)[0];\n    const date = new Date();\n    if (momentoBrute.anio) {\n      date.setFullYear(momentoBrute.anio);\n      if (momentoBrute.mes === 0) {\n        throw new Error(\"Cannot set «mes» to «0» in momento text on «LswTimer.utils.getDateFromMomentoText»\");\n      }\n      date.setMonth((momentoBrute.mes - 1) || 0);\n      date.setDate(momentoBrute.dia || 0);\n    }\n    date.setHours(momentoBrute.hora || 0);\n    date.setMinutes(momentoBrute.minuto || 0);\n    date.setSeconds(momentoBrute.segundo || 0);\n    date.setMilliseconds(0);\n    return date;\n  };\n\n  LswTimer.utils.fromDatestringToDate = LswTimer.utils.getDateFromMomentoText;\n\n  LswTimer.utils.formatDatetimeFromMomento = function (momentoBrute, setMeridian = false) {\n    const momento = LswTimer.utils.toPlainObject(momentoBrute);\n    const anio = (\"\" + (momento.anio ?? 0)).padStart(4, '0');\n    const mes = (\"\" + (momento.mes ?? 0)).padStart(2, '0');\n    const dia = (\"\" + (momento.dia ?? 0)).padStart(2, '0');\n    const hora = (\"\" + (momento.hora ?? 0)).padStart(2, '0');\n    const minuto = (\"\" + (momento.minuto ?? 0)).padStart(2, '0');\n    return `${anio}/${mes}/${dia} ${hora}:${minuto}${setMeridian ? hora >= 12 ? 'pm' : 'am' : ''}`;\n  };\n\n  LswTimer.utils.formatHourFromMomento = function (momentoBrute, setMeridian = false) {\n    const momento = LswTimer.utils.toPlainObject(momentoBrute);\n    const hora = (\"\" + (momento.hora ?? 0)).padStart(2, '0');\n    const minuto = (\"\" + (momento.minuto ?? 0)).padStart(2, '0');\n    return `${hora}:${minuto}${setMeridian ? hora >= 12 ? 'pm' : 'am' : ''}`;\n  };\n\n  LswTimer.utils.formatHourFromMomentoCode = function (momentoCode, setMeridian = false) {\n    const momentoBruteList = Timeformat_parser.parse(momentoCode);\n    const momentoBrute = momentoBruteList[0];\n    const momento = LswTimer.utils.toPlainObject(momentoBrute);\n    const hora = (\"\" + (momento.hora ?? 0)).padStart(2, '0');\n    const minuto = (\"\" + (momento.minuto ?? 0)).padStart(2, '0');\n    return `${hora}:${minuto}${setMeridian ? hora >= 12 ? 'pm' : 'am' : ''}`;\n  };\n\n  LswTimer.utils.addDuracionToMomento = function (momentoBrute, duracion) {\n    const momentoFinal = {};\n    const duracionParsed = Timeformat_parser.parse(duracion)[0];\n    const props = [\"anio\", \"mes\", \"dia\", \"hora\", \"minuto\", \"segundo\"];\n    const propsInDuracion = [\"anios\", \"meses\", \"dias\", \"horas\", \"minutos\", \"segundos\"];\n    for (let index = 0; index < props.length; index++) {\n      const prop = props[index];\n      const propInDuracion = propsInDuracion[index];\n      const base = momentoBrute[prop] ?? 0;\n      const aggregated = duracionParsed[propInDuracion] ?? 0;\n      momentoFinal[prop] = base + aggregated;\n    }\n    return momentoFinal;\n  };\n\n  LswTimer.utils.toPlainObject = function (obj) {\n    const seen = new WeakSet();\n    return JSON.parse(JSON.stringify(obj, (key, value) => {\n      if (typeof value === \"object\" && value !== null) {\n        if (seen.has(value)) return undefined; // Ignora referencias circulares\n        seen.add(value);\n      }\n      return value;\n    }));\n  };\n\n  LswTimer.utils.isDurationOrThrow = function (text) {\n    const errorMessage = \"It must be a duration only, like 0y 0mon 0d 0h 0min 0s 0ms\";\n    try {\n      const ast = Timeformat_parser.parse(text);\n      const mainExpression = ast[0];\n      if (mainExpression.tipo !== \"Duracion\") {\n        throw new Error(`Expression of type «${mainExpression.tipo}» is not valid. ${errorMessage}`);\n      }\n    } catch (error) {\n      throw new Error(errorMessage);\n    }\n    return true;\n  };\n\n  LswTimer.utils.isDatetimeOrThrow = function (text) {\n    const errorMessage = \"It must be a datetime only, like 2025/01/01 00:00\";\n    try {\n      const ast = Timeformat_parser.parse(text);\n      const mainExpression = ast[0];\n      if (mainExpression.tipo !== \"FechaHora\") {\n        throw new Error(errorMessage);\n      }\n    } catch (error) {\n      throw new Error(errorMessage);\n    }\n    return true;\n  };\n\n  LswTimer.utils.isDateOrThrow = function (text) {\n    const errorMessage = \"It must be a date only, like 2025/01/01\";\n    try {\n      const ast = Timeformat_parser.parse(text);\n      const mainExpression = ast[0];\n      if (mainExpression.tipo !== \"SoloFecha\") {\n        throw new Error(errorMessage);\n      }\n    } catch (error) {\n      throw new Error(errorMessage);\n    }\n    return true;\n  };\n\n  LswTimer.utils.isHourOrThrow = function (text) {\n    const errorMessage = \"It must be an hour only, like 00:00 or 23:00\";\n    try {\n      const ast = Timeformat_parser.parse(text);\n      const mainExpression = ast[0];\n      if (mainExpression.tipo === \"Hora\") {\n        throw new Error(errorMessage);\n      }\n    } catch (error) {\n      throw new Error(errorMessage);\n    }\n    return true;\n  };\n\n  LswTimer.utils.formatDateToSpanish = function (date) {\n    const anio = date.getFullYear();\n    const month = date.getMonth();\n    const day = date.getDate();\n    const weekday = date.getDay();\n    const diaSemana = (() => {\n      if (weekday === 0) return \"Domingo\";\n      if (weekday === 1) return \"Lunes\";\n      if (weekday === 2) return \"Martes\";\n      if (weekday === 3) return \"Miércoles\";\n      if (weekday === 4) return \"Jueves\";\n      if (weekday === 5) return \"Viernes\";\n      if (weekday === 6) return \"Sábado\";\n    })();\n    const mes = (() => {\n      if (month === 0) return \"Enero\";\n      if (month === 1) return \"Febrero\";\n      if (month === 2) return \"Marzo\";\n      if (month === 3) return \"Abril\";\n      if (month === 4) return \"Mayo\";\n      if (month === 5) return \"Junio\";\n      if (month === 6) return \"Julio\";\n      if (month === 7) return \"Agosto\";\n      if (month === 8) return \"Septiembre\";\n      if (month === 9) return \"Octubre\";\n      if (month === 10) return \"Noviembre\";\n      if (month === 11) return \"Diciembre\";\n    })();\n    return `${diaSemana}, ${day} de ${mes} del ${anio}`;\n  }\n\n  LswTimer.utils.formatMomentoObjectToMomentoString = function (momento) {\n    let out = \"\";\n    const { anio = false, mes = false, dia = false, hora = false, minuto = false, segundo = false, milisegundo = false } = momento;\n    if (anio !== false) {\n      out += (\"\" + anio).padStart(4, '0');\n      out += \"/\";\n    }\n    if (mes !== false) {\n      out += (\"\" + mes).padStart(2, '0');\n      out += \"/\";\n    }\n    if (dia !== false) {\n      out += (\"\" + dia).padStart(2, '0');\n      out += \" \";\n    }\n    if (hora !== false) {\n      out += (\"\" + hora).padStart(2, '0');\n      out += \":\";\n    }\n    if (minuto !== false) {\n      out += (\"\" + minuto).padStart(2, '0');\n      out += \":\";\n    }\n    if (segundo !== false) {\n      out += (\"\" + segundo).padStart(2, '0');\n      out += \".\";\n    }\n    if (milisegundo !== false) {\n      out += (\"\" + milisegundo).padStart(3, '0');\n    }\n    return out.trim();\n  };\n\n  LswTimer.utils.areSameDayDates = function (date1, date2) {\n    const areSameYear = date1.getFullYear() === date2.getFullYear();\n    const areSameMonth = date1.getMonth() === date2.getMonth();\n    const areSameDate = date1.getDate() === date2.getDate();\n    const areSameDay = areSameYear && areSameMonth && areSameDate;\n    return areSameDay;\n  };\n\n  LswTimer.utils.extractHourFromDatestring = function (date) {\n    try {\n      return date.split(\" \")[1];\n    } catch (error) {\n      console.log(error);\n      return date;\n    }\n  };\n\n  LswTimer.utils.fromDateToHour = function (date, addSeconds = false) {\n    try {\n      const hora = date.getHours();\n      const minuto = date.getMinutes();\n      let out = \"\";\n      if (hora !== false) {\n        out += (\"\" + hora).padStart(2, '0');\n        out += \":\";\n      }\n      if (minuto !== false) {\n        out += (\"\" + minuto).padStart(2, '0');\n      }\n      if (addSeconds) {\n        const segundo = date.getSeconds();\n        out += \":\";\n        out += (\"\" + segundo).padStart(2, '0');\n      }\n      return out;\n    } catch (error) {\n      console.log(error);\n      return date;\n    }\n  };\n\n  LswTimer.utils.parseToNumberOrReturn = function (txt, defaultValue) {\n    const output = parseFloat(txt);\n    return isNaN(output) ? defaultValue : output;\n  };\n\n  LswTimer.utils.fromDurationstringToMilliseconds = function (durationString) {\n    const lines = Timeformat_parser.parse(durationString);\n    if (lines.length === 0) {\n      return 0;\n    } else if (lines.length !== 1) {\n      throw new Error(\"Only accepted 1 expression\")\n    }\n    const line = lines[0];\n    let ms = 0;\n    if (line.anios) {\n      ms += line.anios * 1000 * 60 * 60 * 24 * 365;\n    }\n    if (line.meses) {\n      ms += line.meses * 1000 * 60 * 60 * 24 * 30;\n    }\n    if (line.dias) {\n      ms += line.dias * 1000 * 60 * 60 * 24;\n    }\n    if (line.horas) {\n      ms += line.horas * 1000 * 60 * 60;\n    }\n    if (line.minutos) {\n      ms += line.minutos * 1000 * 60;\n    }\n    if (line.segundos) {\n      ms += line.segundos * 1000;\n    }\n    if (line.milisegundos) {\n      ms += line.milisegundos;\n    }\n    return ms;\n  };\n\n  LswTimer.utils.fromMillisecondsToDurationstring = function (ms) {\n    const units = {\n      y: 1000 * 60 * 60 * 24 * 365,\n      mon: 1000 * 60 * 60 * 24 * 30,\n      d: 1000 * 60 * 60 * 24,\n      h: 1000 * 60 * 60,\n      min: 1000 * 60,\n      s: 1000,\n      ms: 1\n    };\n    let remaining = ms;\n    const parts = [];\n    for (const [unit, value] of Object.entries(units)) {\n      const amount = Math.floor(remaining / value);\n      if (amount > 0) {\n        parts.push(`${amount}${unit}`);\n        remaining %= value;\n      }\n    }\n    return parts.join(' ');\n  };\n\n  LswTimer.utils.multiplyDuration = function (duration, multiplier) {\n    const operand = LswTimer.utils.parseToNumberOrReturn(multiplier, 0);\n    const durationMiliSource = LswTimer.utils.fromDurationstringToMilliseconds(duration);\n    const durationMiliDest = durationMiliSource * operand;\n    const durationDest = LswTimer.utils.fromMillisecondsToDurationstring(durationMiliDest);\n    return durationDest;\n  };\n\n  return LswTimer;\n",
              "$code.label": "LswTimer API",
              "$output": "index.html"
            }
          ],
          "LswTriggers API » LswTriggers classes and functions": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-trigger/triggers-class.js",
              "$location": {
                "start": {
                  "offset": 290,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 389,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "LswTriggers API » LswTriggers classes and functions",
              "$code": "  // exported to TriggersClass\n\n  class TriggerConcept {\n    constructor(anyzin) {\n      Object.assign(this, anyzin);\n    }\n  };\n\n  class TriggerParameters extends TriggerConcept {};\n  \n  class TriggerEvent extends TriggerConcept {};\n\n  class TriggersClass {\n\n    static Concept = TriggerConcept;\n\n    static Event = TriggerEvent;\n    \n    static Parameters = TriggerParameters;\n\n    static globMatch(patterns, list, wantsPatterns = false) {\n      const matches = new Set();\n\n      const regexes = patterns.map(pattern => {\n        let regexPattern = pattern\n          .replace(/[-/\\\\^$+?.()|[\\]{}]/g, \"\\\\$&\") // Escapa caracteres especiales\n          .replace(/\\*/g, \".*\")                 // '*' => cualquier cosa\n        return {\n          original: pattern,\n          expr: new RegExp(`^${regexPattern}$`),\n        };\n      });\n      for (const item of list) {\n        for (const regex of regexes) {\n          if (regex.expr.test(item)) {\n            if(!wantsPatterns) {\n              matches.add(item);\n            } else {\n              matches.add(regex.original);\n            }\n            break;\n          }\n        }\n      }\n\n      return Array.from(matches);\n    }\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    all = {};\n\n    findTriggerCollectionByEventAndId(event, id) {\n      return LswLifecycle.hooks.all[event].filter(trigger => trigger.id === id);\n    }\n\n    register(triggerNamePattern, triggerIdentifier, triggerCallback, triggerConfigurations = {}) {\n      const { priority = 0 } = triggerConfigurations; // Default priority is 0\n      if (!this.all[triggerNamePattern]) {\n        this.all[triggerNamePattern] = [];\n      }\n      \n      this.all[triggerNamePattern].push({\n        id: triggerIdentifier,\n        callback: triggerCallback,\n        priority,\n      });\n    }\n\n    async emit(triggerName, parameters = {}) {\n      let matchedTriggers = [];\n      const allPatterns = Object.keys(this.all);\n\n      // Encuentra patrones que coincidan con el nombre del evento\n      const matchedPatterns = this.constructor.globMatch(allPatterns, [triggerName], true);\n\n      // Agrega todos los eventos coincidentes a la lista de disparos\n      for (const pattern of matchedPatterns) {\n        matchedTriggers = matchedTriggers.concat(this.all[pattern] || []);\n      }\n\n      // Ordena por prioridad descendente\n      matchedTriggers.sort((a, b) => b.priority - a.priority);\n\n      // Ejecuta los callbacks en orden\n      const output = [];\n      for (const trigger of matchedTriggers) {\n        const eventObject = new TriggerEvent({ event: triggerName })\n        const parametersObject = new TriggerParameters(parameters);\n        const result = await trigger.callback(eventObject, parametersObject);\n        output.push(result);\n      }\n\n      return output;\n    }\n\n    unregister(triggerIdentifier) {\n      for (const pattern in this.all) {\n        this.all[pattern] = this.all[pattern].filter(\n          (trigger) => trigger.id !== triggerIdentifier\n        );\n        if (this.all[pattern].length === 0) {\n          delete this.all[pattern]; // Limpia patrones vacíos\n        }\n      }\n    }\n\n    reset() {\n      this.all = {};\n    }\n\n  }\n\n  TriggersClass.default = TriggersClass;\n\n  return TriggersClass;\n",
              "$code.label": "LswTriggers API",
              "$output": "index.html"
            }
          ],
          "LswTyper API » LswTyper class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-typer/lsw-typer.api.js",
              "$location": {
                "start": {
                  "offset": 282,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 356,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "LswTyper API » LswTyper class",
              "$code": "  class LswTyper {\n\n    static parse(jsontypedText) {\n      return LswTyperParser.parse(jsontypedText);\n    }\n\n    constructor(types = {}) {\n      this.$types = types;\n    }\n\n    define(typeId, typeCallback) {\n      this.$types[typeId] = typeCallback;\n    }\n\n    getTypeCallbackById(typeId) {\n      return this.$types[typeId] || null;\n    }\n\n    parse(jsontypedText) {\n      const ast = this.constructor.parse(jsontypedText);\n      const json = this.constructor.resolveTypes(ast, this.$types);\n      return JSON.parse(json);\n    }\n\n    static resolveTypes(input, reducers) {\n      return JSON.stringify(input, (key, value) => {\n        const isTyped = value && (typeof value === 'object') && (\"$value\" in value) && (\"$type\" in value);\n        // Filtramos los que no son type:\n        if (!isTyped) {\n          return value;\n        }\n        console.log(\"is typed:\", key, value);\n        const $types = Array.isArray(value.$type) ? value.$type : [value.$type];\n        Iterating_possible_types:\n        for(let index=0; index<$types.length; index++) {\n          const reducerId = $types[index];\n          // Filtramos los que cuyo $type no se encuentra entre los reducers:\n          if(!(reducerId in reducers)) {\n            console.log(\"Id not found:\", reducerId);\n            continue Iterating_possible_types;\n          }\n          console.log(\"Id reduceable:\", reducerId);\n          // Aplicamos el reducer pertinente...\n          const reducer = reducers[reducerId];\n          const result = reducer(value);\n          // Y si devuelven diferente de undefined...\n          console.log(\"Reduction:\", result);\n          if (typeof result !== \"undefined\") {\n            // Los retornamos.\n            return result;\n          }\n        }\n        // Y si no devolvemos lo normal.\n        return value;\n      }, 2);\n    }\n\n  }\n\n  globalThis.$lswTyper = new LswTyper();\n\n  return LswTyper;\n",
              "$code.label": "LswTyper API",
              "$output": "index.html"
            }
          ],
          "Lsw Utils API » Lsw Utils global": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-utils/lsw-utils.js",
              "$location": {
                "start": {
                  "offset": 280,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 352,
                  "line": 15,
                  "column": 1
                }
              },
              "section": "Lsw Utils API » Lsw Utils global",
              "$code": "  const LswUtils = {};\n\n  LswUtils.hello = () => console.log(\"Hello!\");\n\n  ///////////////////////////////////////////////////////\n  // API de Excel: usa SheetJS\n  Object.assign(LswUtils, {\n    readFileAsArrayBuffer(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = event => resolve(event.target.result);\n        reader.onerror = error => reject(error);\n        reader.readAsArrayBuffer(file);\n      });\n    },\n    readFileAsText(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = event => resolve(event.target.result);\n        reader.onerror = error => reject(error);\n        reader.readAsText(file);\n      });\n    },\n    readFileAsBinaryString(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = event => resolve(event.target.result);\n        reader.onerror = error => reject(error);\n        reader.readAsBinaryString(file);\n      });\n    },\n    selectFile() {\n      return new Promise(resolve => {\n        const inputHtml = document.createElement(\"input\");\n        inputHtml.setAttribute(\"type\", \"file\");\n        inputHtml.setAttribute(\"accept\", \".ods,.xlsx,.xls,.csv\");\n        inputHtml.style.display = \"none\";\n        document.body.appendChild(inputHtml);\n        inputHtml.addEventListener(\"change\", event => {\n          try {\n            const file = event.target.files[0];\n            if (file) {\n              return resolve(file);\n            } else {\n              return resolve(undefined);\n            }\n          } catch (error) {\n            console.log(\"This should not happen :(\", error);\n          } finally {\n            inputHtml.remove();\n          }\n        });\n        inputHtml.click();\n      });\n    },\n    sheetToArray(sheet) {\n      // Obtener el rango de celdas activo de la hoja\n      const range = sheet['!ref']; // Ejemplo: 'A1:C3'\n      // Extraer las coordenadas de la celda inicial y final del rango\n      const [startCell, endCell] = range.split(':');\n      const startCol = startCell.match(/[A-Z]+/)[0]; // Columna de la primera celda (por ejemplo, 'A')\n      const startRow = parseInt(startCell.match(/\\d+/)[0], 10); // Fila de la primera celda (por ejemplo, 1)\n      const endCol = endCell.match(/[A-Z]+/)[0]; // Columna de la última celda (por ejemplo, 'C')\n      const endRow = parseInt(endCell.match(/\\d+/)[0], 10); // Fila de la última celda (por ejemplo, 3)\n      const data = [];\n      // Iterar sobre las filas y columnas dentro del rango\n      for (let row = startRow; row <= endRow; row++) {\n        const rowData = [];\n        for (let col = startCol.charCodeAt(0); col <= endCol.charCodeAt(0); col++) {\n          const cellAddress = String.fromCharCode(col) + row;\n          const cell = sheet[cellAddress]; // Obtener la celda\n          rowData.push(cell ? cell.v : null); // Si la celda existe, tomar su valor. Si no, agregar `null`\n        }\n        data.push(rowData); // Agregar la fila al array de datos\n      }\n      return data;\n    }\n  });\n\n  ///////////////////////////////////////////////////////\n  // API de Conductometria: usa API de Excel (so: SheetJS)\n  Object.assign(LswUtils, {\n    isDatePassed(date, time, currentDate = new Date()) {\n      const [day, month, year] = date.split(\"/\").map(Number);\n      const [hour, minute, second] = time.split(\":\").map(Number);\n      const targetDate = new Date(year, month - 1, day, hour, minute, second);\n      return currentDate > targetDate;\n    },\n    sheetToRegistros(sheet, asObjectIsOkay = false) {\n      const raw = this.sheetToArray(sheet);\n      const byDate = {};\n      let lastDate = undefined;\n      const currentDate = new Date();\n      Compact_by_date_using_last_date: {\n        for (let index = 0; index < raw.length; index++) {\n          const cells = raw[index];\n          const [time, content] = cells;\n          const isDate = time.match(/[0-9][0-9]\\/[0-9][0-9]\\/[0-9][0-9]/g);\n          if (isDate) {\n            if (!(time in byDate)) {\n              byDate[time] = {};\n            }\n            lastDate = time;\n          } else {\n            if (typeof content === \"string\") {\n              if (!(time in byDate[lastDate])) {\n                byDate[lastDate][time] = [];\n              }\n              Add_properties_to_hour: {\n              }\n              const items = content.split(\".\").filter(l => l !== \"\");\n              for (let indexItem = 0; indexItem < items.length; indexItem++) {\n                const item = items[indexItem];\n                const [name, details] = item.split(\":\").filter(l => l !== \"\");\n                let event = {};\n                Add_properties_to_event: {\n                  Object.assign(event, { name });\n                  Object.assign(event, details ? { details: details.trim() } : {});\n                }\n                byDate[lastDate][time].push(event);\n              }\n            }\n          }\n        }\n      }\n      if (asObjectIsOkay) {\n        return byDate;\n      }\n      const output = [];\n      Format_to_pure_array_to_avoid_confusions: {\n        const daysSorted = Object.keys(byDate).sort();\n        for (let index_day = 0; index_day < daysSorted.length; index_day++) {\n          const day_id = daysSorted[index_day];\n          const day_data = byDate[day_id];\n          const day_output = {\n            day: day_id,\n            hours: []\n          };\n          const hoursSorted = Object.keys(day_data).sort();\n          for (let index_hour = 0; index_hour < hoursSorted.length; index_hour++) {\n            const hour_id = hoursSorted[index_hour];\n            const hour_data = day_data[hour_id];\n            const hour_is_passed = this.isDatePassed(day_id, hour_id, currentDate);\n            const hour_is_current = hour_is_passed && (() => {\n              const [hours, minutes, seconds] = hour_id.split(\":\").map(Number);\n              const hour_next_id = [hours + 1, minutes, seconds].map(t => (\"\" + t).padStart(2, \"0\")).join(\":\");\n              console.log(hour_next_id);\n              return !this.isDatePassed(day_id, hour_next_id, currentDate);\n            })();\n            const hour_output = {\n              hour: hour_id,\n              events: [],\n              passed: hour_is_passed,\n              current: hour_is_current,\n            };\n            for (let index_item = 0; index_item < hour_data.length; index_item++) {\n              const item = hour_data[index_item];\n              hour_output.events.push(item);\n            }\n            day_output.hours.push(hour_output);\n          }\n          output.push(day_output);\n        }\n      }\n      return output;\n    },\n    async loadConductometriaByExcelFile() {\n      try {\n        const file = await this.selectFile();\n        const data = await this.readFileAsBinaryString(file);\n        const workbook = XLSX.read(data, { type: \"binary\", cellDates: false });\n        const sheet = workbook.Sheets[\"Tracking\"];\n        const registros = this.sheetToRegistros(sheet);\n        return { registros };\n      } catch (error) {\n        console.log(error);\n      }\n    },\n  });\n\n  // API de LSW:\n  LswUtils.toPlainObject = function (obj) {\n    const seen = new WeakSet();\n    return JSON.parse(JSON.stringify(obj, (key, value) => {\n      if (typeof value === \"object\" && value !== null) {\n        if (seen.has(value)) return undefined; // Ignora referencias circulares\n        seen.add(value);\n      }\n      return value;\n    }));\n  };\n\n\n  LswUtils.stringify = function (argInput, avoidedIndexes = [], currentLevel = 0, maxLevel = -1) {\n    const seen = new WeakSet();\n    return JSON.stringify(argInput, function (key, value) {\n      if (avoidedIndexes.indexOf(key) !== -1) {\n        return;\n      }\n      if (typeof value === \"object\") {\n        if (value === null) {\n          return null;\n        }\n        if (value.$el) {\n          return `[VueComponent:${value?.$options?.name}]`;\n        }\n        if (seen.has(value)) {\n          return \"[Circular]\";\n        }\n        if (value !== null) {\n          seen.add(value);\n        }\n      }\n      return value;\n    }, 2);\n  };\n\n  LswUtils.pluralizar = function (singular, plural, contexto, cantidad) {\n    return contexto.replace(\"%s\", cantidad === 1 ? singular : plural).replace(\"%i\", cantidad);\n  };\n\n  LswUtils.getRandomString = function (len = 10) {\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n    let out = \"\";\n    while (out.length < len) {\n      out += alphabet[Math.floor(Math.random() * alphabet.length)];\n    }\n    return out;\n  };\n\n  LswUtils.hello = function () {\n    console.log(\"hello\");\n  };\n\n  LswUtils.waitForMilliseconds = function (ms) {\n    return new Promise(resolve => {\n      setTimeout(resolve, ms);\n    });\n  };\n\n  LswUtils.toIntegerOr = function (txt, defaultValue = undefined) {\n    const val = parseInt(txt);\n    return isNaN(val) ? defaultValue : val;\n  };\n\n  LswUtils.toFloatOr = function (txt, defaultValue = undefined) {\n    const val = parseFloat(txt);\n    return isNaN(val) ? defaultValue : val;\n  };\n\n  LswUtils.splitStringOnce = function (text, splitter) {\n    if (typeof text !== \"string\") {\n      throw new Error(\"Required parameter «text» to be a string on «LswUtils.splitStringOnce»\");\n    }\n    if (typeof splitter !== \"string\") {\n      throw new Error(\"Required parameter «text» to be a string on «LswUtils.splitStringOnce»\");\n    }\n    const pos = text.indexOf(splitter);\n    if (pos === -1) return [undefined, text];\n    const parts = text.split(\"\");\n    return [[...parts].splice(0, pos).join(\"\"), [...parts].splice(pos + 1).join(\"\")];\n  };\n\n  LswUtils.reverseString = function (text) {\n    return text.split(\"\").reverse().join(\"\");\n  };\n\n  LswUtils.capitalize = function (text) {\n    return text.substr(0, 1).toUpperCase() + text.substr(1);\n  };\n\n  LswUtils.startThread = function (callback) {\n    setTimeout(callback, 0);\n  };\n\n  LswUtils.openAddNoteDialog = async function () {\n    const response = await Vue.prototype.$lsw.dialogs.open({\n      title: \"Nueva nota\",\n      template: `\n        <div class=\"pad_1 position_absolute top_0 right_0 left_0 bottom_0 flex_column\">\n          <div class=\"flex_1\">\n            <input class=\"width_100\" type=\"text\" v-model=\"value.tiene_fecha\" placeholder=\"Fecha de la nota\" ref=\"fecha\" />\n          </div>\n          <div class=\"flex_1 flex_row centered\" style=\"padding-top: 1px;\">\n            <div class=\"flex_1\">Estado: </div>\n            <select class=\"flex_100\" v-model=\"value.tiene_estado\">\n              <option value=\"creada\">Creada</option>\n              <option value=\"procesada\">Procesada</option>\n              <option value=\"dudosa\">Dudosa</option>\n              <option value=\"desestimada\">Desestimada</option>\n            </select>\n          </div>\n          <div class=\"flex_1\" style=\"padding-top: 2px;\">\n            <input class=\"width_100\" type=\"text\" v-model=\"value.tiene_categorias\" placeholder=\"categoría 1; categoria 2; categoria 3\" />\n          </div>\n          <div class=\"flex_100\" style=\"padding-top: 1px;\">\n            <textarea v-model=\"value.tiene_contenido\" spellcheck=\"false\" style=\"height: 100%;\" placeholder=\"Contenido de la nota. Acepta **markdown**, recuerda.\" ref=\"contenido\" />\n          </div>\n          <div class=\"flex_1\" style=\"padding-top: 2px;\">\n            <input class=\"width_100\" type=\"text\" v-model=\"value.tiene_titulo\" placeholder=\"Título de la nota\" ref=\"titulo\" />\n          </div>\n          <div class=\"flex_row pad_top_1\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 flex_row\">\n              <div class=\"pad_right_1\">\n                <button class=\"mini\" v-on:click=\"validate\">➕ Añadir</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      `,\n      factory: {\n        methods: {\n          validate() {\n            const isValidFecha = LswTimer.parser.parse(this.value.tiene_fecha);\n            const isValidContenido = this.value.tiene_contenido.trim() !== \"\";\n            const isValidTitulo = this.value.tiene_titulo.trim() !== \"\";\n            if (!isValidTitulo) {\n              window.alert(\"Necesita un título la nota.\");\n              return this.$refs.titulo.focus();\n            }\n            if (!isValidContenido) {\n              window.alert(\"Necesita un contenido la nota.\");\n              return this.$refs.contenido.focus();\n            }\n            if (!isValidFecha) {\n              window.alert(\"Necesita una fecha válida la nota.\");\n              return this.$refs.fecha.focus();\n            }\n            return this.accept();\n          }\n        },\n        data: {\n          value: {\n            tiene_fecha: LswTimer.utils.formatDatestringFromDate(new Date(), false, false, true),\n            tiene_titulo: \"\",\n            tiene_categorias: \"\",\n            tiene_contenido: \"\",\n            tiene_estado: \"creada\", // \"procesada\"\n          }\n        }\n      }\n    });\n    return response;\n  };\n\n  LswUtils.openAddArticuloDialog = async function () {\n    const response = await Vue.prototype.$lsw.dialogs.open({\n      title: \"Nuevo artículo\",\n      template: `\n        <div class=\"\">\n          <lsw-schema-based-form\n            :model=\"{\n              databaseId:'lsw_default_database',\n              tableId:'Articulo',\n              rowId: -1,\n            }\"\n            :on-submit=\"validate\"\n          />\n        </div>\n      `,\n      factory: {\n        methods: {\n          validate(value) {\n            console.log(\"Validating:\", value);\n            this.value = value;\n            const isValidFecha = LswTimer.parser.parse(this.value.tiene_fecha);\n            const isValidContenido = this.value.tiene_contenido.trim() !== \"\";\n            const isValidTitulo = this.value.tiene_titulo.trim() !== \"\";\n            if (!isValidTitulo) {\n              window.alert(\"Necesita un título la nota.\");\n              return this.$refs.titulo.focus();\n            }\n            if (!isValidContenido) {\n              window.alert(\"Necesita un contenido la nota.\");\n              return this.$refs.contenido.focus();\n            }\n            if (!isValidFecha) {\n              window.alert(\"Necesita una fecha válida la nota.\");\n              return this.$refs.fecha.focus();\n            }\n            return this.accept();\n          }\n        },\n        data: {\n          value: {\n            tiene_fecha: LswTimer.utils.formatDatestringFromDate(new Date(), false, false, true),\n            tiene_titulo: \"\",\n            tiene_categorias: \"\",\n            tiene_contenido: \"\",\n            tiene_estado: \"creada\", // \"procesada\"\n          }\n        }\n      }\n    });\n    return response;\n  };\n\n  LswUtils.createAsyncFunction = function (code, parameters = []) {\n    const AsyncFunction = (async function () { }).constructor;\n    const asyncFunction = new AsyncFunction(...parameters, code);\n    return asyncFunction;\n  };\n\n  LswUtils.createSyncFunction = function (code, parameters = []) {\n    const syncFunction = new Function(...parameters, code);\n    return syncFunction;\n  };\n\n  LswUtils.callSyncFunction = function (code, parameters = {}, scope = globalThis) {\n    const parameterKeys = Object.keys(parameters);\n    const parameterValues = Object.values(parameters);\n    const syncFunction = new Function(...parameterKeys, code);\n    return syncFunction.call(scope, ...parameterValues);\n  };\n\n  LswUtils.arrays = {};\n\n  LswUtils.extractFirstStringOr = function (txt, defaultValue = \"\") {\n    if (!txt.startsWith('\"')) return defaultValue;\n    const pos1 = txt.substr(1).indexOf('\"');\n    if (pos1 === -1) return defaultValue;\n    const pos = pos1 - 1;\n    const extractedSubstr = txt.substr(0, pos);\n    // // @OK: No escapamos, porque se entiende que no se va a usar ese string en el concepto nunca.\n    return JSON.parse(extractedSubstr);\n  };\n\n  LswUtils.uniquizeArray = function (list) {\n    const appeared = [];\n    for (let index = 0; index < list.length; index++) {\n      const item = list[index];\n      const pos = appeared.indexOf(item);\n      if (pos === -1) {\n        appeared.push(item);\n      }\n    }\n    return appeared;\n  };\n\n  LswUtils.arrays.uniquizeArray = LswUtils.uniquizeArray;\n\n  LswUtils.arrays.getMissingInFirst = function (a, b) {\n    const excludeds = [];\n    for (let index = 0; index < b.length; index++) {\n      const b_item = b[index];\n      const pos = a.indexOf(b_item);\n      if (pos === -1) {\n        excludeds.push(b_item);\n      }\n    }\n    return excludeds;\n  };\n\n  LswUtils.fromJsonToNatural = function (json, nivel = 0) {\n    // @CHATGPT:\n    const indent = '  '.repeat(nivel);\n    let texto = '';\n    if (Array.isArray(json)) {\n      texto += `${indent}Esta es una lista con ${json.length} elemento(s):\\n`;\n      json.forEach((item, index) => {\n        texto += `${indent}- Elemento ${index + 1}: `;\n        if (typeof item === 'object' && item !== null) {\n          texto += '\\n' + LswUtils.fromJsonToNatural(item, nivel + 1);\n        } else {\n          texto += `${LswUtils.naturalizeValue(item)}\\n`;\n        }\n      });\n    } else if (typeof json === 'object' && json !== null) {\n      const keys = Object.keys(json);\n      texto += `${indent}Este objeto tiene ${keys.length} propiedad(es):\\n`;\n      for (const key of keys) {\n        const valor = json[key];\n        texto += `${indent}- La propiedad \"${key}\" `;\n        if (typeof valor === 'object' && valor !== null) {\n          texto += `contiene:\\n` + LswUtils.fromJsonToNatural(valor, nivel + 1);\n        } else {\n          texto += `tiene ${LswUtils.naturalizeValue(valor)}.\\n`;\n        }\n      }\n    } else {\n      texto += `${indent}${LswUtils.naturalizeValue(json)}\\n`;\n    }\n    return texto;\n  };\n\n  LswUtils.naturalizeValue = function (valor) {\n    switch (typeof valor) {\n      case 'string':\n        return `un texto que dice \"${valor}\"`;\n      case 'number':\n        return `un número con valor ${valor}`;\n      case 'boolean':\n        return valor ? 'el valor verdadero' : 'el valor falso';\n      case 'object':\n        return valor === null ? 'un valor nulo' : 'un objeto';\n      default:\n        return 'un valor desconocido';\n    }\n  };\n\n  LswUtils.subtextualize = function(text, maxLength = 30) {\n    if(text.length <= maxLength) {\n      return text;\n    }\n    return text.substring(0, maxLength) + \"...\";\n  };\n\n  LswUtils.downloadFile = function (filename, filecontent) {\n    if (typeof window.cordova !== \"undefined\") {\n      LswUtils.debug(`Descargando fichero ${filename} (${filecontent.length}B) en entorno de Cordova app`);\n      const rutaFinal = cordova.file.externalRootDirectory + 'Download/';\n      LswUtils.debug(`Descargando en ruta final: ${rutaFinal}${filename}`);\n      window.resolveLocalFileSystemURL(rutaFinal, function (dir) {\n        dir.getFile(filename, { create: true }, function (file) {\n          file.createWriter(function (fileWriter) {\n            const blob = new Blob([filecontent], { type: \"text/plain\" });\n            fileWriter.write(blob);\n            LswUtils.debug(`Descarga efectuada con éxito en la carpeta convencional de descargas: ${rutaFinal}${filename}`);\n          }, LswUtils.debug);\n        });\n      }, LswUtils.debug);\n    } else {\n      LswUtils.debug(`Descargando fichero ${filename} (${filecontent.length}B) en entorno web`);\n      const blob = new Blob([filecontent], { type: \"text/plain\" });\n      const enlace = document.createElement(\"a\");\n      enlace.href = URL.createObjectURL(blob);\n      enlace.download = filename;\n      document.body.appendChild(enlace);\n      enlace.click();\n      document.body.removeChild(enlace);\n    }\n  };\n\n  LswUtils.extractPropertiesFrom = function (base, props = [], voidedProps = [], overridings = {}) {\n    const out = {};\n    for (let index = 0; index < props.length; index++) {\n      const propId = props[index];\n      if (propId in base) {\n        out[propId] = base[propId];\n      }\n    }\n    for (let index = 0; index < voidedProps.length; index++) {\n      const propId = voidedProps[index];\n      delete out[propId];\n    }\n    return Object.assign(out, overridings);\n  };\n\n  LswUtils.getUniqueItemsFromLists = function (...lists) {\n    const uniqueKeys = [];\n    for (let index = 0; index < lists.length; index++) {\n      const keys = lists[index];\n      for (let indexKey = 0; indexKey < keys.length; indexKey++) {\n        const key = keys[indexKey];\n        if (uniqueKeys.indexOf(key) === -1) {\n          uniqueKeys.push(key);\n        }\n      }\n    }\n    return uniqueKeys;\n  };\n\n  LswUtils.sortListByProperties = function (lista, props) {\n    return lista.sort((a, b) => {\n      for (let prop of props) {\n        let orden = 1;\n\n        if (prop.startsWith(\"!\")) {\n          orden = -1;\n          prop = prop.slice(1);\n        }\n\n        const valA = a[prop];\n        const valB = b[prop];\n\n        if (valA < valB) return -1 * orden;\n        if (valA > valB) return 1 * orden;\n      }\n      return 0;\n    });\n  };\n\n  LswUtils.parseAsJsonOrReturn = function (data, defaultValue = undefined) {\n    try {\n      return JSON.parse(data);\n    } catch (error) {\n      return defaultValue;\n    }\n  };\n\n  LswUtils.dehydrateFunction = function (f) {\n    return f.toString();\n  };\n\n  LswUtils.hydrateFunction = function (fSource) {\n    return new Function(fSource);\n  };\n\n  LswUtils.zeroIfNegative = function (numero) {\n    if (numero < 0) {\n      return 0;\n    }\n    return numero;\n  };\n\n  LswUtils.filterObject = function (obj, filterer) {\n    return Object.keys(obj).reduce((output, key, index) => {\n      const val = obj[key];\n      console.log(key, val, index, output);\n      const result = filterer(key, val, index, output);\n      if (result) {\n        output[key] = val;\n      }\n      return output;\n    }, {});\n  };\n\n  LswUtils.mapObject = function (obj, mapper, deleterValue = undefined) {\n    return Object.keys(obj).reduce((output, key, index) => {\n      const val = obj[key];\n      const result = mapper(key, val, index, output);\n      if (result !== deleterValue) {\n        output[key] = result;\n      }\n      return output;\n    }, {});\n  };\n\n  LswUtils.reduceObject = function (obj, reducer) {\n    return Object.keys(obj).reduce((output, key, index) => {\n      const val = obj[key];\n      return reducer(key, val, index, output);\n    }, {});\n  };\n\n  LswUtils.askForFileText = async function () {\n    return new Promise((resolve, reject) => {\n      const inputHtml = document.createElement(\"input\");\n      inputHtml.type = \"file\";\n      inputHtml.style.display = \"none\";\n      inputHtml.onchange = function () {\n        const file = event.target.files[0];\n        if (file) {\n          resolve(file);\n        } else {\n          reject(new Error(\"No file selected finally\"));\n        }\n        document.body.removeChild(inputHtml);\n      };\n      document.body.appendChild(inputHtml);\n      inputHtml.click();\n    }).then(file => {\n      return new Promise((resolve, reject) => {\n        const lector = new FileReader();\n        lector.onload = () => {\n          resolve(lector.result);\n        };\n        lector.readAsText(file);\n      });\n    });\n  };\n\n  LswUtils.padStart = function (txt, ...args) {\n    return (\"\" + txt).padStart(...args);\n  };\n\n  LswUtils.flattenObjects = function (list, options = {}) {\n    const {\n      keyMapper = false, // can be function or false\n      valueMapper = false, // can be function or false\n      duplicatedsStrategy = 'override', // can be \"override\" | \"error\"\n      nonFlattenablesStrategy = 'ignore', // can be \"ignore\" | \"error\"\n    } = options;\n    const output = {};\n    let totalKeys = 0;\n    for (let index = 0; index < list.length; index++) {\n      const item = list[index];\n      const isFlattenable = (typeof item === \"object\") && (item !== null);\n      if (isFlattenable) {\n        const allKeys = Object.keys(item);\n        for (let indexKey = 0; indexKey < allKeys.length; indexKey++) {\n          const key = allKeys[indexKey];\n          const isDuplicated = key in output;\n          if ((!isDuplicated) || (duplicatedsStrategy === 'override')) {\n            const finalKey = typeof keyMapper === 'function' ? keyMapper(key, totalKeys, indexKey, item, index, list) : key;\n            const finalValue = typeof valueMapper === 'function' ? valueMapper(item[key], totalKeys, indexKey, item, index, list) : item[key];\n            totalKeys++;\n            output[finalKey] = finalValue;\n          } else if (duplicatedsStrategy === 'error') {\n            throw new Error(`Required item on index «${index}» key «${key}» to not be duplicated on «LswUtils.flattenObjects»`);\n          } else {\n            throw new Error(`Unknown strategy for duplicateds «${duplicatedsStrategy}» on «LswUtils.flattenObjects»`);\n          }\n        }\n      } else if (nonFlattenablesStrategy === 'ignore') {\n        // @OK.\n      } else if (nonFlattenablesStrategy === 'error') {\n        throw new Error(`Required item on index «${index}=${typeof item}» to be flattenable on «LswUtils.flattenObjects»`);\n      } else {\n        throw new Error(`Unknown strategy for non-flattenables «${nonFlattenablesStrategy}» on «LswUtils.flattenObjects»`);\n      }\n    }\n    return output;\n  };\n\n  LswUtils.splitByUnicode = function (texto) {\n    const segmenter = new Intl.Segmenter('es', { granularity: 'grapheme' });\n    return Array.from(segmenter.segment(texto), s => s.segment);\n  };\n\n  LswUtils.copyToClipboard = function (texto) {\n    window.navigator.clipboard.writeText(texto);\n  };\n\n  LswUtils.debug = (...args) => LswDebugger.global.debug(...args);\n\n  Global_injection: {\n    window.kk = (...args) => Object.keys(...args);\n    window.dd = (...args) => LswDebugger.global.debug(...args);\n    window.ddd = (...args) => LswDebugger.global.debug(...args);\n  }\n\n",
              "$code.label": "LswUtils",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswAppsViewerButton API » LswAppsViewerButton component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-apps-viewer-button/lsw-apps-viewer-button.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 176,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswAppsViewerButton API » LswAppsViewerButton component",
              "$code": "Vue.component(\"LswAppsViewerButton\", {\n  template: $template,\n  props: {\n    viewer: {\n      type: Object,\n      required: true,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-apps-viewer-button.data\");\n    return {\n      isOpened: false,\n    };\n  },\n  methods: {\n    toggleOpen() {\n      this.$trace(\"lsw-apps-viewer-button.methods.toggleOpen\");\n      this.isOpened = !this.isOpened;\n    },\n    open() {\n      this.$trace(\"lsw-apps-viewer-button.methods.open\");\n      this.isOpened = true;\n    },\n    close() {\n      this.$trace(\"lsw-apps-viewer-button.methods.close\");\n      this.isOpened = false;\n    },\n    selectApplication(application) {\n      this.$trace(\"lsw-apps-viewer-button.methods.selectApplication\");\n      // console.log(this.viewer);\n      const isSame = this.viewer.selectedApplication === application;\n      if(!isSame) {\n        this.viewer.selectApplication(application);\n      } else {\n        // @NOTHING.\n      }\n      this.close();\n    },\n    openHomepage() {\n      this.selectApplication(\"homepage\");\n    },\n    openEventTracker() {\n      this.selectApplication(\"event-tracker\");\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-apps-viewer-button.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  },\n});\n",
              "$code.label": "LswAppsViewerButton API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswAppsViewer API » LswAppsViewerPanel component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-apps-viewer-panel/lsw-apps-viewer-panel.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 168,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswAppsViewer API » LswAppsViewerPanel component",
              "$code": "Vue.component(\"LswAppsViewerPanel\", {\n  template: $template,\n  props: {\n\n  },\n  data() {\n    this.$trace(\"lsw-apps-viewer-panel.data\");\n    return {\n      isOpened: false,\n      selectedApplication: 'despues', // 'antes', 'despues'\n      accionesAntes: false,\n      accionesDespues: false,\n      horaActual: LswTimer.utils.fromDateToHour(new Date()),\n    };\n  },\n  methods: {\n    selectApplication(section) {\n      this.$trace(\"lsw-apps-viewer-panel.methods.selectApplication\");\n      this.isOpened = false;\n      this.selectedApplication = undefined;\n      try {\n        Gestiona_casos_excepcionales: {\n          if(section === \"js consola\") {\n            // Activamos eruda en lugar de cambiar de pestaña:\n            return LswConsoleHooker.toggleConsole();\n          }\n        }\n        this.$lsw.dialogs.minimizeAll();\n        this.selectedApplication = section;\n        Cargas_segun_aplicacion: {\n          if ([\"antes\", \"despues\"].indexOf(section) !== -1) {\n            this.loadAcciones();\n          } else {\n            this.$forceUpdate(true);\n          }\n        }\n      } catch (error) {\n        console.error(error);\n        this.$lsw.toasts.showError(error);\n      } finally {\n        this.$nextTick(() => {\n          this.isOpened = true;\n        });\n      }\n    },\n    getSimboloEstadoAccion(estado) {\n      return (estado === \"completada\") ? \"💚\" :\n        (estado === \"pendiente\") ? \"❓\" :\n          (estado === \"fallida\") ? \"🔥\" : \"\";\n    },\n    async loadAcciones() {\n      this.$trace(\"lsw-apps-viewer-panel.methods.loadAcciones\");\n      const output = await this.$lsw.database.selectMany(\"Accion\");\n      const estaHora = (() => {\n        const d = new Date();\n        d.setMinutes(0);\n        return d;\n      })();\n      const accionesAntes = [];\n      const accionesDespues = [];\n      output.forEach(accion => {\n        try {\n          const dateAccion = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n          const areSameDay = LswTimer.utils.areSameDayDates(dateAccion, estaHora);\n          if (!areSameDay) return;\n          if (dateAccion >= estaHora) {\n            accionesDespues.push(accion);\n          } else {\n            accionesAntes.push(accion);\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      });\n      this.accionesAntes = accionesAntes.sort(this.getSorterOfAccionesAntes());\n      this.accionesDespues = accionesDespues.sort(this.getSorterOfAccionesDespues());\n      this.$forceUpdate(true);\n    },\n    getSorterOfAccionesAntes() {\n      this.$trace(\"lsw-apps-viewer-panel.methods.getSorterOfAccionesAntes\");\n      return function (accion1, accion2) {\n        let inicio1, inicio2;\n        try {\n          inicio1 = LswTimer.utils.fromDatestringToDate(accion1.tiene_inicio);\n        } catch (error) {\n          return 1;\n        }\n        try {\n          inicio2 = LswTimer.utils.fromDatestringToDate(accion2.tiene_inicio);\n        } catch (error) {\n          return -1;\n        }\n        const firstIsLower = inicio1 < inicio2;\n        return firstIsLower ? 1 : -1;\n      };\n    },\n    getSorterOfAccionesDespues() {\n      this.$trace(\"lsw-apps-viewer-panel.methods.getSorterOfAccionesDespues\");\n      return function (accion1, accion2) {\n        let inicio1, inicio2;\n        try {\n          inicio1 = LswTimer.utils.fromDatestringToDate(accion1.tiene_inicio);\n        } catch (error) {\n          return 1;\n        }\n        try {\n          inicio2 = LswTimer.utils.fromDatestringToDate(accion2.tiene_inicio);\n        } catch (error) {\n          return -1;\n        }\n        const firstIsLower = inicio1 <= inicio2;\n        return firstIsLower ? -1 : 1;\n      };\n    },\n    async alternarEstado(accion) {\n      this.$trace(\"lsw-apps-viewer-panel.methods.alternarEstado\");\n      const nextEstado = accion.tiene_estado === \"pendiente\" ? \"completada\" :\n        accion.tiene_estado === \"completada\" ? \"fallida\" : \"pendiente\";\n      await this.$lsw.database.update(\"Accion\", accion.id, {\n        ...accion,\n        tiene_estado: nextEstado\n      });\n      await this.loadAcciones();\n    },\n    async reloadPanel() {\n      this.$trace(\"lsw-apps-viewer-panel.methods.reloadPanel\");\n      await this.loadAcciones();\n    },\n    async openNotaUploader() {\n      this.$trace(\"lsw-apps-viewer-panel.methods.openNotaUploader\", arguments);\n      const response = await LswUtils.openAddNoteDialog();\n      if (typeof response !== \"object\") {\n        return;\n      }\n      await this.$lsw.database.insert(\"Nota\", response);\n    },\n    openWikiExplorer() {\n      this.$trace(\"lsw-windows-main-tab.methods.openWikiExplorer\", arguments);\n      this.$dialogs.open({\n        id: \"wiki-explorer-\" + LswRandomizer.getRandomString(5),\n        title: \"Wiki explorer\",\n        template: `<div class=\"pad_2\"><lsw-wiki /></div>`,\n      });\n    },\n    async openArticuloUploader() {\n      this.$trace(\"lsw-windows-main-tab.methods.openArticuloUploader\", arguments);\n      const response = await LswUtils.openAddArticuloDialog();\n      if (typeof response !== \"object\") {\n        return;\n      }\n      await this.$lsw.database.insert(\"Articulo\", response);\n    },\n    updateHoraActual() {\n      this.$trace(\"lsw-windows-main-tab.methods.updateHoraActual\", arguments);\n      this.horaActual = LswTimer.utils.fromDateToHour(new Date());\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-apps-viewer-panel.mounted\");\n      await this.loadAcciones();\n    } catch (error) {\n      console.log(error);\n    }\n  },\n});\n",
              "$code.label": "LswAppsViewerPanel API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswAutomensajesViewer API » LswAutomensajesViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-automensajes-viewer/lsw-automensajes-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 182,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswAutomensajesViewer API » LswAutomensajesViewer component",
              "$code": "Vue.component(\"LswAutomensajesViewer\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-automensajes-viewer.data\");\n    return {\n      isMounted: false,\n      automensajes: [],\n      selectedAutomensaje: undefined,\n      selectedFontsize: 12,\n      automessagingId: undefined,\n      automessagingSeconds: 0,\n      simboloActual: \"🕓\", // \"✴️\", // \"♠️\",\n      // simboloActual: LswRandomizer.getRandomItem(\"🌅🌄🌠🎇🎆🌇🌆🏙🌃🌌🌉🌁\".split(\"\")),\n      \n      // simboloActual: LswRandomizer.getRandomItem(\"🐶🐱🐵🐗🐴🐌🐜🌋🏭🏢🏬🏣🚀🛸🚁🎲🎯🎳✴️🗽🗼🛟🎱🐞🌝🌛🌜🌚🌕🌖🌗🌘🌑🌒🌓🌔🌙🌎🌍🌏🪐💫⭐️🌟✨⚡️☄️💥🔥🌪🌈🐉🐲🐦‍🔥🌵🎄🌲🌳🌴🪹🪺🪵🌱🌿🍀🍁🍄🍄‍🟫🌾💐🌷🪷🌹🥀🌺🎪🤹🤹‍♂️🤹‍♀️🎭🎨🎼🎹🥁🪘🪇🎷🎺🪗🎸🪕🎻🪈♟🎰🧩🚗🚕🚙🎬🎤🎧💧💦🫧☔️☂️🌊🍏🍎🍐🍊🍋🍋‍🟩🍌🍉🍇🍓🫐🍈🍒🍑🥭🍍🥥🥝🍅🍆🥑🥦🫛\".split(\"\")),\n    };\n  },\n  methods: {\n    procedureForPicas() {\n      this.$trace(\"LswAutomensajesViewer.methods.procedureForPicas\", []);\n      this.$lsw.dialogs.minimizeAll();\n      this.selectApplication(\"homepage\");\n    },\n    async loadAutomensajes() {\n      this.$trace(\"LswAutomensajesViewer.methods.loadAutomensajes\", []);\n      const automensajes = await this.$lsw.fs.evaluateAsDotenvFileOrReturn(\"/kernel/settings/automessages.env\", {});\n      this.automensajes = Object.keys(automensajes);\n    },\n    async sendAutomessage() {\n      this.$trace(\"LswAutomensajesViewer.methods.sendAutomessage\", []);\n      const availableAutomensajes = this.automensajes.filter(a => {\n        if(typeof this.selectedAutomensaje !== \"string\") return true;\n        return a !== this.selectedAutomensaje;\n      });\n      const nextAutomensaje = LswRandomizer.getRandomItem(availableAutomensajes);\n      const nextFontsize = this.calculateFontsize(nextAutomensaje);\n      this.selectedFontsize = nextFontsize;\n      this.selectedAutomensaje = nextAutomensaje;\n    },\n    calculateFontsize(text) {\n      this.$trace(\"LswAutomensajesViewer.methods.calculateFontsize\", []);\n      const textLength = text.length;\n      if(textLength < 10) {\n        return 18;\n      } else if(textLength < 20) {\n        return 16;\n      } else if(textLength < 30) {\n        return 14;\n      } else {\n        return 12;\n      }\n    },\n    async startAutomessaging() {\n      this.$trace(\"LswAutomensajesViewer.methods.startAutomessaging\", []);\n      await this.loadAutomensajes();\n      await this.sendAutomessage();\n      await this.continueAutomessaging();\n    },\n    async continueAutomessaging() {\n      this.$trace(\"LswAutomensajesViewer.methods.continueAutomessaging\", []);\n      clearTimeout(this.automessagingId);\n      this.automessagingSeconds = LswRandomizer.getRandomIntegerBetween(60,120);\n      this.automessagingId = setTimeout(() => this.sendAutomessage(), this.automessagingSeconds * 1000);\n    },\n    stopAutomessaging() {\n      this.$trace(\"LswAutomensajesViewer.methods.stopAutomessaging\");\n      clearTimeout(this.automessagingId);\n    },\n    async refreshAutomessaging() {\n      this.$trace(\"LswAutomensajesViewer.methods.refreshAutomessaging\", []);\n      this.stopAutomessaging();\n      this.startAutomessaging();\n      this.$window.changeBackgroundImage();\n    },\n    goToDesktop() {\n      this.$trace(\"LswAutomensajesViewer.methods.goToDesktop\", []);\n      this.$lsw.windows.hide();\n      this.$refs.appPanel.selectApplication(\"none\");\n    },\n    selectApplication(application) {\n      this.$trace(\"LswAutomensajesViewer.methods.selectApplication\", []);\n      this.$refs.appPanel.selectApplication(application);\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-automensajes-viewer.mounted\");\n      this.$window.$automensajesUi = this;\n      // this.startAutomessaging();\n      this.isMounted = true;\n      this.refreshAutomessaging();\n    } catch(error) {\n      console.log(error);\n    }\n  },\n  unmount() {\n    this.$trace(\"lsw-automensajes-viewer.unmount\");\n    this.stopAutomessaging();\n  }\n});\n",
              "$code.label": "LswAutomensajesViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswBarsGraph component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-bars-graph/lsw-bars-graph.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 94,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswBarsGraph component",
              "$code": "Vue.component(\"LswBarsGraph\", {\n  template: $template,\n  props: {\n    sample: {\n      type: Object,\n      required: true,\n    },\n    keys: {\n      type: Array,\n      required: true,\n    },\n    negativeKeys: {\n      type: Array,\n      default: () => [],\n    },\n    propId: {\n      type: String,\n      default: () => false,\n    },\n    propOptions: {\n      type: String,\n      default: () => \"$options\",\n    },\n  },\n  data() {\n    this.$trace(\"lsw-bars-graph.data\");\n    const currentSample = LswBarsGraph.toSample(this.sample, this.propId, this.keys, this.propOptions);\n    return {\n      currentPropertyView: undefined,\n      currentSample,\n    };\n  },\n  methods: {\n    selectPropertyView(propIndex) {\n      this.$trace(\"lsw-bars-graph.methods.selectPropertyView\");\n      const isSame = this.currentPropertyView === propIndex;\n      this.currentPropertyView = isSame ? undefined : propIndex;\n    },\n    selectPropertyViewByName(propId) {\n      this.$trace(\"lsw-bars-graph.methods.selectPropertyView\");\n      const propIndex = this.keys.indexOf(propId);\n      if(propIndex === -1) return;\n      const isSame = this.currentPropertyView === propIndex;\n      this.currentPropertyView = isSame ? undefined : propIndex;\n    },\n    getColor(propId, value) {\n      this.$trace(\"lsw-bars-graph.methods.getColor\");\n      const polaridad = this.negativeKeys.indexOf(propId) === -1;\n      if(polaridad) {\n        if (value <= 20) {\n          return \"red\" ;\n        } else if (value <= 40) {\n          return \"violet\" ;\n        } else if (value <= 60) {\n          return \"white\";\n        } else if (value <= 80) {\n          return \"yellow\" ;\n        } else {\n          return \"lime\" ;\n        }\n      } else {\n        if (value <= 20) {\n          return \"lime\" ;\n        } else if (value <= 40) {\n          return \"yellow\" ;\n        } else if (value <= 60) {\n          return \"white\" ;\n        } else if (value <= 80) {\n          return \"violet\";\n        } else {\n          return \"red\" ;\n        }\n      }\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-bars-graph.mounted\");\n\n  },\n  unmount() {\n    this.$trace(\"lsw-bars-graph.unmounted\");\n  }\n});\n",
              "$code.label": "LswBarsGraph API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswBinDirectory component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-bin-directory/lsw-bin-directory.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 100,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswBinDirectory component",
              "$code": "Vue.component(\"LswBinDirectory\", {\n  template: $template,\n  props: {\n    directory: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-bin-directory.data\");\n    return {\n      hasError: false,\n      isLoaded: false,\n      isAboutSearching: false,\n      searchText: \"\",\n      binaries: [],\n      binariesInSelection: [],\n      delayedTimeout: 0.7 * 1000,\n      delayedTimeoutId: undefined,\n    };\n  },\n  methods: {\n    async loadBinaries() {\n      this.$trace(\"lsw-bin-directory.methods.loadBinaries\");\n      try {\n        this.isLoaded = false;\n        const allBinaries = await this.$lsw.fs.$selectMany(it => {\n          return it.type === \"file\" && it.filepath.startsWith(\"/kernel/bin\") && it.filepath.endsWith(\".js\");\n        });\n        this.binaries = allBinaries;\n        await this.digestOutput();\n      } catch (error) {\n        this.$lsw.toasts.send({\n          title: \"No pudieron cargarse los binarios\",\n          text: 'Hubo un error al cargar los binarios'\n        });\n        console.error(`[!] Could not load bin-directory «${this.directory}» because:`, error);\n        this.hasError = error;\n      } finally {\n        this.isLoaded = true;\n      }\n    },\n    digestOutput() {\n      this.$trace(\"lsw-bin-directory.methods.digestOutput\");\n      return new Promise((resolve, reject) => {\n        let output = [];\n        try {\n          this.isAboutSearching = true;\n          Apply_search: {\n            if (this.searchText.trim() === \"\") {\n              output = this.binaries;\n              break Apply_search;\n            }\n            const loweredSearchText = this.searchText.toLowerCase();\n            for (let index = 0; index < this.binaries.length; index++) {\n              const binarie = this.binaries[index];\n              const hasMatch = binarie.filepath.toLowerCase().indexOf(loweredSearchText) !== -1;\n              if (hasMatch) {\n                output.push(binarie);\n              }\n            }\n          }\n          return resolve(output);\n        } catch (error) {\n          return reject(error);\n        } finally {\n          Export_results: {\n            this.isAboutSearching = false;\n            this.binariesInSelection = output;\n          }\n        }\n      });\n    },\n    digestDelayed() {\n      this.$trace(\"lsw-bin-directory.methods.digestDelayed\");\n      clearTimeout(this.delayedTimeoutId);\n      this.isAboutSearching = true;\n      this.delayedTimeoutId = setTimeout(this.digestOutput, this.delayedTimeout);\n    },\n    async executeBin(binarie) {\n      this.$trace(\"lsw-bin-directory.methods.executeBin\");\n      const asyncBin = LswUtils.createAsyncFunction(binarie.content);\n      try {\n        const output = await asyncBin.call(this);\n        Aqui_se_hookearia_pero_creo_que_no: {\n          console.log(output);\n        }\n        return output;\n      } catch (error) {\n        this.$lsw.toasts.sendError(error);\n      }\n    },\n    editBin(binarie) {\n      this.$trace(\"lsw-bin-directory.methods.editBin\");\n      this.$lsw.dialogs.open({\n        title: \"Editando binario\",\n        template: `<lsw-filesystem-explorer :opened-by=\"binarie.filepath\" :absolute-layout=\"true\" />`,\n        factory: { data: { binarie } },\n      });\n    },\n    openBinarios() {\n      this.$trace(\"lsw-bin-directory.methods.openBinarios\");\n      this.$lsw.dialogs.open({\n        title: \"Explorando binarios\",\n        template: `<lsw-filesystem-explorer opened-by=\"/kernel/bin\" :absolute-layout=\"true\" />`\n      });\n    },\n    formatFilepathForUser(txt) {\n      return txt.replace(this.directory, \"\").replace(/^\\//g, \"\").replace(/\\.js$/g, \"\");\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-bin-directory.mounted\");\n    this.loadBinaries();\n  },\n  unmount() {\n    this.$trace(\"lsw-bin-directory.unmounted\");\n    // @OK\n  }\n});\n",
              "$code.label": "LswBinDirectory API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Wiki API » LswBookFactory component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-book-factory/lsw-book-factory.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 113,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Wiki API » LswBookFactory component",
              "$code": "Vue.component(\"LswBookFactory\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-book-factory.data\");\n    return {\n      titles: [],\n    };\n  },\n  methods: {\n    async loadTitles() {\n      this.$trace(\"lsw-book-factory.methods.loadTitles\");\n      const librosMap = await this.$lsw.fs.read_directory(\"/kernel/wiki/libros\");\n      this.titles = Object.keys(librosMap);\n      // await LswLazyLoads.loadEjs();\n    },\n    openLibrosDirectory() {\n      this.$trace(\"lsw-book-factory.methods.openLibrosDirectory\");\n      this.$lsw.dialogs.open({\n        title: \"Directorio de libros\",\n        template: `<lsw-filesystem-explorer opened-by=\"/kernel/wiki/libros\" />`,\n      });\n    },\n    editLibro(title) {\n      this.$trace(\"lsw-book-factory.methods.editLibro\");\n      this.$lsw.dialogs.open({\n        title: \"Editar libro\",\n        template: `<lsw-filesystem-explorer :opened-by=\"'/kernel/wiki/libros/' + title\" />`,\n        factory: {\n          data: {\n            title,\n          }\n        }\n      });\n    },\n    async openLibro(title) {\n      this.$trace(\"lsw-book-factory.methods.openLibro\");\n      const originalSource = await this.$lsw.fs.read_file(`/kernel/wiki/libros/${title}`);\n      const source = originalSource;\n      this.$lsw.dialogs.open({\n        title: \"Leer libro\",\n        template: `\n          <div class=\"pad_1\">\n            <lsw-markdown-viewer :source=\"source\" :activate-ejs=\"true\" />\n          </div>\n        `,\n        factory: {\n          data: {\n            source,\n          }\n        }\n      });\n    },\n  },\n  async mounted() {\n    this.$trace(\"lsw-book-factory.mounted\");\n    await this.loadTitles();\n  },\n  unmount() {\n    this.$trace(\"lsw-book-factory.unmount\");\n  }\n});\n",
              "$code.label": "LswBookFactory API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Wiki API » LswBookLibrary component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-book-library/lsw-book-library.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 113,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Wiki API » LswBookLibrary component",
              "$code": "Vue.component(\"LswBookLibrary\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-book-library.data\");\n    return {};\n  },\n  methods: {},\n  mounted() {\n    this.$trace(\"lsw-book-library.mounted\");\n  },\n  unmount() {\n    this.$trace(\"lsw-book-library.unmount\");\n  }\n});\n",
              "$code.label": "LswBookLibrary API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswCalendario API » LswCalendario component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-calendario/lsw-calendario.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswCalendario API » LswCalendario component",
              "$code": "Vue.component(\"LswCalendario\", {\n  template: $template,\n  props: {\n    modo: {\n      type: String,\n      default: () => \"datetime\" // can be: date, time, datetime\n    },\n    valorInicial: {\n      type: [String, Date],\n      default: () => new Date()\n    },\n    alCambiarValor: {\n      type: Function,\n      default: () => { }\n    },\n    alIniciar: {\n      type: Function,\n      default: () => { }\n    },\n    accionesViewer: {\n      type: [Object, Boolean],\n      default: () => false\n    }\n  },\n  data() {\n    try {\n      this.$trace(\"lsw-calendario.data\");\n      const hoy = new Date();\n      const rightButtons = [];\n      if(this.accionesViewer) {\n        rightButtons.push({\n          text: \"➕🐾\",\n          event: this.openNewTaskDialog\n        });\n      }\n      if(this.accionesViewer) {\n        rightButtons.push({\n          text: \"🎲\",\n          event: this.openDayRandomizer\n        });\n      }\n      rightButtons.push({\n        text: \"🔎\",\n        event: this.openTimeLocator\n      });\n      return {\n        es_carga_inicial: true,\n        valor_inicial_adaptado: this.adaptar_valor_inicial(this.valorInicial),\n        es_solo_fecha: this.modo === \"date\",\n        es_solo_hora: this.modo === \"time\",\n        es_fecha_y_hora: this.modo === \"datetime\",\n        fecha_seleccionada: undefined,\n        celdas_del_mes_actual: undefined,\n        marcadores_del_mes: {},\n        hoy: hoy,\n        hora_actual: hoy.getHours(),\n        minuto_actual: hoy.getMinutes(),\n        dia_actual: hoy.getDate(),\n        mes_actual: hoy.getMonth(),\n        anio_actual: hoy.getFullYear(),\n        rightButtons,\n      };\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  },\n  methods: {\n    getValue() {\n      this.$trace(\"lsw-calendario.methods.getValue\");\n      return this.fecha_seleccionada;\n    },\n    async openNewTaskDialog() {\n      this.$trace(\"lsw-calendario.methods.openNewTaskDialog\");\n      if (this.accionesViewer) {\n        this.accionesViewer.openNewRowDialog();\n      }\n    },\n    async openDayRandomizer() {\n      this.$trace(\"lsw-calendario.methods.openDayRandomizer\");\n      if (this.accionesViewer) {\n        this.accionesViewer.randomizeDay();\n      }\n    },\n    async openTimeLocator() {\n      const localizacion = await this.$lsw.dialogs.open({\n        title: \"Localizador del calendario\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"pad_bottom_1\">Señala el día al que ir con formato «año/mes/día»:</div>\n            <div class=\"flex_row centered pad_bottom_1\">\n              <div class=\"flex_100\">\n                <input class=\"supermini width_100\" type=\"number\" v-model=\"value.year\" />\n              </div>\n              <div class=\"flex_1 pad_horizontal_1\">/</div>\n              <div class=\"flex_100\">\n                <input class=\"supermini width_100\" type=\"number\" v-model=\"value.month\" />\n              </div>\n              <div class=\"flex_1 pad_horizontal_1\">/</div>\n              <div class=\"flex_100\">\n                <input class=\"supermini width_100\" type=\"number\" v-model=\"value.day\" />\n              </div>\n            </div>\n            <div class=\"pad_bottom_1\">\n              <pre class=\"small_font\">{{ currentDateFormatted }}</pre>\n            </div>\n            <hr />\n            <div class=\"flex_row centered pad_bottom_1\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Ir a este día</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            value: {\n              year: this.fecha_seleccionada.getFullYear(),\n              month: this.fecha_seleccionada.getMonth(),\n              day: this.fecha_seleccionada.getDate(),\n            }\n          },\n          computed: {\n            currentDateFormatted() {\n              try {\n                const tempDate = new Date(`${this.value.year}/${this.value.month}/${this.value.day}`);\n                const result = tempDate.toDateString();\n                if (result === \"Invalid Date\") {\n                  throw new Error(\"La fecha formateada no es válida\");\n                }\n                return LswTimer.utils.formatDateToSpanish(tempDate);\n              } catch (error) {\n                return null;\n              }\n            }\n          }\n        }\n      });\n      if (typeof localizacion !== \"object\") {\n        return;\n      }\n      this.fecha_seleccionada = new Date(`${localizacion.year}/${localizacion.month}/${localizacion.day}`);\n    },\n    adaptar_valor_inicial(valor) {\n      this.$trace(\"lsw-calendario.methods.adaptar_valor_inicial\");\n      if (typeof valor === \"string\") {\n        try {\n          const resultado = LswTimer.utils.getDateFromMomentoText(valor);\n          console.log(\"FECHA ENTRADA:\", resultado);\n          return resultado;\n        } catch (error) {\n          console.error(\"Error parseando valor inicial de lsw-calendario:\", error);\n        }\n      }\n      return valor || new Date();\n    },\n    agregar_digito_de_hora(indice) {\n      this.$trace(\"lsw-calendario.methods.agregar_digito_de_hora\");\n      const value = this.obtener_digito_de_hora(indice);\n      const isInMaximum = ([3, 5].indexOf(indice) !== -1) ? value === 5 : ([1].indexOf(indice) !== -1) ? value === 2 : value === 9;\n      if (!isInMaximum) {\n        this.establecer_digito_de_hora(indice, value + 1);\n      }\n    },\n    quitar_digito_de_hora(indice) {\n      this.$trace(\"lsw-calendario.methods.quitar_digito_de_hora\");\n      const value = this.obtener_digito_de_hora(indice);\n      const isInMinimum = value === 0;\n      if (!isInMinimum) {\n        this.establecer_digito_de_hora(indice, value - 1);\n      }\n    },\n    obtener_digito_de_hora(indice, fecha = this.fecha_seleccionada) {\n      this.$trace(\"lsw-calendario.methods.obtener_digito_de_hora\");\n      if (indice === 1) {\n        return parseInt(this.espaciar_izquierda(fecha.getHours(), 2)[0]);\n      } else if (indice === 2) {\n        return parseInt(this.espaciar_izquierda(fecha.getHours(), 2)[1]);\n      } else if (indice === 3) {\n        return parseInt(this.espaciar_izquierda(fecha.getMinutes(), 2)[0]);\n      } else if (indice === 4) {\n        return parseInt(this.espaciar_izquierda(fecha.getMinutes(), 2)[1]);\n      } else if (indice === 5) {\n        return parseInt(this.espaciar_izquierda(fecha.getSeconds(), 2)[0]);\n      } else if (indice === 6) {\n        return parseInt(this.espaciar_izquierda(fecha.getSeconds(), 2)[1]);\n      } else {\n        throw new Error(\"No se reconoció el índice del dígito: \" + indice);\n      }\n    },\n    cambiar_posicion_en_texto(texto, posicion, valor) {\n      this.$trace(\"lsw-calendario.methods.cambiar_posicion_en_texto\");\n      const arr = (\"\" + texto).split(\"\");\n      arr[posicion] = valor;\n      return arr.join(\"\");\n    },\n    establecer_digito_de_hora(indice, valor) {\n      this.$trace(\"lsw-calendario.methods.establecer_digito_de_hora\");\n      console.log(indice, valor);\n      const fecha_clonada = new Date(this.fecha_seleccionada);\n      if (indice === 1) {\n        let horas = this.espaciar_izquierda(this.fecha_seleccionada.getHours(), 2);\n        horas = this.cambiar_posicion_en_texto(horas, 0, valor);\n        const horasInt = parseInt(horas);\n        if (horasInt > 23) return;\n        fecha_clonada.setHours(horasInt);\n      } else if (indice === 2) {\n        let horas = this.espaciar_izquierda(this.fecha_seleccionada.getHours(), 2);\n        horas = this.cambiar_posicion_en_texto(horas, 1, valor);\n        const horasInt = parseInt(horas);\n        if (horasInt > 23) return;\n        fecha_clonada.setHours(horasInt);\n      } else if (indice === 3) {\n        let minutos = this.espaciar_izquierda(this.fecha_seleccionada.getMinutes(), 2);\n        minutos = this.cambiar_posicion_en_texto(minutos, 0, valor);\n        const minutosInt = parseInt(minutos);\n        if (minutosInt > 59) return;\n        fecha_clonada.setMinutes(minutosInt);\n      } else if (indice === 4) {\n        let minutos = this.espaciar_izquierda(this.fecha_seleccionada.getMinutes(), 2);\n        minutos = this.cambiar_posicion_en_texto(minutos, 1, valor);\n        const minutosInt = parseInt(minutos);\n        if (minutosInt > 59) return;\n        fecha_clonada.setMinutes(minutosInt);\n      } else if (indice === 5) {\n        // @OK\n      } else if (indice === 6) {\n        // @OK\n      } else {\n        throw new Error(\"No se reconoció el índice del dígito: \" + indice);\n      }\n      console.log(fecha_clonada);\n      this.fecha_seleccionada = fecha_clonada;\n      this.actualizar_fecha_seleccionada(true);\n    },\n    ir_a_mes_anterior() {\n      this.$trace(\"lsw-calendario.methods.ir_a_mes_anterior\");\n      try {\n        const nueva_fecha = new Date(this.fecha_seleccionada);\n        this.fecha_seleccionada = new Date(nueva_fecha.getFullYear(), nueva_fecha.getMonth() - 1, 1);\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n\n    },\n    ir_a_mes_siguiente() {\n      this.$trace(\"lsw-calendario.methods.ir_a_mes_siguiente\");\n      try {\n        const nueva_fecha = new Date(this.fecha_seleccionada);\n        this.fecha_seleccionada = new Date(nueva_fecha.getFullYear(), nueva_fecha.getMonth() + 1, 1);\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n\n    },\n    seleccionar_dia(dia) {\n      this.$trace(\"lsw-calendario.methods.seleccionar_dia\");\n      try {\n        this.fecha_seleccionada = dia;\n        this.actualizar_fecha_seleccionada(true);\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n\n    },\n    espaciar_izquierda(texto,\n      longitud,\n      relleno = \"0\") {\n      this.$trace(\"lsw-calendario.methods.espaciar_izquierda\");\n      try {\n        let salida = \"\" + texto;\n        while (salida.length < longitud) {\n          salida = relleno + salida;\n        }\n        return salida;\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n\n    },\n    obtener_fecha_formateada(fecha) {\n      this.$trace(\"lsw-calendario.methods.obtener_fecha_formateada\");\n      try {\n        if (!(fecha instanceof Date)) {\n          console.log(fecha);\n          throw new Error(\"Required parameter «fecha» to be a Date on «LswCalendario.methods.obtener_fecha_formateada»\");\n        }\n        let formato = \"\";\n        formato += (() => {\n          try {\n            if (fecha.getDay() === 0) {\n              return \"Domingo\";\n            }\n            if (fecha.getDay() === 1) {\n              return \"Lunes\";\n            }\n            if (fecha.getDay() === 2) {\n              return \"Martes\";\n            }\n            if (fecha.getDay() === 3) {\n              return \"Miércoles\";\n            }\n            if (fecha.getDay() === 4) {\n              return \"Jueves\";\n            }\n            if (fecha.getDay() === 5) {\n              return \"Viernes\";\n            }\n            if (fecha.getDay() === 6) {\n              return \"Sábado\";\n            }\n          } catch (error) {\n            console.log(error);\n            throw error;\n          }\n        })();\n        formato += \", \";\n        formato += fecha.getDate();\n        formato += \" de \";\n        formato += (() => {\n          try {\n            if (fecha.getMonth() === 0) {\n              return \"Enero\";\n            }\n            if (fecha.getMonth() === 1) {\n              return \"Febrero\";\n            }\n            if (fecha.getMonth() === 2) {\n              return \"Marzo\";\n            }\n            if (fecha.getMonth() === 3) {\n              return \"Abril\";\n            }\n            if (fecha.getMonth() === 4) {\n              return \"Mayo\";\n            }\n            if (fecha.getMonth() === 5) {\n              return \"Junio\";\n            }\n            if (fecha.getMonth() === 6) {\n              return \"Julio\";\n            }\n            if (fecha.getMonth() === 7) {\n              return \"Agosto\";\n            }\n            if (fecha.getMonth() === 8) {\n              return \"Septiembre\";\n            }\n            if (fecha.getMonth() === 9) {\n              return \"Octubre\";\n            }\n            if (fecha.getMonth() === 10) {\n              return \"Noviembre\";\n            }\n            if (fecha.getMonth() === 11) {\n              return \"Diciembre\";\n            }\n          } catch (error) {\n            console.log(error);\n            throw error;\n          }\n        })();\n        formato += \" de \";\n        formato += fecha.getFullYear();\n        return formato;\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n\n    },\n    actualizar_calendario(nuevo_valor = this.fecha_seleccionada) {\n      this.$trace(\"lsw-calendario.methods.actualizar_calendario\");\n      try {\n        const dias = [];\n        const dia_1_del_mes = new Date(nuevo_valor);\n        dia_1_del_mes.setDate(1);\n        dia_1_del_mes.setHours(0);\n        dia_1_del_mes.setMinutes(0);\n        dia_1_del_mes.setSeconds(0);\n        dia_1_del_mes.setMilliseconds(0);\n        const dias_antes_de_entrar_en_el_mes = (() => {\n          try {\n            const dia_de_semana = dia_1_del_mes.getDay();\n            if (dia_de_semana === 0) {\n              return 6;\n            }\n            if (dia_de_semana === 1) {\n              return 0;\n            }\n            if (dia_de_semana === 2) {\n              return 1;\n            }\n            if (dia_de_semana === 3) {\n              return 2;\n            }\n            if (dia_de_semana === 4) {\n              return 3;\n            }\n            if (dia_de_semana === 5) {\n              return 4;\n            }\n            if (dia_de_semana === 6) {\n              return 5;\n            }\n          } catch (error) {\n            console.log(error);\n            throw error;\n          }\n        })();\n        const celdas_vacias_anteriores = new Array(dias_antes_de_entrar_en_el_mes);\n        let dia_final_del_mes = undefined;\n        Logica_anterior: {\n          dia_final_del_mes = new Date(nuevo_valor);\n          dia_final_del_mes.setMonth(dia_final_del_mes.getMonth() + 1);\n          dia_final_del_mes.setDate(1);\n          dia_final_del_mes.setDate(dia_final_del_mes.getDate() - 1);\n        }\n        Logica_chatgpt: {\n          dia_final_del_mes = new Date(nuevo_valor.getFullYear(), nuevo_valor.getMonth() + 1, 0);\n        }\n        const numero_final_de_mes = dia_final_del_mes.getDate();\n        let fila_actual = celdas_vacias_anteriores;\n        for (let index = 1; index <= numero_final_de_mes; index++) {\n          const nueva_fecha = new Date(dia_1_del_mes);\n          nueva_fecha.setDate(index);\n          fila_actual.push(nueva_fecha);\n          if (nueva_fecha.getDay() === 0) {\n            dias.push(fila_actual);\n            fila_actual = [];\n          }\n        }\n        if (fila_actual.length) {\n          dias.push(fila_actual);\n        }\n        this.celdas_del_mes_actual = dias;\n        this.propagar_cambio();\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    },\n    actualizar_fecha_seleccionada(con_propagacion = true, fecha_seleccionada = this.fecha_seleccionada) {\n      this.$trace(\"lsw-calendario.methods.actualizar_fecha_seleccionada\");\n      if (con_propagacion) {\n        const clon_fecha = new Date(fecha_seleccionada);\n        this.fecha_seleccionada = clon_fecha;\n      }\n    },\n    propagar_cambio() {\n      this.$trace(\"lsw-calendario.methods.propagar_cambio\");\n      if (typeof this.alCambiarValor === \"function\") {\n        // Si es carga inicial, no propagamos el evento:\n        if (this.es_carga_inicial) {\n          return;\n        }\n        this.alCambiarValor(this.fecha_seleccionada, this);\n      }\n    },\n    obtener_expresion_de_hora(fecha = this.fecha_seleccionada) {\n      this.$trace(\"lsw-calendario.methods.obtener_expresion_de_hora\");\n      let hours = fecha.getHours();\n      let minutes = fecha.getMinutes();\n      let seconds = fecha.getSeconds();\n      hours = this.espaciar_izquierda(hours, 2, \"0\");\n      minutes = this.espaciar_izquierda(minutes, 2, \"0\");\n      seconds = this.espaciar_izquierda(seconds, 2, \"0\");\n      return `${hours}:${minutes}:${seconds}`;\n    },\n    establecer_marcadores_del_mes(marcadores_del_mes) {\n      this.$trace(\"lsw-calendario.methods.establecer_marcadores_del_mes\");\n      this.marcadores_del_mes = marcadores_del_mes;\n    },\n    establecer_hora_directamente(hora, minutos = 0) {\n      this.$trace(\"lsw-calendario.methods.establecer_hora_directamente\");\n      this.fecha_seleccionada.setHours(hora);\n      this.fecha_seleccionada.setMinutes(minutos);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n    increaseHora(horas_aniadidos) {\n      this.$trace(\"lsw-calendario.methods.increaseHora\");\n      const horas_actuales = this.fecha_seleccionada.getHours();\n      this.fecha_seleccionada.setHours(horas_actuales + horas_aniadidos);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n    increaseMinuto(minutos_aniadidos) {\n      this.$trace(\"lsw-calendario.methods.increaseMinuto\");\n      const minutos_actuales = this.fecha_seleccionada.getMinutes();\n      this.fecha_seleccionada.setMinutes(minutos_actuales + minutos_aniadidos);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n    setHora(horas) {\n      this.$trace(\"lsw-calendario.methods.setHora\");\n      this.fecha_seleccionada.setHours(horas);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n    setMinuto(minutos) {\n      this.$trace(\"lsw-calendario.methods.setMinuto\");\n      this.fecha_seleccionada.setMinutes(minutos);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n    askHora() {\n      this.$trace(\"lsw-calendario.methods.askHora\");\n      const hora = window.prompt(\"Qué hora quieres poner?\", this.fecha_seleccionada.getHours());\n      if (typeof hora !== \"string\") return;\n      this.fecha_seleccionada.setHours(hora);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n    askMinuto() {\n      this.$trace(\"lsw-calendario.methods.askMinuto\");\n      const minuto = window.prompt(\"Qué minuto quieres poner?\", this.fecha_seleccionada.getMinutes());\n      if (typeof minuto !== \"string\") return;\n      this.fecha_seleccionada.setMinutes(minuto);\n      this.fecha_seleccionada.setSeconds(0);\n      this.fecha_seleccionada = new Date(this.fecha_seleccionada);\n    },\n  },\n  watch: {\n    fecha_seleccionada(nuevo_valor) {\n      this.$trace(\"lsw-calendario.watch.fecha_seleccionada\");\n      this.hora_actual = nuevo_valor.getHours();\n      this.minuto_actual = nuevo_valor.getMinutes();\n      this.actualizar_calendario(nuevo_valor);\n    },\n  },\n  mounted() {\n    this.$trace(\"lsw-calendario.mounted\");\n    try {\n      this.fecha_seleccionada = this.valor_inicial_adaptado;\n      this.$nextTick(() => {\n        this.es_carga_inicial = false;\n      });\n      if (this.alIniciar) {\n        this.alIniciar(this.fecha_seleccionada, this);\n      }\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n});\n",
              "$code.label": "LswCalendario API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Clocktime Picker API » LswClocktimePicker component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-clocktime-picker/lsw-clocktime-picker.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 133,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Clocktime Picker API » LswClocktimePicker component",
              "$code": "// Change this component at your convenience:\nVue.component(\"LswClocktimePicker\", {\n  template: $template,\n  props: {\n    onChange: {\n      type: Function,\n      default: () => { },\n    },\n    initialHour: {\n      type: [String, Number],\n      default: () => \"00\"\n    },\n    initialMinute: {\n      type: [String, Number],\n      default: () => \"00\"\n    }\n  },\n  data() {\n    this.$trace(\"lsw-clocktime-picker.data\");\n    return {\n      isSelected: 'none',\n      hour_picked: this.initialHour,\n      minute_picked: this.initialMinute,\n    };\n  },\n  methods: {\n    toggleSelection(part) {\n      this.$trace(\"lsw-clocktime-picker.methods.toggleSelection\");\n      if (this.isSelected === part) {\n        this.isSelected = \"none\";\n      } else {\n        this.isSelected = part;\n      }\n    },\n    selectHour(hour) {\n      this.$trace(\"lsw-clocktime-picker.methods.selectHour\");\n      this.hour_picked = hour;\n    },\n    selectMinute(minute) {\n      this.$trace(\"lsw-clocktime-picker.methods.selectMinute\");\n      this.minute_picked = minute;\n    },\n    increaseHour(increment = 1) {\n      this.$trace(\"lsw-clocktime-picker.methods.increaseHour\");\n      if(increment < 0) {\n        if(parseInt(\"\" + this.hour_picked) === 0) {\n          return;\n        }\n      } else if(increment > 0) {\n        if(parseInt(\"\" + this.hour_picked) === 23) {\n          return;\n        }\n      }\n      this.hour_picked = (\"\" + (parseInt(this.hour_picked) + increment)).padStart(2, \"0\");\n    },\n    async specifyHour() {\n      this.$trace(\"lsw-clocktime-picker.methods.specifyHour\");\n      const hours = await this.$lsw.dialogs.open({\n        title: \"Selecciona la hora exacta\",\n        template: `\n          <div class=\"pad_1\">\n            <input class=\"supermini width_100\" type=\"text\" placeholder=\"Pon la hora exacta aquí\" v-model=\"value\" />\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `\n      });\n      if(hours === -1) return;\n      this.hour_picked = hours;\n    },\n    increaseMinute(increment = 1) {\n      this.$trace(\"lsw-clocktime-picker.methods.increaseMinute\");\n      if(increment < 0) {\n        if(parseInt(\"\" + this.minute_picked) === 0) {\n          return;\n        }\n      } else if(increment > 0) {\n        if(parseInt(\"\" + this.minute_picked) === 59) {\n          return;\n        }\n      }\n      this.minute_picked = (\"\" + (parseInt(this.minute_picked) + increment)).padStart(2, \"0\");\n    },\n    async specifyMinute() {\n      this.$trace(\"lsw-clocktime-picker.methods.specifyMinute\");\n      const minutes = await this.$lsw.dialogs.open({\n        title: \"Selecciona el minuto exacto\",\n        template: `\n          <div class=\"pad_1\">\n            <input class=\"supermini width_100\" type=\"text\" placeholder=\"Pon el minuto exacto aquí\" v-model=\"value\" />\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `\n      });\n      if(minutes === -1) return;\n      this.minute_picked = minutes;\n    },\n    triggerChange() {\n      this.onChange({\n        hour: parseInt(this.hour_picked),\n        minute: parseInt(this.minute_picked)\n      });\n    }\n  },\n  watch: {\n    hour_picked() {\n      this.triggerChange();\n    },\n    minute_picked() {\n      this.triggerChange();\n    },\n  },\n  mounted() {\n    this.$trace(\"lsw-clocktime-picker.mounted\");\n  },\n  unmount() {\n    this.$trace(\"lsw-clocktime-picker.unmounted\");\n  }\n});\n",
              "$code.label": "LswClocktimePicker API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Windows API » LswClockwatcher component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-clockwatcher/lsw-clockwatcher.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Windows API » LswClockwatcher component",
              "$code": "// Change this component at your convenience:\nVue.component(\"LswClockwatcher\", {\n  template: $template,\n  props: {\n    viewer: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    this.$trace(\"lsw-clockwatcher.data\");\n    return {\n      currentDate: new Date(),\n      currentMessage: false,\n    };\n  },\n  methods: {\n    onClick(event) {\n      this.$trace(\"lsw-clockwatcher.methods.onClick\");\n      this.viewer.toggleState();\n    },\n    startTimer() {\n      this.$trace(\"lsw-clockwatcher.methods.startTimer\");\n      this.timerId = setTimeout(() => {\n        this.currentDate = new Date();\n        this.startTimer();\n      }, 1000 * 60);\n    },\n    stopTimer() {\n      this.$trace(\"lsw-clockwatcher.methods.stopTimer\");\n      clearTimeout(this.timerId);\n    },\n    async loadMessage() {\n      this.$trace(\"lsw-clockwatcher.methods.loadMessage\");\n      try {\n        const userPreferences = await this.$lsw.fs.evaluateAsDotenvFileOrReturn('/kernel/settings/user.env', {});\n        const clockMessage = userPreferences[\"app.clock_message\"] || false;\n        this.currentMessage = clockMessage;\n      } catch (error) {\n        // @OK.\n        console.error(\"[!] Could not load preference «app.clock_message» from clockwatcher:\", error);\n      }\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-clockwatcher.mounted\");\n    this.startTimer();\n    this.loadMessage();\n  },\n  unmount() {\n    this.$trace(\"lsw-clockwatcher.unmounted\");\n    this.stopTimer();\n  }\n});\n",
              "$code.label": "LswClockwatcher API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Windows API » LswCodeViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-code-viewer/lsw-code-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 114,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Windows API » LswCodeViewer component",
              "$code": "Vue.component(\"LswCodeViewer\", {\n  template: $template,\n  props: {\n    code: {\n      type: String,\n      required: () => true,\n    },\n    language: {\n      type: String,\n      required: () => true,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-code-viewer.data\");\n    return {\n      isLoaded: false,\n      fontsize: 10,\n    };\n  },\n  methods: {\n    increaseFontsize(q = 1) {\n      this.$trace(\"lsw-code-viewer.methods.increaseFontsize\");\n      this.fontsize += q;\n    },\n    async loadHighlightJs(event) {\n      this.$trace(\"lsw-code-viewer.methods.loadHighlightJs\");\n      await LswLazyLoads.loadHighlightJs();\n      this.isLoaded = true;\n    },\n  },\n  mounted() {\n    this.$trace(\"lsw-code-viewer.mounter\");\n    this.loadHighlightJs();\n  },\n  unmount() {\n    this.$trace(\"lsw-code-viewer.mounter\");\n  }\n});\n",
              "$code.label": "LswCodeViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswConductometria API » LswConductometria class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.api.js",
              "$location": {
                "start": {
                  "offset": 298,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 440,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswConductometria API » LswConductometria class",
              "$code": "  const LswConductometria = class {\n\n    static create(...args) {\n      Vue.prototype.$trace(\"LswConductometria.create\");\n      return new this(...args);\n    }\n\n    constructor(component = false) {\n      Vue.prototype.$trace(\"lswConductometria.constructor\");\n      this.$component = component;\n    }\n\n    async reload() {\n      Vue.prototype.$trace(\"lswConductometria.reload\");\n      const virtualization = LswConductometriaVirtualization.create(this.$component);\n      await virtualization.$resetVirtualTables();\n      await virtualization.$reloadProtolangScriptBoot();\n      await virtualization.$virtualizePropagations();\n    }\n\n  }\n\n  const LswConductometriaVirtualization = class {\n\n    static create(...args) {\n      Vue.prototype.$trace(\"LswConductometriaVirtualization.create\");\n      return new this(...args);\n    }\n\n    constructor(component) {\n      this.$component = component;\n    }\n\n    reportErrorFromComponent(error) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.reportErrorFromComponent\");\n      this.DEBUG(\"Lsw-cond-virt.reportErrorFromComponent\");\n      console.log(error);\n      if (this.$component && (typeof this.$component.addError === \"function\")) {\n        this.$component.addError(error);\n      }\n    }\n\n    async $resetVirtualTables() {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$resetVirtualTables\");\n      this.DEBUG(\"Lsw-cond-virt.$resetVirtualTables\");\n      await Vue.prototype.$lsw.database.deleteMany(\"Accion_virtual\", it => true);\n      await Vue.prototype.$lsw.database.deleteMany(\"Propagador_prototipo\", it => true);\n      await Vue.prototype.$lsw.database.deleteMany(\"Propagador_de_concepto\", it => true);\n    }\n\n    async $reloadProtolangScriptBoot() {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$reloadProtolangScriptBoot\");\n      this.DEBUG(\"Lsw-cond-virt.$reloadProtolangScriptBoot\");\n      const protoSource = await Vue.prototype.$lsw.fs.read_file(\"/kernel/agenda/proto/boot.proto\");\n      return await this.$evaluateProtolangScript(protoSource, {\n        sourcePath: \"/kernel/agenda/script/boot.proto\"\n      });\n    }\n\n    async $evaluateProtolangScript(source, parameters) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$evaluateProtolangScript\");\n      this.DEBUG(\"Lsw-cond-virt.$evaluateProtolangScript\");\n      const ast = Vue.prototype.$lsw.parsers.proto.parse(source, {\n        options: parameters\n      });\n      for (let index = 0; index < ast.length; index++) {\n        const sentence = ast[index];\n        if (sentence.type === \"inc\") {\n          await this.$evaluateInclude(sentence);\n        } else if (sentence.type === \"def\") {\n          await this.$evaluateDefine(sentence);\n        } else if (sentence.type === \"fun\") {\n          await this.$evaluateFunction(sentence);\n        } else if (sentence.type === \"rel\") {\n          await this.$evaluateRelation(sentence);\n        }\n      }\n    }\n\n    async $evaluateInclude(sentence) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$evaluateInclude\");\n      this.DEBUG(\"Lsw-cond-virt.$evaluateInclude\");\n      this.DEBUG(sentence);\n      let isFile = undefined;\n      let isDirectory = undefined;\n      const allFiles = [];\n      const filepath = sentence.path;\n      Read_node: {\n        this.DEBUG(\"read node\");\n        isFile = await Vue.prototype.$lsw.fs.is_file(filepath);\n        isDirectory = await Vue.prototype.$lsw.fs.is_directory(filepath);;\n        if (isFile) {\n          Vue.prototype.$trace(\"[*] Reading file: \", filepath);\n          this.DEBUG(\"[*] Reading file: \", filepath);\n          const contents = await Vue.prototype.$lsw.fs.read_file(filepath);\n          allFiles.push({\n            incBy: sentence,\n            file: filepath,\n            contents: contents\n          });\n        } else if (isDirectory) {\n          Vue.prototype.$trace(\"[*] Reading directory: \", filepath);\n          this.DEBUG(\"[*] Reading directory: \", filepath);\n          const subfilesMap = await Vue.prototype.$lsw.fs.read_directory(filepath);\n          const subfiles = Object.keys(subfilesMap);\n          Iterating_subfiles:\n          for (let indexSubfile = 0; indexSubfile < subfiles.length; indexSubfile++) {\n            const subfile = subfiles[indexSubfile];\n            this.DEBUG(\"iterating subfile:\", subfile);\n            const subfilepath = Vue.prototype.$lsw.fs.resolve_path(filepath, subfile);\n            const is_file = await Vue.prototype.$lsw.fs.is_file(subfilepath);\n            if (!is_file) {\n              continue Iterating_subfiles;\n            }\n            Vue.prototype.$trace(\"[*] Reading subfile: \", subfilepath);\n            this.DEBUG(\"[*] Reading subfile: \", subfilepath);\n            const filecontents = await Vue.prototype.$lsw.fs.read_file(subfilepath);\n            allFiles.push({\n              incBy: sentence,\n              file: subfilepath,\n              contents: filecontents\n            });\n          }\n        } else {\n          throw new Error(`File does not exits «${filepath}» on «lswConductometriaVirtualization.$evaluateInclude»`);\n        }\n      }\n      Vue.prototype.$trace(\"[*] Evaluating all subfiles:\", allFiles);\n      this.DEBUG(\"[*] Evaluating all subfiles:\", allFiles);\n      Evaluate_subnodes: {\n        for (let indexFile = 0; indexFile < allFiles.length; indexFile++) {\n          const metafile = allFiles[indexFile];\n          const file = metafile.file;\n          const contents = metafile.contents;\n          await this.$evaluateProtolangScript(contents, {\n            sourcePath: file\n          });\n        }\n      }\n    }\n\n    async $evaluateDefine(sentence) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$evaluateDefine\");\n      this.DEBUG(\"Lsw-cond-virt.$evaluateDefine\");\n      const { names } = sentence;\n      // @DONE: insertar names en Concepto\n      Iterating_names:\n      for (let index = 0; index < names.length; index++) {\n        const name = names[index];\n        this.DEBUG(\"in name:\", name);\n        try {\n          await Vue.prototype.$lsw.database.insert(\"Concepto\", {\n            tiene_nombre: name,\n          });\n        } catch (error) {\n          if (error.message === \"Error on «browsie.insert» operation over store «Concepto»: A mutation operation in the transaction failed because a constraint was not satisfied.\") {\n            continue Iterating_names;\n          }\n          await this.reportErrorFromComponent(error);\n        }\n      }\n    }\n\n    async $evaluateFunction(sentence) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$evaluateFunction\");\n      this.DEBUG(\"Lsw-cond-virt.$evaluateFunction\");\n      const { name, params, code } = sentence;\n      // @DONE: insertar name+params+code en Propagador_prototipo\n      try {\n        this.DEBUG(\"inserting prototipo:\", name);\n        await Vue.prototype.$lsw.database.insert(\"Propagador_prototipo\", {\n          tiene_nombre: name,\n          tiene_parametros: JSON.stringify(params),\n          tiene_funcion: code,\n        });\n      } catch (error) {\n        await this.reportErrorFromComponent(error);\n      }\n    }\n\n    async $evaluateRelation(sentence) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$evaluateRelation\");\n      this.DEBUG(\"Lsw-cond-virt.$evaluateRelation\");\n      const { name, effects, triggers } = sentence;\n      Iterating_effects:\n      for (let indexEffect = 0; indexEffect < effects.length; indexEffect++) {\n        const effect = effects[indexEffect];\n        const { consecuencia, ratio, argumentos } = effect;\n        this.DEBUG(\"inserting propagador:\", name);\n        await Vue.prototype.$lsw.database.insert(\"Propagador_de_concepto\", {\n          tiene_propagador_prototipo: \"multiplicador\",\n          tiene_concepto_disparador: name,\n          tiene_concepto_destino: consecuencia,\n          tiene_parametros_extra: ratio + (argumentos ? (\", \" + argumentos) : ''),\n          tiene_codigo: null,\n        });\n      }\n      Iterating_triggers:\n      for (let indexTrigger = 0; indexTrigger < triggers.length; indexTrigger++) {\n        const trigger = triggers[indexTrigger];\n        if (trigger.type === \"trigger by prototype\") {\n          const { prototipo, conceptos, argumentos } = trigger;\n          if (conceptos) {\n            for (let index = 0; index < conceptos.length; index++) {\n              const concepto = conceptos[index];\n              Insertar_propagador_con_consecuencia: {\n                await Vue.prototype.$lsw.database.insert(\"Propagador_de_concepto\", {\n                  tiene_propagador_prototipo: prototipo,\n                  tiene_concepto_disparador: name,\n                  tiene_concepto_destino: concepto,\n                  tiene_parametros_extra: argumentos,\n                  tiene_codigo: null,\n                });\n              }\n            }\n          } else {\n            Insertar_propagador_por_llamada: {\n              await Vue.prototype.$lsw.database.insert(\"Propagador_de_concepto\", {\n                tiene_propagador_prototipo: prototipo,\n                tiene_concepto_disparador: name,\n                tiene_concepto_destino: null,\n                tiene_parametros_extra: argumentos,\n                tiene_codigo: null,\n              });\n            }\n          }\n        } else if (trigger.type === \"trigger by code\") {\n          Insertar_propagador_por_codigo_directo: {\n            await Vue.prototype.$lsw.database.insert(\"Propagador_de_concepto\", {\n              tiene_propagador_prototipo: null,\n              tiene_concepto_disparador: name,\n              tiene_concepto_destino: null,\n              tiene_parametros_extra: null,\n              tiene_codigo: trigger.code\n            });\n          }\n        }\n      }\n    }\n\n    $toJsExtension(txt) {\n      return txt.replace(/\\.js$/g, \"\") + \".js\";\n    }\n\n    async $virtualizePropagations() {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$virtualizePropagations\");\n      this.DEBUG(\"Lsw-cond-virt.$virtualizePropagations\");\n      const accionesReales = await Vue.prototype.$lsw.database.selectMany(\"Accion\", accion => true);\n      // console.log(\"Acciones reales\", accionesReales);\n      const errorOptions = {\n        timeout: 1000 * 10\n      };\n      Iterando_acciones_reales:\n      for (let indexAccionReal = 0; indexAccionReal < accionesReales.length; indexAccionReal++) {\n        const accionReal = accionesReales[indexAccionReal];\n        Virtualizar_accion_real: {\n          await this.addVirtualAction(accionReal);\n        }\n      }\n    }\n\n    $showError(error, options = {}, propagate = false, log = true) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$showError\");\n      this.DEBUG(\"Lsw-cond-virt.$showError\");\n      try {\n        this.$component.showError(error, options, propagate, log);\n      } catch (error) {\n        console.log(\"[!] Could not notify to vue component about this previous error\");\n      }\n      if (propagate) {\n        throw error;\n      }\n    }\n\n    async addVirtualAction(accion_inicial) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.addVirtualAction\");\n      this.DEBUG(\"Lsw-cond-virt.addVirtualAction\");\n      Validaciones_minimas: {\n        break Validaciones_minimas;\n        const ensure1 = $ensure({ accion_inicial }, 1).type(\"object\").to.have.keys([\"en_concepto\", \"tiene_inicio\", \"tiene_duracion\"]);\n        ensure1.its(\"en_concepto\").type(\"string\");\n        ensure1.its(\"tiene_inicio\").type(\"string\").its(\"length\").to.be.greaterThan(0);\n        ensure1.its(\"tiene_duracion\").type(\"string\").its(\"length\").to.be.greaterThan(0);\n      }\n      Filtramos_los_estados_no_completados: {\n        if (accion_inicial.tiene_estado === 'pendiente') {\n          return \"IGNORED BECAUSE OF STATE PENDING\";\n        }\n        if (accion_inicial.tiene_estado === 'fallida') {\n          return \"IGNORED BECAUSE OF STATE FAILED\";\n        }\n      }\n      let conc_inicial = accion_inicial.en_concepto;\n      let asoc_propags = false;\n      let asoc_proto_ids = false;\n      let asoc_protos_found = false;\n      let asoc_proto_ids_found = false;\n      let asoc_proto_ids_missing = false;\n      let asoc_protos_as_map = false;\n      Insertar_accion_virtual: {\n        await Vue.prototype.$lsw.database.insert(\"Accion_virtual\", accion_inicial);\n      }\n      Extraer_propags: {\n        asoc_propags = await Vue.prototype.$lsw.database.selectMany(\"Propagador_de_concepto\", propag => {\n          return propag.tiene_concepto_disparador === conc_inicial;\n        });\n        if (!asoc_propags) {\n          return \"NO ASSOCIATED PROPAGATORS FOUND\";\n        }\n      }\n      Extraer_protos: {\n        asoc_proto_ids = LswUtils.uniquizeArray(asoc_propags.map(propag => {\n          return propag.tiene_propagador_prototipo;\n        }));\n        asoc_protos_found = await Vue.prototype.$lsw.database.selectMany(\"Propagador_prototipo\", proto_it => {\n          return asoc_proto_ids.indexOf(proto_it.tiene_nombre) !== -1;\n        });\n        asoc_proto_ids_found = LswUtils.arrays.uniquizeArray(asoc_protos_found.map(proto_it => proto_it.tiene_nombre));\n        asoc_proto_ids_missing = LswUtils.arrays.getMissingInFirst(asoc_proto_ids_found, asoc_proto_ids);\n        asoc_protos_as_map = asoc_protos_found.reduce((out, proto_it) => {\n          const nombre = proto_it.tiene_nombre;\n          out[nombre] = proto_it;\n          return out;\n        }, {});\n        if (asoc_proto_ids_missing.length) {\n          this.$showError(new Error(\"[!] Cuidado: no se encontraron los siguientes «Propagador_prototipo»: \" + asoc_proto_ids_missing.join(\", \")));\n        }\n      }\n      let propagation_molecule = {};\n      Resolver_propags_con_protos_y_propagar: {\n        for (let index_propag = 0; index_propag < asoc_propags.length; index_propag++) {\n          const propag = asoc_propags[index_propag];\n          const proto_id = propag.tiene_propagador_prototipo;\n          const proto_it = asoc_protos_as_map[proto_id];\n          try {\n            await this.$propagateVirtualAction(accion_inicial, propag, proto_it);\n          } catch (error) {\n            this.$showError(error);\n          }\n        }\n      }\n    }\n\n    async $propagateVirtualAction(accion, propagador_de_concepto, propagador_prototipo = false) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$propagateVirtualAction\");\n      this.DEBUG(\"Lsw-cond-virt.$propagateVirtualAction\");\n      try {\n        let concepto_origen = undefined;\n        let concepto_destino = undefined;\n        let funcion_propagadora = undefined;\n        let funcion_propagadora_parametros = [];\n        let funcion_propagadora_ambito = this;\n        Validaciones_minimas: {\n          this.DEBUG(\"Lsw-cond-virt.$propagateVirtualAction::Validaciones_minimas\");\n          const ensure1 = $ensure({ accion }, 1).type(\"object\")\n          ensure1.its(\"en_concepto\").type(\"string\");\n          ensure1.its(\"tiene_inicio\").type(\"string\").its(\"length\").to.be.greaterThan(0);\n          ensure1.its(\"tiene_duracion\").type(\"string\").its(\"length\").to.be.greaterThan(0);\n          const ensure2 = $ensure({ propagador_de_concepto }, 1).type(\"object\");\n          const ensure3 = $ensure({ propagador_prototipo }, 1).type([\"object\", \"boolean\"]);\n          // console.log(\"propagador_prototipo\", propagador_prototipo);\n        }\n        const {\n          tiene_nombre,     // un texto\n          tiene_funcion,    // un JavaScript (cuerpo de función)\n          tiene_parametros: tiene_parametros_prototipo, // un JSON bi-array\n        } = propagador_prototipo;\n        const {\n          tiene_propagador_prototipo,  // un Propagador_prototipo.tiene_nombre\n          tiene_concepto_disparador,       // un Concepto.tiene_nombre\n          tiene_concepto_destino,      // un Concepto.tiene_nombre\n          tiene_parametros: tiene_parametros_asociado, // un JSON bi-array\n          tiene_parametros_extra,      // un JavaScript (solo parámetros)\n          tiene_codigo,                // un JavaScript (cuerpo de función)\n        } = propagador_de_concepto;\n        Extraemos_conceptos: {\n          this.DEBUG(\"Lsw-cond-virt.$propagateVirtualAction::Extraemos_conceptos\");\n          const conceptos_origen_matched = await Vue.prototype.$lsw.database.selectMany(\"Concepto\", conc => conc.tiene_nombre === tiene_concepto_disparador);\n          concepto_origen = conceptos_origen_matched[0] || undefined;\n          const conceptos_destino_matched = await Vue.prototype.$lsw.database.selectMany(\"Concepto\", conc => conc.tiene_nombre === tiene_concepto_destino);\n          concepto_destino = conceptos_destino_matched[0] || undefined;\n        }\n        Check_point: {\n          // console.log(\"accion\", accion);\n          // console.log(\"concepto_origen\", concepto_origen);\n          // console.log(\"concepto_destino\", concepto_destino);\n          // console.log(\"funcion_propagadora\", funcion_propagadora);\n          // console.log(\"funcion_propagadora_parametros\", funcion_propagadora_parametros);\n          // console.log(\"funcion_propagadora_ambito\", funcion_propagadora_ambito);\n          // console.log(\"CHECKPOINT!\");\n        }\n        let propagacion_resultado = {};\n        Fabricamos_la_funcion_propagadora_y_la_llamamos: {\n          this.DEBUG(\"Lsw-cond-virt.$propagateVirtualAction::Fabricamos_la_funcion_propagadora_y_la_llamamos\");\n          const propagacion_params = (() => {\n            try {\n              return JSON.parse(tiene_parametros_prototipo);\n            } catch (error) {\n              return [];\n            }\n          })();\n          const propagacion_source = tiene_funcion;\n          if (!propagacion_source) {\n            break Fabricamos_la_funcion_propagadora_y_la_llamamos;\n          }\n          const propagacion_callback = LswUtils.createAsyncFunction(propagacion_source, propagacion_params);\n          if (!propagacion_callback) {\n            break Fabricamos_la_funcion_propagadora_y_la_llamamos;\n          }\n          this.$debugEvaluation(propagacion_callback.toString(), \"$propagateVirtualAction\")\n          try {\n            const propagacion_context = {\n              accion,\n              propagador_de_concepto,\n              propagador_prototipo\n            };\n            const propagacion_callback_wrapper = LswUtils.createSyncFunction(`return propagacion_callback(propagacion_context, ${tiene_parametros_asociado || \"{}\"}, ${tiene_parametros_extra || \"undefined\"})`, [\n              \"propagacion_context\",\n              \"propagacion_callback\",\n            ]);\n            this.$debugEvaluation(propagacion_callback_wrapper.toString(), \"$propagateVirtualAction\")\n            propagacion_resultado = await propagacion_callback_wrapper.call(this, propagacion_context, propagacion_callback);\n          } catch (error) {\n            this.$showError(error);\n          }\n        }\n        let accionVirtual = undefined;\n        Fabricamos_nueva_accion: {\n          this.DEBUG(\"Lsw-cond-virt.$propagateVirtualAction::Fabricamos_nueva_accion\");\n          if (!concepto_destino?.tiene_nombre) {\n            return \"NO TIENE CONCEPTO DESTINO\";\n          }\n          if (!concepto_origen?.tiene_nombre) {\n            return \"NO TIENE CONCEPTO ORIGEN\";\n          }\n          accionVirtual = this.createDefaultAction({\n            en_concepto: concepto_destino.tiene_nombre,\n            desde_concepto: concepto_origen.tiene_nombre,\n            tiene_estado: \"propagada\",\n            tiene_inicio: accion.tiene_inicio,\n            tiene_duracion: accion.tiene_duracion,\n            tiene_accion_anterior: accion.id,\n            tiene_accion_origen: undefined,\n            viene_de_propagador_de_concepto: propagador_de_concepto.id,\n            viene_de_propagador_prototipo: propagador_prototipo.tiene_nombre,\n            ...propagacion_resultado\n          });\n        }\n        Insertamos_accion_en_virtuales: {\n          this.DEBUG(\"Lsw-cond-virt.$propagateVirtualAction::Insertamos_accion_en_virtuales\");\n          this.DEBUG(accionVirtual);\n          await this.addVirtualAction(accionVirtual);\n        }\n        // @TODO: fabricar la función propagadora y enchufarla.\n        // @TODO: fabricar la función propagadora y enchufarla.\n        // @TODO: fabricar la función propagadora y enchufarla.\n        // @TODO: fabricar la función propagadora y enchufarla.\n        // @TODO: fabricar la función propagadora y enchufarla.\n      } catch (error) {\n        this.$showError(error);\n      }\n    }\n\n    $debugEvaluation(jsCode, traceId) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.$debugEvaluation\");\n      this.DEBUG(\"Lsw-cond-virt.$debugEvaluation\");\n      console.log(\"[*] Evaluating js from: \" + traceId);\n      console.log(jsCode);\n    }\n\n    createDefaultAction(overwrites = {}) {\n      Vue.prototype.$trace(\"lswConductometriaVirtualization.createDefaultAction\");\n      this.DEBUG(\"Lsw-cond-virt.createDefaultAction\");\n      return Object.assign({\n        en_concepto: \"?\",\n        tiene_inicio: LswTimer.utils.fromDateToDatestring(new Date()),\n        tiene_duracion: \"1min\",\n      }, overwrites);\n    }\n\n    DEBUG(...args) {\n      console.log(...args);\n    }\n\n  }\n\n  return LswConductometria;\n",
              "$code.label": "LswConductometria API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswConductometria API » LswConductometria component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria/lsw-conductometria.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 144,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswConductometria API » LswConductometria component",
              "$code": "Vue.component(\"LswConductometria\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-conductometria.data\");\n    return {\n      isLoaded: false,\n      reportes: [],\n    };\n  },\n  methods: {\n    async reloadEverything() {\n      this.$trace(\"lsw-conductometria.methods.reloadEverything\");\n      this.isLoaded = null;\n      const files = await this.$lsw.fs.read_directory(\"/kernel/agenda/report\");\n      this.reportes = Object.keys(files);\n      Reload_conductometria_fully: {\n        await this.$lsw.conductometria.reload(this);\n      }\n      this.isLoaded = true;\n    },\n    goToReports() {\n      this.$trace(\"lsw-conductometria.methods.goToReports\");\n      this.$lsw.dialogs.open({\n        id: 'ver-reportes',\n        title: \"Reportes de conductometría\",\n        template: `\n          <lsw-filesystem-explorer opened-by=\"/kernel/agenda/report/\" :absolute-layout=\"true\" />\n        `\n      });\n    },\n    goToScripts() {\n      this.$trace(\"lsw-conductometria.methods.goToScripts\");\n      this.$lsw.dialogs.open({\n        id: 'ver-script',\n        title: \"Scripts de conductometría\",\n        template: `\n          <lsw-filesystem-explorer opened-by=\"/kernel/agenda/proto\" :absolute-layout=\"true\" />\n        `\n      });\n    },\n    async editReport(reporte) {\n      this.$trace(\"lsw-conductometria.methods.editReport\");\n      this.$lsw.dialogs.open({\n        title: \"Editar reporte \" + reporte,\n        template: `\n          <lsw-filesystem-explorer\n            :opened-by=\"'/kernel/agenda/report/' + reporte\"\n            :absolute-layout=\"true\" />\n        `,\n        factory: {\n          data: { reporte }\n        }\n      });\n    },\n    openReport(reporteId) {\n      this.$trace(\"lsw-conductometria.methods.openReport\");\n      this.$lsw.dialogs.open({\n        title: \"Reproducir reporte \" + reporteId,\n        template: `\n          <lsw-conductometria-report :report-id=\"'/kernel/agenda/report/' + reporteId\" />\n        `,\n        factory: {\n          data: { reporteId }\n        }\n      });\n    },\n    showError(error, ...args) {\n      Vue.prototype.$lsw.toasts.showError(error, ...args);\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-conductometria.mounted\");\n      this.$lsw.conductometria = LswConductometria.create(this);\n    } catch(error) {\n      this.$lsw.toasts.showError(error);\n    }\n  }\n});\n",
              "$code.label": "LswConductometria API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswConductometriaReport API » LswConductometriaReport API » LswConductometriaReport component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-conductometria-report/lsw-conductometria-report.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 176,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswConductometriaReport API » LswConductometriaReport API » LswConductometriaReport component",
              "$code": "Vue.component(\"LswConductometriaReport\", {\n  name: \"LswConductometriaReport\",\n  template: $template,\n  props: {\n    reportId: {\n      type: String,\n      required: true,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-conductometria-report.data\");\n    return {\n      isLoaded: false,\n      report: false,\n    };\n  },\n  methods: {\n    async loadReport() {\n      this.$trace(\"lsw-conductometria-report.methods.loadReport\");\n      this.isLoaded = false;\n      const reportSource = await this.$lsw.fs.read_file(this.reportId);\n      const reportInstance = LswConductometriaReport.create(reportSource, this);\n      const report = await reportInstance.buildReport();\n      this.report = report;\n      this.$nextTick(() => {this.isLoaded = true;});\n    },\n    goToReportTitle(reportIndex) {\n      this.$trace(\"lsw-conductometria-report.methods.loadReport\");\n      const presuntReportTitle = this.$refs[\"report_\" + reportIndex];\n      try {\n        presuntReportTitle[0].$el.scrollIntoView();\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    async openReportSource() {\n      this.$trace(\"lsw-conductometria-report.methods.openReportSource\");\n      await this.$lsw.dialogs.open({\n        title: \"Editar reporte\",\n        template: `\n          <lsw-filesystem-explorer :opened-by=\"reportId\" :absolute-layout=\"true\" />\n        `,\n        factory: {\n          data: {\n            reportId: this.reportId\n          }\n        }\n      });\n    },\n  },\n  watch: {\n\n  },\n  computed: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-conductometria-report.mounted\");\n      await this.loadReport();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswConductometriaReport API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswConfigurationsPage component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-configurations-page/lsw-configurations-page.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswConfigurationsPage component",
              "$code": "// Change this component at your convenience:\nVue.component(\"LswConfigurationsPage\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-configurations-page.data\", arguments);\n    return {\n      isDebuggerLoaded: true,\n      selectedSection: \"preferencias\", // puede ser: datos, preferencias\n      currentBackup: false,\n    };\n  },\n  methods: {\n    async showCurrentBackup() {\n      this.$trace(\"lsw-configurations-page.methods.toggleCurrentBackup\");\n      const currentBackup = await this.$lsw.backuper.getLastBackup();\n      this.$lsw.dialogs.open({\n        title: \"Ver copia de seguridad actual\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"flex_row pad_bottom_1\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"copySource\">📃 Copiar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"downloadSource\">📥 Descargar</button>\n              </div>\n            </div>\n            <pre class=\"codeblock\">{{ source }}</pre>\n          </div>\n        `,\n        factory: {\n          data: {\n            source: JSON.stringify(currentBackup, null, 2),\n          },\n          methods: {\n            copySource() {\n              this.$trace(\"lsw-configurations-page.methods.copySource\");\n              this.$window.navigator.clipboard.writeText(this.source);\n              this.$lsw.toasts.send({\n                title: \"Texto copiado\",\n                text: \"El texto fue copiado al portapapeles.\"\n              });\n            },\n            downloadSource() {\n              this.$trace(\"lsw-configurations-page.methods.downloadSource\");\n              LswUtils.downloadFile(\"lsw-backup.json\", this.source);\n            },\n          }\n        }\n      });\n    },\n    async deleteCurrentBackup() {\n      this.$trace(\"lsw-configurations-page.methods.deleteCurrentBackup\");\n      const confirmation = await this.$lsw.dialogs.open({\n        title: \"Eliminar copia de seguridad actual\",\n        template: `\n          <div class=\"pad_top_1 pad_left_1\">\n            <div>¿Seguro que quieres eliminar la copia de seguridad actual?</div>\n            <hr />\n            <div class=\"flex_row centered text_align_right\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini danger_button\" v-on:click=\"accept\">Eliminar igual</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {},\n      });\n      if(confirmation !== true) {\n        return;\n      }\n      return this.$lsw.backuper.deleteLastBackup();\n    },\n    selectSection(seccion) {\n      this.$trace(\"lsw-configurations-page.methods.selectSection\");\n      this.selectSection = seccion;\n    },\n    async startExportarAJsonFile() {\n      this.$trace(\"lsw-configurations-page.methods.startExportarAJsonFile\");\n      const allData = await LswDatabase.exportDatabase(\"lsw_default_database\");\n      const minuteUid = LswTimer.utils.formatDatestringFromDate(new Date()).replace(/\\/|-|:|\\.| /g, \".\");\n      this.$lsw.utils.downloadFile(`lsw_default_database.${minuteUid}.json`, JSON.stringify(allData, null, 2));\n    },\n    async startExportarAJson() {\n      this.$trace(\"lsw-configurations-page.methods.startExportarAJson\");\n      const allData = await LswDatabase.exportDatabase(\"lsw_default_database\");\n      this.$dialogs.open({\n        title: \"Exportar base de datos a JSON\",\n        template: `<div class=\"pad_1\">\n          <div class=\"flex_row centered\">\n            <div class=\"flex_100 pad_1\">Exportación a JSON:</div>\n            <div class=\"flex_1 pad_1\">\n              <button class=\"supermini nowrap\" v-on:click=\"copyToClipboard\">Copiar</button>\n            </div>\n          </div>\n          <textarea class=\"width_100\" style=\"min-height: 220px;\" v-model=\"jsonData\" disabled=\"true\"></textarea>\n          <hr />\n          <div class=\"pad_1 text_align_right\">\n            <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n          </div>\n        </div>`,\n        factory: {\n          data: {\n            jsonData: JSON.stringify(allData, null, 2),\n          },\n          methods: {\n            copyToClipboard() {\n              this.$trace(\"Dialogo.exportar_a_json.methods.copyToClipboard\");\n              this.$window.navigator.clipboard.writeText(this.jsonData);\n              this.$lsw.toasts.send({\n                title: \"¡Texto copiado!\",\n                text: \"El texto fue copiado con éxito.\"\n              });\n            }\n          }\n        }\n      })\n    },\n    async startImportarDeJsonFile() {\n      this.$trace(\"lsw-configurations-page.methods.startImportarDeJsonFile\");\n      // @TODO: importar texto de un JSON file con un input type file y tol royo.\n      let data = await LswUtils.askForFileText();\n      try {\n        console.log(data);\n        data = JSON.parse(data);\n      } catch (error) {\n        return this.$lsw.toasts.showError(error);\n      }\n      const confirmacion = await this.$lsw.dialogs.open({\n        title: \"Importación de JSON\",\n        template: `\n          <div class=\"pad_1\">\n            <div>Estás a punto de importar los siguientes datos a la base de datos:</div>\n            <pre style=\"max-height: 400px; overflow: scroll; font-size: 10px;\">{{ datos }}</pre>\n            <div class=\"flex_row\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1 pad_top_1\">\n                <button class=\"danger_button supermini\" v-on:click=\"accept\">Importar igualmente</button>\n              </div>\n              <div class=\"flex_1 pad_left_1 pad_top_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            datos: data,\n          }\n        }\n      });\n      if(confirmacion <= 0) {\n        return false;\n      }\n      // @OK:\n      return;\n      await LswDatabase.importToDatabase(\"lsw_default_database\", data);\n      return this.$lsw.toasts.send({\n        title: \"👍 Importación completada\",\n        text: `La importación fue un éxito.`\n      });\n    },\n    async startImportarDeJson() {\n      this.$trace(\"lsw-configurations-page.methods.startImportarDeJson\");\n      const resultado = await this.$dialogs.open({\n        title: \"Importar JSON a base de datos\",\n        template: `<div class=\"pad_1\">\n          <div class=\"flex_row centered\">\n            <div class=\"flex_100 pad_1\">Importación de JSON:</div>\n          </div>\n          <textarea class=\"width_100\" style=\"min-height: 220px;\" v-model=\"value.importation\" placeholder=\"Por ejemplo: {NombreDeStore:[{},{},{}]}\"></textarea>\n          <hr />\n          <div class=\"pad_1 text_align_right\">\n            <button class=\"supermini danger_button\" v-on:click=\"sendForm\">Importar</button>\n            <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n          </div>\n        </div>`,\n        factory: {\n          data: {\n            value: {\n              importation: \"\",\n            }\n          },\n          methods: {\n            sendForm() {\n              this.$trace(\"Dialogo.importar_de_json.methods.sendForm\");\n              this.validateImportation();\n              return this.accept();\n            },\n            validateImportation() {\n              this.$trace(\"Dialogo.importar_de_json.methods.validateImportation\");\n              try {\n                JSON.parse(this.value.importation);\n              } catch (error) {\n                this.$lsw.toasts.send({\n                  title: \"⛔️ Error al parsear JSON\",\n                  text: `La importación se interrumpió.`\n                });\n                throw error;\n              }\n            }\n          }\n        }\n      });\n      if(typeof resultado !== \"object\") {\n        return false;\n      }\n      let data = undefined;\n      try {\n        data = JSON.parse(resultado.importation);\n      } catch (error) {\n        return this.$lsw.toasts.send({\n          title: \"⛔️ Error al parsear JSON\",\n          text: `La importación falló.`\n        });\n      }\n      // @OK:\n      await LswDatabase.importToDatabase(\"lsw_default_database\", data);\n      return this.$lsw.toasts.send({\n        title: \"👍 Importación completada\",\n        text: `La importación fue un éxito.`\n      });\n    },\n    async startResetearBaseDeDatos() {\n      this.$trace(\"lsw-configurations-page.methods.startResetearBaseDeDatos\");\n      const confirmation = await this.$dialogs.open({\n        title: \"Resetear la base de datos\",\n        template: `<div class=\"pad_1\">\n          <div class=\"text_align_center\" style=\"min-height: 90px;\">\n            <div class=\"pad_1 font_weight_bold\">¡CUIDADO!</div>\n            <div class=\"pad_1 pad_top_0\">¿Seguro que quieres resetear la base de datos?</div>\n            <div class=\"pad_1 pad_top_0\">Considera que perderás todos los datos.</div>\n          </div>\n          <hr />\n          <div class=\"pad_1 text_align_right\">\n            <button class=\"supermini danger_button\" v-on:click=\"accept\">Aceptar</button>\n            <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n          </div>\n        </div>`,\n        factory: {\n          data: { value: {} },\n          methods: {}\n        }\n      });\n      if(typeof confirmation !== \"object\") return;\n      await this.$lsw.database.close();\n      await LswDatabase.deleteDatabase(\"lsw_default_database\");\n      this.$window.location.reload();\n    },\n    startConfigureBackgrounds() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureBackgrounds\");\n      this.$dialogs.open({\n        title: \"Configurar fondos de pantalla\",\n        template: `<lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/settings/backgrounds.env\" />`,\n      });\n    },\n    startConfigureAutomessages() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureAutomessages\");\n      this.$dialogs.open({\n        title: \"Configurar automensajes\",\n        template: `<lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/settings/automessages.env\" />`,\n      });\n    },\n    startConfigureRutiner() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureRutiner\");\n      this.$dialogs.open({\n        title: \"Configurar mensaje rutinario\",\n        template: `<lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/settings/rutiner.md\" />`,\n      });\n    },\n    startConfigureRutinerTimeout() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureRutinerTimeout\");\n      return LswDomIrruptor.configurarRutinerTimeout();\n    },\n    startConfigureRandomizables() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureRandomizables\");\n      this.$dialogs.open({\n        title: \"Configurar acciones randomizables\",\n        template: `<lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/settings/randomizables.env\" />`,\n      });\n    },\n    startConfigureUserIdentity() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureUserIdentity\");\n      this.$dialogs.open({\n        title: \"Configurar identidad de usuario\",\n        template: `<lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/settings/user.env\" />`,\n      });\n    },\n    startCodeReference() {\n      this.$trace(\"lsw-configurations-page.methods.startCodeReference\");\n      this.$window.open(\"https://allnulled.github.io/lsw-one/reference\", \"_blank\");\n    },\n    startGithubHomepage() {\n      this.$trace(\"lsw-configurations-page.methods.startGithubHomepage\");\n      this.$window.open(\"https://github.com/allnulled/lsw-one\", \"_blank\");\n    },\n    async saveBackup() {\n      this.$trace(\"lsw-configurations-page.methods.saveBackup\");\n      const allData = await LswDatabase.exportDatabase(\"lsw_default_database\");\n      await this.$lsw.backuper.setLastBackup(allData);\n      await this.$lsw.toasts.send({\n        title: \"Backup exportado\",\n        text: \"La copia de seguridad fue exportada con el estado actual con éxito.\"\n      });\n    },\n    async loadBackup() {\n      this.$trace(\"lsw-configurations-page.methods.loadBackup\");\n      // @TODO: esta función no está terminada.\n      const respuesta = await this.$lsw.dialogs.open({\n        title: \"Importar copia de seguridad\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"\">¿Seguro que quieres importar la actual copia de seguridad?</div>\n            <hr />\n            <div class=\"text_align_right\">\n              <button class=\"supermini danger_button\" v-on:click=\"() => accept(true)\">Sí, importar</button>\n              <button class=\"supermini\" v-on:click=\"close\">Cancelar</button>\n            </div>\n          </div>\n        `\n      });\n      if(respuesta !== true) return;\n      const backupData = await this.$lsw.backuper.getLastBackup();\n      try {\n        for(const tableId in backupData) {\n          const tableRows = backupData[tableId];\n          await this.$lsw.database.insertMany(tableId, tableRows);\n        }\n      } catch (error) {\n        console.log(error);\n        return await this.$lsw.toasts.send({\n          title: \"Backup con errores\",\n          text: \"La copia de seguridad tuvo errores de importación: \" + error.message,\n          background: \"rgba(212, 74, 74, 0.62)\",\n        });\n      }\n      await this.$lsw.toasts.send({\n        title: \"Backup importado\",\n        text: \"La copia de seguridad fue importada al estado actual con éxito.\"\n      });\n    },\n    toggleTracer() {\n      this.$trace(\"lsw-configurations-page.methods.toggleTracer\");\n      this.isDebuggerLoaded = false;\n      const isActive = this.$lsw.logger.$options.active;\n      if(isActive) {\n        this.$lsw.logger.deactivate();\n      } else {\n        this.$lsw.logger.activate();\n      }\n      setTimeout(() => {\n        this.isDebuggerLoaded = true;\n      }, 1);\n    },\n    startConfigureBoot() {\n      this.$trace(\"lsw-configurations-page.methods.startConfigureBoot\");\n      this.$dialogs.open({\n        title: \"Configurar arranque\",\n        template: `<lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/boot.js\" />`,\n      });\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-configurations-page.mounter\");\n    \n  },\n});\n",
              "$code.label": "LswConfigurationsPage API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswConsoleHooker API » LswConsoleHooker API": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-console-hooker/console-hooker-api.js",
              "$location": {
                "start": {
                  "offset": 290,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 411,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswConsoleHooker API » LswConsoleHooker API",
              "$code": "  class ConsoleHooker {\n\n    static extractProps(obj, props = []) {\n      const out = {};\n      for(let index=0; index<props.length; index++) {\n        const prop = props[index];\n        out[prop] = obj[prop].bind(obj);\n      }\n      return out;\n    }\n\n    constructor(outputElementId) {\n      this.originalConsole = { ...console }; // Guardar los métodos originales\n      this.outputElementId = outputElementId;\n      this.isHooked = false;\n      this.hookConsole();\n      this.messageCounter = 0;\n    }\n\n    HOOKED_METHODS = [\n      \"log\",\n      \"info\",\n      \"warn\",\n      \"error\",\n      \"debug\",\n    ];\n\n    hookConsole() {\n      if(this.isHooked) {\n        return;\n      }\n      this.HOOKED_METHODS.forEach(method => {\n        if (typeof console[method] === 'function') {\n          console[method] = (...args) => {\n            this.writeToHtml(method, args);\n            this.originalConsole[method](...args); // Llamar al método original\n          };\n        }\n      });\n      this.isHooked = true;\n    }\n\n    formatError(error) {\n      let errorMessage = \"\";\n      errorMessage += \"Error: \" + error.name + \": \" + error.message;\n      if (error.location) {\n        errorMessage += JSON.stringify({\n          found: error.found,\n          expected: error.expected,\n          location: error.location\n        }, null, 2);\n      }\n      return errorMessage;\n    }\n\n    consoleReducer() {\n      return (arg) => {\n        if (typeof arg === 'object') {\n          if (arg instanceof Error) {\n            return this.formatError(arg);\n          } else {\n            const seen = new WeakSet();\n            return JSON.stringify(arg, function (key, value) {\n              if (typeof value === \"object\") {\n                if (seen.has(value)) {\n                  return \"[Circular]\";\n                }\n                if (value !== null) {\n                  seen.add(value);\n                }\n              }\n              return value;\n            }, 2);\n          }\n        } else {\n          return arg;\n        }\n      };\n    }\n\n    writeToHtml(method, args) {\n      // Do not log from this method or it becomes recursive:\n      const message = document.createElement('div');\n      message.className = `console-${method}`;\n      message.textContent = `[${this.messageCounter++}] ${args.map(this.consoleReducer()).join(' ')}`;\n      const outputElement = document.getElementById(this.outputElementId);\n      if (!outputElement) {\n        // console.log(\"no console hooker output element found\");\n        return;\n      }\n      const subnodes = outputElement.children;\n      const subnodesLength = outputElement.children.length;\n      const hasMoreThan100 = outputElement.children.length > 100;\n      if (hasMoreThan100) {\n        for (let index = subnodes.length - 1; index > 50; index--) {\n          const subnode = subnodes[index];\n          subnode.remove();\n        }\n      }\n      const parent = outputElement;\n      parent.insertBefore(message, parent.firstChild);\n    }\n\n    restoreConsole() {\n      if(!this.isHooked) {\n        return;\n      }\n      this.HOOKED_METHODS.forEach(method => {\n        console[method] = this.originalConsole[method];\n      });\n      this.isHooked = false;\n    }\n  }\n\n  ConsoleHooker.default = ConsoleHooker;\n\n  return ConsoleHooker;\n",
              "$code.label": "LswConsoleHooker API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswConsoleHooker API » LswConsoleHooker component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-console-hooker/console-hooker.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 125,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswConsoleHooker API » LswConsoleHooker component",
              "$code": "Vue.component(\"LswConsoleHooker\", {\n  template: $template,\n  props: {},\n  data() {\n    return {\n\n    }\n  },\n  methods: {\n\n    async loadEruda() {\n      this.$trace(\"console-hooker.methods.loadEruda\");\n      await LswLazyLoads.loadEruda();\n    },\n\n    async toggleConsole() {\n      this.$trace(\"console-hooker.methods.toggleConsole\");\n      if (typeof eruda === \"undefined\") {\n        await this.loadEruda();\n        eruda.init({\n          container: this.$refs.console_hooker_box,\n        });\n        eruda.show();\n      } else {\n        const isShowing = eruda._$el.find(\".eruda-dev-tools\").css(\"display\") === \"block\";\n        if (isShowing) {\n          eruda.hide();\n        } else {\n          eruda.show();\n        }\n      }\n    },\n\n  },\n  mounted() {\n    this.$trace(\"console-hooker.mounted\");\n    Exportar_consola: {\n      Vue.prototype.$consoleHooker = this;\n      this.$window.LswConsoleHooker = this;\n    }\n  },\n  unmounted() {\n\n  }\n});\n",
              "$code.label": "LswConsoleHooker API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswDataPrinterButton component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-data-printer-button/lsw-data-printer-button.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswDataPrinterButton component",
              "$code": "Vue.component(\"LswDataPrinterButton\", {\n  template: $template,\n  props: {\n    input: {\n      type: [Object, String, Boolean, Number, Function],\n      default: () => false,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-data-printer-button.data\");\n    return {\n      inputType: typeof(this.input),\n      formatType: undefined,\n    };\n  },\n  methods: {\n    async openViewer() {\n      this.$trace(\"lsw-data-printer-button.methods.openViewer\");\n      let input = this.input;\n      if(this.inputType === \"function\") {\n        input = await this.input();\n      }\n      this.formatType = typeof input;\n      this.$lsw.dialogs.open({\n        title: \"Impresión de «\" + this.formatType + \"»\",\n        template: `\n          <lsw-data-printer-report :input=\"input\" />\n        `,\n        factory: { data: { input } },\n      });\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-data-printer-button.mounted\");\n    \n  },\n  unmounted() {\n    this.$trace(\"lsw-data-printer-button.unmounted\");\n    \n  }\n});\n",
              "$code.label": "LswDataPrinterButton API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswDataPrinterReport component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-data-printer-report/lsw-data-printer-report.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswDataPrinterReport component",
              "$code": "Vue.component(\"LswDataPrinterReport\", {\n  template: $template,\n  props: {\n    input: {\n      type: [Object, String, Boolean, Number],\n      default: () => false,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-data-printer-report.data\");\n    const inputType = typeof(this.input);\n    const availableOptions = (() => {\n      switch(inputType) {\n        case \"string\":\n          return [\"Crudo\", \"Markdown\", \"Solo texto plano\"];\n        default:\n          return [\"Crudo\", \"Natural\"];\n      }\n    })();\n    return {\n      availableOptions,\n      selectedSection: \"Crudo\",\n      inputType,\n    };\n  },\n  methods: {\n    copyCrude() {\n      this.$trace(\"lsw-data-printer-report.methods.copyCrude\");\n      const json = JSON.stringify(this.input, null, 2);\n      this.$window.navigator.clipboard.writeText(json);\n      this.$lsw.toasts.send({\n        title: \"Texto copiado correctamente!\"\n      });\n    },\n    askForFilename() {\n      return this.$lsw.dialogs.open({\n        title: \"Descargar en fichero\",\n        template: `\n          <div class=\"pad_1\">\n            <div>¿Qué nombre de fichero quieres para la descarga?</div>\n            <input class=\"width_100 margin_top_1\" type=\"text\" v-model=\"value\" />\n            <hr />\n            <div class=\"flex_row centered pad_1\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Descargar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: { data: { value: \"\" } },\n      });\n    },\n    async downloadCrude() {\n      this.$trace(\"lsw-data-printer-report.methods.downloadCrude\");\n      const filename = await this.askForFilename();\n      if(filename === -1) return;\n      LswUtils.downloadFile(filename, JSON.stringify(this.input, null, 2));\n    },\n    copyNatural() {\n      this.$trace(\"lsw-data-printer-report.methods.copyNatural\");\n      const text = this.inputNatural;\n      this.$window.navigator.clipboard.writeText(text);\n      this.$lsw.toasts.send({\n        title: \"Texto copiado correctamente!\"\n      });\n    },\n    async downloadNatural() {\n      this.$trace(\"lsw-data-printer-report.methods.downloadNatural\");\n      const filename = await this.askForFilename();\n      if(filename === -1) return;\n      LswUtils.downloadFile(filename, this.inputNatural);\n    },\n    copyMarkdown() {\n      this.$trace(\"lsw-data-printer-report.methods.copyMarkdown\");\n      const text = this.inputMarkdown;\n      this.$window.navigator.clipboard.writeText(text);\n      this.$lsw.toasts.send({\n        title: \"Texto copiado correctamente!\"\n      });\n    },\n    async downloadMarkdown() {\n      this.$trace(\"lsw-data-printer-report.methods.downloadMarkdown\");\n      const filename = await this.askForFilename();\n      if(filename === -1) return;\n      LswUtils.downloadFile(filename, this.inputMarkdown);\n    },\n    copyHtml() {\n      this.$trace(\"lsw-data-printer-report.methods.copyHtml\");\n      const text = this.inputHtml;\n      this.$window.navigator.clipboard.writeText(text);\n      this.$lsw.toasts.send({\n        title: \"Texto copiado correctamente!\"\n      });\n    },\n    async downloadHtml() {\n      this.$trace(\"lsw-data-printer-report.methods.downloadHtml\");\n      return this.$window.alert(\"Exportación a HTML no disponible. xD\");\n      const filename = await this.askForFilename();\n    },\n    copyPlain() {\n      this.$trace(\"lsw-data-printer-report.methods.copyPlain\");\n      const text = this.inputPlain;\n      this.$window.navigator.clipboard.writeText(text);\n      this.$lsw.toasts.send({\n        title: \"Texto copiado correctamente!\"\n      });\n    },\n    async downloadPlain() {\n      this.$trace(\"lsw-data-printer-report.methods.downloadPlain\");\n      const filename = await this.askForFilename();\n      if(filename === -1) return;\n      LswUtils.downloadFile(filename, this.inputPlain);\n    }\n  },\n  computed: {\n    inputNatural() {\n      this.$trace(\"lsw-data-printer-report.computed.inputNatural\");\n      return LswUtils.fromJsonToNatural(this.input);\n    },\n    inputMarkdown() {\n      this.$trace(\"lsw-data-printer-report.computed.inputMarkdown\");\n      return LswMarkdown.global.parse(this.input);\n    },\n    inputPlain() {\n      this.$trace(\"lsw-data-printer-report.computed.inputPlain\");\n      return LswDom.extractPlaintextFromHtmltext(this.inputMarkdown);\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-data-printer-report.mounted\");\n    \n  },\n  unmounted() {\n    this.$trace(\"lsw-data-printer-report.unmounted\");\n    \n  }\n});\n",
              "$code.label": "LswDataPrinterReport API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswDebugger component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-debugger/lsw-debugger.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 92,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswDebugger component",
              "$code": "Vue.component(\"LswDebugger\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-error-box.data\");\n    return {\n      currentMessages: [],\n    };\n  },\n  methods: {\n    debug(data, options = {}) {\n      this.$trace(\"lsw-debugger.methods.debug\");\n      const id = options.id || LswRandomizer.getRandomString(10);\n      const timeout = options.timeout || 3000;\n      const timeoutId = setTimeout(() => {\n        const pos = this.currentMessages.findIndex(it => it.id === id);\n        if(pos === -1) return;\n        this.currentMessages.splice(pos, 1);\n        this.$forceUpdate(true);\n      }, timeout);\n      this.currentMessages.unshift({\n        id,\n        data: data,\n        options,\n        timeout,\n        timeoutId,\n        created_at: LswTimer.utils.fromDateToDatestring(new Date(), 0, 0, 1, 0, 1),\n      });\n    },\n    clearMessages() {\n      this.$trace(\"lsw-debugger.methods.clearMessages\");\n      this.currentMessages = [];\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-error-box.mounted\");\n      LswDebugger.global = LswDebugger.create(this);\n      this.$debugger = LswDebugger.global;\n      this.$lsw.debugger = LswDebugger.global;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswDebugger API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswDialogs API » LswDialogs classes and functions": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-dialogs/lsw-dialogs.js",
              "$location": {
                "start": {
                  "offset": 16,
                  "line": 3,
                  "column": 1
                },
                "end": {
                  "offset": 137,
                  "line": 4,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswDialogs API » LswDialogs classes and functions",
              "$code": "  const defaultDialogFactory = () => {\n    return {\n      props: {},\n      data() {\n        return {};\n      },\n      methods: {},\n      mounted() { },\n    };\n  };\n\n  class Dialog {\n    static fromIdToComponentName(id) {\n      return \"lsw-dialog-\" + id;\n    }\n    constructor(info = {}) {\n      Object.assign(this, info);\n      Validations: {\n        if (typeof this.id !== \"string\") {\n          throw new Error(`Required parameter «dialog.id» to be a string on «Dialog.constructor»`);\n        }\n        if (typeof this.name !== \"string\") {\n          throw new Error(`Required parameter «dialog.name» to be a string on «Dialog.constructor»`);\n        }\n        if (typeof this.priority !== \"number\") {\n          throw new Error(`Required parameter «dialog.priority» to be a number on «Dialog.constructor»`);\n        }\n        if (typeof this.component !== \"object\") {\n          throw new Error(`Required parameter «dialog.component» to be an object on «Dialog.constructor»`);\n        }\n        if (typeof this.promiser !== \"object\") {\n          throw new Error(`Required parameter «dialog.promiser» to be an object on «Dialog.constructor»`);\n        }\n        if (!(this.promiser.promise instanceof Promise)) {\n          throw new Error(`Required parameter «dialog.promiser.promise» to be an instance of Promise on «Dialog.constructor»`);\n        }\n        if (typeof this.promiser.resolve !== \"function\") {\n          throw new Error(`Required parameter «dialog.promiser.resolve» to be an function on «Dialog.constructor»`);\n        }\n        if (typeof this.promiser.reject !== \"function\") {\n          throw new Error(`Required parameter «dialog.promiser.reject» to be an function on «Dialog.constructor»`);\n        }\n        if (typeof this.acceptButton !== \"object\") {\n          this.acceptButton = false;\n        }\n        if (typeof this.cancelButton !== \"object\") {\n          this.cancelButton = false;\n        }\n      }\n    }\n  }\n\n  const closeSubdialogsHook = function (id, lswDialogs) {\n    const ids = Object.keys(lswDialogs.opened);\n    for (let index_dialog = 0; index_dialog < ids.length; index_dialog++) {\n      const idOpened = ids[index_dialog];\n      const idParent = lswDialogs.opened[idOpened].parentId;\n      if (idParent === id) {\n        lswDialogs.close(idOpened);\n      }\n    }\n  };\n\n  Vue.component(\"LswDialogs\", {\n    name: \"LswDialogs\",\n    template: $template,\n    props: {\n      asWindows: {\n        type: Boolean,\n        default: () => false\n      }\n    },\n    data() {\n      this.$trace(\"lsw-dialogs.data\", []);\n      return {\n        enabledWindowsSystem: this.asWindows,\n        opened: {},\n        openedLength: 0,\n        notMinimizedLength: 0,\n        hookOnOpen: undefined,\n        hookOnClose: closeSubdialogsHook,\n      };\n    },\n    watch: {\n      opened(newValue) {\n        this.$trace(\"lsw-dialogs.watch.opened\", []);\n        this.openedLength = (typeof newValue !== \"object\") ? 0 : Object.keys(newValue).length;\n        this._refreshMinimizedLength(newValue);\n      }\n    },\n    methods: {\n      open(parametricObject = {}) {\n        this.$trace(\"lsw-dialogs.methods.open\", []);\n        if (typeof parametricObject !== \"object\") {\n          throw new Error(`Required argument «parametricObject» to be an object on «LswDialogs.methods.open»`);\n        }\n        const {\n          template,\n          title = \"\",\n          // @OK: El ID debería ser único o no se abrirán las duplicadas.\n          // @PERO: Pero por algo lo tenía así también y no recuerdo.\n          id = LswRandomizer.getRandomString(10),\n          priority = 500,\n          factory = defaultDialogFactory,\n          parentId = undefined,\n          created_at = new Date()\n        } = parametricObject;\n        const componentInfo = {};\n        if (typeof id !== \"string\") {\n          throw new Error(`Required parameter «id» to be a string on «LswDialogs.methods.open»`);\n        }\n        if (id in this.opened) {\n          return this.maximize(id);\n          // throw new Error(`Cannot open dialog «${id}» because it is already opened on «LswDialogs.methods.open»`);\n        }\n        if (typeof template !== \"string\") {\n          throw new Error(`Required parameter «template» to be a string on «LswDialogs.methods.open»`);\n        }\n        if (typeof factory === \"object\") {\n          // @OK\n        } else if (typeof factory !== \"function\") {\n          throw new Error(`Required parameter «factory» to be an object or a function on «LswDialogs.methods.open»`);\n        }\n        if (typeof priority !== \"number\") {\n          throw new Error(`Required parameter «priority» to be a number on «LswDialogs.methods.open»`);\n        }\n        const dialogComponentInput = typeof factory === \"function\" ? factory() : factory;\n        const dialogComponentData = (() => {\n          if (typeof dialogComponentInput.data === \"undefined\") {\n            return function () { return {}; };\n          } else if (typeof dialogComponentInput.data === \"object\") {\n            return function () { return dialogComponentInput.data };\n          } else if (typeof dialogComponentInput.data === \"function\") {\n            return dialogComponentInput.data;\n          } else {\n            console.log(dialogComponentInput.data);\n            throw new Error(\"Required parameter «data» returned by «factory» to be an object, a function or empty on «LswDialogs.methods.open»\");\n          }\n        })();\n        const scopifyMethods = function (obj, scope) {\n          return Object.keys(obj).reduce((out, k) => {\n            const v = obj[k];\n            if (typeof v !== \"function\") {\n              out[k] = v;\n            } else {\n              out[k] = v.bind(scope);\n            }\n            return out;\n          }, {});\n        };\n        // 1) Este es para el Vue.component:\n        const componentId = Dialog.fromIdToComponentName(id);\n        const dialogComponent = Object.assign({}, dialogComponentInput, {\n          name: componentId,\n          template,\n          data(component, ...args) {\n            this.$trace(`lsw-dialogs.[${componentId}].data`, []);\n            const preData = dialogComponentData.call(this);\n            if (typeof preData.value === \"undefined\") {\n              preData.value = \"\";\n            };\n            // console.log(\"El data del nuevo componente dialog:\", preData);\n            dialogComponentInput.watch = scopifyMethods(dialogComponentInput.watch || {}, component);\n            dialogComponentInput.computed = scopifyMethods(dialogComponentInput.computed || {}, component);\n            dialogComponentInput.methods = scopifyMethods(dialogComponentInput.methods || {}, component);\n            return preData;\n          },\n          watch: (dialogComponentInput.watch || {}),\n          computed: (dialogComponentInput.computed || {}),\n          methods: {\n            getValue() {\n              this.$trace(`lsw-dialogs.[${componentId}].methods.getValue`, []);\n              return JSON.parse(JSON.stringify(this.value));\n            },\n            accept(solution = undefined, ...args) {\n              this.$trace(`lsw-dialogs.[${componentId}].methods.accept`, [solution, ...args]);\n              if (solution instanceof Event) {\n                return this.$dialogs.resolve(id, this.getValue()).close(id);\n              }\n              return this.$dialogs.resolve(id, typeof solution !== \"undefined\" ? solution : this.getValue()).close(id);\n            },\n            cancel(...args) {\n              this.$trace(\"lsw-dialogs.[${componentId}].methods.cancel\", args);\n              return this.$dialogs.resolve(id, -1).close(id);\n            },\n            abort(error = undefined, ...args) {\n              this.$trace(`lsw-dialogs.[${componentId}].methods.abort`, [error, ...args]);\n              if (solution instanceof Event) {\n                return this.$dialogs.reject(id, new Error(\"Aborted dialog error\")).close(id);\n              }\n              return this.$dialogs.reject(id, error).close(id);\n            },\n            close(...args) {\n              this.$trace(`lsw-dialogs.[${componentId}].methods.close`, args);\n              return this.$dialogs.resolve(id, -2).close(id);\n            },\n            ...(dialogComponentInput.methods || {})\n          }\n        });\n        Define_component: {\n          Vue.component(dialogComponent.name, dialogComponent);\n        }\n        // 1) Este es para el this.$dialogs:\n        const dialogDefinition = Object.assign({}, {\n          ...parametricObject,\n          id,\n          title,\n          name: dialogComponent.name,\n          component: dialogComponent,\n          priority,\n          minimized: false,\n          parentId,\n          created_at,\n          promiser: Promise.withResolvers(),\n        });\n        const dialogInstance = new Dialog(dialogDefinition);\n        // console.log(\"Definición final del dialogo\", dialogInstance);\n        Define_dialog: {\n          this.opened = Object.assign({}, this.opened, {\n            [id]: dialogInstance\n          });\n        }\n        if (typeof this.hookOnOpen === \"function\") {\n          this.hookOnOpen(this.opened[id], id, this);\n        }\n        return this.opened[id].promiser.promise;\n      },\n      resolve(id, solution, ...args) {\n        this.$trace(\"lsw-dialogs.methods.resolve\", [id, solution, ...args]);\n        if (typeof id !== \"string\") {\n          throw new Error(\"Required parameter «id» (argument:1) to be a string on «LswDialogs.resolve»\");\n        }\n        if (!(id in this.opened)) {\n          throw new Error(`Cannot resolve dialog «${id}» because it is not opened on «LswDialogs.resolve»`);\n        }\n        this.opened[id].promiser.resolve(solution);\n        return {\n          close: () => this.close(id)\n        };\n      },\n      reject(id, error, ...args) {\n        this.$trace(\"lsw-dialogs.methods.reject\", [id, error, ...args]);\n        if (typeof id !== \"string\") {\n          throw new Error(\"Required parameter «id» (argument:1) to be a string on «LswDialogs.reject»\");\n        }\n        if (!(id in this.opened)) {\n          throw new Error(`Cannot reject dialog «${id}» because it is not opened on «LswDialogs.reject»`);\n        }\n        this.opened[id].promiser.reject(error);\n        return {\n          close: () => this.close(id)\n        };\n      },\n      close(id, ...args) {\n        this.$trace(\"lsw-dialogs.methods.close\", [id, ...args]);\n        if (typeof id !== \"string\") {\n          throw new Error(\"Required parameter «id» (argument:1) to be a string on «LswDialogs.close»\");\n        }\n        if (!(id in this.opened)) {\n          throw new Error(`Cannot close dialog «${id}» because it is not opened on «LswDialogs.close»`);\n        }\n        let promiseOfDialog = undefined;\n        Undefine_component: {\n          const dialogName = Dialog.fromIdToComponentName(id);\n          delete Vue.options.components[dialogName];\n        }\n        Undefine_dialog: {\n          Solve_promise_if_not_already: {\n            if (this.opened[id].promiser.promise.state === \"pending\") {\n              this.opened[id].promiser.resolve(-3);\n            }\n          }\n          promiseOfDialog = this.opened[id].promiser.promise;\n          delete this.opened[id];\n          this.opened = Object.assign({}, this.opened);\n        }\n        if (typeof this.hookOnClose === \"function\") {\n          this.hookOnClose(id, this);\n        }\n        return promiseOfDialog;\n        // this.$forceUpdate(true);\n      },\n      minimize(id, ...args) {\n        this.$trace(\"lsw-dialogs.methods.minimize\", [id, ...args]);\n        if (typeof id !== \"string\") {\n          throw new Error(\"Required parameter «id» (argument:1) to be a string on «LswDialogs.minimize»\");\n        }\n        if (!(id in this.opened)) {\n          throw new Error(`Cannot minimize dialog «${id}» because it is not opened on «LswDialogs.minimize»`);\n        }\n        this.opened[id].minimized = true;\n        this._refreshMinimizedLength(this.opened);\n      },\n      minimizeAll() {\n        this.$trace(\"lsw-dialogs.methods.minimizeAll\");\n        for(let id in this.opened) {\n          this.opened[id].minimized = true;\n        }\n        Also_main_tab_if_exists: {\n          const windowsViewer = this?.$lsw?.windowsViewer;\n          if(windowsViewer) {\n            windowsViewer.hide();\n          }\n        }\n        this._refreshMinimizedLength(this.opened);\n      },\n      maximize(id, ...args) {\n        this.$trace(\"lsw-dialogs.methods.maximize\", [id, ...args]);\n        if (typeof id !== \"string\") {\n          throw new Error(\"Required parameter «id» (argument:1) to be a string on «LswDialogs.maximize»\");\n        }\n        if (!(id in this.opened)) {\n          console.log(this.opened);\n          console.log(id);\n          console.log(Object.keys(this.opened)[0] === id);\n          throw new Error(`Cannot maximize dialog «${id}» because it is not opened on «LswDialogs.maximize»`);\n        }\n        Iterating_dialogs:\n        for (let dialogId in this.opened) {\n          if (id === dialogId) {\n            continue Iterating_dialogs;\n          }\n          const dialogData = this.opened[dialogId];\n          const currentPriority = parseInt(dialogData.priority);\n          this.opened[dialogId].priority = currentPriority - 1;\n        }\n        this.opened[id].priority = 500;\n        this.opened[id].minimized = false;\n        this._refreshMinimizedLength();\n      },\n      _refreshMinimizedLength(newValue = this.opened, ...args) {\n        this.$trace(\"lsw-dialogs.methods._refreshMinimizedLength\", []);\n        this.notMinimizedLength = Object.keys(newValue).reduce((out, k) => {\n          const v = newValue[k];\n          if (v.minimized === false) {\n            out++;\n          }\n          return out;\n        }, 0);\n        this.$forceUpdate(true);\n      },\n      goHome(...args) {\n        this.$trace(\"lsw-dialogs.methods.goHome\", []);\n        this.$window.LswWindows.show();\n      },\n      onOpen(callback, ...args) {\n        this.$trace(\"lsw-dialogs.methods.onOpen\", []);\n        this.hookOnOpen = callback;\n      },\n      onClose(callback, ...args) {\n        this.$trace(\"lsw-dialogs.methods.onClose\", []);\n        this.hookOnClose = callback;\n      }\n    },\n    mounted(...args) {\n      this.$trace(\"lsw-dialogs.mounted\", []);\n      if(Vue.prototype.$dialogs) {\n        throw new Error(\"Cannot install «lsw-dialogs» as global on «Vue.prototype.$dialogs» because it is another instance mounted on «LswDialogs.mounted»\");\n      }\n      Vue.prototype.$dialogs = this;\n      Vue.prototype.$lsw.dialogs = this;\n      window.LswDialogs = this;\n      // console.log(\"[*] LswDialogs mounted.\");\n    }\n  });\n",
              "$code.label": "LswDialogs API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswEmojisPicker component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-emojis-picker/lsw-emojis-picker.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 100,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswEmojisPicker component",
              "$code": "window.ALL_EMOJIS = LswUtils.splitByUnicode(\"✢✣✤✥✦✧★☆✯✡︎✩✪✫✬✭✮✶✷✵✸✹→⇒⟹⇨⇾➾⇢☛☞➔➜➙➛➝➞♠︎♣︎♥︎♦︎♤♧♡♢♚♛♜♝♞♟♔♕♖♗♘♙⚀⚁⚂⚃⚄⚅🂠⚈⚉⚆⚇𓀀𓀁𓀂𓀃𓀄𓀅𓀆𓀇𓀈𓀉𓀊𓀋𓀌𓀍𓀎𓀏𓀐𓀑𓀒𓀓𓀔𓀕𓀖𓀗𓀘𓀙𓀚𓀛𓀜𓀝😀😃😄😁😆😅😂🤣🥲🥹☺️😊😇🙂🙃😉😌😍🥰😘😗😙😚😋😛😝😜🤪🤨🧐🤓😎🥸🤩🥳🙂‍↕️😏😒🙂‍↔️😞😔😟😕🙁☹️😣😖😫😩🥺😢😭😮‍💨😤😠😡🤬🤯😳🥵🥶😱😨😰😥😓🫣🤗🫡🤔🫢🤭🤫🤥😶😶‍🌫️😐😑😬🫨🫠🙄😯😦😧😮😲🥱😴🤤😪😵😵‍💫🫥🤐🥴🤢🤮🤧😷🤒🤕🤑🤠😈👿👹👺🤡💩👻💀☠️👽👾🤖🎃😺😸😹😻😼😽🙀😿😾👋🤚🖐✋🖖👌🤌🤏✌️🤞🫰🤟🤘🤙🫵🫱🫲🫸🫷🫳🫴👈👉👆🖕👇☝️👍👎✊👊🤛🤜👏🫶🙌👐🤲🤝🙏✍️💅🤳💪🦾🦵🦿🦶👣👂🦻👃🫀🫁🧠🦷🦴👀👁👅👄🫦💋🩸 🐶🐱🐭🐹🐰🦊🐻🐼🐻‍❄️🐨🐯🦁🐮🐷🐽🐸🐵🙈🙉🙊🐒🐔🐧🐦🐦‍⬛🐤🐣🐥🦆🦅🦉🦇🐺🐗🐴🦄🐝🪱🐛🦋🐌🐞🐜🪰🪲🪳🦟🦗🕷🕸🦂🐢🐍🦎🦖🦕🐙🦑🦐🦞🦀🪼🪸🐡🐠🐟🐬🐳🐋🦈🐊🐅🐆🦓🫏🦍🦧🦣🐘🦛🦏🐪🐫🦒🦘🦬🐃🐂🐄🐎🐖🐏🐑🦙🐐🦌🫎🐕🐩🦮🐕‍🦺🐈🐈‍⬛🪽🪶🐓🦃🦤🦚🦜🦢🪿🦩🕊🐇🦝🦨🦡🦫🦦🦥🐁🐀🐿🦔🐾🐉🐲🐦‍🔥🌵🎄🌲🌳🌴🪹🪺🪵🌱🌿☘️🍀🎍🪴🎋🍃🍂🍁🍄🍄‍🟫🐚🪨🌾💐🌷🪷🌹🥀🌺🌸🪻🌼🌻🌞🌝🌛🌜🌚🌕🌖🌗🌘🌑🌒🌓🌔🌙🌎🌍🌏🪐💫⭐️🌟✨⚡️☄️💥🔥🌪🌈☀️🌤⛅️🌥☁️🌦🌧⛈🌩🌨❄️☃️⛄️🌬💨💧💦🫧☔️☂️🌊🍏🍎🍐🍊🍋🍋‍🟩🍌🍉🍇🍓🫐🍈🍒🍑🥭🍍🥥🥝🍅🍆🥑🥦🫛🥬🥒🌶🫑🌽🥕🫒🧄🧅🫚🥔🍠🫘🥐🥯🍞🥖🥨🧀🥚🍳🧈🥞🧇🥓🥩🍗🍖🦴🌭🍔🍟🍕🫓🥪🥙🧆🌮🌯🫔🥗🥘🫕🥫🍝🍜🍲🍛🍣🍱🥟🦪🍤🍙🍚🍘🍥🥠🥮🍢🍡🍧🍨🍦🥧🧁🍰🎂🍮🍭🍬🍫🍿🍩🍪🌰🥜🍯🥛🍼🫖☕️🍵🧃🥤🧋🫙🍶🍺🍻🥂🍷🫗🥃🍸🍹🧉🍾🧊🥄🍴🍽🥣🥡🥢🧂⚽️🏀🏈⚾️🥎🎾🏐🏉🥏🎱🪀🏓🏸🏒🏑🥍🏏🪃🥅⛳️🪁🏹🎣🤿🥊🥋🎽🛹🛼🛷⛸🥌🎿🏆🥇🥈🥉🏅🎖🏵🎗🎫🎟🎪🤹🤹‍♂️🤹‍♀️🎭🩰🎨🎬🎤🎧🎼🎹🥁🪘🪇🎷🎺🪗🎸🪕🎻🪈🎲♟🎯🎳🎮🎰🧩🚗🚕🚙🚌🚎🏎🚓🚑🚒🚐🛻🚚🚛🚜🦯🦽🦼🛴🚲🛵🏍🛺🚨🚔🚍🚘🚖🛞🚡🚠🚟🚃🚋🚞🚝🚄🚅🚈🚂🚆🚇🚊🚉✈️🛫🛬🛩💺🛰🚀🛸🚁🛶⛵️🚤🛥🛳⛴🚢⚓️🛟🪝⛽️🚧🚦🚥🚏🗺🗿🗽🗼🏰🏯🏟🎡🎢🛝🎠⛲️⛱🏖🏝🏜🌋⛰🏔🗻🏕⛺️🛖🏠🏡🏘🏚🏗🏭🏢🏬🏣🏤🏥🏦🏨🏪🏫🏩💒🏛⛪️🕌🕍🛕🕋⛩🛤🛣🗾🎑🏞🌅🌄🌠🎇🎆🌇🌆🏙🌃🌌🌉🌁⌚️📱📲💻⌨️🖥🖨🖱🖲🕹🗜💽💾💿📀📼📷📸📹🎥📽🎞📞☎️📟📠📺📻🎙🎚🎛🧭⏱⏲⏰🕰⌛️⏳📡🔋🪫🔌💡🔦🕯🪔🧯🛢🛍️💸💵💴💶💷🪙💰💳💎⚖️🪮🪜🧰🪛🔧🔨⚒🛠⛏🪚🔩⚙️🪤🧱⛓⛓️‍💥🧲🔫💣🧨🪓🔪🗡⚔️🛡🚬⚰️🪦⚱️🏺🔮📿🧿🪬💈⚗️🔭🔬🕳🩹🩺🩻🩼💊💉🩸🧬🦠🧫🧪🌡🧹🪠🧺🧻🚽🚰🚿🛁🛀🧼🪥🪒🧽🪣🧴🛎🔑🗝🚪🪑🛋🛏🛌🧸🪆🖼🪞🪟🛍🛒🎁🎈🎏🎀🪄🪅🎊🎉🪩🎎🏮🎐🧧✉️📩📨📧💌📥📤📦🏷🪧📪📫📬📭📮📯📜📃📄📑🧾📊📈📉🗒🗓📆📅🗑🪪📇🗃🗳🗄📋📁📂🗂🗞📰📓📔📒📕📗📘📙📚📖🔖🧷🔗📎🖇📐📏🧮📌📍✂️🖊🖋✒️🖌🖍📝✏️🔍🔎🔏🔐🔒🔓❤️🩷🧡💛💚💙🩵💜🖤🩶🤍🤎❤️‍🔥❤️‍🩹💔❣️💕💞💓💗💖💘💝💟☮️✝️☪️🪯🕉☸️✡️🔯🕎☯️☦️🛐⛎♈️♉️♊️♋️♌️♍️♎️♏️♐️♑️♒️♓️🆔⚛️🉑☢️☣️📴📳🈶🈚️🈸🈺🈷️✴️🆚💮🉐㊙️㊗️🈴🈵🈹🈲🅰️🅱️🆎🆑🅾️🆘❌⭕️🛑⛔️📛🚫💯💢♨️🚷🚯🚳🚱🔞📵🚭❗️❕❓❔‼️⁉️🔅🔆〽️⚠️🚸🔱⚜️🔰♻️✅🈯️💹❇️✳️❎🌐💠Ⓜ️🌀💤🏧🚾♿️🅿️🛗🈳🈂️🛂🛃🛄🛅🚹🚺🚼⚧🚻🚮🎦🛜📶🈁🔣ℹ️🔤🔡🔠🆖🆗🆙🆒🆕🆓0️⃣1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟🔢#️⃣*️⃣⏏️▶️⏸⏯⏹⏺⏭⏮⏩⏪⏫⏬◀️🔼🔽➡️⬅️⬆️⬇️↗️↘️↙️↖️↕️↔️↪️↩️⤴️⤵️🔀🔁🔂🔄🔃🎵🎶➕➖➗✖️🟰♾💲💱™️©️®️〰️➰➿🔚🔙🔛🔝🔜✔️☑️🔘🔴🟠🟡🟢🔵🟣⚫️⚪️🟤🔺🔻🔸🔹🔶🔷🔳🔲▪️▫️◾️◽️◼️◻️🟥🟧🟨🟩🟦🟪⬛️⬜️🟫🔈🔇🔉🔊🔔🔕📣📢💬💭♠️♣️♥️♦️🃏🎴🕐🕑🕒🕓🕔🕕🕖🕗🕘🕙🕚🕛🕜🕝🕞🕟🕠🕡🕢🕣🕤🕥🕦🕧\").reverse();\n\nVue.component(\"LswEmojisPicker\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-emojis-picker.data\");\n    return {\n      pickedText: \"\",\n      allEmojis: window.ALL_EMOJIS,\n    };\n  },\n  methods: {\n    pickEmoji(emoji) {\n      this.$trace(\"lsw-emojis-picker.methods.pickEmoji\");\n      this.pickedText += emoji;\n    },\n    copyText() {\n      this.$trace(\"lsw-emojis-picker.methods.copyText\");\n      LswUtils.copyToClipboard(this.pickedText);\n      this.$lsw.toasts.send({\n        title: \"Emojis copiados\",\n        text: \"Los emojis están ahora en tu ctrl + v\",\n      });\n    },\n    clearText() {\n      this.$trace(\"lsw-emojis-picker.methods.clearText\");\n      this.pickedText = \"\";\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-emojis-picker.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswEmojisPicker API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswErrorBox component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-error-box/lsw-error-box.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 92,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswErrorBox component",
              "$code": "Vue.component(\"LswErrorBox\", {\n  template: $template,\n  props: {\n    error: {\n      type: [Object, Boolean],\n      default: () => false,\n    },\n    onClearError: {\n      type: [Function, Boolean],\n      default: () => false,\n    },\n    context: {\n      type: String,\n      default: () => {},\n    }\n  },\n  data() {\n    this.$trace(\"lsw-error-box.data\");\n    return {\n      isShowingTrace: false,\n    };\n  },\n  methods: {\n    toggleTrace() {\n      this.$trace(\"lsw-error-box.methods.toggleTrace\");\n      this.isShowingTrace = !this.isShowingTrace;\n    },\n    clearError() {\n      this.$trace(\"lsw-error-box.methods.clearError\");\n      this.onClearError();\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-error-box.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswErrorBox API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswEventTracker component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-event-tracker/lsw-event-tracker.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 100,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswEventTracker component",
              "$code": "Vue.component(\"LswEventTracker\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-event-tracker.data\");\n    return {\n      isLoaded: false,\n      isSearching: true,\n      allTrackables: [],\n      trackables: false,\n      searchText: \"\",\n      digestTimeout: 1000,\n      digestTimeoutId: undefined,\n    };\n  },\n  methods: {\n    async loadTrackables() {\n      this.$trace(\"lsw-event-tracker.methods.loadTrackables\");\n      this.isLoaded = false;\n      try {\n        let trackableIds = undefined;\n        Get_trackables: {\n          trackableIds = await this.$lsw.fs.evaluateAsDotenvListFileOrReturn(\"/kernel/settings/trackables.env\", []);\n        }\n        let trackedData = {};\n        Count_trackables: {\n          const accionesTrackeadas = await this.$lsw.database.selectMany(\"Accion\", it => {\n            return trackableIds.indexOf(it.en_concepto) !== -1;\n          });\n          for(let indexTrackables=0; indexTrackables<trackableIds.length; indexTrackables++) {\n            const trackableId = trackableIds[indexTrackables];\n            trackedData[trackableId] = [];\n            for(let indexTrackeadas=0; indexTrackeadas<accionesTrackeadas.length; indexTrackeadas++) {\n              const accion = accionesTrackeadas[indexTrackeadas];\n              if(accion.en_concepto === trackableId) {\n                trackedData[trackableId].push(accion);\n              }\n            }\n          }\n        }\n        this.allTrackables = trackedData;\n        this.digestOutput();\n      } catch (error) {\n        this.$lsw.toasts.sendError(error);\n      }\n    },\n    digestDelayed() {\n      this.$trace(\"lsw-event-tracker.methods.digestDelayed\");\n      clearTimeout(this.digestTimeoutId);\n      setTimeout(() => {\n        this.digestOutput();\n      }, this.digestTimeout);\n    },\n    digestOutput() {\n      this.$trace(\"lsw-event-tracker.methods.digestOutput\");\n      clearTimeout(this.digestTimeoutId);\n      this.isSearching = true;\n      setTimeout(() => {\n        if(this.searchText.trim() === \"\") {\n          this.trackables = this.allTrackables;\n        } else {\n          this.trackables = LswUtils.filterObject(this.allTrackables, (key, val) => {\n            return key.toLowerCase().indexOf(this.searchText.toLowerCase()) !== -1;\n          });\n        }\n        this.isLoaded = true;\n        this.isSearching = false;\n      }, 0);\n    },\n    editTrackables() {\n      this.$trace(\"lsw-event-tracker.methods.editTrackables\");\n      this.$lsw.dialogs.open({\n        title: \"Editar trackeables\",\n        template: `\n          <lsw-filesystem-explorer\n            opened-by=\"/kernel/settings/trackables.env\"\n            :absolute-layout=\"true\"\n          />\n        `,\n      });\n    },\n    async deleteTrackable(trackableId) {\n      this.$trace(\"lsw-event-tracker.methods.deleteTrackable\");\n      const eventos = await this.$lsw.database.selectMany(\"Accion\", it => {\n        return (it.tiene_estado === \"trackeada\") && (it.en_concepto === trackableId);\n      });\n      const eventosOrdenados = eventos.sort((e1, e2) => {\n        return e1.tiene_inicio > e2.tiene_inicio ? -1 : 1;\n      });\n      const evento = eventosOrdenados[0] || false;\n      if(!evento) {\n        return;\n      }\n      const respuesta = await this.$lsw.dialogs.open({\n        title: \"Eliminar último evento trackeada\",\n        template: `\n          <div class=\"pad_1\">\n            <div>¿Seguro que quieres eliminar el evento trackeada?</div>\n            <pre class=\"codeblock\">{{ evento }}</pre>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini danger_button\"\n                  v-on:click=\"() => accept(true)\">Eliminar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\"\n                  v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: { data: { evento } }\n      });\n      if(respuesta !== true) {\n        console.log(respuesta);\n        return;\n      }\n      await this.$lsw.database.delete(\"Accion\", evento.id);\n      this.$lsw.toasts.send({\n        title: \"Evento eliminado correctamente\",\n        text: \"El último evento asociado fue eliminado\",\n      });\n      this.loadTrackables();\n    },\n    async addTrackableWithComment(trackableId) {\n      this.$trace(\"lsw-event-tracker.methods.addTrackableWithComment\");\n      const comentario = await this.$lsw.dialogs.open({\n        title: \"Comentario adjunto a evento\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"pad_bottom_1\">\n              Comentario a adjuntar en el evento:\n            </div>\n            <div class=\"pad_bottom_1\">\n              <textarea class=\"width_100\" v-model=\"value\" spellcheck=\"false\" />\n            </div>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Añadir trackeo</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `\n      });\n      if(typeof comentario !== \"string\") return;\n      await this.$lsw.database.insert(\"Accion\", {\n        en_concepto: trackableId,\n        tiene_estado: \"trackeada\",\n        tiene_inicio: LswTimer.utils.fromDateToDatestring(new Date()),\n        tiene_duracion: \"1min\",\n        tiene_parametros: \"\",\n        tiene_resultados: \"\",\n        tiene_comentarios: comentario,\n      });\n      this.$lsw.toasts.send({\n        title: \"Evento añadido correctamente\",\n        text: \"Con comentario adjunto\",\n      });\n      this.loadTrackables();\n    },\n    async addTrackable(trackableId) {\n      this.$trace(\"lsw-event-tracker.methods.addTrackable\");\n      await this.$lsw.database.insert(\"Accion\", {\n        en_concepto: trackableId,\n        tiene_estado: \"trackeada\",\n        tiene_inicio: LswTimer.utils.fromDateToDatestring(new Date()),\n        tiene_duracion: \"1min\",\n        tiene_parametros: \"\",\n        tiene_resultados: \"\",\n        tiene_comentarios: \"\",\n      });\n      this.loadTrackables();\n      this.$lsw.toasts.send({\n        title: \"Evento añadido correctamente\",\n        text: \"Sin comentario adjunto\",\n      });\n    },\n    async insertTrackable() {\n      this.$trace(\"lsw-event-tracker.methods.insertTrackable\");\n      const trackableId = this.searchText;\n      if(trackableId.trim() === \"\") {\n        return;\n      }\n      const trackableIds = await this.$lsw.fs.evaluateAsDotenvListFileOrReturn(\"/kernel/settings/trackables.env\", []);\n      const pos = trackableIds.indexOf(trackableId);\n      if(pos !== -1) {\n        this.$lsw.toasts.send({\n          title: \"Este trackable ya existe\",\n          text: \"No se insertó porque ya existe.\",\n        });\n      } else {\n        const previousContent = await this.$lsw.fs.read_file(\"/kernel/settings/trackables.env\");\n        const lastContent = previousContent.trim() + \"\\n\" + trackableId;\n        await this.$lsw.fs.write_file(\"/kernel/settings/trackables.env\", lastContent);\n        this.$lsw.toasts.send({\n          title: \"Trackable insertado correctamente\",\n          text: \"\",\n        });\n        this.loadTrackables();\n      }\n    },\n    clearSearchText() {\n      this.$trace(\"lsw-event-tracker.watch.clearSearchText\");\n      this.searchText = \"\";\n      this.digestOutput();\n    }\n  },\n  watch: {\n    searchText() {\n      this.$trace(\"lsw-event-tracker.watch.searchText\");\n      this.digestDelayed();\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-event-tracker.mounted\");\n    this.loadTrackables();\n  },\n  unmounted() {\n    this.$trace(\"lsw-event-tracker.unmounted\");\n    \n  }\n});\n",
              "$code.label": "LswEventTracker API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswFastDateControl API » LswFastDateControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-fast-datetime-control/lsw-fast-datetime-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 173,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswFastDateControl API » LswFastDateControl component",
              "$code": "Vue.component(\"LswFastDatetimeControl\", {\n  template: $template,\n  props: {\n    mode: {\n      type: String,\n      default: () => \"datetime\", // can also be: \"date\"\n    },\n    initialValue: {\n      type: [Date, String],\n      default: null,\n    },\n    onChangeDate: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  data() {\n    this.$trace(\"lsw-fast-datetime-control.data\");\n    return {\n      value: this.adaptDate(this.initialValue || new Date()),\n      isEditable: false,\n    };\n  },\n  methods: {\n    adaptDate(dateInput) {\n      this.$trace(\"lsw-fast-date-control.methods.adaptDate\");\n      if(dateInput instanceof Date) {\n        return LswTimer.utils.fromDateToDatestring(dateInput, this.mode === \"date\");\n      }\n      return dateInput;\n    },\n    getValue() {\n      this.$trace(\"lsw-fast-date-control.methods.getValue\");\n      return this.value;\n    },\n    toggleEditable() {\n      this.$trace(\"lsw-fast-datetime-control.methods.toggleEditable\");\n      this.isEditable = !this.isEditable;\n    },\n    showEditable() {\n      this.$trace(\"lsw-fast-datetime-control.methods.showEditable\");\n      this.isEditable = true;\n    },\n    hideEditable() {\n      this.$trace(\"lsw-fast-datetime-control.methods.hideEditable\");\n      this.isEditable = false;\n    },\n    setValue(v) {\n      this.$trace(\"lsw-fast-datetime-control.methods.propagateValue\");\n      this.value = this.adaptDate(v);\n      this.onChangeDate(this.value, this);\n      this.hideEditable();\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-fast-datetime-control.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswFastDateControl API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswGoalsRecordsViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-goals-records-viewer/lsw-goals-records-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswGoalsRecordsViewer component",
              "$code": "Vue.component(\"LswGoalsRecordsViewer\", {\n  template: $template,\n  props: {\n\n  },\n  data() {\n    this.$trace(\"lsw-goals-records-viewer.data\");\n    return {\n      isLoaded: false,\n      isShowingGoals: true,\n      records: false,\n      selectedGoals: [],\n      availableGoals: [],\n    };\n  },\n  methods: {\n    async loadRecords() {\n      this.$trace(\"lsw-goals-records-viewer.methods.loadRecords\");\n      this.isLoaded = false;\n      try {\n        const recordsFiles = await this.$lsw.fs.read_directory(\"/kernel/goals/records\");\n        const recordDays = Object.keys(recordsFiles).map(file => file.replace(/\\.json$/g, \"\"));\n        const allRecords = [];\n        const allGoalConcepts = [];\n        const errors = [];\n        for (let index = 0; index < recordDays.length; index++) {\n          const recordDay = recordDays[index];\n          try {\n            const recordPath = `/kernel/goals/records/${recordDay}.json`;\n            const recordJson = await this.$lsw.fs.read_file(recordPath);\n            const recordData = JSON.parse(recordJson);\n            allRecords.push(recordData);\n            for(let indexGoals=0; indexGoals<recordData.goals.length; indexGoals++) {\n              const goal = recordData.goals[indexGoals];\n              try {\n                const goalId = goal.originalConcept;\n                const goalPos = allGoalConcepts.indexOf(goalId);\n                if(goalPos === -1) {\n                  allGoalConcepts.push(goalId);\n                }\n              } catch (error) {\n                // @BADLUCK\n              }\n            }\n          } catch (error) {\n            console.log(error);\n            error.message = `(${recordDay}) ` + error.message;\n            error.fileOrigin = recordDay;\n            errors.push(error);\n          }\n        }\n        if (errors.length) {\n          console.log(errors);\n          this.$lsw.toasts.send({\n            title: `Hubo ${errors.length} errores cargando los records`,\n            text: \"Errores en: \" + errors.map(err => err.fileOrigin).join(\", \"),\n          });\n          return;\n        }\n        this.records = allRecords;\n        this.availableGoals = allGoalConcepts;\n      } catch (error) {\n        console.log(error);\n      }\n      this.isLoaded = true;\n    },\n    toggleGoals() {\n      this.$trace(\"lsw-goals-records-viewer.methods.toggleGoals\");\n      this.isShowingGoals = !this.isShowingGoals;\n    },\n    toggleAllSelectedGoals() {\n      this.$trace(\"lsw-goals-records-viewer.methods.toggleAllSelectedGoals\");\n      if(this.selectedGoals.length) {\n        this.selectedGoals = [];\n      } else {\n        this.selectedGoals = [].concat(this.availableGoals);\n      }\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-goals-records-viewer.mounted\");\n    this.loadRecords();\n  },\n  unmounted() {\n    this.$trace(\"lsw-goals-records-viewer.unmounted\");\n  }\n});\n",
              "$code.label": "LswGoalsRecordsViewer API",
              "$output": "index.html"
            }
          ],
          "Lsw Goals API » LswGoals class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-goals-viewer/lsw-goals-api.js",
              "$location": {
                "start": {
                  "offset": 280,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 356,
                  "line": 15,
                  "column": 1
                }
              },
              "section": "Lsw Goals API » LswGoals class",
              "$code": "\n  const LocalUtilities = class {\n\n  };\n\n  const LswGoals = class {\n\n    static COLOR_GAMA_1 = {\n      SUSPENSO: \"red\",\n      INSUFICIENTE: \"#e87489\",\n      SUFICIENTE: \"#5353bf\",\n      NOTABLE: \"orange\",\n      EXCELENTE: \"yellow\",\n      SOBRESALIENTE: \"lime\",\n    };\n\n    static COLOR_GAMA_2 = {\n      SUSPENSO: \"#D32F2F\",\n      INSUFICIENTE: \"#F57C00\",\n      SUFICIENTE: \"#FBC02D\",\n      NOTABLE: \"#C0CA33\",\n      EXCELENTE: \"#7CB342\",\n      SOBRESALIENTE: \"#388E3C\",\n    };\n\n    static COLOR_GAMA_3 = {\n      SUSPENSO: \"#c6282866\",\n      INSUFICIENTE: \"#ef6c0066\",\n      SUFICIENTE: \"#ffe30066\",\n      NOTABLE: \"#29b6f666\",\n      EXCELENTE: \"#00897b66\",\n      SOBRESALIENTE: \"#66bb6a66\",\n    };\n\n    static COLOR = this.COLOR_GAMA_3;\n\n    static COLOR_MEANING = {\n      [this.COLOR.SUSPENSO]: \"SUSPENSO\",\n      [this.COLOR.INSUFICIENTE]: \"INSUFICIENTE\",\n      [this.COLOR.SUFICIENTE]: \"SUFICIENTE\",\n      [this.COLOR.NOTABLE]: \"NOTABLE\",\n      [this.COLOR.EXCELENTE]: \"EXCELENTE\",\n      [this.COLOR.SOBRESALIENTE]: \"SOBRESALIENTE\",\n    };\n\n    static async getGoalsReport(someDate = new Date()) {\n      Vue.prototype.$trace(\"lsw-goals-viewer.methods.getGoalsReport\");\n      let originalGoals = undefined;\n      // @HISTORICAL:\n      Previous_goals_setter: {\n        break Previous_goals_setter;\n        const parsedLinesPromise = Vue.prototype.$lsw.fs.evaluateAsDotenvListFileOrReturn(\"/kernel/settings/goals.env\", []);\n        const parsedLines = await parsedLinesPromise;\n        // 1. Get original goals:\n        const previousOriginalGoals = parsedLines.map(line => {\n          const [concept, condition = \"> 0\", urgency = \"0\"] = line.split(/\\|/g).map(item => {\n            return item.trim();\n          });\n          return { line, concept, condition, urgency };\n        });\n        originalGoals = previousOriginalGoals;\n      }\n      // @CURRENT:\n      Current_goals_setter: {\n        originalGoals = await Vue.prototype.$lsw.fs.evaluateAsWeekFileOrReturn(\"/kernel/goals/goals.week\", []);\n      }\n      // 2. Get today's completed actions:\n      const todayCompletedActions = await this.getSomeDayActions(someDate, false, \"completada\");\n      const formattedGoals = [];\n      const insertedGoals = [];\n      // 3. Expand goals:\n      Iterating_goals:\n      for (let indexGoal = 0; indexGoal < originalGoals.length; indexGoal++) {\n        try {\n          const originalGoal = originalGoals[indexGoal];\n          const {\n            type: goalType,\n            concept,\n            condition,\n            urgency,\n            from: goalBegin,\n            to: goalEnd\n          } = originalGoal;\n          const isRequire = goalType === \"REQ\";\n          const isSet = goalType === \"SET\";\n          const datestring = LswTimer.utils.fromDateToDatestring(someDate);\n          // Filtros de fecha:\n          if (goalBegin !== \"*\") {\n            if (datestring < goalBegin) {\n              continue Iterating_goals;\n            }\n          }\n          if (goalEnd !== \"*\") {\n            if (datestring > goalEnd) {\n              continue Iterating_goals;\n            }\n          }\n          // Aplica cambios en cada caso:\n          if (isSet) {\n            // Solo si es en un rango de 20 días antes o después:\n            const today = new Date();\n            const maxBefore = new Date(today);\n            maxBefore.setDate(maxBefore.getDate() - 1);\n            const maxLater = new Date(today);\n            maxLater.setDate(maxLater.getDate() + 1);\n            const isInRange = (someDate > maxBefore) && (someDate < maxLater);\n            if(!isInRange) {\n              continue Iterating_goals;\n            }\n            const duration = originalGoal.duration || \"1h\";\n            const hour = originalGoal.hour || \"00\";\n            const minute = originalGoal.minute || \"00\";\n            const weekday = originalGoal.weekday;\n            const isAnyWeekday = weekday === \"*\";\n            const currentWeekday = this.fromDateToWeekday(someDate);\n            if(!isAnyWeekday && (currentWeekday !== weekday)) {\n              continue Iterating_goals;\n            }\n            const currDatestring = LswTimer.utils.fromDateToDatestring(someDate, true);\n            const fullDatestring = `${currDatestring} ${hour}:${minute}`;\n            const matchedAcciones = await Vue.prototype.$lsw.database.select(\"Accion\", acc => {\n              const sameConcept = acc.en_concepto === concept;\n              const sameMinute = acc.tiene_inicio.startsWith(fullDatestring);\n              return sameConcept && sameMinute;\n            });\n            if(matchedAcciones.length === 1) {\n              continue Iterating_goals;\n            }\n            No_haremos_el_insert_aqui: {\n              const isToday = LswTimer.utils.areSameDayDates(today, someDate);\n              if(!isToday) {\n                break No_haremos_el_insert_aqui;\n              }\n              await Vue.prototype.$lsw.database.insert(\"Accion\", {\n                en_concepto: concept,\n                tiene_estado: \"pendiente\",\n                tiene_inicio: fullDatestring,\n                tiene_duracion: duration,\n                tiene_parametros: \"[*goal]\",\n                tiene_resultados: \"\",\n                tiene_comentarios: \"\",\n              });\n              insertedGoals.push(`${concept}@${fullDatestring}`);\n            }\n            continue Iterating_goals;\n          } else if (isRequire) {\n            const formattedGoal = {};\n            const formattedConcept = this.formatConcept(concept);\n            const formattedCondition = this.formatCondition(condition, formattedConcept);\n            const formattedUrgency = this.formatUrgency(urgency);\n            formattedGoal.concept = formattedConcept;\n            Object.assign(formattedGoal, formattedCondition(todayCompletedActions));\n            formattedGoal.urgency = formattedUrgency;\n            formattedGoals.push(formattedGoal);\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n      const sortedGoals = [].concat(formattedGoals).sort((g1, g2) => {\n        try {\n          const u1 = g1.urgency || 0;\n          const u2 = g2.urgency || 0;\n          const c1 = g1.filledAsint || 0;\n          const c2 = g2.filledAsint || 0;\n          const g1over = c1 > 100;\n          const g2over = c2 > 100;\n          if (g2over) return -1;\n          if (g1over) return 1;\n          if (u1 > u2) return -1;\n          if (u1 < u2) return 1;\n          if (c1 < c2) return -1;\n          if (c1 > c2) return 1;\n          return 0;\n        } catch (error) {\n          console.log(error);\n        }\n      });\n      if(insertedGoals.length) {\n        Vue.prototype.$lsw.toasts.debug(insertedGoals);\n      }\n      return {\n        goals: sortedGoals,\n        actions: todayCompletedActions\n      };\n    }\n\n    static fromDateToWeekday(date) {\n      const weekdayNum = date.getDay();\n      if(weekdayNum === 0) {\n        return \"dom\";\n      } else if(weekdayNum === 1) {\n        return \"lun\";\n      } else if(weekdayNum === 2) {\n        return \"mar\";\n      } else if(weekdayNum === 3) {\n        return \"mie\";\n      } else if(weekdayNum === 4) {\n        return \"jue\";\n      } else if(weekdayNum === 5) {\n        return \"vie\";\n      } else if(weekdayNum === 6) {\n        return \"sab\";\n      }\n    }\n\n    static $appliesRange(rangeStart, rangeEnd, date) {\n      Vue.prototype.$trace(\"lsw-goals-viewer.methods.$appliesRange\");\n      if (rangeStart === \"*\") {\n        if (rangeEnd === \"*\") {\n          return true;\n        } else {\n          return rangeEnd >= date;\n        }\n      } else if (rangeStart <= date) {\n        if (rangeEnd === \"*\") {\n          return true;\n        } else {\n          return rangeEnd >= date;\n        }\n      }\n      return true;\n    }\n\n    static formatConcept(txt) {\n      return txt;\n    }\n\n    static formatCondition(originalTxt, concept) {\n      const isMin = originalTxt.startsWith(\">\");\n      const op = originalTxt.trim().match(/(\\<|\\>)(=)?/g);\n      const opCorrected = op.length === 1 ? op + \"=\" : op;\n      const txt = originalTxt.replace(/(\\<|\\>)(=)?/g, \"\")\n      const isTimes = this.isConditionByTimes(txt);\n      const isDuration = this.isConditionByDuration(txt);\n      if ((!isTimes) && (!isDuration)) {\n        throw new Error(`Condition «${txt}» must be a number or a durationstring on «LswGoals.formatCondition»`);\n      }\n      const referenceValue = isTimes ? parseInt(txt) : LswTimer.utils.fromDurationstringToMilliseconds(txt);\n      return completedActions => {\n        const conclusion = {};\n        conclusion.type = isTimes ? \"by times\" : isDuration ? \"by duration\" : undefined;\n        conclusion.expectedAs = isMin ? \"minimum\" : \"maximum\";\n        conclusion.expectedAsAbbr = isMin ? \"min\" : \"max\";\n        const matchedActions = [];\n        Collect_matched_actions:\n        for (let index = 0; index < completedActions.length; index++) {\n          const acc = completedActions[index];\n          const sameConcept = acc.en_concepto === concept;\n          const isCompleted = acc.tiene_estado === \"completada\"; // Redundante, pero bueno.\n          if (sameConcept && isCompleted) {\n            matchedActions.push(acc);\n          }\n        }\n        Expand_data: {\n          conclusion.currentTimes = matchedActions.length;\n          conclusion.currentDurationInms = matchedActions.reduce((total, acc) => {\n            try {\n              total += LswTimer.utils.fromDurationstringToMilliseconds(acc.tiene_duracion || \"0min\");\n            } catch (error) {\n              console.log(error);\n            }\n            return total;\n          }, 0);\n          conclusion.currentDuration = LswTimer.utils.fromMillisecondsToDurationstring(conclusion.currentDurationInms) || \"0min\";\n        }\n        Apply_proper_filters: {\n          if (isTimes) {\n            const expectedTimes = referenceValue;\n            conclusion.expectedTimes = expectedTimes;\n            const evaluableSource = `${conclusion.currentTimes} ${opCorrected} ${expectedTimes}`;\n            console.log(\"[*] Evaluating JavaScript for condition: \", evaluableSource);\n            conclusion.filledAsint = Math.round(100 * (conclusion.currentTimes / conclusion.expectedTimes));\n            conclusion.filled = conclusion.filledAsint + \"%\";\n            Specific_for_time_cases: {\n              conclusion.missingTimes = conclusion.expectedTimes - conclusion.currentTimes;\n            }\n            conclusion.missingAsint = 100 - conclusion.filledAsint;\n            conclusion.missing = conclusion.missingAsint + \"%\";\n            conclusion.solved = window.eval(evaluableSource);\n            conclusion.solvable = evaluableSource;\n          } else if (isDuration) {\n            const expectedDuration = referenceValue;\n            conclusion.expectedDurationInms = expectedDuration;\n            conclusion.expectedDuration = LswTimer.utils.fromMillisecondsToDurationstring(expectedDuration);\n            const evaluableSource = `${conclusion.currentDurationInms} ${opCorrected} ${expectedDuration}`;\n            console.log(\"[*] Evaluating JavaScript for condition: \", evaluableSource);\n            conclusion.filledAsint = Math.round(100 * (conclusion.currentDurationInms / conclusion.expectedDurationInms));\n            conclusion.filled = conclusion.filledAsint + \"%\";\n            const missingDurationInms = LswUtils.zeroIfNegative(conclusion.expectedDurationInms - conclusion.currentDurationInms);\n            Specific_for_duration_cases: {\n              conclusion.missingDuration = LswTimer.utils.fromMillisecondsToDurationstring(missingDurationInms);\n              conclusion.missingDurationInms = missingDurationInms;\n            }\n            conclusion.missingAsint = 100 - conclusion.filledAsint;\n            conclusion.missing = conclusion.missingAsint + \"%\";\n            conclusion.solved = window.eval(evaluableSource);\n            conclusion.solvable = evaluableSource;\n          }\n        }\n        this.expandColor(conclusion);\n        return conclusion;\n      };\n    }\n\n    /*\n    static COLOR_MEANING = {\n      \"red\": \"SUSPENSO\",\n      \"#e87489\": \"INSUFICIENTE\",\n      \"#5353bf\": \"SUFICIENTE\",\n      \"orange\": \"NOTABLE\",\n      \"yellow\": \"EXCELENTE\",\n      \"lime\": \"SOBRESALIENTE\",\n    };\n    //*/\n\n    static expandColor(_) {\n      const percentage = _.filledAsint;\n      const asMin = _.expectedAs === \"minimum\" ? true : false;\n      const assignedColor = (() => {\n        if (percentage <= 0) {\n          return asMin ? this.COLOR.SUSPENSO : this.COLOR.SOBRESALIENTE;\n        } else if (percentage < 20) {\n          return asMin ? this.COLOR.INSUFICIENTE : this.COLOR.EXCELENTE;\n        } else if (percentage < 40) {\n          return asMin ? this.COLOR.SUFICIENTE : this.COLOR.NOTABLE;\n        } else if (percentage < 60) {\n          return asMin ? this.COLOR.NOTABLE : this.COLOR.SUFICIENTE;\n        } else if (percentage < 80) {\n          return asMin ? this.COLOR.EXCELENTE : this.COLOR.INSUFICIENTE;\n        } else if (percentage > 80) {\n          return asMin ? this.COLOR.SOBRESALIENTE : this.COLOR.SUSPENSO;\n        } else {\n        }\n      })();\n      Object.assign(_, {\n        color: assignedColor,\n        colorMeaning: this.COLOR_MEANING[assignedColor],\n      });\n    }\n\n    static formatUrgency(txt) {\n      return parseFloat(txt.replace(/\\!/g, \"\").trim());\n    }\n\n    static isConditionByTimes(txtVal) {\n      return txtVal.trim().match(/^[0-9]+(\\.[0-9]+)?$/g);\n    }\n\n    static isConditionByDuration(txtVal) {\n      try {\n        return LswTimer.utils.fromDurationstringToMilliseconds(txtVal);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    }\n\n    static getSomeDayActions(dateToday = new Date(), concept = false, state = false) {\n      Vue.prototype.$trace(\"lsw-goals-viewer.methods.getSomeDayActions\");\n      return Vue.prototype.$lsw.database.selectMany(\"Accion\", acc => {\n        const dateInicio = LswTimer.utils.fromDatestringToDate(acc.tiene_inicio);\n        const isSameDay = LswTimer.utils.areSameDayDates(dateInicio, dateToday);\n        if (!isSameDay) {\n          return false;\n        }\n        if (concept) {\n          const isSameConcept = acc.en_concepto === concept;\n          if (!isSameConcept) {\n            return false;\n          }\n        }\n        if (state) {\n          const isSameState = acc.tiene_estado === state;\n          if (!isSameState) {\n            return false;\n          }\n        }\n        return true;\n      });\n    }\n\n  };\n\n  return LswGoals;\n\n",
              "$code.label": "LswGoals class",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-goals-viewer-prev/lsw-goals-api.js",
              "$location": {
                "start": {
                  "offset": 280,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 356,
                  "line": 15,
                  "column": 1
                }
              },
              "section": "Lsw Goals API » LswGoals class",
              "$code": "\n  const GoalFactory = class {\n\n    static validate(input) {\n      Vue.prototype.$trace(\"Lsw.GoalFactory.getTodayActions\");\n    }\n\n  }\n\n  const LswGoals = class {\n\n    static GoalFactory = GoalFactory;\n\n    static validateConcepto(val) {\n      Vue.prototype.$trace(\"LswGoals.validateConcepto\");\n      return val;\n    }\n\n    static validateMedida(val) {\n      Vue.prototype.$trace(\"LswGoals.validateMedida\");\n      try {\n\n        const isMax = val.startsWith(\"<\");\n        const isMin = val.startsWith(\">\");\n        const isLimit = isMax || isMin;\n        const innerVal = val.replace(/>|</g, \"\").trim();\n        const isNumber = (() => {\n          const numberCast = parseFloat(innerVal);\n          return !isNaN(numberCast);\n        })();\n        const comparator = isMax ? \"max\" : \"min\";\n        if (isNumber) {\n          return [`${comparator}TimesToday`, parseFloat(innerVal)];\n        } else {\n          Validate_string_or_fail: {\n            LswTimer.utils.fromDurationstringToMilliseconds(innerVal);\n          }\n          return [`${comparator}DurationToday`, innerVal];\n        }\n        return val;\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    }\n\n    static validateUrgencia(val) {\n      Vue.prototype.$trace(\"LswGoals.validateUrgencia\");\n      $ensure({ val }, 1).type(\"string\").can(it => it.trim().startsWith(\"!\"));\n      return parseInt(val.replace(/\\!/g, \"\").trim());\n    }\n\n\n    static async loadGoals() {\n      Vue.prototype.$trace(\"LswGoals.loadGoals\");\n      const output = [];\n      const errors = [];\n      console.log(\"[*] Carga de objetivos por factories:\");\n      Carga_por_factories: {\n        try {\n          const factoryIds = await Vue.prototype.$lsw.fs.scan_directory(\"/kernel/settings/goals/factory\");\n          for (let indexFactory = 0; indexFactory < factoryIds.length; indexFactory++) {\n            const factoryFilename = factoryIds[indexFactory];\n            try {\n              console.log(\"[*] Carga de objetivos por factory file:\", factoryFilename);\n              const factoryDefinition = await Vue.prototype.$lsw.fs.evaluateAsJavascriptFile(`/kernel/settings/goals/factory/${factoryFilename}`);\n              GoalFactory.validate(factoryDefinition);\n              output.push(factoryDefinition);\n            } catch (error) {\n              console.log(\"[!] Error cargando objetivo por fichero único en:\", factoryFilename);\n              errors.push(error);\n            }\n          }\n        } catch (error) {\n          console.log(\"[!] Error leyendo factories de objetivos:\", error);\n        }\n      }\n      Carga_por_el_fichero_unico: {\n        console.log(\"[*] Carga de objetivos por fichero único:\");\n        const goalsByFileCrude = await Vue.prototype.$lsw.fs.evaluateAsDotenvFileOrReturn(\"/kernel/settings/goals.env\", {});\n        const goalFiles = Object.keys(goalsByFileCrude);\n        Iterando_reglas_de_fichero:\n        for (let indexGoal = 0; indexGoal < goalFiles.length; indexGoal++) {\n          const key = goalFiles[indexGoal];\n          const val = goalsByFileCrude[key];\n          try {\n            console.log(\"[*] Carga de objetivos por clave de fichero único:\", key, val);\n            const tokens = val.split(/ *\\| */g);\n            const [concepto, medida, urgencia] = tokens;\n            let conceptoSan = concepto;\n            let medidaSan = undefined;\n            let urgenciaSan = 0;\n            conceptoSan = this.validateConcepto(concepto);\n            medidaSan = this.validateMedida(medida);\n            urgenciaSan = this.validateUrgencia(urgencia);\n            const [metodoParaMedir, medidaValor] = medidaSan;\n            console.log(conceptoSan, metodoParaMedir, medidaValor, urgenciaSan);\n            const accionesCoincidentesCompletadas = await this.getTodayActions(conceptoSan, \"completada\");\n            let porcentaje = undefined;\n            Calcular_porcentaje_actual: {\n              if(metodoParaMedir.endsWith(\"TimesToday\")) {\n                const totalTimes = accionesCoincidentesCompletadas.length;\n                porcentaje = Math.round((totalTimes / medidaValor) * 100);\n                console.log(\"CALC:\", totalTimes, medidaValor, porcentaje);\n              } else if(metodoParaMedir.endsWith(\"DurationToday\")) {\n                const totalDurationMs = LswGoals.extractDurationFromActions(accionesCoincidentesCompletadas, true);\n                porcentaje = Math.round((totalDurationMs / medidaValor) * 100);\n                console.log(\"CALC:\", totalDurationMs, medidaValor, porcentaje);\n              }\n            }\n            output.push({\n              id: conceptoSan,\n              urgencia: urgenciaSan,\n              porcentaje,\n              nombre: key,\n            });\n          } catch (error) {\n            console.log(\"[!] Error cargando objetivo por fichero único en:\", key);\n            errors.push(error);\n          }\n        }\n        console.log(\"output:\", output);\n      }\n      if (errors.length) {\n        console.error(\"[!] Errores al cargar objetivos\", errors);\n        Vue.prototype.$lsw.toasts.send({\n          title: \"Hubo errores en la carga de objetivos\",\n          text: `Los siguientes ${errors.length} se dieron al cargar los objetivos`,\n        });\n      }\n      return output;\n    }\n\n    static async getTodayActions(onlyConcept = false, onlyState = false) {\n      Vue.prototype.$trace(\"LswGoals.getTodayActions\");\n      const errores = LswErrorHandler.createGroup();\n      const allAcciones = await Vue.prototype.$lsw.database.selectMany(\"Accion\");\n      const todayDate = new Date();\n      let todayAcciones = [];\n      Iterando_acciones:\n      for (let indexAccion = 0; indexAccion < allAcciones.length; indexAccion++) {\n        const accion = allAcciones[indexAccion];\n        if (!accion.tiene_inicio) {\n          continue Iterando_acciones;\n        }\n        try {\n          const accionDate = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n          const sameDate = LswTimer.utils.areSameDayDates(todayDate, accionDate);\n          if (sameDate) {\n            todayAcciones.push(accion);\n          }\n        } catch (error) {\n          errores.push(error);\n        }\n      }\n      errores.selfThrowIfNeeded();\n      if (onlyConcept) {\n        todayAcciones = todayAcciones.filter(acc => acc.en_concepto === onlyConcept);\n      }\n      if(onlyState) {\n        todayAcciones = todayAcciones.filter(acc => acc.tiene_estado === onlyState);\n      }\n      return todayAcciones;\n    }\n\n    static async filterActionsByConcept(actions, conceptId) {\n      Vue.prototype.$trace(\"LswGoals.filterActionsByConcept\");\n      const matchedActions = [];\n      for (let indexAction = 0; indexAction < actions.length; indexAction++) {\n        const action = actions[indexAction];\n        const isMatch = action.en_concepto === conceptId;\n        if (isMatch) {\n          matchedActions.push(action);\n        }\n      }\n      return matchedActions;\n    }\n\n    static async filterActionsByState(actions, stateId) {\n      Vue.prototype.$trace(\"LswGoals.filterActionsByState\");\n      const matchedActions = [];\n      for (let indexAction = 0; indexAction < actions.length; indexAction++) {\n        const action = actions[indexAction];\n        const isMatch = action.tiene_estado === stateId;\n        if (isMatch) {\n          matchedActions.push(action);\n        }\n      }\n      return matchedActions;\n    }\n\n    static async ensureActionHasLimitedTimesToday(actionId, times, minOrMax = \"min\", options) {\n      Vue.prototype.$trace(\"LswGoals.ensureActionHasLimitedTimesToday\");\n      try {\n        const mensajeExplicativo = `${actionId} ${minOrMax === 'min' ? 'mínimo' : 'máximo'} ${times} veces hoy`;\n        const {\n          completado: completedMessage = `Sí está: ${mensajeExplicativo}`,\n          fallido: notYetMessage = `Aún no está: ${mensajeExplicativo}`,\n        } = options;\n        const salida = input => Object.assign({\n          id: mensajeExplicativo,\n          urgencia: options.urgencia || 0,\n        }, input);\n        const todayActions = await LswGoals.getTodayActions();\n        const matchedActions = await LswGoals.filterActionsByConcept(todayActions, actionId);\n        const completedActions = await LswGoals.filterActionsByState(matchedActions, \"completada\");\n        const isValid = (minOrMax === \"min\") ? completedActions.length < times : completedActions.length > times;\n        if (isValid) {\n          return salida({\n            completadas: completedActions.length,\n            mensaje: notYetMessage,\n            porcentaje: Math.round((completedActions.length / times) * 100),\n          });\n        } else {\n          return salida({\n            mensaje: completedMessage,\n            porcentaje: Math.round((completedActions.length / times) * 100),\n          });\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    static ensureActionHasMinimumTimesToday(actionId, minimumTimes, options) {\n      return this.ensureActionHasLimitedTimesToday(actionId, minimumTimes, \"min\", options);\n    }\n\n    static ensureActionHasMaximumTimesToday(actionId, maximumTimes, options) {\n      return this.ensureActionHasLimitedTimesToday(actionId, maximumTimes, \"max\", options);\n    }\n\n    static async ensureActionHasLimitedDurationToday(actionId, durationDatestring, minOrMax = \"min\", options = {}) {\n      Vue.prototype.$trace(\"LswGoals.ensureActionHasLimitedDurationToday\");\n      try {\n        const mensajeExplicativo = `${actionId} ${minOrMax === 'min' ? 'mínimo' : 'máximo'} ${durationDatestring} hoy`;\n        const minimumDurationMs = LswTimer.utils.fromDurationstringToMilliseconds(durationDatestring);\n        const {\n          completado: completedMessage = `Sí está: ${mensajeExplicativo}`,\n          fallido: notYetMessage = `Aún no está: ${mensajeExplicativo}`,\n        } = options;\n        const salida = input => Object.assign({\n          id: mensajeExplicativo,\n          urgencia: options.urgencia || 0,\n        }, input);\n        const todayActions = await LswGoals.getTodayActions();\n        const matchedActions = await LswGoals.filterActionsByConcept(todayActions, actionId);\n        const completedActions = await LswGoals.filterActionsByState(matchedActions, \"completada\");\n        let currentDurationMs = 0;\n        for (let indexActions = 0; indexActions < completedActions.length; indexActions++) {\n          const action = completedActions[indexActions];\n          try {\n            const actionDurationMs = LswTimer.utils.fromDurationstringToMilliseconds(action.tiene_duracion);\n            currentDurationMs += actionDurationMs;\n          } catch (error) {\n            // @BADLUCK.\n          }\n        }\n        const currentTotal = LswTimer.utils.fromMillisecondsToDurationstring(currentDurationMs);\n        const isValid = (minOrMax === \"min\") ? (currentDurationMs < minimumDurationMs) : (currentDurationMs > minimumDurationMs);\n        if (isValid) {\n          return salida({\n            completadas: currentTotal,\n            mensaje: notYetMessage,\n            porcentaje: Math.round((currentDurationMs / minimumDurationMs) * 100),\n          });\n        } else {\n          return salida({\n            completadas: currentTotal,\n            mensaje: completedMessage,\n            porcentaje: Math.round((currentDurationMs / minimumDurationMs) * 100),\n          });\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    static ensureActionHasMinimumDurationToday(actionId, durationDatestring, options = {}) {\n      return this.ensureActionHasLimitedDurationToday(actionId, durationDatestring, \"min\", options);\n    }\n\n    static ensureActionHasMaximumDurationToday(actionId, durationDatestring, options = {}) {\n      return this.ensureActionHasLimitedDurationToday(actionId, durationDatestring, \"max\", options);\n    }\n\n    static minTimesToday(action, times, urgencia = 0) {\n      return this.ensureActionHasLimitedTimesToday(action, times, \"min\", {\n        id: action,\n        urgencia: urgencia,\n      });\n    }\n\n    static maxTimesToday(action, times, urgencia = 0) {\n      return this.ensureActionHasLimitedTimesToday(action, times, \"max\", {\n        id: action,\n        urgencia: urgencia,\n      });\n    }\n\n    static minDurationToday(action, duration, urgencia = 0) {\n      return this.ensureActionHasLimitedDurationToday(action, duration, \"min\", {\n        id: action,\n        urgencia: urgencia,\n      });\n    }\n\n    static maxDurationToday(action, duration, urgencia = 0) {\n      return this.ensureActionHasLimitedDurationToday(action, duration, \"max\", {\n        id: action,\n        urgencia: urgencia,\n      });\n    }\n\n    static extractDurationFromActions(actions, inMilliseconds = false) {\n      let totalMs = 0;\n      for (let index = 0; index < actions.length; index++) {\n        const action = actions[index];\n        try {\n          const ms = LswTimer.utils.fromDurationstringToMilliseconds(action.tiene_duracion);\n          totalMs += ms;\n        } catch (error) {\n          // @BADLUCK\n        }\n      }\n      if (inMilliseconds) {\n        return totalMs;\n      }\n      return LswTimer.utils.fromMillisecondsToDurationstring(totalMs);\n    }\n\n  };\n\n  return LswGoals;\n\n",
              "$code.label": "LswGoals class",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswGoalsViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-goals-viewer/lsw-goals-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 98,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswGoalsViewer component",
              "$code": "Vue.component(\"LswGoalsViewer\", {\n  template: $template,\n  props: {\n    onClose: {\n      type: [Function, Boolean],\n      default: false,\n    },\n    onRefresh: {\n      type: [Function, Boolean],\n      default: false,\n    },\n    dayToAnalize: {\n      type: [Boolean, Date],\n      default: () => new Date(),\n    }\n  },\n  data() {\n    this.$trace(\"lsw-goals-viewer.data\");\n    const solverSymbols = ['👍', '✔️', '😃']\n    const penderSymbols = ['🌵', '❌', '🥶'];\n    const randomIndex = LswRandomizer.getRandomIntegerBetween(0, penderSymbols.length-1);\n    return {\n      isLoaded: false,\n      isLoadingGoals: false,\n      isFiltering: \"none\",\n      isClicking: false,\n      specifiedGoals: {},\n      interestingFields: {\n        \"colorMeaning\": \"Estado actual\",\n        \"filled\": \"Completado\",\n        \"missing\": \"Faltante\",\n        \"solved\": \"Resuelto\",\n        // \"originalConcept\": \"Concepto\",\n        // \"originalCondition\": \"Condición\",\n        // \"originalUrgency\": \"Urgencia\",\n        \"type\": \"Tipo\",\n        \"expectedAs\": \"Formato\",\n        \"expectedDuration\": \"Duración esperada\",\n        // \"expectedAsAbbr\": \"Formato abreviado\",\n        \"currentDuration\": \"Duración actual\",\n        \"missingDuration\": \"Duración faltante\",\n        \"expectedTimes\": \"Veces esperadas\",\n        \"currentTimes\": \"Veces actuales\",\n        \"missingTimes\": \"Veces faltantes\",\n        // \"currentDurationInms\": \"Duración en ms actual\",\n        // \"expectedDurationInms\": \"Duración esperada en ms\",\n        // \"filledAsint\": \"Llenado como número\",\n        // \"missingDurationInms\": \"Duración faltante en ms\",\n        // \"missingAsint\": \"Faltante como número\",\n        // \"solvable\": \"Resolvible\",\n        // \"color\": \"color\",\n        // \"urgency\": \"Urgencia\"\n        \"originalLine\": \"Origen\",\n      },\n      symbolForSolved: solverSymbols[randomIndex],\n      symbolForPending: penderSymbols[randomIndex],\n      selectedGoal: false,\n      report: [],\n      summary: false,\n    };\n  },\n  methods: {\n    async selectGoal(goal) {\n      this.$trace(\"lsw-goals-viewer.methods.selectGoal\");\n      if(this.selectedGoal === goal) {\n        this.selectedGoal = undefined;\n      } else {\n        this.selectedGoal = goal;\n      }\n      await this.loadGoalSpecification(goal);\n    },\n    selectFilter(id) {\n      this.$trace(\"lsw-goals-viewer.methods.selectFilter\");\n      this.isFiltering = id;\n    },\n    async loadGoalSpecification(goal) {\n      this.$trace(\"lsw-goals-viewer.methods.loadGoalSpecification\");\n      try {\n        this.isLoadingGoals = true;\n        const filepath = \"/kernel/goals/todos/\" + goal.concept + \".md\";\n        const filecontent = await this.$lsw.fs.read_file(filepath);\n        const parsedContent = LswMarkdown.global.parse(filecontent);\n        this.specifiedGoals[goal.concept] = `<div class=\"markdown_texto\">${parsedContent}</div>`;\n        return parsedContent;\n      } catch (error) {\n        return false;\n      } finally {\n        this.isLoadingGoals = false;\n      }\n    },\n    passesFilter(goal) {\n      this.$trace(\"lsw-goals-viewer.methods.passesFilter\");\n      if(this.isFiltering === \"none\") {\n        return true;\n      } else if(this.isFiltering === \"completed\") {\n        return goal.solved === true;\n      } else {\n        return goal.solved === false;\n      }\n    },\n    async loadGoals() {\n      this.$trace(\"lsw-goals-viewer.methods.loadGoals\");\n      this.isLoaded = false;\n      this.report = await LswGoals.getGoalsReport(this.dayToAnalize);\n      let resolved = 0;\n      let failed = 0;\n\n      for(let index=0; index<this.report.goals.length; index++) {\n        const goal = this.report.goals[index];\n        if(goal.solved) {\n          resolved++;\n        } else {\n          failed++;\n        }\n      }\n      this.summary = {\n        total: this.report.goals.length,\n        resolved,\n        failed,\n      };\n      this.isLoaded = true;\n    },\n    openGoalsFile() {\n      this.$trace(\"lsw-goals-viewer.methods.openGoalsFile\");\n      this.$dialogs.open({\n        title: \"Editar objetivos\",\n        template: `\n          <div>\n            <lsw-filesystem-explorer opened-by=\"/kernel/goals/goals.week\" :absolute-layout=\"true\" />\n          </div>\n        `\n      });\n    },\n    openRecordsDirectory() {\n      this.$trace(\"lsw-goals-viewer.methods.saveMoment\");\n      this.$dialogs.open({\n        title: \"Ver récords anteriores\",\n        template: `\n          <div>\n            <lsw-filesystem-explorer opened-by=\"/kernel/goals/records\" :absolute-layout=\"true\" />\n          </div>\n        `\n      });\n    },\n    openRecordsViewer() {\n      this.$trace(\"lsw-goals-viewer.methods.openRecordsViewer\");\n      this.$dialogs.open({\n        title: \"Visualizar récords\",\n        template: `\n          <div class=\"pad_1\">\n            <lsw-goals-records-viewer />\n          </div>\n        `\n      });\n    },\n    openWeekPlanner() {\n      this.$trace(\"lsw-goals-viewer.methods.openWeekPlanner\");\n      this.$dialogs.open({\n        title: \"Planificador de semana\",\n        template: `\n          <div class=\"pad_1\">\n            <lsw-week-planner />\n          </div>\n        `\n      });\n    },\n    async saveMoment() {\n      this.$trace(\"lsw-goals-viewer.methods.saveMoment\");\n      const dayUid = LswTimer.utils.fromDateToDatestring(new Date(), false, false, true).replace(/\\/|\\:/g, \"-\").replace(/ .*$/g, \"\");\n      const filepath = \"/kernel/goals/records/\" + dayUid + \".json\";\n      const reportSnapshot = Object.assign({\n        date: LswTimer.utils.fromDateToDatestring(this.dayToAnalize || new Date()),\n      }, this.report, {});\n      const filecontents = JSON.stringify(reportSnapshot, null, 2);\n      await this.$lsw.fs.write_file(filepath, filecontents);\n      this.$lsw.toasts.send({\n        title: \"Estadísticas del día guardadas\",\n        text: `En: ${filepath}`\n      });\n    },\n    getAbbrvWord(id) {\n      return id === \"min\" ? \"🔺\" : \"🔻\";\n      return id === \"min\" ? \"mínimo\" : \"máximo\";\n    },\n    async editTodoOfGoal(goal) {\n      this.$trace(\"lsw-goals-viewer.methods.editTodoOfGoal\");\n      const goalFilepath = `/kernel/goals/todos/${goal.concept}.md`;\n      const exists = await this.$lsw.fs.exists(goalFilepath);\n      if(!exists) {\n        await this.$lsw.fs.write_file(goalFilepath, \"\");\n      }\n      this.$lsw.dialogs.open({\n        title: \"Detallando objetivo\",\n        template: `<lsw-filesystem-explorer :opened-by=\"goalFilepath\" :absolute-layout=\"true\" />`,\n        factory: {\n          data: { goal, goalFilepath },\n          methods: { }\n        }\n      });\n    },\n    async importGoalsToDay() {\n      this.$trace(\"lsw-goals-viewer.methods.importGoalsToDay\");\n      const originalGoals = await Vue.prototype.$lsw.fs.evaluateAsWeekFileOrReturn(\"/kernel/goals/goals.week\", []);\n      const dayString = LswTimer.utils.fromDateToDatestring(this.dayToAnalize, true);\n      const weekdayString = LswGoals.fromDateToWeekday(this.dayToAnalize);\n      const goalsMatched = originalGoals.filter(goal => {\n        if(goal.type !== \"SET\") {\n          return false;\n        }\n        Filtro_de_goal_segun_dia: {\n          const {\n            from: goalBegin,\n            to: goalEnd,\n            type: goalType,\n            concept: goalConcept,\n            duration: goalDuration,\n            hour: goalHour,\n            minute: goalMinute,\n            weekday: goalWeekday,\n          } = goal;\n          // No excede el «desde fecha».\n          if(goalBegin !== \"*\") {\n            if(dayString < goalBegin) {\n              return false;\n            }\n          }\n          // No excede el «hasta fecha»\n          if(goalEnd !== \"*\") {\n            if(dayString > goalEnd) {\n              return false;\n            }\n          }\n          // Coincide con el «dia de la semana»\n          if(goalWeekday !== \"*\") {\n            if(weekdayString !== goalWeekday) {\n              return false;\n            }\n          }\n        }\n        return true;\n      });\n      const goalsMissing = [];\n      const accionesDia = await this.$lsw.database.select(\"Accion\", acc => acc.tiene_inicio.startsWith(dayString));\n      Iterating_objetivos:\n      for(let indexGoal=0; indexGoal<goalsMatched.length; indexGoal++) {\n        const goalMatched = goalsMatched[indexGoal];\n        const {\n          from: goalBegin,\n          to: goalEnd,\n          type: goalType,\n          concept: goalConcept,\n          duration: goalDuration,\n          hour: goalHour,\n          minute: goalMinute,\n          weekday: goalWeekday,\n        } = goalMatched;\n        const presuntoInicio = dayString + \" \" + goalMatched.hour + \":\" + goalMatched.minute;\n        let missingAccion = {\n          ast: goalMatched,\n          acc: {\n            en_concepto: goalConcept,\n            tiene_estado: \"pendiente\",\n            tiene_inicio: presuntoInicio,\n            tiene_duracion: goalDuration || \"1h\",\n            tiene_parametros: \"[*semanal]\",\n            tiene_descripcion: \"\",\n            tiene_comentarios: \"\",\n          }\n        };\n        Iterating_acciones:\n        for(let indexAcc=0; indexAcc<accionesDia.length; indexAcc++) {\n          const accionDia = accionesDia[indexAcc];\n          const matchesParameter = accionDia.tiene_parametros.indexOf(\"[*semanal]\") !== -1;\n          const matchesTime = accionDia.tiene_inicio.startsWith(presuntoInicio);\n          const matchesConcept = accionDia.tiene_inicio.startsWith(presuntoInicio);\n          if(matchesParameter && matchesTime && matchesConcept) {\n            missingAccion = false;\n            break Iterating_acciones;\n          };\n        }\n        if(missingAccion) {\n          goalsMissing.push(missingAccion);\n        }\n      }\n      if(!goalsMissing.length) {\n        return this.$lsw.dialogs.open({\n          title: \"No hay objetivos por importar\",\n          template: `\n            <div class=\"pad_1\">\n              <div>No hay objetivos por importar actualmente.</div>\n            </div>\n          `\n        });\n      }\n      const confirmation = await this.$lsw.dialogs.open({\n        title: \"Importar objetivos a día\",\n        template: `\n          <div class=\"pad_1\">\n            <div>¿Seguro que quieres importar los objetivos al día seleccionado?</div>\n            <div class=\"pad_vertical_2\">Se añadirán las siguientes {{ goalsToImport.length }} acciones:</div>\n            <ul class=\"margin_vertical_0\">\n              <li v-for=\"goal, goalIndex in goalsToImport\" v-bind:key=\"'goal_' + goalIndex\">\n                <div>{{ currentWeekday }}, {{ currentDay }} ➞ {{ goal.ast.hour }}:{{ goal.ast.minute }}@{{ goal.acc.en_concepto }}</div>\n              </li>\n            </ul>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"() => accept(true)\">Aceptar</button>\n              </div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            currentWeekday: LswGoals.fromDateToWeekday(this.dayToAnalize),\n            currentDay: dayString,\n            goalsToImport: goalsMissing\n          }\n        }\n      });\n      if(confirmation !== true) {\n        return;\n      }\n      await this.$lsw.database.insertMany(\"Accion\", goalsMissing.map(goalMetadata => goalMetadata.acc));\n      this.$lsw.toasts.send({\n        title: `Se insertaron ${goalsMissing.length} acciones`,\n        text: `Los objetivos generaron ${goalsMissing.length} acciones para el día seleccionado`\n      });\n      this.updateCalendario();\n    },\n    updateCalendario() {\n      this.$trace(\"lsw-goals-viewer.methods.updateCalendario\");\n      try {\n        LswDom.findVue(\".lsw_agenda\").reloadDateTasks();\n      } catch (error) {\n        // @BADLUCK\n      }\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-goals-viewer.mounted\");\n    this.loadGoals();\n  },\n  unmounted() {\n    this.$trace(\"lsw-goals-viewer.unmounted\");\n  }\n});\n",
              "$code.label": "LswGoalsViewer API",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-goals-viewer-prev/lsw-goals-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 98,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswGoalsViewer component",
              "$code": "Vue.component(\"LswGoalsViewer\", {\n  template: $template,\n  props: {\n    onClose: {\n      type: [Function, Boolean],\n      default: false,\n    },\n    onRefresh: {\n      type: [Function, Boolean],\n      default: false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-goals-viewer.data\");\n    return {\n      isLoaded: false,\n      goalsData: false,\n      isShowingBars: true,\n      completedGoalsCounter: 0,\n      missingGoalsCounter: 0,\n    };\n  },\n  methods: {\n    async loadGoals() {\n      this.$trace(\"lsw-goals-viewer.methods.loadGoals\");\n      const allGoals = await LswGoals.loadGoals();\n      console.log(\"allGoals\", allGoals);\n      this.goalsData = allGoals;\n      for(let indexGoal=0; indexGoal<allGoals.length; indexGoal++) {\n        const goal = allGoals[indexGoal];\n        const it = this.expandGoal(goal);\n        try {\n          if(it[\"tiene el\"] >= 100) {\n            this.completedGoalsCounter++;\n          } else {\n            this.missingGoalsCounter++;\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n      this.isLoaded = true;\n    },\n    toggleBars() {\n      this.$trace(\"lsw-goals-viewer.methods.emitClose\");\n      const graphComp = this.$refs.barsGraph;\n      graphComp.selectPropertyViewByName(\"falta el\");\n    },\n    emitClose() {\n      this.$trace(\"lsw-goals-viewer.methods.emitClose\");\n      if(typeof this.onClose === \"function\") {\n        this.onClose(this);\n      }\n    },\n    emitRefresh() {\n      this.$trace(\"lsw-goals-viewer.methods.emitRefresh\");\n      if(typeof this.onRefresh === \"function\") {\n        this.onRefresh(this);\n      }\n    },\n    openGoalsDirectory() {\n      this.$trace(\"lsw-goals-viewer.methods.openGoalsDirectory\");\n      this.$lsw.dialogs.open({\n        title: \"Directorio de objetivos\",\n        template: `\n          <lsw-filesystem-explorer :absolute-layout=\"true\" opened-by=\"/kernel/goals/goals.week\" />\n        `\n      });\n    },\n    expandGoal(goal) {\n      this.$trace(\"lsw-goals-viewer.methods.expandGoal\");\n      return Object.assign({}, goal, {\n          \"tiene el\": goal.porcentaje,\n          \"falta el\": 100-goal.porcentaje\n      });\n    },\n    sortGoals(g1, g2) {\n      this.$trace(\"lsw-goals-viewer.methods.sortGoals\");\n      const u1 = g1.urgencia || 0;\n      const u2 = g2.urgencia || 0;\n      const c1 = g1[\"tiene el\"] || 0;\n      const c2 = g2[\"tiene el\"] || 0;\n      const g1over = c1 > 100;\n      const g2over = c2 > 100;\n      if(g2over) return -1;\n      if(g1over) return 1;\n      if(u1 > u2) return -1;\n      if(u1 < u2) return 1;\n      if(c1 < c2) return -1;\n      if(c1 > c2) return 1;\n      return 0;\n    },\n    adaptSample(goalsData) {\n      this.$trace(\"lsw-goals-viewer.methods.adaptSample\");\n      return goalsData.map(it => {\n        const expandedGoal = this.expandGoal(it);\n        return expandedGoal;\n      }).sort((...args) => {\n        return this.sortGoals(...args);\n      });\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-goals-viewer.mounted\");\n    this.loadGoals();\n  },\n  unmounted() {\n    this.$trace(\"lsw-goals-viewer.unmounted\");\n  }\n});\n",
              "$code.label": "LswGoalsViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswHomepage component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-homepage/lsw-homepage.js",
              "$location": {
                "start": {
                  "offset": 1556,
                  "line": 62,
                  "column": 1
                },
                "end": {
                  "offset": 1648,
                  "line": 63,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswHomepage component",
              "$code": "Vue.component(\"LswHomepage\", {\n  template: $template,\n  props: {\n    appsThrower: {\n      type: Object,\n      required: true,\n    },\n    onOpenApplicationEvent: {\n      type: Function,\n      default: () => {},\n    }\n  },\n  data() {\n    this.$trace(\"lsw-homepage.data\");\n    return {\n      isLoaded: false,\n      ownApps: {},\n      lastAppliedFilter: false,\n      filterSearchText: \"\",\n      filteredApps: {},\n      systemApps: launchables,\n    };\n  },\n  methods: {\n    registerApp(appName, appData, force = false, silence = false) {\n      this.$trace(\"lsw-homepage.methods.registerApp\");\n      try {\n        if ((appName in this.ownApps) && !force) {\n          throw new Error(`App «${appName}» is already registered`);\n        }\n        Validate_app_data: {\n          const $ensureAppData = $ensure({ [appName]: appData }, 1).type(\"object\");\n          $ensureAppData.to.have.keys([\n            \"label\", \n            \"event\",\n          ]);\n        }\n        this.ownApps[appName] = appData;\n      } catch (error) {\n        if (!silence) {\n          this.$lsw.toasts.showError(error);\n        }\n      }\n    },\n    filterApps() {\n      this.$trace(\"lsw-homepage.methods.filterApps\");\n      const s = this.filterSearchText.toLowerCase();\n      if (s.trim() === \"\") {\n        this.lastAppliedFilter = false;\n        return this.filteredApps = Object.assign({}, this.ownApps);\n      }\n      this.filteredApps = {};\n      for (let appName in this.ownApps) {\n        const appData = this.ownApps[appName];\n        const pos = JSON.stringify([appName, appData]).toLowerCase().indexOf(s);\n        if (pos !== -1) {\n          this.filteredApps[appName] = appData;\n        }\n      }\n      this.lastAppliedFilter = s;\n      this.isLoaded = true;\n    },\n    async loadOwnApps() {\n      this.$trace(\"lsw-homepage.methods.loadOwnApps\");\n      this.ownApps = {};\n      System_apps: {\n        for (let indexApp = 0; indexApp < this.systemApps.length; indexApp++) {\n          const app = this.systemApps[indexApp];\n          try {\n            this.registerApp(app.label, app);\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      }\n      Custom_apps: {\n        const appsFilesMap = await this.$lsw.fs.read_directory(\"/kernel/apps\");\n        const appsFiles = Object.keys(appsFilesMap);\n        for (let indexApp = 0; indexApp < appsFiles.length; indexApp++) {\n          const appName = appsFiles[indexApp];\n          try {\n            const appData = await lsw.fs.evaluateAsJavascriptFileOrReturn(\"/kernel/apps/\" + appName + \"/load.js\", false);\n            this.registerApp(appName, appData);\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      }\n      this.filterApps();\n    },\n    openAppsDirectory() {\n      this.$trace(\"lsw-homepage.methods.openAppsDirectory\");\n      this.$lsw.dialogs.open({\n        title: \"Directorio de apps\",\n        template: `<lsw-filesystem-explorer opened-by=\"/kernel/apps\" />`,\n      });\n    },\n    async abrirApp(appId) {\n      this.$trace(\"lsw-homepage.methods.abrirApp\");\n      this.$lsw.toasts.send({\n        title: \"Yendo a: \" + appId,\n      });\n      this.appsThrower.selectApplication(appId);\n      this.onOpenApplicationEvent();\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-homepage.mounted\");\n    this.loadOwnApps();\n  },\n  unmounted() {\n    this.$trace(\"lsw-homepage.unmounted\");\n\n  }\n});\n",
              "$code.label": "LswHomepage API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswInlineTagsPicker component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-inline-tags-picker/lsw-inline-tags-picker.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 108,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswInlineTagsPicker component",
              "$code": "Vue.component(\"LswInlineTagsPicker\", {\n  template: $template,\n  props: {\n    from: {\n      type: Object,\n      default: () => []\n    },\n    field: {\n      type: String,\n      required: true,\n    },\n    onChoose: {\n      type: [Function, Boolean],\n      default: () => false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-inline-tags-picker.data\");\n    return {\n      isLoaded: false,\n      fromData: this.from,\n      digestedData: [],\n      searchText: \"\",\n      selectedRow: false,\n    };\n  },\n  methods: {\n    digestSearch() {\n      this.$trace(\"lsw-inline-tags-picker.methods.digestSearch\");\n      this.isLoaded = false;\n      if (this.searchText.trim() === \"\") {\n        this.digestedData = this.fromData;\n      } else {\n        this.digestedData = this.fromData.filter(row => {\n          return JSON.stringify(row).toLowerCase().indexOf(this.searchText.toLowerCase()) !== -1;\n        });\n      }\n      this.isLoaded = true;\n    },\n    selectRow(row) {\n      this.$trace(\"lsw-inline-tags-picker.methods.selectRow\");\n      this.selectedRow = row;\n      if (typeof this.onChoose === \"function\") {\n        this.onChoose(row, this);\n      }\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-inline-tags-picker.mounted\");\n      this.digestSearch();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswInlineTagsPicker API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswJsFileCoverageViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-js-file-coverage-viewer/lsw-js-file-coverage-viewer.js",
              "$location": {
                "start": {
                  "offset": 3,
                  "line": 2,
                  "column": 1
                },
                "end": {
                  "offset": 145,
                  "line": 3,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswJsFileCoverageViewer component",
              "$code": "Vue.component(\"LswJsFileCoverageViewer\", {\n  template: $ template,\n  props: {\n    source: {\n      type: String,\n      required: true,\n    },\n    coverage: {\n      type: [Object, Boolean],\n      default: () => false,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-js-file-coverage-viewer.data\");\n    return {\n      isLoaded: false,\n      isExpanded: false,\n      beautifiedSource: false,\n    };\n  },\n  methods: {\n    toggleExpansion() {\n      this.$trace(\"lsw-js-file-coverage-viewer.methods.toggleExpansion\");\n      this.isExpanded = !this.isExpanded;\n    },\n    async load() {\n      this.$trace(\"lsw-js-file-coverage-viewer.methods.load\");\n      await LswLazyLoads.loadHighlightJs();\n      await LswLazyLoads.loadBeautifier();\n      try {\n        this.beautifiedSource = beautifier.js(this.source);\n      } catch (error) {\n        // @BADLUCK!\n        this.beautifiedSource = this.source;\n      } finally {\n        this.isLoaded = true;\n      }\n      this.$nextTick(() => {\n        hljs.highlightElement(this.$refs.sourceTag);\n      });\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-js-file-coverage-viewer.mounted\");\n      await this.load();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswJsFileCoverageViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswJsInspector component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-js-inspector/lsw-js-inspector.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswJsInspector component",
              "$code": "(() => {\n  const emptyOutput = {};\n  const InspectorTab = class {\n    constructor(options = {}, inspector) {\n      this.inspector = inspector;\n      this.uid = LswRandomizer.getRandomString(5);\n      this.id = inspector.tabs.length;\n      // this.inputSource = \"Vue.options.components.LswCalendario.options.template\";\n      this.inputSource = \"Vue\";\n      this.pathSource = '';\n      this.transformerSource = '';\n      this.searchSource = '';\n      Object.assign(this, options);\n    }\n  }\n  Vue.component(\"LswJsInspector\", {\n    template: $template,\n    props: {\n      initialBase: {\n        type: [],\n        default: () => window,\n      }\n    },\n    data() {\n      this.$trace(\"lsw-js-inspector.data\");\n      return {\n        isDigesting: false,\n        selectedTab: undefined,\n        base: this.initialBase,\n        tabs: [],\n        errorGettingInput: false,\n        errorPathingInput: false,\n        errorTransformingInput: false,\n        output: emptyOutput,\n        emptyOutput: emptyOutput,\n        digestTimeoutId: undefined,\n        digestTimeoutMilliseconds: 1000,\n      };\n    },\n    methods: {\n      addTab(specifications = {}) {\n        this.$trace(\"lsw-js-inspector.methods.addTab\");\n        const anotherTab = new InspectorTab(specifications, this);\n        this.tabs.push(anotherTab);\n        this.selectedTab = anotherTab.uid;\n        return anotherTab;\n      },\n      cloneTab() {\n        const specifications = {\n          input: this.inputSource,\n          path: this.pathSource,\n          transformer: this.transformerSource,\n          search: this.searchSource,\n        };\n        const anotherTab = new InspectorTab(specifications, this);\n        this.tabs.push(anotherTab);\n        this.selectedTab = anotherTab.uid;\n        return anotherTab;\n      },\n      async digestInput() {\n        try {\n          this.$trace(\"lsw-js-inspector.methods.digestInput\");\n          this.isDigesting = true;\n          clearTimeout(this.digestTimeoutId);\n          const currentTab = this.tabs.filter(tab => tab.uid === this.selectedTab)[0];\n          let transformedInput = undefined;\n          Getting_input: {\n            try {\n              if (currentTab.inputSource.trim() === \"\") {\n                throw new Error(\"Este campo es requerido para iniciar la exploración\");\n              }\n              const callback = LswUtils.createAsyncFunction(\"return \" + currentTab.inputSource, [\"it\"])\n              transformedInput = await callback.call(this, transformedInput);\n            } catch (error) {\n              this.errorGettingInput = error;\n              throw error;\n            }\n          }\n          Pathing_input: {\n            try {\n              if (currentTab.pathSource.trim() === \"\") {\n                break Pathing_input;\n              }\n              transformedInput = jmespath.search(transformedInput, currentTab.pathSource);\n            } catch (error) {\n              this.errorPathingInput = error;\n              throw error;\n            }\n          }\n          Transforming_input: {\n            try {\n              if (currentTab.transformerSource.trim() === \"\") {\n                break Transforming_input;\n              }\n              transformedInput = await LswUtils.createAsyncFunction(currentTab.transformerSource, [\"it\"]).call(this, transformedInput);\n            } catch (error) {\n              this.errorTransformingInput = error;\n              throw error;\n            }\n          }\n          Set_output: {\n            this.outputValue = transformedInput;\n            this.output = LswJsInspector.stringifyBeautify(transformedInput);\n          }\n        } catch (error) {\n          console.log(error);\n          this.$lsw.toasts.showError(error);\n        } finally {\n          this.isDigesting = false;\n        }\n      },\n      backProperty(tabIndex) {\n        this.$trace(\"lsw-js-inspector.methods.backProperty\");\n        const tab = this.tabs[tabIndex];\n        const propPath = tab.inputSource.trim();\n        let newPath = undefined;\n        let pos = undefined;\n        if (propPath.endsWith(\"]\")) {\n          pos = propPath.lastIndexOf(\"[\");\n        } else {\n          pos = propPath.lastIndexOf(\".\");\n        }\n        const shouldOpenGlobal = (pos === 0) || (propPath.trim() === '');\n        const shouldIgnore = (pos === -1) && (propPath.trim() !== '');\n        if (shouldIgnore) {\n          return;\n        } else if (shouldOpenGlobal) {\n          tab.inputSource = \"window\";\n        } else {\n          newPath = propPath.slice(0, pos);\n          tab.inputSource = newPath;\n        }\n        this.digestInput();\n      },\n      openProperty(tabIndex, propId) {\n        this.$trace(\"lsw-js-inspector.methods.openProperty\");\n        const tab = this.tabs[tabIndex];\n        const propRegex = /^[A-Za-z$_][A-Za-z0-9$_]*$/g;\n        const byString = !propRegex.test(propId);\n        const appendment = byString ? `[${JSON.stringify(propId)}]` : `.${propId}`;\n        tab.inputSource += appendment;\n        this.digestInput();\n      },\n      updateSearchWithDelay(tab, searchSource) {\n        this.$trace(\"lsw-js-inspector.methods.updateSearchWithDelay\");\n        clearTimeout(this.digestTimeoutId);\n        this.digestTimeoutId = setTimeout(() => {\n          tab.searchSource = searchSource;\n          this.digestInput();\n        }, this.digestTimeoutMilliseconds);\n      },\n      resetTabId(tabIndex) {\n        this.$trace(\"lsw-js-inspector.methods.resetTabId\");\n        this.tabs[tabIndex].idSource = '';\n        this.digestInput();\n      },\n      resetTabInput(tabIndex) {\n        this.$trace(\"lsw-js-inspector.methods.resetTabInput\");\n        this.tabs[tabIndex].inputSource = '';\n        this.digestInput();\n      },\n      resetTabPath(tabIndex) {\n        this.$trace(\"lsw-js-inspector.methods.resetTabPath\");\n        this.tabs[tabIndex].pathSource = '';\n        this.digestInput();\n      },\n      resetTabTransformer(tabIndex) {\n        this.$trace(\"lsw-js-inspector.methods.resetTabTransformer\");\n        this.tabs[tabIndex].transformerSource = '';\n        this.digestInput();\n      },\n      resetTabSearch(tabIndex) {\n        this.$trace(\"lsw-js-inspector.methods.resetTabSearch\");\n        this.tabs[tabIndex].searchSource = '';\n        this.digestInput();\n      },\n      openConsole() {\n        this.$trace(\"lsw-js-inspector.methods.openConsole\");\n        this.$consoleHooker.toggleConsole();\n      },\n    },\n    watch: {\n      selectedTab() {\n        this.digestInput();\n      }\n    },\n    async mounted() {\n      try {\n        this.$trace(\"lsw-js-inspector.mounted\");\n        await LswLazyLoads.loadBeautifier();\n        await LswLazyLoads.loadJmespath();\n        await LswJsInspector.initializeFully();\n        if (this.tabs.length === 0) {\n          this.selectedTab = this.addTab({\n            id: \"Principal\",\n          }).uid;\n        }\n        await this.digestInput();\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  });\n})();\n",
              "$code.label": "LswJsInspector API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswJsViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-js-viewer/lsw-js-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswJsViewer component",
              "$code": "Vue.component(\"LswJsViewer\", {\n  template: $template,\n  props: {\n    source: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-js-viewer.data\");\n    return {\n      isLoaded: false,\n      isExpanded: false,\n      beautifiedSource: false,\n    };\n  },\n  methods: {\n    toggleExpansion() {\n      this.isExpanded = !this.isExpanded;\n    },\n    async load() {\n      await LswLazyLoads.loadHighlightJs();\n      await LswLazyLoads.loadBeautifier();\n      try {\n        this.beautifiedSource = beautifier.js(this.source);\n      } catch (error) {\n        // @BADLUCK!\n        this.beautifiedSource = this.source;\n      } finally {\n        this.isLoaded = true;\n      }\n      this.$nextTick(() => {\n        hljs.highlightElement(this.$refs.sourceTag);\n      });\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-js-viewer.mounted\");\n      await this.load();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswJsViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswKeyboard1 component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-keyboard-1/lsw-keyboard-1.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 94,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswKeyboard1 component",
              "$code": "Vue.component(\"LswKeyboard1\", {\n  template: $template,\n  props: {\n    initialText: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-keyboard-1.data\");\n    return {\n      hasFocus: false,\n      isShowingText: true,\n      teclasPresionadas: [],\n      teclado: [\n        [\n          {keys:['\\\\','ª','º'],text:'\\\\',topLeftText:'ª',bottomLeftText:'º'},\n          {keys:['1','!','|'],text:'1',topLeftText:'!',bottomLeftText:'|'},\n          {keys:['2','\"','@'],text:'2',topLeftText:'\"',bottomLeftText:'@'},\n          {keys:['3','·','#'],text:'3',topLeftText:'·',bottomLeftText:'#'},\n          {keys:['4','$','~'],text:'4',topLeftText:'$',bottomLeftText:'~'},\n          {keys:['5','%','½'],text:'5',topLeftText:'%',bottomLeftText:'½'},\n          {keys:['6','&','¬'],text:'6',topLeftText:'&',bottomLeftText:'¬'},\n          {keys:['7','/','{'],text:'7',topLeftText:'/',bottomLeftText:'{'},\n          {keys:['8','(','['],text:'8',topLeftText:'(',bottomLeftText:'['},\n          {keys:['9',')'],text:'9',topLeftText:')',bottomLeftText:''},\n          {keys:['0','=','}'],text:'0',topLeftText:'=',bottomLeftText:''},\n          {keys:[\"'\",'\\\\','?'],text:\"'\",topLeftText:'?',bottomLeftText:'\\\\'},\n          {keys:['¡','¿','~'],text:\"¡\",topLeftText:'¿',bottomLeftText:'~'},\n        ],[\n          {keys:['⇒'],text:'⇒',topLeftText:'',bottomLeftText:'',style:'flex:1.25'},\n          {keys:['Q','q'],text:'Q',topLeftText:'',bottomLeftText:''},\n          {keys:['W','w'],text:'W',topLeftText:'',bottomLeftText:''},\n          {keys:['E','e'],text:'E',topLeftText:'',bottomLeftText:''},\n          {keys:['R','r'],text:'R',topLeftText:'',bottomLeftText:''},\n          {keys:['T','t'],text:'T',topLeftText:'',bottomLeftText:''},\n          {keys:['Y','y'],text:'Y',topLeftText:'',bottomLeftText:''},\n          {keys:['U','u'],text:'U',topLeftText:'',bottomLeftText:''},\n          {keys:['I','i'],text:'I',topLeftText:'',bottomLeftText:''},\n          {keys:['O','o'],text:'O',topLeftText:'',bottomLeftText:''},\n          {keys:['P','p'],text:'P',topLeftText:'',bottomLeftText:''},\n          {keys:['^','`','['],text:'^',topLeftText:'`',bottomLeftText:'['},\n          {keys:['*','+',']'],text:'*',topLeftText:'+',bottomLeftText:']'},\n        ],[\n          {keys:['♦️'],text:'♦️',topLeftText:'',bottomLeftText:'',style:'flex:1.5'},\n          {keys:['A','a'],text:'A',topLeftText:'',bottomLeftText:''},\n          {keys:['S','s'],text:'S',topLeftText:'',bottomLeftText:''},\n          {keys:['D','d'],text:'D',topLeftText:'',bottomLeftText:''},\n          {keys:['F','f'],text:'F',topLeftText:'',bottomLeftText:''},\n          {keys:['G','g'],text:'G',topLeftText:'',bottomLeftText:''},\n          {keys:['H','h'],text:'H',topLeftText:'',bottomLeftText:''},\n          {keys:['J','j'],text:'J',topLeftText:'',bottomLeftText:''},\n          {keys:['K','k'],text:'K',topLeftText:'',bottomLeftText:''},\n          {keys:['L','l'],text:'L',topLeftText:'',bottomLeftText:''},\n          {keys:['Ñ','ñ'],text:'Ñ',topLeftText:'',bottomLeftText:''},\n          {keys:['¨'],text:'¨',topLeftText:'´',bottomLeftText:'{'},\n          {keys:['ç','Ç'],text:'ç',topLeftText:'',bottomLeftText:'}'},\n        ],[\n          {keys:['🔺'],text:'🔺',topLeftText:'',bottomLeftText:''},\n          {keys:['>'],text:'>',topLeftText:'<',bottomLeftText:''},\n          {keys:['Z','z'],text:'Z',topLeftText:'',bottomLeftText:''},\n          {keys:['X','x'],text:'X',topLeftText:'',bottomLeftText:''},\n          {keys:['C','c'],text:'C',topLeftText:'',bottomLeftText:''},\n          {keys:['V','v'],text:'V',topLeftText:'',bottomLeftText:''},\n          {keys:['B','b'],text:'B',topLeftText:'',bottomLeftText:''},\n          {keys:['N','n'],text:'N',topLeftText:'',bottomLeftText:''},\n          {keys:['M','m'],text:'M',topLeftText:'',bottomLeftText:''},\n          {keys:[','],text:',',topLeftText:';',bottomLeftText:''},\n          {keys:['.'],text:'.',topLeftText:':',bottomLeftText:''},\n          {keys:['-'],text:'-',topLeftText:'_',bottomLeftText:''},\n          {keys:['🔺'],text:'🔺',topLeftText:'',bottomLeftText:'',style:'flex:2', fontSize:'8px'},\n        ],[\n          {keys:['Control'],text:'Ctrl',topLeftText:'',bottomLeftText:'',fontSize:'8px'},\n          {keys:['Alt'],text:'Alt',topLeftText:'',bottomLeftText:'',fontSize:'8px'},\n          {keys:['Space'],text:'Space',topLeftText:'',bottomLeftText:'',style:'flex:6',fontSize:'8px'},\n          {keys:['AltGraph'],text:'Alt Gr',topLeftText:'',bottomLeftText:'',fontSize:'8px'},\n          {keys:['Fn'],text:'Fn',topLeftText:'',bottomLeftText:'',fontSize:'8px'},\n        ],\n      ],\n      botonesTop: [{\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }],\n      botonesLeft: [{\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }],\n      botonesRight: [{\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }],\n      botonesBottom: [{\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }, {\n        text: \"*\",\n        click: ()=>{},\n      }],\n    };\n  },\n  methods: {\n    async load() {\n      \n    },\n    hasPressedKey(keys) {\n      this.$trace(\"lsw-keyboard-1.methods.hasPressedKey\");\n      for(let index=0; index<keys.length; index++) {\n        const key = keys[index];\n        const isPressed = this.teclasPresionadas.indexOf(key) !== -1;\n        if(isPressed) {\n          return true;\n        }\n      }\n      return false;\n    },\n    pressKey(event) {\n      this.$trace(\"lsw-keyboard-1.methods.pressKey\");\n      this.teclasPresionadas.push(event.key);\n      this.dispatchKeyPress(event.key, event);\n    },\n    releaseKey(event) {\n      this.$trace(\"lsw-keyboard-1.methods.releaseKey\");\n      console.log(event.key);\n      const pos = this.teclasPresionadas.indexOf(event.key);\n      if(pos !== -1) {\n        this.teclasPresionadas.splice(pos, 1);\n      }\n    },\n    notifyFocus() {\n      this.$trace(\"lsw-keyboard-1.methods.notifyFocus\");\n      this.hasFocus = true;\n    },\n    notifyBlur() {\n      this.$trace(\"lsw-keyboard-1.methods.notifyBlur\");\n      this.hasFocus = false;\n    },\n    dispatchKeyPress(keyId, event) {\n      this.$trace(\"lsw-keyboard-1.methods.dispatchKeyPress\");\n      console.log(keyId);\n      this.$refs.keyboardText.dispatchKeyPress(keyId, event);\n    },\n    gainFocus() {\n      this.$trace(\"lsw-keyboard-1.methods.gainFocus\");\n      this.$refs.keyboardMainElement.focus();\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-keyboard-1.mounted\");\n      this.load();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswKeyboard1 API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswLoadingBar component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-loading-bar/lsw-loading-bar.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 96,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswLoadingBar component",
              "$code": "Vue.component(\"LswLoadingBar\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-loading-bar.data\");\n    return {\n      loadedPercentage: 100\n    };\n  },\n  methods: {\n    setLoadedPercentage(percentage) {\n      this.loadedPercentage = percentage;\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-loading-bar.mounted\");\n      \n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswLoadingBar API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswMarkdownViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-markdown-viewer/lsw-markdown-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 104,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswMarkdownViewer component",
              "$code": "Vue.component(\"LswMarkdownViewer\", {\n  template: $template,\n  props: {\n    source: {\n      type: String,\n      required: true,\n    },\n    activateEjs: {\n      type: Boolean,\n      default: () => false,\n    },\n  },\n  data() {\n    this.$trace(\"lsw-markdown-viewer.data\");\n    return {\n      parsingEjsError: false,\n      parsingMarkdownError: false,\n      output: false,\n    };\n  },\n  methods: {\n    async buildSource() {\n      this.$trace(\"lsw-markdown-viewer.methods.buildSource\");\n      await LswLazyLoads.loadEjs();\n      let sourceTransformed = this.source;\n      Render_ejs: {\n        if (this.activateEjs) {\n          try {\n            sourceTransformed = await ejs.render(sourceTransformed, {\n              component: this\n            }, {\n              async: true,\n            });\n          } catch (error) {\n            console.log(error);\n            this.parsingEjsError = error;\n            throw error;\n          }\n        }\n      }\n      Render_markdown: {\n          try {\n            sourceTransformed = await LswMarkdown.global.parse(sourceTransformed);\n          } catch (error) {\n            console.log(error);\n            this.parsingMarkdownError = error;\n            throw error;\n          }\n      }\n      this.output = sourceTransformed;\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-markdown-viewer.mounted\");\n      await this.buildSource();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswMarkdownViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswMermaidViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-mermaid-viewer/lsw-mermaid-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 102,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswMermaidViewer component",
              "$code": "Vue.component(\"LswMermaidViewer\", {\n  template: $template,\n  props: {\n    initialSource: {\n      type: String,\n      default: () => `graph TD;\\n  A --> B;\\n  B --> C;\\n  C --> D;\\n  C --> A;`,\n    },\n    initialPage: {\n      type: String,\n      default: () => \"editor\" // too: \"visualizador\"\n    }\n  },\n  data() {\n    this.$trace(\"lsw-mermaid-viewer.data\");\n    return {\n      currentPage: this.initialPage,\n      error: false,\n      isLoaded: false,\n      source: this.initialSource,\n    };\n  },\n  methods: {\n    async loadImage() {\n      this.$trace(\"lsw-mermaid-viewer.methods.loadImage\");\n      try {\n        this.isLoaded = false;\n        const targetHtml = this.$refs.mermaidTargetTag;\n        const targetId = LswRandomizer.getRandomString(10);\n        const targetCode = this.source;\n        // Hacemos saltar el error antes:\n        mermaid.parse(targetCode);\n        // Procedemos al parse convencional\n        const output = await window.mermaid.render(targetId, targetCode);\n        targetHtml.innerHTML = output.svg;\n        this.isLoaded = true;\n        this.setError(false);\n      } catch (error) {\n        this.setError(error);\n      }\n    },\n    abrirEditor() {\n      this.$trace(\"lsw-mermaid-viewer.methods.abrirEditor\");\n      this.currentPage = 'editor';\n    },\n    abrirVisualizador() {\n      this.$trace(\"lsw-mermaid-viewer.methods.abrirVisualizador\");\n      this.currentPage = 'visualizador';\n      this.loadImage();\n    },\n    setError(error) {\n      this.$trace(\"lsw-mermaid-viewer.methods.setError\");\n      this.error = error;\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-mermaid-viewer.mounted\");\n      this.loadImage();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswMermaidViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswNotes component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-notes/lsw-notes.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 112,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswNotes component",
              "$code": "Vue.component(\"LswNotes\", {\n  template: $template,\n  props: {\n    autoDialog: {\n      type: Boolean,\n      default: () => false,\n    },\n    onAutoDialogSuccess: {\n      type: Function,\n      default: () => {},\n    },\n    onAutoDialogError: {\n      type: Function,\n      default: () => {},\n    }\n  },\n  data() {\n    this.$trace(\"lsw-notes.data\");\n    return {\n      isLoaded: false,\n      allNotes: false,\n      openedNotes: [],\n      notasButtons: [{\n        text: \"➕\",\n        event: () => {\n          this.openAddNoteDialog();\n        }\n      }, {\n        text: \"🛜\",\n        event: () => {\n          this.loadNotes();\n        }\n      }],\n      currentError: this.error,\n    };\n  },\n  methods: {\n    setError(error = undefined) {\n      this.$trace(\"lsw-notes.methods.setError\");\n      this.currentError = error;\n    },\n    toggleNote(noteId) {\n      this.$trace(\"lsw-notes.methods.toggleNote\");\n      const pos = this.openedNotes.indexOf(noteId);\n      if(pos === -1) {\n        this.openedNotes.push(noteId);\n      } else {\n        this.openedNotes.splice(pos, 1);\n      }\n    },\n    async loadNotes() {\n      this.$trace(\"lsw-notes.methods.loadNotes\");\n      // *@TODO: seleccionar e importar notes.\n      this.isLoaded = false;\n      const notes = await this.$lsw.database.selectMany(\"Nota\");\n      const notesSorted = notes.sort((n1, n2) => {\n        Segun_urgencia: {\n          const e1 = n1.tiene_estado === 'urgente';\n          const e2 = n2.tiene_estado === 'urgente';\n          if(e1 && e2) {\n            // @OK\n          } else if(e1) {\n            return -1;\n          } else if(e2) {\n            return 1;\n          }\n        }\n        Segun_fecha: {\n          const d1 = LswTimer.utils.getDateFromMomentoText(n1.tiene_fecha);\n          const d2 = LswTimer.utils.getDateFromMomentoText(n2.tiene_fecha);\n          if(d1 >= d2) return -1;\n          return 1;\n        }\n      });\n      this.allNotes = notesSorted;\n      this.isLoaded = true;\n    },\n    editNote(nota) {\n      this.$trace(\"lsw-notes.methods.editNote\");\n      const notasComponent = this;\n      this.$lsw.dialogs.open({\n        title: '💬 Editar nota',\n        template: `\n          <div>\n            <lsw-schema-based-form\n              :show-breadcrumb=\"false\"\n              :on-submit=\"(value) => submitCallback(value)\"\n              :on-delete-row=\"deleteCallback\"\n              :model=\"{\n                  connection: $lsw.database,\n                  databaseId: 'lsw_default_database',\n                  tableId: 'Nota',\n                  rowId: notaId,\n              }\"\n            />\n          </div>\n        `,\n        factory: {\n          data: { notaId: nota.id },\n          methods: {\n            async submitCallback(value) {\n              this.$trace(\"Dialogs.EditarArticulo.methods.submitCallback\");\n              try {\n                await this.$lsw.database.update(\"Nota\", this.notaId, value);\n                await this.$lsw.toasts.send({\n                  title: \"Nota actualizada correctamente\",\n                  text: \"La nota ha sido actualizado con éxito.\"\n                });\n                this.close();\n                notasComponent.loadNotes();\n              } catch (error) {\n                console.log(error);\n                await this.$lsw.toasts.send({\n                  title: \"Error al actualizar nota\",\n                  text: \"No se pudo actualizar la nota por un error: \" + error.message,\n                  background: \"red\",\n                });\n              }\n            },\n            async deleteCallback() {\n              this.$trace(\"Dialogs.EditarArticulo.methods.deleteCallback\");\n              await this.$lsw.database.delete(\"Nota\", this.notaId);\n              this.close();\n              notasComponent.loadNotes();\n              await this.$lsw.toasts.send({\n                title: \"Nota eliminada correctamente\",\n                text: \"La nota se eliminó con éxito.\",\n              });\n            }\n          }\n        }\n      });\n    },\n    async deleteNote(nota) {\n      this.$trace(\"lsw-notes.methods.deleteNote\");\n      const confirmation = await this.$lsw.dialogs.open({\n        title: \"Eliminar nota\",\n        template: `\n          <div>\n            <p>¿Estás seguro de eliminar esta nota?</p>\n            <pre>{{ JSON.stringify(nota, null, 2) }}</pre>\n            <hr />\n            <div class=\"flex_row\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            value: true,\n            nota: nota,\n          }\n        }\n      });\n      if(confirmation !== true) {\n        return;\n      }\n      await this.$lsw.database.delete(\"Nota\", nota.id);\n      await this.loadNotes();\n    },\n    async openAddNoteDialog() {\n      this.$trace(\"lsw-notes.methods.openAddNoteDialog\");\n      const notasComponent = this;\n      const response = await this.$lsw.dialogs.open({\n        title: 'Insertando nota',\n        template: `\n          <lsw-schema-based-form\n            :show-breadcrumb=\"false\"\n            :on-submit=\"(value) => submitCallback(value)\"\n            :model=\"{\n                connection: $lsw.database,\n                databaseId: 'lsw_default_database',\n                tableId: 'Nota',\n                rowId: -1,\n            }\"\n          />\n        `,\n        factory: {\n          methods: {\n            async submitCallback(value) {\n              this.$trace(\"Dialogs.EditarArticulo.methods.submitCallback\");\n              try {\n                await this.$lsw.database.insert(\"Nota\", value);\n                await this.$lsw.toasts.send({\n                  title: \"Nota insertada correctamente\",\n                  text: \"La nota ha sido insertada con éxito.\"\n                });\n                this.close();\n                notasComponent.loadNotes();\n              } catch (error) {\n                console.log(error);\n                await this.$lsw.toasts.send({\n                  title: \"Error al insertar nota\",\n                  text: \"No se pudo actualizar el nota por un error: \" + error.message,\n                  background: \"red\",\n                });\n              }\n            },\n          }\n        }\n      })\n      if(typeof response !== \"object\") {\n        return;\n      }\n      await this.$lsw.database.insert(\"Nota\", response);\n      await this.loadNotes();\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-notes.mounted\");\n      await this.loadNotes();\n      if(this.autoDialog) {\n        this.openAddNoteDialog();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswNotes API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswNuevaFeature component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-nueva-feature/lsw-nueva-feature.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 100,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswNuevaFeature component",
              "$code": "Vue.component(\"LswNuevaFeature\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-nueva-feature.data\");\n    return {\n\n    };\n  },\n  methods: {\n    \n  },\n  computed: {\n    \n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-nueva-feature.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswNuevaFeature API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswPegjsTester component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-pegjs-tester/lsw-pegjs-tester.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswPegjsTester component",
              "$code": "Vue.component(\"LswPegjsTester\", {\n  template: $template,\n  props: {\n    source: {\n      type: String,\n      default: () => 'Example = \"0\"',\n    }\n  },\n  data() {\n    this.$trace(\"lsw-pegjs-tester.data\");\n    return {\n      isLoaded: false,\n      currentAst: false,\n      currentParserSource: this.source,\n      currentParser: false,\n      currentSnippet: \"0\",\n      currentParserSyntaxError: false,\n      currentSnippetSyntaxError: false,\n      showingPaneOf: 'parser',\n    };\n  },\n  methods: {\n    async loadDependencies() {\n      await LswLazyLoads.loadPegjs();\n    },\n    showParserError(error) {\n      this.$refs.parserErrorViewer.setError(error);\n    },\n    showSnippetError(error) {\n      this.$refs.snippetErrorViewer.setError(error);\n    },\n    compileSyntax() {\n      this.$trace(\"lsw-pegjs-tester.methods.compileSyntax\");\n      try {\n        this.currentParser = PEG.buildParser(this.currentParserSource);\n        this.showParserError(false);\n      } catch (error) {\n        this.showParserError(error);\n        this.$lsw.toasts.showError(error);\n        throw error;\n      }\n    },\n    compileParser() {\n      this.$trace(\"lsw-pegjs-tester.methods.compileParser\");\n      this.compileSyntax();\n      this.showingPaneOf = 'snippet';\n    },\n    resetState() {\n      this.$trace(\"lsw-pegjs-tester.methods.resetState\");\n      this.currentSnippetSyntaxError = false;\n      this.currentAst = false;\n    },\n    testSnippet() {\n      this.$trace(\"lsw-pegjs-tester.methods.testSnippet\");\n      try {\n        this.resetState();\n        Check_it_has_parser: {\n          if (!this.currentParser) {\n            throw new Error(\"No parser selected on «testSnippet»\");\n          }\n        }\n        Parse_contents: {\n          try {\n            this.currentAst = this.currentParser.parse(this.currentSnippet);\n            this.currentSnippetSyntaxError = false;\n            this.showSnippetError(false);\n          } catch (error) {\n            this.showSnippetError(error);\n            throw error;\n          }\n        }\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-pegjs-tester.mounted\");\n      await this.loadDependencies();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswPegjsTester API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswProtolangEditor API » LswProtolangEditor component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-protolang-editor/lsw-protolang-editor.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 173,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswProtolangEditor API » LswProtolangEditor component",
              "$code": "Vue.component(\"LswProtolangEditor\", {\n  template: $template,\n  props: {\n    initialContents: {\n      type: String,\n      default: () => \"\"\n    }\n  },\n  data() {\n    this.$trace(\"lsw-protolang-editor.data\");\n    return {\n      error: false,\n      result: false,\n      contents: this.initialContents,\n      placeholder: `rel correr\n  > cardio * 1\n  > musculación * 0.3\n  >> propagador de correr * []`\n    };\n  },\n  methods: {\n    setError(error) {\n      this.$trace(\"lsw-protolang-editor.methods.setError\");\n      this.error = error;\n    },\n    setResult(result) {\n      this.$trace(\"lsw-protolang-editor.methods.setResult\");\n      this.result = result;\n    },\n    async validateCode() {\n      this.$trace(\"lsw-protolang-editor.methods.validateCode\");\n      try {\n        const value = this.contents;\n        const js = await Protolang.codify(value);\n        console.log(js);\n        this.setError(false);\n        this.setResult(js);\n      } catch (error) {\n        this.setError(error);\n      }\n    },\n    async evaluateCode() {\n      this.$trace(\"lsw-protolang-editor.methods.evaluateCode\");\n      try {\n        const value = this.contents;\n        const js = await Protolang.codify(value);\n        console.log(js);\n        this.setError(false);\n      } catch (error) {\n        this.setError(error);\n      }\n    },\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-protolang-editor.mounted\");\n      this.$window.protolangEditor = this;\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswProtolangEditor API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswSchemaBasedForm component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-schema-based-form/lsw-schema-based-form.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 132,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw SchemaBasedForm API » LswSchemaBasedForm component",
              "$code": "Vue.component(\"LswSchemaBasedForm\", {\n  template: $template,\n  props: {\n    model: {\n      type: Object,\n      required: true,\n    },\n    onSubmit: {\n      type: Function,\n      default: () => this.$noop,\n    },\n    onValidate: {\n      type: Function,\n      default: () => this.$noop,\n    },\n    onDeleteRow: {\n      type: Function,\n      default: () => this.$noop,\n    },\n    overridenValues: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    this.$trace(\"lsw-schema-based-form.data\");\n    this.validateModel(this.model);\n    const isOperation = (this.model.row && this.model.row.id) || (this.model.rowId && (this.model.rowId !== -1)) ? \"update\" : \"insert\";\n    return {\n      own: this,\n      validFormtypes: [\n        \"text\",\n        \"long-text\",\n        \"options\",\n        \"boolean\",\n        \"date\",\n        \"duration\",\n        \"ref-object\",\n        \"ref-object-by-label\",\n        \"ref-list\",\n        \"ref-relation\",\n        \"source-code\",\n      ],\n      section: 'campos propios', // 'campos reflejos'\n      isShowingFormInfo: false,\n      isLoaded: false,\n      tableDefinition: false,\n      columnDefinitions: false,\n      value: this.model.row ?? false,\n      editableFields: [],\n      minimizedFields: [],\n      isOperation,\n      isUpdateOperation: isOperation === \"update\",\n      isInsertOperation: isOperation === \"insert\",\n    };\n  },\n  methods: {\n    selectSection(section) {\n      this.section = section;\n    },\n    toggleMinimizedField(field) {\n      this.$trace(\"lsw-schema-based-form.methods.toggleMinimizedField\");\n      const fieldPos = this.minimizedFields.indexOf(field);\n      if (fieldPos === -1) {\n        this.minimizedFields.push(field);\n      } else {\n        this.minimizedFields.splice(fieldPos, 1);\n      }\n      this.$forceUpdate(true);\n    },\n    hideMinimizedField(field) {\n      this.$trace(\"lsw-schema-based-form.methods.hideMinimizedField\");\n      const fieldPos = this.minimizedFields.indexOf(field);\n      if (fieldPos === -1) {\n        this.minimizedFields.push(field);\n      }\n      this.$forceUpdate(true);\n    },\n    showMinimizedField(field) {\n      this.$trace(\"lsw-schema-based-form.methods.showMinimizedField\");\n      const fieldPos = this.minimizedFields.indexOf(field);\n      if (fieldPos !== -1) {\n        this.minimizedFields.splice(fieldPos, 1);\n      }\n      this.$forceUpdate(true);\n    },\n    toggleEditableField(field) {\n      this.$trace(\"lsw-schema-based-form.methods.toggleEditableField\");\n      const fieldPos = this.editableFields.indexOf(field);\n      if (fieldPos === -1) {\n        this.editableFields.push(field);\n      } else {\n        this.editableFields.splice(fieldPos, 1);\n      }\n    },\n    saveField(field, value) {\n      this.$trace(\"lsw-schema-based-form.methods.saveField\");\n      console.log(\"Should save field:\", field, value);\n      // *@TODO: use $lsw.database.overwrite to send the field only\n\n    },\n    validateModel(model) {\n      this.$trace(\"lsw-schema-based-form.methods.validateModel\");\n      try {\n        const ensureModel = $ensure({ model }, 1);\n        const checkModel = $check(model);\n        Basic_type_and_signature: {\n          ensureModel.type(\"object\");\n          ensureModel.to.have.uniquelyKeys([\"connection\", \"databaseId\", \"tableId\", \"rowId\", \"row\", \"databaseExplorer\"]);\n          ensureModel.to.have.keys([\"databaseId\", \"tableId\"]);\n          const correctOption = $ensure.$or({\n            \"has connection and rowId (set -1 for new instances)\": () => ensureModel.to.have.key(\"rowId\"),\n            \"has row\": () => ensureModel.to.have.key(\"row\"),\n          });\n          if (!checkModel.to.have.key(\"rowId\")) {\n            ensureModel.to.have.key(\"row\");\n          }\n        }\n        Component_types_and_signatures: {\n          if (checkModel.to.have.key(\"connection\")) {\n            ensureModel.its(\"connection\").type(\"object\");\n          }\n          if (checkModel.to.have.key(\"databaseId\")) {\n            ensureModel.its(\"databaseId\").type(\"string\");\n          }\n          if (checkModel.to.have.key(\"tableId\")) {\n            ensureModel.its(\"tableId\").type(\"string\");\n          }\n          if (checkModel.to.have.key(\"rowId\")) {\n            ensureModel.its(\"rowId\").type(\"number\");\n          }\n          if (checkModel.to.have.key(\"row\")) {\n            $ensure.$or({\n              \"row is object\": () => ensureModel.its(\"row\").type(\"object\"),\n              \"row is false\": () => ensureModel.its(\"row\").type(\"boolean\").is(false),\n            });\n          }\n          if(checkModel.to.have.key(\"databaseExplorer\")) {\n            ensureModel.its(\"databaseExplorer\").type(\"object\");\n          }\n        }\n      } catch (error) {\n        console.error(\"Failed validating «model» property on «lsw-schema-based-form.validateModel»\");\n        console.error(error);\n      }\n    },\n    async loadValue() {\n      this.$trace(\"lsw-schema-based-form.methods.loadValue\");\n      if (this.model.rowId) {\n        const originalValues = await LswDatabase.pickRow(this.model.databaseId, this.model.tableId, this.model.rowId);\n        this.value = Object.assign({}, originalValues, this.overridenValues);\n      }\n    },\n    onlyKnownTypes(formtype) {\n      if(this.validFormtypes.indexOf(formtype) !== -1) {\n        return formtype;\n      }\n      return \"long-text\";\n    },\n    async loadSchema() {\n      this.$trace(\"lsw-schema-based-form.methods.loadSchema\");\n      const columnIds = Object.keys($lswSchema.$schema.hasTables[this.model.tableId].hasColumns);\n      for(let columnId of columnIds) {\n        const columnData = $lswSchema.$schema.hasTables[this.model.tableId].hasColumns[columnId];\n        Object.assign(columnData, {\n          belongsToDatabase: this.model.databaseId,\n          belongsToTable: this.model.tableId,\n          hasFormtypeSettings: {\n            id: 'lsw-' + this.onlyKnownTypes(columnData.isFormType) + '-control',\n            name: columnId,\n            input: {\n              props: {\n                placeholder: columnData.hasPlaceholder,\n              },\n              events: {\n                \n              }\n            },\n          }\n        })\n      }\n      this.tableDefinition = $lswSchema.$schema.hasTables[this.model.tableId];\n      this.columnDefinitions = this.tableDefinition.hasColumns;\n    },\n    toggleFormInfo() {\n      this.$trace(\"lsw-schema-based-form.methods.toggleFormInfo\");\n      this.isShowingFormInfo = !this.isShowingFormInfo;\n    },\n    closeEditables() {\n      this.$trace(\"lsw-schema-based-form.methods.closeEditables\");\n      const uneditables = this.$el.querySelectorAll(\".lsw_form_control .lsw_control_label .button_to_uneditable\");\n      for(let index=0; index<uneditables.length; index++) {\n        const uneditable = uneditables[index];\n        uneditable.click();\n      }\n    },\n    openEditables() {\n      this.$trace(\"lsw-schema-based-form.methods.openEditables\");\n      const editables = this.$el.querySelectorAll(\".lsw_form_control .lsw_control_label .button_to_editable\");\n      for(let index=0; index<editables.length; index++) {\n        const editable = editables[index];\n        editable.click();\n      }\n    },\n    validateForm() {\n      this.$trace(\"lsw-schema-based-form.methods.validateForm\");\n      return this.$refs.schemaForm0.$xform.validate();\n    },\n    async submitForm(v) {\n      this.$trace(\"lsw-schema-based-form.methods.submitForm\");\n      return await this.$refs.schemaForm0.$xform.submit();\n    },\n    passToPrinter() {\n      this.$trace(\"lsw-schema-based-form.methods.passToPrinter\");\n      const value = this.$refs.schemaForm0.$xform.getValue();\n      this.$lsw.dialogs.open({\n        title: \"Impresión de estado de formulario\",\n        template: `\n          <lsw-data-printer-report :input=\"input\" />\n        `,\n        factory: { data: { input: value } },\n      });\n    },\n    async deleteRow() {\n      this.$trace(\"lsw-schema-based-form.methods.deleteRow\");\n      const confirmed = await this.$lsw.dialogs.open({\n        id: `eliminar-registro-${this.model.tableId}-${this.model.rowId || this.model.row.id}-${LswRandomizer.getRandomString(5)}`,\n        title: \"Eliminar registro\",\n        template: `\n          <div>\n            <div class=\"pad_2 font_weight_bold\">ATENCIÓN: </div>\n            <div class=\"pad_2\">¿Seguro que quieres eliminar el registro <b>{{ model.tableId }}</b> cuyo <b>id</b>#<b>{{ model.rowId || model.row.id }}</b>?</div>\n            <div class=\"pad_2\">\n              <pre class=\"pad_2 codeblock\">{{ JSON.stringify(model.row || rowValue, null, 2) }}</pre>\n            </div>\n            <hr class=\"margin_0\" />\n            <div class=\"pad_2 text_align_right\">\n              <button class=\"supermini danger_button\" v-on:click=\"() => accept(true)\">Eliminar</button>\n              <button class=\"supermini \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            model: this.model,\n            rowValue: this.value\n          }\n        }\n      });\n      if(!confirmed) return false;\n      const rowIdentifier = this.model.rowId || this.model.row.id;\n      await this.$lsw.database.delete(this.model.tableId, rowIdentifier);\n      if(this.onDeleteRow) {\n        const result = this.onDeleteRow(this.model.rowId, this.model.tableId, true);\n        // INTERCEPT REDIRECTION RETURNING FALSE FROM onDeleteRow PARAMETRIC CALLBACK\n        if(result === false) return;\n      }\n      if(this.model.databaseExplorer) {\n        if(this.model.databaseExplorer.showBreadcrumb) {\n          this.model.databaseExplorer.selectPage(\"LswPageRows\", {\n            database: this.model.databaseId,\n            table: this.model.tableId,\n          });\n        } else {\n          \n        }\n      }\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-schema-based-form.mounted\");\n      await this.loadSchema();\n      await this.loadValue();\n      this.isLoaded = true;\n      this.$nextTick(() => {\n        window.sf0 = this.$refs.schemaForm0;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSchemaBasedForm API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswSearchReplacer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-search-replacer/lsw-search-replacer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 104,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswSearchReplacer component",
              "$code": "Vue.component(\"LswSearchReplacer\", {\n  template: $template,\n  props: {\n    input: {\n      type: String,\n      default: () => false,\n    },\n    initialSearch: {\n      type: String,\n      default: () => \"\",\n    },\n    initialReplace: {\n      type: String,\n      default: () => \"\",\n    },\n    onAccept: {\n      type: Function,\n      default: () => {},\n    },\n    onCancel: {\n      type: Function,\n      default: () => {},\n    },\n    onFinally: {\n      type: Function,\n      default: () => {},\n    },\n  },\n  data() {\n    this.$trace(\"lsw-search-replacer.data\");\n    return {\n      currentInput: this.input,\n      currentMatch: false,\n      search: this.initialSearch || \"\",\n      searchAsRegexp: false,\n      replace: this.initialReplace || \"\",\n    };\n  },\n  methods: {\n    toggleRegexpMode() {\n      this.$trace(\"lsw-search-replacer.methods.toggleRegexpMode\");\n      this.searchAsRegexp = !this.searchAsRegexp;\n    },\n    accept() {\n      this.$trace(\"lsw-search-replacer.methods.accept\");\n      this.onAccept(this.currentInput, this);\n      this.onFinally(this.currentInput, this);\n    },\n    cancel() {\n      this.$trace(\"lsw-search-replacer.methods.cancel\");\n      this.onCancel(this.currentInput, this);\n      this.onFinally(this.currentInput, this);\n    },\n    illuminateMatches() {\n      this.$trace(\"lsw-search-replacer.methods.illuminateMatches\");\n      if(!this.searchAsRegexp) {\n\n      }\n    },\n    replaceAllMatches() {\n      this.$trace(\"lsw-search-replacer.methods.replaceAllMatches\");\n      if(this.searchAsRegexp) {\n        const regexp = new RegExp(this.search, \"g\");\n        this.currentInput = this.currentInput.replaceAll(regexp, this.replace);\n      } else {\n        this.currentInput = this.currentInput.replaceAll(this.search, this.replace);\n      }\n    },\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-search-replacer.mounted\");\n    \n  },\n  unmounted() {\n    this.$trace(\"lsw-search-replacer.unmounted\");\n    \n  }\n});\n",
              "$code.label": "LswSearchReplacer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswSourceable component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-sourceable/lsw-sourceable.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 96,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswSourceable component",
              "$code": "Vue.component(\"LswSourceable\", {\n  template: $template,\n  props: {\n    fixedId: {\n      type: [String, Boolean],\n      default: () => false,\n    },\n    source: {\n      type: [String, Boolean],\n      default: () => false,\n    },\n    composition: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    this.$trace(\"lsw-sourceable.data\");\n    const reflectedId = this.fixedId || LswRandomizer.getRandomString(10);\n    return {\n      isLoaded: false,\n      componentId: \"lsw-sourceable-\" + reflectedId,\n    };\n  },\n  methods: {\n    loadReflection() {\n      this.$trace(\"lsw-sourceable.methods.loadReflection\");\n      const that = this;\n      const source = this.source || this.$slots.default;\n      Vue.component(this.componentId, {\n        template: \"<div>\" + source + \"</div>\",\n        ...this.composition,\n      });\n      this.isLoaded = true;\n    },\n    unloadReflection() {\n      this.$trace(\"lsw-sourceable.methods.loadReflection\");\n      delete Vue.options.components[this.componentId];\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$trace(\"lsw-sourceable.mounted\");\n    this.loadReflection();\n  },\n  unmounted() {\n    this.$trace(\"lsw-sourceable.unmounted\");\n    this.unloadReflection();\n  }\n});\n",
              "$code.label": "LswSourceable API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormAccion API » LswSpontaneousFormAccion component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-form-accion/lsw-spontaneous-form-accion.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 191,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormAccion API » LswSpontaneousFormAccion component",
              "$code": "Vue.component(\"LswSpontaneousFormAccion\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-form-accion.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-form-accion.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSpontaneousFormAccion API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormArticulo API » LswSpontaneousFormAccion component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-form-articulo/lsw-spontaneous-form-articulo.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 195,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormArticulo API » LswSpontaneousFormAccion component",
              "$code": "Vue.component(\"LswSpontaneousFormArticulo\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-form-articulo.data\");\n    return {\n      ...this.getInitialContents(),\n      opcionesGarantia: {\n        \"ns/nc\": \"ns/nc\",\n        \"muy inestable\": \"muy inestable\",\n        \"inestable\": \"inestable\",\n        \"estable\": \"estable\",\n        \"muy estable\": \"muy estable\",\n        \"popular\": \"popular\",\n      }\n    };\n  },\n  methods: {\n    getInitialContents() {\n      return Object.assign({}, {\n        tiene_titulo: \"\",\n        tiene_contenido: \"\",\n        tiene_categorias: \"\",\n        tiene_garantia: \"ns/ns\",\n        tiene_fecha: LswTimer.utils.fromDateToDatestring(new Date()),\n        tiene_tags: \"\",\n      });\n    },\n    async addArticulo() {\n      this.$trace(\"lsw-spontaneous-form-articulo.methods.addArticulo\");\n      try {\n      await this.$lsw.database.insert(\"Articulo\", {\n        tiene_titulo: this.tiene_titulo,\n        tiene_contenido: this.tiene_contenido,\n        tiene_categorias: this.tiene_categorias,\n        tiene_garantia: this.tiene_garantia,\n        tiene_fecha: this.tiene_fecha,\n        tiene_tags: this.tiene_tags,\n      });\n      this.$lsw.toasts.send({\n        title: \"Artículo insertado\",\n        message: \"El artículo fue insertado con éxito.\"\n      });\n      Object.assign(this, this.getInitialContents());\n    } catch (error) {\n      console.log(error);\n      this.$lsw.toasts.send({\n        title: \"Error al insertar artículo\",\n        message: \"Hubo errores al insertar el artículo: \" + error.message\n      });\n    }\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-form-articulo.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSpontaneousFormArticulo API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormLista API » LswSpontaneousFormAccion component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-form-lista/lsw-spontaneous-form-lista.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 189,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormLista API » LswSpontaneousFormAccion component",
              "$code": "Vue.component(\"LswSpontaneousFormLista\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-form-lista.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-form-lista.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSpontaneousFormLista API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormNota API » LswSpontaneousFormAccion component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-form-nota/lsw-spontaneous-form-nota.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 187,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormNota API » LswSpontaneousFormAccion component",
              "$code": "Vue.component(\"LswSpontaneousFormNota\", {\n  template: $template,\n  props: {\n    onSubmitted: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  data() {\n    this.$trace(\"lsw-spontaneous-form-nota.data\");\n    return this.getInitialData({\n\n    });\n  },\n  methods: {\n    getInitialData(extendedWith = {}) {\n      return Object.assign({\n        tiene_titulo: \"\",\n        tiene_contenido: \"\",\n        tiene_fecha: LswTimer.utils.fromDateToDatestring(new Date()),\n        tiene_categorias: \"\",\n      }, extendedWith);\n    },\n    async addNota() {\n      this.$trace(\"lsw-spontaneous-form-nota.methods.addNota\");\n      const nota = {\n        tiene_titulo: this.tiene_titulo,\n        tiene_contenido: this.tiene_contenido,\n        tiene_fecha: this.tiene_fecha,\n        tiene_categorias: this.tiene_categorias,\n      };\n      if(nota.tiene_titulo.trim() === \"\") {\n        const superaLimite = nota.tiene_contenido.length > 30;\n        nota.tiene_titulo = nota.tiene_contenido.substr(0,30) + (superaLimite ? \"...\" : \"\");\n      }\n      const notaId = await this.$lsw.database.insert(\"Nota\", nota);\n      Object.assign(this, this.getInitialData());\n      this.$forceUpdate(true);\n      this.focusContenidos();\n      if(this.onSubmitted) {\n        this.onSubmitted(notaId, nota, this);\n      }\n    },\n    focusContenidos() {\n      this.$trace(\"lsw-spontaneous-form-nota.methods.addNota\");\n      // this.$refs.tiene_contenido.focus();\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-form-nota.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSpontaneousFormNota API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormRecordatorio API » LswSpontaneousFormAccion component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-form-recordatorio/lsw-spontaneous-form-recordatorio.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 203,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousFormRecordatorio API » LswSpontaneousFormAccion component",
              "$code": "Vue.component(\"LswSpontaneousFormRecordatorio\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-form-recordatorio.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-form-recordatorio.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSpontaneousFormRecordatorio API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableAccion API » LswSpontaneousTableAccion component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-table-accion/lsw-spontaneous-table-accion.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 194,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableAccion API » LswSpontaneousTableAccion component",
              "$code": "Vue.component(\"LswSpontaneousTableAccion\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-table-accion.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-table-accion.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSpontaneousTableAccion API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableArticulo API » LswSpontaneousTableArticulo component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-table-articulo/lsw-spontaneous-table-articulo.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 200,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableArticulo API » LswSpontaneousTableArticulo component",
              "$code": "Vue.component(\"LswSpontaneousTableArticulo\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-table-articulo.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-table-articulo.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSpontaneousTableArticulo API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableLista API » LswSpontaneousTableLista component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-table-lista/lsw-spontaneous-table-lista.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 191,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableLista API » LswSpontaneousTableLista component",
              "$code": "Vue.component(\"LswSpontaneousTableLista\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-table-lista.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-table-lista.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSpontaneousTableLista API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableNota API » LswSpontaneousTableNota component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-table-nota/lsw-spontaneous-table-nota.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 188,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableNota API » LswSpontaneousTableNota component",
              "$code": "Vue.component(\"LswSpontaneousTableNota\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-table-nota.data\");\n    return {\n      allNotas: false,\n      currentNotas: false,\n      currentPage: 0,\n      totalPages: 0,\n      currentItemsPerPage: 100,\n      searchText: '',\n      selectedNotas: [],\n    };\n  },\n  methods: {\n    toggleNota(notaId) {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.toggleNota\");\n      const pos = this.selectedNotas.indexOf(notaId);\n      if (pos === -1) {\n        this.selectedNotas.push(notaId);\n      } else {\n        this.selectedNotas.splice(pos, 1);\n      }\n    },\n    goToNextPage() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToNextPage\");\n      if ((this.currentPage + 1) < this.totalPages) {\n        this.currentPage++;\n        this.synchronizePagination();\n      }\n    },\n    goToFirstPage() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToFirstPage\");\n      this.currentPage = 0;\n      this.synchronizePagination();\n    },\n    goToLastPage() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToLastPage\");\n      this.currentPage = (this.totalPages - 1);\n      this.synchronizePagination();\n    },\n    goToPreviousPage() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToPreviousPage\");\n      if (this.currentPage > 0) {\n        this.currentPage--;\n        this.synchronizePagination();\n      }\n    },\n    async loadNotes() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.loadNotes\");\n      const allNotas = await this.$lsw.database.selectMany(\"Nota\");\n      const sortedNotas = allNotas.filter(nota => {\n        if(this.searchText === '') {\n          return true;\n        }\n        return JSON.stringify(nota).toLowerCase().indexOf(this.searchText.toLowerCase()) !== -1;\n      }).sort((n1, n2) => {\n        Ordena_por_urgencia: {\n          const estado1 = n1.tiene_estado;\n          const estado2 = n2.tiene_estado;\n          const urgencia1 = estado1 === \"urgente\" ? 100 : 1;\n          const urgencia2 = estado2 === \"urgente\" ? 100 : 1;\n          if (urgencia1 > urgencia2) {\n            return -1;\n          } else if (urgencia1 < urgencia2) {\n            return 1;\n          }\n        }\n        Ordena_por_fecha: {\n          const fecha1 = LswTimer.utils.fromDatestringToDate(n1.tiene_fecha);\n          const fecha2 = LswTimer.utils.fromDatestringToDate(n2.tiene_fecha);\n          if (fecha1 > fecha2) {\n            return -1;\n          } else if (fecha1 < fecha2) {\n            return 1;\n          } else {\n            return -1;\n          }\n        }\n      });\n      this.allNotas = sortedNotas;\n      this.synchronizePagination();\n    },\n    synchronizePagination() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.synchronizePagination\");\n      this.totalPages = (() => {\n        const totalFullPages = Math.floor(this.allNotas.length / this.currentItemsPerPage);\n        const totalResidualPages = this.allNotas.length % this.currentItemsPerPage ? 1 : 0;\n        return totalFullPages + totalResidualPages;\n      })();\n      this.currentNotas = (() => {\n        const paginatedNotas = [];\n        const minIndex = this.currentPage * this.currentItemsPerPage;\n        const maxIndex = (this.currentPage + 1) * this.currentItemsPerPage;\n        for (let index = 0; index < this.allNotas.length; index++) {\n          const nota = this.allNotas[index];\n          const validByMin = index >= minIndex;\n          const validByMax = index < maxIndex;\n          const isValid = validByMin && validByMax;\n          if (isValid) {\n            paginatedNotas.push(nota);\n          }\n        }\n        return paginatedNotas;\n      })();\n    },\n    async goToDeleteNota(row) {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToDeleteNota\");\n      const confirmed = await this.$lsw.dialogs.open({\n        id: `eliminar-registro-Nota-#${row.id}-${LswRandomizer.getRandomString(5)}`,\n        title: \"Eliminar registro\",\n        template: `\n          <div>\n            <div class=\"pad_2 font_weight_bold\">ATENCIÓN: </div>\n            <div class=\"pad_2\">¿Seguro que quieres eliminar el registro <b>{{ tableId }}</b> cuyo <b>id</b>#<b>{{ rowId }}</b>?</div>\n            <div class=\"pad_2\">\n              <pre class=\"pad_2 codeblock\">{{ JSON.stringify(rowValue, null, 2) }}</pre>\n            </div>\n            <hr class=\"margin_0\" />\n            <div class=\"pad_2 text_align_right\">\n              <button class=\"supermini danger_button\" v-on:click=\"() => accept(true)\">Eliminar</button>\n              <button class=\"supermini \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            tableId: \"Nota\",\n            rowValue: row,\n            rowId: row.id\n          }\n        }\n      });\n      if (!confirmed) return false;\n      await this.$lsw.database.delete(\"Nota\", row.id);\n      this.$lsw.toasts.send({\n        title: `Registro eliminado`,\n        text: `El registro #${this.notaId} de «Nota» fue eliminado correctamente.`\n      });\n      this.loadNotes();\n    },\n    async goToEditNota(notaId) {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToEditNota\");\n      await this.$lsw.dialogs.open({\n        title: \"Actualizar nota\",\n        template: `\n          <div>\n            <lsw-schema-based-form\n              :on-submit=\"(value) => submitCallback(value)\"\n              :on-delete-row=\"deleteCallback\"\n              :model=\"{\n                  connection: $lsw.database,\n                  databaseId: 'lsw_default_database',\n                  tableId: 'Nota',\n                  rowId: notaId,\n              }\"\n            />\n          </div>\n        `,\n        factory: {\n          methods: {\n            async submitCallback(value) {\n              console.log(\"Submiting form: \", value);\n              await this.$lsw.database.update(\"Nota\", notaId, value);\n              this.$lsw.toasts.send({\n                title: `Nueva actualización`,\n                text: `El registro #${this.notaId} de «Nota» fue actualizado correctamente.`\n              });\n              this.close();\n            },\n            async deleteCallback() {\n              // EL DELETE YA LO HACE DENTRO, POR ALGUNA RAZÓN, NO ME ACABES DE PREGUNTAR.\n              this.close();\n            }\n          },\n          data: {\n            notaId,\n          }\n        }\n      });\n    },\n    goToAddNota() {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.goToEditNota\");\n      const that = this;\n      this.$lsw.dialogs.open({\n        title: \"Añadir nota\",\n        template: `<lsw-spontaneous-form-nota :on-submitted=\"closeAndRefresh\" />`,\n        factory: {\n          methods: {\n            closeAndRefresh() {\n              this.close();\n              that.loadNotes();\n            }\n          }\n        }\n      });\n    },\n    async sendNotaToArticulos(nota) {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.sendNotaToArticulos\");\n      const respuesta = await this.$lsw.dialogs.open({\n        title: \"Pasar nota a artículo\",\n        template: `\n          <div class=\"pad_1\">\n            <div>Vas a pasar la siguiente nota a artículo: </div>\n            <div class=\"pad_2\">\n              <pre class=\"codeblock\">{{ nota }}</pre>\n            </div>\n            <div>¿Estás seguro?</div>\n            <hr/>\n            <div class=\"flex_row centered text_align_right\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_right_1\">\n                <button class=\"supermini danger_button\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: { data: { nota } },\n      });\n      if(respuesta === -1) return;\n      const articuloNew = Object.assign({\n        tiene_titulo: '',\n        tiene_fecha: '',\n        tiene_categorias: '',\n        tiene_contenido: '',\n        tiene_garantia: '',\n        tiene_tags: '',\n      }, nota);\n      delete articuloNew.id;\n      await this.$lsw.database.insert(\"Articulo\", articuloNew);\n      await this.$lsw.database.delete(\"Nota\", nota.id);\n      this.$lsw.toasts.send({\n        title: \"Nota a artículo bien\",\n        text: \"La nota ha sido pasada a artículo correctamente\",\n      });\n      this.loadNotes();\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-table-nota.mounted\");\n      this.loadNotes();\n      this.$window.sptt_notas = this;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSpontaneousTableNota API",
              "$output": "index.html"
            }
          ],
          "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableRecordatorio API » LswSpontaneousTableRecordatorio component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-spontaneous-table-recordatorio/lsw-spontaneous-table-recordatorio.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 212,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Módulo org.allnulled.lsw-conductometria » Vue.js (v2) Components » LswSpontaneousTableRecordatorio API » LswSpontaneousTableRecordatorio component",
              "$code": "Vue.component(\"LswSpontaneousTableRecordatorio\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-spontaneous-table-recordatorio.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-spontaneous-table-recordatorio.mounted\");\n      // \n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSpontaneousTableRecordatorio API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswSqliteConsole component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-sqlite-console/lsw-sqlite-console.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 102,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswSqliteConsole component",
              "$code": "Vue.component(\"LswSqliteConsole\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-sqlite-console.data\");\n    return {\n      selectedSection: \"js\", // \"js\", \"sql\", \"data\"\n      code: `\n\nSELECT * FROM sqlite_master;\n\n`.trim(),\n      output: \"\",\n      executionError: false,\n      isSqliteLoaded: false,\n    };\n  },\n  methods: {\n    async loadEnvironment() {\n      LswLazyLoads.loadSqlite().then(() => {\n        this.isSqliteLoaded = true;\n      });\n    },\n    async executeCode() {\n      this.$trace(\"lsw-sqlite-console.methods.executeCode\");\n      try {\n        this.output = await LswSqlite.execute(this.code);\n      } catch (error) {\n        this.output = \"Error\";\n        this.executionError = error;\n        console.error(error);\n      }\n    },\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-sqlite-console.mounted\");\n      await this.loadEnvironment();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSqliteConsole API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswSqliteExplorer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-sqlite-explorer/lsw-sqlite-explorer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 104,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswSqliteExplorer component",
              "$code": "Vue.component(\"LswSqliteExplorer\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-sqlite-explorer.data\");\n    return {\n      selectedSection: \"data\",\n      selectedDataSection: \"tables\",\n      selectedDataTable: false,\n      sqliteResolvable: Promise.withResolvers(),\n      isSqliteLoaded: false,\n      schema: false,\n      rows: false,\n    };\n  },\n  methods: {\n    loadEnvironment() {\n      this.$trace(\"lsw-sqlite-explorer.methods.loadEnvironment\");\n      return LswLazyLoads.loadSqlite().then(() => {\n        this.isSqliteLoaded = true;\n        this.sqliteResolvable.resolve();\n      });\n    },\n    async loadSchema() {\n      this.$trace(\"lsw-sqlite-explorer.methods.loadSchema\");\n      this.sqliteResolvable.promise.then(() => {\n        this.schema = LswSqlite.getSchema();\n      });\n    },\n    async saveDatabase() {\n      this.$trace(\"lsw-sqlite-explorer.methods.saveDatabase\");\n      try {\n        await LswSqlite.saveDatabase();\n        this.$lsw.toasts.send({\n          title: \"Datos guardados\",\n          text: \"Los dadtos fueron guardados con éxito.\"\n        });\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    },\n    goToData() {\n      this.$trace(\"lsw-sqlite-explorer.methods.goToData\");\n      this.selectedSection = \"data\";\n    },\n    goToConsole() {\n      this.$trace(\"lsw-sqlite-explorer.methods.goToConsole\");\n      this.selectedSection = \"console\";\n    },\n    goToTables() {\n      this.$trace(\"lsw-sqlite-explorer.methods.goToTables\");\n      this.selectedSection = \"data\";\n      this.selectedDataSection = \"tables\";\n    },\n    openTable(tableId) {\n      this.$trace(\"lsw-sqlite-explorer.methods.goToTables\");\n      this.selectedSection = \"data\";\n      this.selectedDataSection = \"rows\";\n      this.selectedDataTable = tableId;\n    },\n    goToNewItem() {\n      this.$trace(\"lsw-sqlite-explorer.methods.goToNewItem\");\n      this.selectedDataSection = \"new-row\";\n    },\n    goToRows() {\n      this.$trace(\"lsw-sqlite-explorer.methods.goToRows\");\n      this.selectedDataSection = \"rows\";\n    }\n  },\n  watch: {\n    selectedDataTable(tableId) {\n      Cascadea_las_rows: {\n        if(typeof tableId === \"string\") {\n          (async () => {\n            this.rows = await LswSqlite.selectMany(tableId, []);\n          })();\n        } else {\n          this.rows = false;\n        }\n      }\n    }\n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-sqlite-explorer.mounted\");\n      this.loadEnvironment();\n      this.loadSchema();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSqliteExplorer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswSyntaxErrorViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-syntax-error-viewer/lsw-syntax-error-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 130,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswSyntaxErrorViewer component",
              "$code": "Vue.component(\"LswSyntaxErrorViewer\", {\n  template: $template,\n  props: {\n    error: {\n      type: [Object, Boolean],\n      default: () => false\n    },\n    onClearError: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  data() {\n    this.$trace(\"lsw-syntax-error-viewer.data\");\n    return {\n      currentError: this.error,\n    };\n  },\n  methods: {\n    setError(error = undefined) {\n      this.$trace(\"lsw-syntax-error-viewer.methods.setError\");\n      this.currentError = error;\n      if(typeof error === \"undefined\") {\n        this.onClearError();\n      }\n    },\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-syntax-error-viewer.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSyntaxErrorViewer API",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/partials/lsw-error-viewer/lsw-error-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 130,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswSyntaxErrorViewer component",
              "$code": "Vue.component(\"LswSyntaxErrorViewer\", {\n  template: $template,\n  props: {\n    error: {\n      type: [Object, Boolean],\n      default: () => false\n    },\n    onClearError: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  data() {\n    this.$trace(\"lsw-syntax-error-viewer.data\");\n    return {\n      currentError: this.error,\n    };\n  },\n  methods: {\n    setError(error = undefined) {\n      this.$trace(\"lsw-syntax-error-viewer.methods.setError\");\n      this.currentError = error;\n      if(typeof error === \"undefined\") {\n        this.onClearError();\n      }\n    },\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-syntax-error-viewer.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSyntaxErrorViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Test Context Viewer API » LswTestContextViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-test-context-viewer/lsw-test-context-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 140,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Test Context Viewer API » LswTestContextViewer component",
              "$code": "Vue.component(\"LswTestContextViewer\", {\n  template: $template,\n  props: {\n    testsPage: {\n      type: [Object, Boolean],\n      default: false,\n    }\n  },\n  data() {\n    const testContext = LswTestContext.create({}, this);\n    const testAsserter = testContext.$asserter;\n    return {\n      isStarted: false,\n      isFinished: false,\n      testAssertions: [],\n      testContext,\n      testAsserter,\n      testCronometer: undefined,\n      testContextButtons: this.testsPage ? [{\n        text: \"🪖 ↗️\",\n        event: () => this.testsPage.selectSection(\"coverage\")\n      }] : [],\n    };\n  },\n  methods: {\n    async startTests() {\n      this.$trace(\"lsw-tests-context-viewer.methods.startTests\");\n      this.isStarted = true;\n      this.testCronometer = LswTemporizer.create();\n      Export_assert_expanded: {\n        const assert = this.testAsserter;\n        // Overwrite global assert function:\n        window.assert = assert;\n        // Inject title feature externally:\n        window.assert.title = (title) => {\n          this.testAssertions.unshift({ title });\n        };\n      }\n      assert.title(\"Ready for tests\");\n      assert.as(\"starting tests\", true);\n      this.testContext.start();\n      // Run your custom tests:\n      await this.callTests();\n    },\n    async callTests() {\n      this.$trace(\"lsw-tests-context-viewer.methods.callTests\");\n      // @TODO: call all the tests from here:\n      await importer.scriptAsync(\"./assets/tests/cases/app/start-your-test-here.js\");\n      await importer.scriptAsync(\"./assets/tests/cases/framework/lsw.can-find-all-globals.js\");\n    },\n    addAssertion(text, value) {\n      this.$trace(\"lsw-tests-context-viewer.methods.addAssertion\");\n      this.testAssertions.unshift({\n        text,\n        value,\n        moment: this.testCronometer.getTime()\n      });\n    },\n  },\n  async mounted() {\n    this.$trace(\"lsw-tests-context-viewer.mounted\");\n  }\n});\n",
              "$code.label": "LswTestContextViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Unit Test Page » LswTesterModuleViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-tester-module-viewer/lsw-tester-module-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 133,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Unit Test Page » LswTesterModuleViewer component",
              "$code": "window.asserters = [];\nVue.component(\"LswTesterModuleViewer\", {\n  template: $template,\n  props: {\n    tester: {\n      type: Object,\n      required: true,\n    },\n    test: {\n      type: Object,\n      required: true,\n    }\n  },\n  data() {\n    return {\n      state: \"not started\", // \"started\", \"ignored\", \"passed\" or \"failed\"\n      assertions: [],\n    };\n  },\n  methods: {\n    addAssertion(assertionData) {\n      this.$trace(\"lsw-tester-module-viewer.methods.addAssertion\");\n      this.assertions = [].concat(this.assertions).concat([assertionData]);\n      this.$forceUpdate(true);\n    },\n    changeState(newState) {\n      this.$trace(\"lsw-tester-module-viewer.methods.changeState\");\n      this.state = newState;\n      this.$forceUpdate(true);\n    }\n  },\n  watch: {},\n  async mounted() {\n    this.$trace(\"lsw-tests-page.mounted\");\n    asserters.push(this);\n  }\n});\n",
              "$code.label": "LswTesterModuleViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Unit Test Page » LswTesterViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-tester-viewer/lsw-tester-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 121,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Unit Test Page » LswTesterViewer component",
              "$code": "const LswTesterViewerUtils = {};\nLswTesterViewerUtils.getEventSourceId = function(eventData) {\n  return eventData?.value?.id || \"tester\";\n};\nLswTesterViewerUtils.initModule = function(component, id) {\n  if(!(id in component.states)) {\n    component.states[id] = \"not started\";\n  }\n};\nLswTesterViewerUtils.registerEvent = function(component, eventType, id, eventData) {\n  LswTesterViewerUtils.initModule(component, id);\n  Notify_new_state_to_tester: {\n    if(eventType === \"onStartModule\") {\n      component.states[id] = \"started\";\n    } else if(eventType === \"onSuccessModule\") {\n      component.states[id] = \"passed\";\n      Notify_to_submodule: {\n        const selector = `[data-test-module=${JSON.stringify(id)}]`;\n        const moduleComponent = LswDom.findVue(selector, false, component.$refs.esquema_de_tests);\n        if(!moduleComponent) {\n          break Notify_new_state_to_tester;\n        }\n        moduleComponent.changeState(\"passed\");\n      }\n    } else if(eventType === \"onErrorModule\") {\n      component.states[id] = \"failed\";\n      Notify_to_submodule: {\n        const selector = `[data-test-module=${JSON.stringify(id)}]`;\n        const moduleComponent = LswDom.findVue(selector, false, component.$refs.esquema_de_tests);\n        if(!moduleComponent) {\n          break Notify_new_state_to_tester;\n        }\n        moduleComponent.changeState(\"failed\");\n      }\n    }\n  }\n  Append_assertion: {\n    if((eventType === \"onSuccessAssertion\") || (eventType === \"onErrorAssertion\")) {\n      const selector = `[data-test-module=${JSON.stringify(id)}]`;\n      const moduleComponent = LswDom.findVue(selector, false, component.$refs.esquema_de_tests);\n      if(!moduleComponent) {\n        break Append_assertion;\n      }\n      moduleComponent.addAssertion({\n        text: eventData.assertionText,\n        result: eventData.assertionResult,\n      });\n    }\n  }\n};\nVue.component(\"LswTesterViewer\", {\n  template: $template,\n  props: {\n    tester: {\n      type: Object,\n      required: true,\n    },\n    testsPage: {\n      type: Object,\n      default: () => false\n    }\n  },\n  data() {\n    return this.getInitialState();\n  },\n  methods: {\n    getInitialState() {\n      this.$trace(\"lsw-tests-page.methods.getInitialState\");\n      return {\n        isRun: false,\n        isStarted: false,\n        isLoaded: false,\n        isShowingSubmodules: false,\n        isShowingErrors: false,\n        isShowingEventsConsole: false,\n        isSuccessfullyCompleted: false,\n        currentErrors: [],\n        loadingError: false,\n        runningError: false,\n        temporizer: LswTemporizer.create(),\n        states: {},\n      };\n    },\n    goToCoverage() {\n      this.$trace(\"lsw-tests-page.methods.goToCoverage\");\n      if(this.testsPage) {\n        this.testsPage.selectSection(\"coverage\");\n      }\n    },\n    addEvent(event, eventData) {\n      this.$trace(\"lsw-tests-page.methods.addEvent\");\n      if(event.eventType === \"onStartTester\") {\n        this.temporizer.start();\n      } else if(event.eventType === \"onEndTester\") {\n        this.isSuccessfullyCompleted = this.currentErrors.length === 0;\n      } else if((event.eventType === \"onErrorModule\") || (event.eventType === \"onErrorAssertion\")) {\n        this.currentErrors.push({\n          errorType: event.eventType,\n          ...eventData\n        });\n      }\n      const id = LswTesterViewerUtils.getEventSourceId(eventData);\n      The_magic_should_happen_mostly_here: {\n        eventData.timeoff = this.temporizer.getTime();\n        LswTesterViewerUtils.registerEvent(this, event.eventType, id, eventData);\n      }\n      this.$refs.eventsConsole.textContent = `>> ${id} > ${ event.eventType } @${eventData.timeoff}\\n${ this.$refs.eventsConsole.textContent }`;\n    },\n    toggleEventsConsole() {\n      this.$trace(\"lsw-tests-page.methods.toggleEventsConsole\");\n      this.isShowingEventsConsole = !this.isShowingEventsConsole;\n    },\n    toggleErrors() {\n      this.$trace(\"lsw-tests-page.methods.toggleErrors\");\n      this.isShowingErrors = !this.isShowingErrors;\n    },\n    toggleSubmodules() {\n      this.$trace(\"lsw-tests-page.methods.toggleSubmodules\");\n      this.isShowingSubmodules = !this.isShowingSubmodules;\n    },\n    validateTester() {\n      this.$trace(\"lsw-tests-page.methods.validateTester\");\n      $ensure(this.tester).to.be.instanceOf(LswTester);\n    },\n    async loadTester() {\n      this.$trace(\"lsw-tests-page.methods.loadTester\");\n      try {\n        this.validateTester();\n        await this.tester.options({}).load();\n      } catch (error) {\n        this.loadingError = error;\n        this.$lsw.toasts.showError(error);\n        console.log(error);\n      } finally {\n        this.isLoaded = true;\n      }\n    },\n    async runTester() {\n      this.$trace(\"lsw-tests-page.methods.runTester\");\n      try {\n        this.isStarted = true;\n        const viewer = this;\n        await this.tester.options({\n          trace: (Vue?.prototype?.$lsw?.logger?.$options?.active ),\n          onAnything(event, ...args) {\n            viewer.addEvent(event, ...args);\n          }\n        }).run(1);\n      } catch (error) {\n        this.runningError = error;\n        this.$lsw.toasts.showError(error);\n        console.log(error);\n      } finally {\n        this.isRun = true;\n      }\n    },\n    resetTester() {\n      this.$trace(\"lsw-tests-page.methods.resetTester\");\n      LswDomIrruptor.abrirTestsDeAplicacion();\n    }\n  },\n  watch: {},\n  computed: {\n    isSuccessfullyCompleted() {\n\n    },\n    isCompleted() {\n      return this.tester.$isExecuted;\n    },\n    currentState() {\n      return !this.isLoaded ? \"to be loaded\" :\n        !this.isStarted ? \"loaded\" :\n        !this.isRun ? \"running\" : \"finished\";\n    }\n  },\n  async mounted() {\n    this.$trace(\"lsw-tests-page.mounted\");\n    this.loadTester();\n    window.testerviewer = this;\n  }\n});\n",
              "$code.label": "LswTesterViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Unit Test Page » LswTestsPage component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-tests-page/lsw-tests-page.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 115,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Unit Test Page » LswTestsPage component",
              "$code": "Vue.component(\"LswTestsPage\", {\n  template: $template,\n  props: {\n\n  },\n  data() {\n    return {\n      selectedSection: \"coverage\", // also: \"tester\", \"coverage\"\n      initializationError: false,\n      choosenTester: false,\n    };\n  },\n  methods: {\n    selectSection(subsection) {\n      this.$trace(\"lsw-tests-page.methods.selectSection\");\n      this.selectedSection = subsection;\n    },\n    async initializeTester() {\n      this.$trace(\"lsw-tests-page.methods.initializeTester\");\n      try {\n        const testcases = await importer.json(\"assets/tests/urls.json\");\n        this.choosenTester = LswTester.create().define(testcases).options({\n          onAnything(event) {\n            console.log(\"eventuated:\", event);\n          }\n        });\n      } catch (error) {\n        this.initializationError = error;\n        this.$lsw.toasts.showError(error);\n        console.log(error);\n        throw error;\n      }\n    }\n  },\n  watch: {},\n  async mounted() {\n    this.$trace(\"lsw-tests-page.mounted\");\n    await this.initializeTester();\n  }\n});\n",
              "$code.label": "LswTestsPage API",
              "$output": "index.html"
            },
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-tests-page--prev/lsw-tests-page.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 115,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Unit Test Page » LswTestsPage component",
              "$code": "Vue.component(\"LswTestsPage\", {\n  template: $template,\n  props: {\n\n  },\n  data() {\n    return {\n      isLoaded: false,\n      isRunning: false,\n      isDownloaded: false,\n      isCompleted: false,\n      section: \"available\",\n      baseUrl: \"assets/tests/cases/\",\n      available: [],\n      selected: [],\n      downloaded: [],\n    };\n  },\n  methods: {\n    goToSection(section) {\n      this.$trace(\"lsw-tests-page.methods.goToSection\");\n      this.section = section;\n    },\n    backToTests() {\n      this.$trace(\"lsw-tests-page.methods.backToTests\");\n      this.resetState();\n    },\n    resetState() {\n      this.$trace(\"lsw-tests-page.methods.resetState\");\n      this.isLoaded = false;\n      this.isRunning = false;\n      this.isDownloaded = false;\n    },\n    selectTest(test) {\n      const pos = this.selected.indexOf(test);\n      if(pos !== -1) {\n        this.selected.splice(pos, 1);\n      } else {\n        this.selected.push(test);\n      }\n    },\n    resetSelectedTests() {\n      this.$trace(\"lsw-tests-page.methods.resetSelectedTests\");\n      this.selected = [].concat(this.available);\n    },\n    async loadTests() {\n      this.$trace(\"lsw-tests-page.methods.loadTests\");\n      try {\n        this.available = await importer.json(\"assets/tests/testcases.json\");\n        this.selected = [].concat(this.available);\n        this.isLoaded = true;\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    },\n    async downloadTests() {\n      this.$trace(\"lsw-tests-page.methods.downloadTests\");\n      try {\n        const allDownloads = [];\n        for (let index = 0; index < this.selected.length; index++) {\n          const selectedTest = this.selected[index];\n          const testCallbackPromise = importer.scriptAsync(selectedTest);\n          allDownloads.push(testCallbackPromise)\n        }\n        const testsResult = await Promise.all(allDownloads);\n        const testsFormatted = LswUtils.flattenObjects(testsResult, {\n          keyMapper(key, totalKeys, indexKey) {\n            return `[T${('' + (totalKeys + 1)).padStart(4, '0')}] ${key}`;\n          }\n        });\n        this.downloaded = testsFormatted;\n        this.isDownloaded = true;\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    },\n    selectAllTests() {\n      this.$trace(\"lsw-tests-page.methods.selectAllTests\");\n      if(this.available.length === this.selected.length ) {\n        this.selected = [];\n      } else {\n        this.selected = [].concat(this.available);\n      }\n      this.$forceUpdate(true);\n    },\n    shortSubpath(subpath) {\n      return subpath.replace(this.baseUrl, \"\");\n    },\n    async runTests() {\n      this.$trace(\"lsw-tests-page.methods.runTests\");\n      try {\n        this.isRunning = true;\n        this.goToSection(\"running\");\n        // @TODO: continue running tests:\n      } catch (error) {\n        this.showError(error);\n      }\n    },\n    interruptTests() {\n      this.$trace(\"lsw-tests-page.methods.interruptTests\");\n      this.isRunning = false;\n    },\n    async start() {\n      this.$trace(\"lsw-tests-page.methods.start\");\n      try {\n        await this.downloadTests();\n        await this.runTests();\n      } catch (error) {\n        this.showError(error);\n      }\n    }\n  },\n  watch: {},\n  async mounted() {\n    this.$trace(\"lsw-tests-page.mounted\");\n    await this.loadTests();\n  }\n});\n",
              "$code.label": "LswTestsPage API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Toasts API » LswToasts component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-toasts/lsw-toasts.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 105,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Toasts API » LswToasts component",
              "$code": "Vue.component(\"LswToasts\", {\n  template: $template,\n  props: {},\n  data() {\n    return {\n      sent: {}\n    };\n  },\n  methods: {\n    getRandomString(len = 10) {\n      const alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n      let out = \"\";\n      while (out.length < len) {\n        out += alphabet[Math.floor(Math.random() * alphabet.length)];\n      }\n      return out;\n    },\n    showError(error, args = {}, propagate = false, log = true) {\n      this.$trace(\"lsw-toasts.methods.showError\");\n      let parameters = {};\n      const isSyntaxError = typeof error.location === \"object\";\n      if (isSyntaxError) {\n        parameters = {\n          title: `Error sintáctico en ${error.location.start.line}:${error.location.start.column} (${error.found})`,\n          text: error.expected,\n        }\n      } else {\n        parameters = {\n          title: \"Un error ocurrió\",\n          text: error.name + \": \" + error.message,\n          ...args,\n        }\n      }\n      const output = this.send(parameters);\n      if (log) {\n        console.log(error);\n      }\n      if (propagate) {\n        throw error;\n      }\n      return output;\n    },\n    send(toastsInput = {}) {\n      const toastData = Object.assign({\n        id: this.getRandomString(),\n        title: \"\",\n        text: \"\",\n        timeout: 3000,\n        orientation: \"bottom\",\n        background: \"rgba(255,255,255,0.5)\",\n        foreground: \"#000\",\n        started_at: new Date()\n      }, toastsInput);\n      if (typeof toastData.timeout !== \"number\") {\n        throw new Error(\"Required parameter «timeout» to be a number or empty on «LswToasts.methods.send»\");\n      }\n      if (isNaN(toastData.timeout)) {\n        throw new Error(\"Required parameter «timeout» to be a (non-NaN) number or empty on «LswToasts.methods.send»\");\n      }\n      if ([\"top\", \"bottom\", \"center\"].indexOf(toastData.orientation) === -1) {\n        throw new Error(\"Required parameter «orientation» to be a string (top, center, bottom) or empty on «LswToasts.methods.send»\");\n      }\n      if (toastData.id in this.sent) {\n        throw new Error(\"Required parameter «id» to not be repeated on «LswToasts.methods.send»\");\n      }\n      this.sent = Object.assign({}, this.sent, {\n        [toastData.id]: toastData\n      });\n      setTimeout(() => {\n        this.close(toastData.id);\n      }, toastData.timeout);\n    },\n    close(id) {\n      delete this.sent[id];\n      this.$forceUpdate(true);\n    },\n    debug(anyzing) {\n      this.send({\n        title: typeof anyzing,\n        text: LswUtils.stringify(anyzing),\n      });\n    },\n    collapse(anyzing, timeout = 3000) {\n      this.$lsw.dialogs.open({\n        title: \"Debugging: type \" + typeof anyzing,\n        template: `\n          <div class=\"pad_1\">\n            <div>Moment: {{ moment }}</div>\n            <pre class=\"codeblock\" style=\"font-size: 10px;\">{{ code }}</pre>\n          </div>\n        `,\n        factory: function() {\n          return {\n            data() {\n              return {\n                moment: LswTimer.utils.fromDateToDatestring(new Date(), true),\n                code: typeof anyzing === \"string\" ? anyzing : JSON.stringify(anyzing, null, 2),\n              };\n            },\n            mounted() {\n              setTimeout(() => this.cancel(), timeout);\n            },\n          };\n        }\n      });\n    }\n  },\n  watch: {},\n  mounted() {\n    this.$toasts = this;\n    this.$window.LswToasts = this;\n    if (this.$lsw) {\n      this.$lsw.toasts = this;\n    }\n    this.$window.dd = (...args) => {\n      return this.debug(...args);\n    };\n  }\n});\n",
              "$code.label": "LswToasts API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswTypicalTitle component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-typical-title/lsw-typical-title.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 100,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswTypicalTitle component",
              "$code": "Vue.component(\"LswTypicalTitle\", {\n  template: $template,\n  props: {\n    buttons: {\n      type: [Array, Boolean],\n      default: () => []\n    }\n  },\n  data() {\n    this.$trace(\"lsw-typical-title.data\");\n    return {\n      \n    };\n  },\n  methods: {\n    \n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-typical-title.mounted\");\n      // @OK\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswTypicalTitle API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Unit Tester API » LswUnitTestAll component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-unit-test-all/lsw-unit-test-all.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 120,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Unit Tester API » LswUnitTestAll component",
              "$code": "Vue.component(\"LswUnitTestAll\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    return {\n      mode: false,\n      autorunOption: false,\n    };\n  },\n  methods: {\n    openTests() {\n      this.autorunOption = false;\n      this.mode = \"open\";\n    },\n    runTests() {\n      this.autorunOption = true;\n      this.mode = \"run\";\n    },\n    goBack() {\n      this.autorunOption = false;\n      this.mode = false;\n    }\n  },\n  watch: {},\n  async mounted() {\n    this.$trace(\"lsw-unit-test-all.mounted\");\n  }\n});\n",
              "$code.label": "LswUnitTestAll API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Unit Test Page » LswUnitTestPage component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-unit-test-page/lsw-unit-test-page.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 121,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Unit Test Page » LswUnitTestPage component",
              "$code": "Vue.component(\"LswUnitTestPage\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    return {\n      testsBaseUrl: \"assets/tests/cases/\",\n      isLoaded: false,\n      isReady: false,\n      availableTests: false,\n      selectedTests: [],\n      downloadedTests: [],\n    };\n  },\n  methods: {\n    backToTests() {\n      this.$trace(\"lsw-unit-test-page.methods.backToTests\");\n      this.isReady = false;\n    },\n    async loadTests() {\n      this.$trace(\"lsw-unit-test-page.methods.loadTests\");\n      this.availableTests = await importer.json(\"assets/tests/testcases.json\");\n      this.selectedTests = [].concat(this.availableTests);\n    },\n    async start() {\n      const allDownloads = [];\n      for(let index=0; index<this.selectedTests.length; index++) {\n        const selectedTest = this.selectedTests[index];\n        const testCallbackPromise = importer.scriptSrc(selectedTest);\n        allDownloads.push(testCallbackPromise)\n      }\n      await Promise.all(allDownloads);\n      this.downloadedTests = LswTests.all();\n      console.log(this.downloadedTests);\n      this.isReady = true;\n    }\n  },\n  watch: {},\n  async mounted() {\n    this.$trace(\"lsw-unit-test-page.mounted\");\n    await this.loadTests();\n    this.isLoaded = true;\n  }\n});\n",
              "$code.label": "LswUnitTestPage API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Unit Tester API » LswUnitTester component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-unit-tester/lsw-unit-tester.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Unit Tester API » LswUnitTester component",
              "$code": "Vue.component(\"LswUnitTester\", {\n  template: $template,\n  props: {\n    test: {\n      type: Function,\n      required: true,\n    },\n    autorun: {\n      type: Boolean,\n      default: true,\n    },\n    onFinish: {\n      type: Function,\n      default: () => {},\n    },\n  },\n  data() {\n    return {\n      hasRunTests: false,\n      isExpanded: false,\n      report: false,\n      selectedTests: [],\n      isSourceAccessed: false,\n      error: false,\n    };\n  },\n  methods: {\n    showError(error) {\n      this.error = error;\n      this.$forceUpdate(true);\n    },\n    toggleTest(testIndex) {\n      const pos = this.selectedTests.indexOf(testIndex);\n      if(pos !== -1) {\n        this.selectedTests.splice(pos, 1);\n      } else {\n        this.selectedTests.push(testIndex);\n      }\n    },\n    toggleDetails() {\n      this.isExpanded = !this.isExpanded;\n    },\n    async setupTest() {\n      this.$trace(\"lsw-unit-tester.methods.setupTest\");\n      // @OK.\n    },\n    createBlankReport() {\n      return {\n        testCollectionId: 'not specified',\n      }\n    },\n    async runTest() {\n      this.$trace(\"lsw-unit-tester.methods.runTest\");\n      try {\n        console.log(\"[*] Starts test...\")\n        const tester = await this.test.call();\n        console.log(\"[*] Test ok!\");\n        this.hasRunTests = true;\n        if(tester instanceof LswTester) {\n          this.report = tester.getReport();\n        } else {\n          this.report = this.createBlankReport();\n        }\n        if(typeof this.onFinish === \"function\") {\n          this.onFinish(this.report, this);\n        }\n      } catch (error) {\n        console.log(\"[!] Test failed!\");\n        this.showError(error);\n        console.log(error);\n      }\n    },\n    toggleSource() {\n      this.$trace(\"lsw-unit-tester.methods.toggleSource\");\n      this.isSourceAccessed = !this.isSourceAccessed;\n    },\n  },\n  watch: {},\n  async mounted() {\n    this.$trace(\"lsw-unit-tester.mounted\");\n    await this.setupTest();\n    if(this.autorun) {\n      this.runTest();\n    }\n  }\n});\n",
              "$code.label": "LswUnitTester API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswUnitTesterCollection component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-unit-tester-collection/lsw-unit-tester-collection.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswUnitTesterCollection component",
              "$code": "Vue.component(\"LswUnitTesterCollection\", {\n  template: $template,\n  props: {\n    allTests: {\n      type: Array,\n      required: true,\n    },\n    autorun: {\n      type: Boolean,\n      default: () => false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-unit-tester-collection.data\");\n    return {\n      isCompleted: false,\n      isPassed: undefined,\n      startedTests: [],\n      testResults: [],\n    };\n  },\n  methods: {\n    async nextTest(previousReport = false) {\n      this.$trace(\"lsw-unit-tester-collection.methods.nextTest\");\n      if(typeof previousReport === 'object') {\n        this.testResults.push(previousReport.result);\n      }\n      const shouldNotInterrupt = this.autorun || force;\n      if(!shouldNotInterrupt) {\n        return;\n      }\n      if(this.allTests.length === this.startedTests.length) {\n        this.isCompleted = true;\n        this.calculatePass();\n        return;\n      }\n      try {\n        const nextTestIndex = this.startedTests.length;\n        const nextTestCallback = this.allTests[nextTestIndex];\n        this.startedTests.push(nextTestCallback);\n      } catch (error) {\n        this.startedTests.push(error);\n        console.log(error);\n      }\n    },\n    calculatePass() {\n      let isPassed = true;\n      Iterating_results:\n      for(let index=0; index<this.testResults.length; index++) {\n        const result = this.testResults[index];\n        const isOk = [\"defined\", \"passed\"].indexOf(result) !== -1;\n        if(!isOk) {\n          isPassed = false;\n          break Iterating_results;\n        }\n      }\n      this.isPassed = isPassed;\n    },\n    startTest(testIndex) {\n      this.allTests[testIndex].$lswTester = {\n        state: \"started\",\n      };\n      const nextTestCallback = this.allTests[testIndex];\n      this.startedTests.push(nextTestCallback);\n      this.$forceUpdate(true);\n    },\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-unit-tester-collection.mounted\");\n      this.nextTest();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswUnitTesterCollection API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Week Planner API » LswWeekPlanner component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-week-planner/lsw-week-planner.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 121,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Week Planner API » LswWeekPlanner component",
              "$code": "Vue.component(\"LswWeekPlanner\", {\n  template: $template,\n  props: {},\n  data() {\n    return {\n      scriptContent: \"\",\n      scriptOutput: \"\",\n    };\n  },\n  methods: {\n    parsear() {\n      try {\n        const ast = WeekLang.parse(this.scriptContent);\n        this.scriptOutput = JSON.stringify(ast, null, 2);\n      } catch (error) {\n        this.scriptOutput = JSON.stringify({\n          error: true,\n          name: error.name,\n          message: error.message,\n          stack: error.stack,\n        }, null, 2);\n      }\n    }\n  },\n  watch: {},\n  mounted() {\n    \n  }\n});\n",
              "$code.label": "LswWeekPlanner API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » NewCanvasExperiment1 component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/new-canvas-experiment-1/new-canvas-experiment-1.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » NewCanvasExperiment1 component",
              "$code": "(function () {\n\n  const Cc = {};\n  Cc.width = 250;\n  Cc.height = 250;\n  Cc.fuga = {\n    x: 125,\n    y: 125,\n  };\n\n  Vue.component(\"NewCanvasExperiment1\", {\n    template: $template,\n    props: {},\n    data() {\n      return {\n\n      };\n    },\n    methods: {\n      load() {\n        const canvas = this.$refs.canvas1;\n        const context = canvas.getContext(\"2d\");\n        // context.fillRect(Cc.fuga.x, Cc.fuga.y, 1, 1);\n        console.log(canvas.width / 2);\n        console.log(canvas.height / 2);\n        context.fillRect(canvas.width / 2, canvas.height / 2, 1, 1);\n      }\n    },\n    watch: {},\n    mounted() {\n      this.load();\n    }\n  });\n\n})();\n",
              "$code.label": "NewCanvasExperiment1 API",
              "$output": "index.html"
            }
          ],
          "Lsw Directives » v-call directive": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/directives/v-call/v-call.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 74,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Lsw Directives » v-call directive",
              "$code": "Vue.directive(\"call\", {\n  inserted: function(el) {\n    \n  }\n});\n",
              "$code.label": "v-call API",
              "$output": "index.html"
            }
          ],
          "Lsw Directives » v-descriptor directive": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/directives/v-descriptor/v-descriptor.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 86,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Lsw Directives » v-descriptor directive",
              "$code": "(() => {\n\n  const getDescriptorKeys = function (el, binding) {\n    if (binding.expression.startsWith(\"'\") || binding.expression.startsWith('\"')) {\n      return (binding.value || el.getAttribute(\"descriptor\")).split(\" \");\n    }\n    return (binding.expression || el.getAttribute(\"descriptor\")).split(\" \");\n  };\n\n  Vue.directive(\"descriptor\", {\n    bind(el, binding) {\n      const resolveClasses = key => {\n        let resolved = window.stylingDescriptor[key];\n        if (!resolved) return key;\n        if (typeof resolved === \"string\") {\n          resolved = resolved.split(\" \");\n        }\n        return resolved.map(subKey => resolveClasses(subKey)).flat();\n      };\n      const descriptorKeys = getDescriptorKeys(el, binding);\n      const descriptorClasses = descriptorKeys.map(key => resolveClasses(key)).flat();\n      descriptorClasses.forEach(cls => {\n        if (cls.indexOf(\".\") === -1) {\n          el.classList.add(cls);\n        }\n      });\n    }\n  });\n\n  const styleTag = document.createElement(\"style\");\n  styleTag.textContent = `\n  .title_of_form {\n    border: 1px solid #113;\n    box-shadow: 0 0 4px black;\n    border-radius: 0pt;\n    color: black;\n    width: 100%;\n    padding: 8px;\n    font-size: 12px;\n    background-color: #AAF;\n  }\n  .block_of_form {\n    padding: 4px;\n    padding-left: 0px;\n    padding-right: 0px;\n    padding-bottom: 0px;\n    padding-top: 0px;\n  }\n  .bordered_1 {\n    border: 1px solid #999;\n    border-radius: 2pt;\n  }\n  .with_separator_on_bottom_1 {\n    border-bottom: 1px solid #999;\n  }\n  .lateral_button {\n    height: 100%;\n  }\n  .lateral_button_cell {\n    padding-top: 4px;\n    padding-bottom: 4px;\n    padding-right: 4px;\n  }\n  .padded_1 {\n    padding: 4px;\n  }\n  .vertically_padded_1 {\n    padding-top: 4px;\n    padding-bottom: 4px;\n  }\n  .horizontally_padded_1 {\n    padding-left: 4px;\n    padding-right: 4px;\n  }\n  .left_padded_1 {\n    padding-left: 4px;\n  }\n  .right_padded_1 {\n    padding-right: 4px;\n  }\n  .top_padded_1 {\n    padding-top: 4px;\n  }\n  .bottom_padded_1 {\n    padding-bottom: 4px;\n  }\n  .calendar_main_panel {\n    padding-left: 0px;\n    padding-right: 0px;\n    padding-top: 0px;\n    padding-bottom: 4px;\n  }\n  .calendar_buttons_panel_1 {\n    padding-bottom: 0px;\n    padding-top: 0px;\n  }\n`;\n\n  window.addEventListener(\"load\", function() {\n    document.body.appendChild(styleTag);\n  });\n\n  window.stylingDescriptor = {\n    \"agenda.calendar.buttons_panel_1\": \"calendar_main_panel calendar_buttons_panel_1\",\n    \"agenda.task_form.title\": \"title_of_form\",\n    \"agenda.task_form.block\": \"block_of_form\",\n    \"agenda.task_form.block_of_add_button\": \"block_of_form vertically_padded_1\",\n    \"agenda.task_form.block_of_aggregated_field\": \"bordered_1\",\n    \"agenda.task_form.section\": \"with_separator_on_bottom_1\",\n    \"agenda.task_form.aggregations.block\": \"block_of_form\",\n    \"agenda.task_form.aggregations.lateral_button\": \"lateral_button\",\n    \"agenda.task_form.aggregations.lateral_button_cell\": \"lateral_button_cell\",\n    \"lsw_table.no_data_provided_message\": \"pad_top_2 pad_bottom_2\"\n  }\n\n})();\n",
              "$code.label": "v-descriptor API",
              "$output": "index.html"
            }
          ],
          "Lsw Directives » v-focus directive": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/directives/v-focus/v-focus.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 76,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Lsw Directives » v-focus directive",
              "$code": "Vue.directive(\"focus\", {\n  inserted: function(el) {\n    el.focus();\n  }\n});\n",
              "$code.label": "v-focus API",
              "$output": "index.html"
            }
          ],
          "Lsw Directives » v-xform directive": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/directives/v-xform/v-xform.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 77,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Lsw Directives » v-xform directive",
              "$code": "(function (factory) {\n  const mod = factory();\n  if (typeof window !== 'undefined') {\n    window['LswXForm'] = mod;\n  }\n  if (typeof global !== 'undefined') {\n    global['LswXForm'] = mod;\n  }\n  if (typeof module !== 'undefined') {\n    module.exports = mod;\n  }\n})(function () {\n\n  let isTracing = true;\n  let $COUNTADOR1 = 0;\n\n  const trace = function (method, args = []) {\n    if (isTracing) {\n      console.log(\"[trace][lsw-xform][\" + method + \"]\", args.length);\n    }\n  };\n\n  const XformCommonInterface = class {\n    formInterface = \"Common\";\n    static create(...args) {\n      return new this(...args);\n    }\n    constructor(inheritedArgument, subtype) {\n      const { el, binding, scope } = inheritedArgument;\n      trace(\"XformCommonInterface.constructor:\" + this.formInterface);\n      this.$el = el;\n      this.$binding = binding;\n      this.$component = scope;\n      this.$type = subtype;\n      this.$name = this.$binding.value?.name || false;\n      this.$onValidateInterfaceArguments();\n      this.$injectAttributesToElement();\n    }\n    $injectAttributesToElement() {\n      trace(\"XformCommonInterface.$injectAttributesToElement:\" + this.formInterface);\n      this.$el.setAttribute(\"data-xform-node\", this);\n    }\n    $onValidateInterfaceArguments() {\n      trace(\"XformCommonInterface.$onValidateInterfaceArguments:\" + this.formInterface);\n      const ensureEl = $ensure(this.$el).type(\"object\").to.be.instanceOf(HTMLElement);\n      const ensureBinding = $ensure(this.$binding).type(\"object\");\n      const ensureValue = ensureBinding.its(\"value\").type(\"object\");\n      const checkValue = $check(ensureValue.$subject);\n      $ensure(this.$type).type(\"string\").to.be.oneOf([\"form\", \"control\", \"input\", \"error\"]);\n      ensureValue.to.have.keys([\"name\"]).its(\"name\").type(\"string\").back();\n      if (checkValue.to.have.key(\"onSetError\")) {\n        ensureValue.its(\"onSetError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onClearError\")) {\n        ensureValue.its(\"onClearError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onGetValue\")) {\n        ensureValue.its(\"onGetValue\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onGetChildren\")) {\n        ensureValue.its(\"onGetChildren\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onValidate\")) {\n        ensureValue.its(\"onValidate\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onSubmit\")) {\n        ensureValue.its(\"onSubmit\").type(\"function\");\n      }\n    }\n    validate() {\n      trace(\"XformCommonInterface.validate:\" + this.formInterface);\n      const value = this.getValue();\n      const result = this.$hookWith(\"onValidate\", [value, this]);\n      this.$propagateSuccess();\n      return true;\n    }\n    $getParent(onlyTypes = false) {\n      trace(\"XformCommonInterface.$getParent:\" + this.formInterface);\n      if (typeof onlyTypes === \"string\") {\n        onlyTypes = [onlyTypes];\n      }\n      const found = LswDom.getClosestParent(this.$el, \"[data-xform-node]\");\n      if (!Array.isArray(onlyTypes)) {\n        return found;\n      } else if (!found?.length) {\n        return found;\n      }\n      return found.filter(el => onlyTypes.indexOf(el.$xform.$type) !== -1);\n    }\n    $getChildren(onlyTypesInput = false) {\n      trace(\"XformCommonInterface.$getChildren:\" + this.formInterface);\n      let onlyTypes = onlyTypesInput;\n      if (typeof onlyTypesInput === \"string\") {\n        onlyTypes = [onlyTypesInput];\n      }\n      const found = LswDom.getClosestChildren(this.$el, \"[data-xform-node]\");\n      if (!Array.isArray(onlyTypes)) {\n        return found;\n      } else if (!found?.length) {\n        return found;\n      }\n      const foundChildren = found.filter(el => onlyTypes.indexOf(el.$xform.$type) !== -1);\n      return foundChildren;\n    }\n    getValue() {\n      trace(\"XformCommonInterface.getValue:\" + this.formInterface);\n      const result = this.$hookWith(\"onGetValue\");\n      if (typeof result !== \"undefined\") {\n        return result;\n      }\n      return this.$getChildren([\"form\", \"control\", \"input\"]).reduce((output, el) => {\n        const hasName = el.$xform.$binding.value.name;\n        if (hasName === \"*\") {\n          output = el.$xform.getValue();\n        } else if (!hasName) {\n          // @OK...\n        } else {\n          output[hasName] = el.$xform.getValue();\n        }\n        return output;\n      }, {});\n    }\n    $hookWith(hookId, parameters = []) {\n      trace(\"XformCommonInterface.$hookWith:\" + this.formInterface);\n      if (!(hookId in this.$binding.value)) {\n        console.log(`[-] No hooks found for ${hookId}`);\n        return undefined;\n      }\n      const hookFunction = this.$binding.value[hookId];\n      if (typeof hookFunction === \"undefined\") {\n        console.log(`[-] Hook with bad type found for ${hookId}`);\n        return undefined;\n      } else if (typeof hookFunction !== \"function\") {\n        throw new Error(`Expected parameter «${hookId}» to be a function on «$hookWith»`);\n      }\n      console.log(`[*] Executing hook for ${hookId}`);\n      console.log(hookFunction.toString(), parameters);\n      return hookFunction(...parameters);\n    }\n    $setError(error) {\n      trace(\"XformCommonInterface.$setError:\" + this.formInterface);\n      this.$error = error;\n      this.$hookWith(\"onSetError\", [error, this]);\n      return this;\n    }\n    $clearError() {\n      trace(\"XformCommonInterface.$clearError:\" + this.formInterface);\n      this.$error = false;\n      this.$hookWith(\"onClearError\", [this]);\n      return this;\n    }\n    $propagateError(error, rethrowIt = 1, propagateDown = 1, propagateUp = 1) {\n      trace(\"XformCommonInterface.$propagateError:\" + this.formInterface);\n      try {\n        if (this.$binding.value.debug) {\n          console.error(`[DEBUG] Error propagated to «v-form.${this.$type}»:`, error);\n        }\n        const contador = ++$COUNTADOR1;\n        Propagate_down: {\n          if(!propagateDown) {\n            break Propagate_down;\n          }\n          console.log(\"propagate down now \" + contador + \" \" + this.formInterface);\n          const propagableChildren = this.$getChildren([\"error\"]);\n          console.log(propagableChildren);\n          if (propagableChildren && propagableChildren.length) {\n            for (let index = 0; index < propagableChildren.length; index++) {\n              const child = propagableChildren[index];\n              child.$xform.$setError(error);\n            }\n          }\n          console.log(\"ok down now \" + contador + \" \" + this.formInterface);\n        }\n        Propagate_up: {\n          if(!propagateUp) {\n            break Propagate_up;\n          }\n          console.log(\"propagate up now \" + contador + \" \" + this.formInterface);\n          const propagableParent = this.$getParent([\"form\", \"control\"]);\n          console.log(propagableParent);\n          if (propagableParent) {\n            try {\n              propagableParent.$xform.$propagateError(error, 1);\n            } catch (error) {\n              console.log(error);\n            }\n          }\n          console.log(\"ok up now \" + contador + \" \" + this.formInterface);\n        }\n      } catch (error) {\n        console.log(error);\n      } finally {\n        this.$setError(error);\n        if (rethrowIt === 1) {\n          throw error;\n        }\n      }\n    }\n    $propagateSuccess() {\n      trace(\"XformCommonInterface.$propagateSuccess:\" + this.formInterface);\n      // this.$getParent([\"form\", \"control\"]).$propagateSuccess(error);\n      const contador = ++$COUNTADOR1;\n      Propagate_down: {\n        console.log(\"propagate SUCCESS down now (to errors)\" + contador + \" \" + this.formInterface);\n        const propagableChildren = this.$getChildren([\"error\"]);\n        console.log(propagableChildren);\n        for (let index = 0; index < propagableChildren.length; index++) {\n          const child = propagableChildren[index];\n          child.$xform.$clearError();\n        }\n        console.log(\"ok down now (to errors)\" + contador + \" \" + this.formInterface);\n      }\n      this.$clearError();\n    }\n  };\n\n  const XformForm = class extends XformCommonInterface {\n    formInterface = \"Form\";\n    $onValidateInterfaceArguments() {\n      trace(\"XformForm.$onValidateInterfaceArguments\");\n      const ensureEl = $ensure(this.$el);\n      const ensureBinding = $ensure(this.$binding);\n      const ensureValue = ensureBinding.its(\"value\").type(\"object\");\n      const checkValue = $check(ensureValue.$subject);\n    }\n    submit() {\n      trace(\"XformForm.submit\");\n      const resultado = this.validate();\n      if(resultado !== true) throw new Error(\"Could not validate form\");\n      const value = this.getValue();\n      const result = this.$hookWith(\"onSubmit\", [value], this);\n      if (typeof result !== \"undefined\") {\n        return result;\n      }\n    }\n    validate() {\n      trace(\"XformForm.validate\");\n      try {\n        const allChildren = this.$getChildren([\"form\", \"control\"]);\n        let allErrors = 0;\n        for (let indexChild = 0; indexChild < allChildren.length; indexChild++) {\n          const child = allChildren[indexChild];\n          console.log(\"Validating [from form] now child to validate:\", child);\n          try {\n            const result = child.$xform.validate();\n            if(!result) {\n              allErrors++;\n            }\n          } catch (error) {\n            allErrors++;\n          }\n        }\n        if(allErrors > 0) {\n          throw new Error(`Form has «${allErrors}» validation errors. Fix them to continue.`);\n        }\n        const resultado = super.validate();\n        if(resultado !== true) {\n          throw new Error(\"Could not validate form natively (calling super.validate) on «XformForm.validate»\");\n        }\n        this.$propagateSuccess();\n        return true;\n      } catch (error) {\n        this.$propagateError(error, 0, 1, 0);\n        throw error;\n      }\n    }\n  };\n\n  const XformControl = class extends XformCommonInterface {\n    formInterface = \"Control\";\n    $onValidateInterfaceArguments() {\n      trace(\"XformControl.$onValidateInterfaceArguments\");\n      const ensureEl = $ensure(this.$el);\n      const ensureBinding = $ensure(this.$binding);\n      const ensureValue = ensureBinding.its(\"value\").type(\"object\");\n      const checkValue = $check(ensureValue.$subject);\n      ensureValue.to.have.keys([\"name\"]).its(\"name\").type(\"string\").back();\n      if (checkValue.to.have.key(\"onSetError\")) {\n        ensureValue.its(\"onSetError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onClearError\")) {\n        ensureValue.its(\"onClearError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onGetValue\")) {\n        ensureValue.its(\"onGetValue\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onGetChildren\")) {\n        ensureValue.its(\"onGetChildren\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onValidate\")) {\n        ensureValue.its(\"onValidate\").type(\"function\");\n      }\n    }\n    $validateChildren() {\n      trace(\"XformControl.$validateChildren\");\n      const allChildren = this.$getChildren([\"form\", \"control\", \"input\"]);\n      for (let indexChild = 0; indexChild < allChildren.length; indexChild++) {\n        const child = allChildren[indexChild];\n        console.log(\"Validating [from control] now child to validate:\", child);\n        child.$xform.validate();\n      }\n      this.$propagateSuccess();\n    }\n    validate(deeply = false) {\n      trace(\"XformControl.validate\");\n      try {\n        const value = this.getValue();\n        this.$hookWith(\"onValidate\", [value, this]);\n        this.$propagateSuccess();\n        return true;\n      } catch (error) {\n        this.$propagateError(error, 0, 1, 0);\n      }\n    }\n  };\n\n  const XformInput = class extends XformCommonInterface {\n    formInterface = \"Input\";\n    validate() {\n      trace(\"XformInput.validate\");\n      const value = this.getValue();\n      this.$hookWith(\"onValidate\", [value, this]);\n      return true;\n    }\n    $onValidateInterfaceArguments() {\n      trace(\"XformInput.$onValidateInterfaceArguments\");\n      const ensureEl = $ensure(this.$el);\n      const ensureBinding = $ensure(this.$binding);\n      const ensureValue = ensureBinding.its(\"value\").type(\"object\");\n      const checkValue = $check(ensureValue.$subject);\n      ensureValue.to.have.keys([\"name\"]).its(\"name\").type(\"string\").back();\n      if (checkValue.to.have.key(\"onSetError\")) {\n        ensureValue.its(\"onSetError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onClearError\")) {\n        ensureValue.its(\"onClearError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onGetValue\")) {\n        ensureValue.its(\"onGetValue\").type(\"function\");\n      }\n    }\n    getValue() {\n      trace(\"XformInput.getValue\");\n      if ([\"INPUT\", \"TEXTAREA\", \"SELECT\"].indexOf(this.$el.tagName) !== -1) {\n        const ownValue = this.$el.value;\n        return ownValue;\n      } else {\n        return super.getValue();\n      }\n    }\n    $propagateSuccess() {\n      const control = this.$getParent([\"control\"]);\n      control.$xform.$propagateSuccess();\n    }\n  };\n\n  const XformError = class extends XformCommonInterface {\n    formInterface = \"Error\";\n    $onValidateInterfaceArguments() {\n      trace(\"XformError.$onValidateInterfaceArguments\");\n      const ensureEl = $ensure(this.$el);\n      const ensureBinding = $ensure(this.$binding);\n      const ensureValue = ensureBinding.its(\"value\").type(\"object\");\n      const checkValue = $check(ensureValue.$subject);\n      if (checkValue.to.have.key(\"onSetError\")) {\n        ensureValue.its(\"onSetError\").type(\"function\");\n      }\n      if (checkValue.to.have.key(\"onClearError\")) {\n        ensureValue.its(\"onClearError\").type(\"function\");\n      }\n    }\n    validate() {\n      // @EMPTY.\n    }\n    $getChildren() {\n      trace(\"XformError.$getChildren\");\n      throw new Error(`Error can not contain children on «XformError.$getChildren»`);\n    }\n    getValue() {\n      trace(\"XformError.getValue\");\n      throw new Error(`Error can not contain a value on «XformError.getValue»`);\n    }\n    $setError(error) {\n      trace(\"XformError.$setError\");\n      this.$error = error;\n      this.$el.classList.add(\"error_is_affecting_field\");\n      try {\n        const summarizedError = error.summarized();\n        summarizedError.stack2 = summarizedError.stack.map(tr => {\n          return tr.split(\"\\n\").map((msg, errorIndex) => {\n            const [callbackName, rest1] = LswUtils.splitStringOnce(msg, \"@\");\n            if (!rest1) {\n              return [1, callbackName, rest1];\n            }\n            const rest2 = LswUtils.reverseString(rest1);\n            const [columnReversed, rest3] = LswUtils.splitStringOnce(rest2, \":\");\n            if (!rest3) {\n              return [3, rest3, columnReversed, callbackName];\n              return msg;\n            }\n            const [lineReversed, errorSource] = LswUtils.splitStringOnce(rest3, \":\");\n            if (!errorSource) {\n              return [5, errorSource, lineReversed, rest3, columnReversed, callbackName];\n              return msg;\n            }\n            const line = LswUtils.reverseString(lineReversed);\n            const column = LswUtils.reverseString(columnReversed);\n            return `${errorIndex + 1}. ${LswUtils.reverseString(errorSource)}:${line}:${column}::${callbackName}`;\n          }).join(\"\\n\")\n        });\n        this.$getErrorMessageElement().textContent = `${error.name}: ${error.message}.\\n${summarizedError.stack2}`;\n      } catch (error2) {\n        this.$getErrorMessageElement().textContent = `${error.name}: ${error.message} [${error.stack}]`;\n      }\n      try {\n        this.$hookWith(\"onSetError\", [error, this]);\n      } catch (error) {\n        console.log(error);\n      }\n      return this;\n    }\n    $getErrorMessageElement() {\n      return (this.$el.querySelector(\".errorMessage\") || this.$el);\n    }\n    $clearError() {\n      trace(\"XformError.$clearError\");\n      this.$error = undefined;\n      this.$el.classList.remove(\"error_is_affecting_field\");\n      this.$getErrorMessageElement().textContent = ``;\n      this.$hookWith(\"onClearError\", [this]);\n      return this;\n    }\n  };\n\n  const xformClasses = {\n    form: XformForm,\n    control: XformControl,\n    input: XformInput,\n    error: XformError,\n  };\n\n  Vue.directive(\"xform\", {\n    bind(el, binding) {\n      trace(\"xform-directive.bind\");\n      // console.log(binding);\n      const modifierType = Object.keys(binding.modifiers)[0];\n      if (!(modifierType in xformClasses)) {\n        throw new Error(\"Required directive «v-form» to be injected with a known modifier on «xform.bind»\");\n      }\n      const xformClass = xformClasses[modifierType];\n      const xformInstance = xformClass.create({ el, binding, scope: this }, modifierType);\n      el.$xform = xformInstance;\n    },\n    unbind(el) {\n      trace(\"xform-directive.unbind\");\n      delete el.$xform.$binding;\n      delete el.$xform.$el;\n      delete el.$xform;\n    }\n  });\n\n  const XFormPublicAPI = {\n    validateSettings(settings) {\n      trace(\"XFormPublicAPI.validateSettings\");\n      const checkSettings = $check(settings);\n      const ensureSettings = $ensure(settings).type(\"object\").to.have.key(\"name\");\n      ensureSettings.its(\"name\").type(\"string\").back();\n      if (checkSettings.to.have.key(\"input\")) {\n        const ensureInput = ensureSettings.its(\"input\").type(\"object\");\n        ensureInput.to.have.uniquelyKeys([\"props\", \"events\"]);\n        if(checkSettings.its(\"input\").to.have.key(\"props\")) {\n          ensureInput.its(\"props\").type(\"object\");\n        }\n        if(checkSettings.its(\"input\").to.have.key(\"events\")) {\n          ensureInput.its(\"events\").type(\"object\");\n        }\n      }\n    }\n  }\n\n  return XFormPublicAPI;\n\n});\n",
              "$code.label": "LswXForm API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgenda API » LswAgenda component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/lsw-agenda/lsw-agenda.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 120,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgenda API » LswAgenda component",
              "$code": "Vue.component(\"LswAgenda\", {\n  name: \"LswAgenda\",\n  template: $template,\n  props: {\n    context: {\n      type: String,\n      default: \"agenda\"\n    }\n  },\n  data() {\n    this.$trace(\"lsw-agenda.data\");\n    let allAgendaButtons = [];\n    if (typeof this.$window.cordova !== \"undefined\") {\n      allAgendaButtons = allAgendaButtons.concat([{\n        text: '🔔',\n        event: () => this.synchronizeAlarms(),\n      }, {\n        text: '🔕',\n        event: () => this.unsynchronizeAlarms(),\n      }]);\n    }\n    return {\n      counter: 0,\n      isLoading: false,\n      hasPsicodelia: true,\n      selectedHiddenMenu: \"none\",\n      selectedContext: \"agenda\",\n      selectedAction: 'calendario',\n      selectedDate: undefined,\n      selectedDateTasks: undefined,\n      selectedDateTasksSorted: undefined,\n      selectedDateTasksFormattedPerHour: undefined,\n      selectedForm: undefined,\n      hiddenDateHours: [],\n      shownAcciones: [],\n      agendaButtons: allAgendaButtons,\n      possibleNotifiers: [\n        accion => `🔷 ¡Vamos con «${accion.en_concepto}» por «${accion.tiene_duracion}»!`,\n        accion => `🔶 Parece que se te requiere en «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🕥 Ahora tocaría «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔶 ¿Qué tal un poco de «${accion.en_concepto}» por «${accion.tiene_duracion}»?`,\n        accion => `🕥 ¿Sabes que tendrías ahora que «${accion.en_concepto}» por «${accion.tiene_duracion}»?`,\n        accion => `🔶 ¿Te acuerdas que ahora viene «${accion.en_concepto}» por «${accion.tiene_duracion}»?`,\n        accion => `🕥 ¿Cómo lo llevas? Porque se viene «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔶 ¿Te apetece un poco de «${accion.en_concepto}» por «${accion.tiene_duracion}»?`,\n        accion => `🕥 Bueno, y ahora «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔶 ¿Estás bien? Porque vamos con «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🕥 ¿Y ahora? Ahora «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔶 Tendríamos que «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🕥 Sin ponerse grave, habría que «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔶 No sé si tienes algo, aparte de «${accion.en_concepto}» ahora por «${accion.tiene_duracion}»`,\n        accion => `🕥 Por «${accion.tiene_duracion}» tocaría «${accion.en_concepto}»`,\n        accion => `🔶 Durante «${accion.tiene_duracion}» vendría «${accion.en_concepto}»`,\n        accion => `🔷 Sin más dilación, «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔷 ¡Vamos ahí ese «${accion.en_concepto}» por «${accion.tiene_duracion}»!`,\n        accion => `🕥 Estaríamos con «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔷 Tiempo para «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n        accion => `🔷 ¡Atensiong! Viene «${accion.en_concepto}» por «${accion.tiene_duracion}»`,\n      ]\n    };\n  },\n  methods: {\n    toggleShowAccion(accionId) {\n      this.$trace(\"lsw-agenda.methods.toggleShowAccion\");\n      const pos = this.shownAcciones.indexOf(accionId);\n      if (pos === -1) {\n        this.shownAcciones.push(accionId);\n      } else {\n        this.shownAcciones.splice(pos, 1);\n      }\n    },\n    selectHiddenMenu(menuId) {\n      this.$trace(\"lsw-agenda.methods.selectHiddenMenu\");\n      this.selectedHiddenMenu = menuId;\n    },\n    selectAction(accionId, contextId = false) {\n      this.$trace(\"lsw-agenda.methods.selectAction\");\n      if (contextId) {\n        this.selectContext(contextId);\n      }\n      this.selectedAction = accionId;\n    },\n    selectContext(id, parameters = {}) {\n      this.$trace(\"lsw-agenda.methods.selectContext\");\n      this.selectedHiddenMenu = \"none\";\n      this.selectedContextParameters = parameters;\n      this.selectedContext = id;\n    },\n    toggleCalendario() {\n      this.$trace(\"lsw-agenda.methods.toggleCalendario\");\n      const finalState = (this.selectedAction === \"calendario\") ? \"none\" : \"calendario\";\n      if (this.selectedContext !== \"agenda\") {\n        this.selectContext(\"agenda\");\n        this.selectAction(\"calendario\");\n        return;\n      }\n      this.selectAction(finalState);\n    },\n    selectCalendario() {\n      this.$trace(\"lsw-agenda.methods.selectCalendario\");\n      this.selectContext(\"agenda\");\n      this.selectAction(\"calendario\");\n    },\n    selectConductometria() {\n      this.$trace(\"lsw-agenda.methods.selectCondutometria\");\n      this.selectContext(\"conductometria\");\n      // this.selectAction(\"calendario\");\n    },\n    togglePsicodelia() {\n      this.$trace(\"lsw-agenda.methods.togglePsicodelia\");\n      this.hasPsicodelia = !this.hasPsicodelia;\n    },\n    toggleHour(hourInt) {\n      this.$trace(\"lsw-agenda.methods.toggleHour\");\n      const pos = this.hiddenDateHours.indexOf(hourInt);\n      if (pos === -1) {\n        this.hiddenDateHours.push(hourInt);\n      } else {\n        this.hiddenDateHours.splice(pos, 1);\n      }\n    },\n    reloadDateTasks() {\n      this.$trace(\"lsw-agenda.methods.reloadDateTasks\");\n      return this.loadDateTasks(this.selectedDate);\n    },\n    async loadDateTasks(dateInput, calendario, isOnMounted = false) {\n      this.$trace(\"lsw-agenda.methods.loadDateTasks\");\n      // this.isLoading = true;\n      const newDate = dateInput || this.selectedDate || new Date();\n      console.log(\"[*] Loading date tasks of: \" + LswTimer.utils.fromDateToDatestring(newDate));\n      try {\n        this.selectedDate = newDate;\n        const selectedDate = this.selectedDate;\n        const selectedDateTasks = await this.$lsw.database.selectMany(\"Accion\", valueBrute => {\n          try {\n            const valueList = LswTimer.parser.parse(valueBrute.tiene_inicio);\n            const value = valueList[0];\n            const isSameYear = value.anio === selectedDate.getFullYear();\n            const isSameMonth = value.mes === (selectedDate.getMonth() + 1);\n            const isSameDay = value.dia === selectedDate.getDate();\n            const isAccepted = isSameYear && isSameMonth && isSameDay;\n            return isAccepted;\n          } catch (error) {\n            return true;\n          }\n        });\n        this.selectedDateTasks = selectedDateTasks;\n        this.selectedDateTasksSorted = selectedDateTasks.sort((accion1, accion2) => {\n          let inicio1 = undefined;\n          let inicio2 = undefined;\n          try {\n            inicio1 = LswTimer.utils.fromDatestringToDate(accion1.tiene_inicio);\n          } catch (error) {\n            return 1;\n          }\n          try {\n            inicio2 = LswTimer.utils.fromDatestringToDate(accion2.tiene_inicio);\n          } catch (error) {\n            return -1;\n          }\n          if (inicio1 < inicio2) {\n            return -1;\n          } else if (inicio1 > inicio2) {\n            return 1;\n          } else {\n            return -1;\n          }\n        });\n        if (isOnMounted) {\n          const noTasksFound = (!this.selectedDateTasks) || (!this.selectedDateTasks.length);\n          if (noTasksFound) {\n            this.isCalendarioSelected = true;\n          }\n        }\n        this.propagateDateTasks();\n      } catch (error) {\n        console.log(\"Error loading date taskes:\", error);\n      } finally {\n        setTimeout(() => { this.isLoading = false }, 100);\n      }\n      await this.reloadCalendarioMarks(calendario);\n      this.refreshTasks();\n    },\n    async reloadCalendarioMarks(calendario) {\n      if (calendario) {\n        const selectedDate = this.selectedDate;\n        const tasksOfMonth = await this.$lsw.database.selectMany(\"Accion\", valueBrute => {\n          const valueList = LswTimer.parser.parse(valueBrute.tiene_inicio);\n          const value = valueList[0];\n          const isSameYear = value.anio === selectedDate.getFullYear();\n          const isSameMonth = value.mes === (selectedDate.getMonth() + 1);\n          const isAccepted = isSameYear && isSameMonth;\n          return isAccepted;\n        });\n        const tasksOfMonthByDay = tasksOfMonth.reduce((out, item) => {\n          const valueList = LswTimer.parser.parse(item.tiene_inicio);\n          const value = valueList[0];\n          const day = value.dia;\n          if (!(day in out)) {\n            out[day] = [];\n          }\n          out[day].push(item);\n          return out;\n        }, {});\n        calendario.establecer_marcadores_del_mes(tasksOfMonthByDay);\n      }\n    },\n    groupTasksByHour(tareas = this.selectedDateTasks) {\n      this.$trace(\"lsw-agenda.methods.groupTasksByHour\");\n      const mapaHoras = {};\n      Agrupacion_inicial:\n      for (let i = 0; i < tareas.length; i++) {\n        const tarea = tareas[i];\n        const { tiene_inicio } = tarea;\n        const [inicioObject] = LswTimer.parser.parse(tiene_inicio);\n        const { hora, minuto } = inicioObject;\n        if (typeof hora !== \"number\") {\n          continue Agrupacion_inicial;\n        }\n        if (!(hora in mapaHoras)) {\n          mapaHoras[hora] = [];\n        }\n        mapaHoras[hora].push(tarea);\n      }\n      //return mapaHoras;\n      const segunHoras = [];\n      Formateo_final:\n      for (let hora in mapaHoras) {\n        const lista = mapaHoras[hora];\n        segunHoras.push({\n          hora,\n          tareas: lista,\n        });\n      }\n      return segunHoras;\n    },\n    propagateDateTasks() {\n      this.$trace(\"lsw-agenda.methods.propagateDateTasks\");\n      this.selectedDateTasksFormattedPerHour = this.groupTasksByHour();\n    },\n    async openInsertTaskDialog() {\n      this.$trace(\"lsw-agenda.methods.openInsertTaskDialog\");\n      // *@TODO: \n    },\n    async openDeleteTaskDialog(tarea, e) {\n      this.$trace(\"lsw-agenda.methods.openDeleteTaskDialog\");\n      const confirmed = await Vue.prototype.$dialogs.open({\n        title: \"Eliminar registro\",\n        template: `\n          <div>\n            <div class=\"pad_2\">¿Seguro que quieres eliminar el registro?</div>\n            <hr class=\"margin_0\" />\n            <div class=\"pad_2 text_align_right\">\n              <button class=\"supermini danger_button\" v-on:click=\"() => accept(true)\">Eliminar</button>\n              <button class=\"supermini \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        `,\n      });\n      if (!confirmed) return false;\n      await this.$lsw.database.delete(\"Accion\", tarea.id);\n      this.selectedForm = undefined;\n      this.refreshTasks();\n    },\n    selectHour(hora) {\n      this.$trace(\"lsw-agenda.methods.selectHour\");\n      if (this.selectedForm === hora) {\n        this.selectedForm = undefined;\n      } else {\n        this.selectedForm = hora;\n      }\n    },\n    async refreshTasks() {\n      this.$trace(\"lsw-agenda.methods.refreshTasks\");\n      if (this.$refs.calendario) {\n        this.$refs.calendario.changeDate(new Date(this.selectedDate));\n      }\n    },\n    async synchronizeAlarms() {\n      this.$trace(\"lsw-agenda.methods.synchronizeAlarms\");\n      Cordova_injection: {\n        if (typeof this.$window.cordova !== \"undefined\") {\n          // LswUtils.debug(1);\n          const dateToday = new Date();\n          // LswUtils.debug(2);\n          const allAlarms = await this.$lsw.database.selectMany(\"Accion\", accion => {\n            const dateAccion = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n            return LswTimer.utils.areSameDayDates(dateToday, dateAccion);\n          });\n          // LswUtils.debug(3);\n          const soundFile = LswRandomizer.getRandomItem([\n            \"file://assets/sounds/alarm.busca.wav\",\n            \"file://assets/sounds/alarm.clock-light.wav\",\n            \"file://assets/sounds/alarm.facility-breach.wav\",\n            \"file://assets/sounds/alarm.heavy.wav\",\n            \"file://assets/sounds/alarm.submarine.wav\",\n          ]);\n          // LswUtils.debug(4);\n          try {\n            // LswUtils.debug(5);\n            // LswUtils.debug(allAlarms);\n            for (let index = 0; index < allAlarms.length; index++) {\n              // LswUtils.debug(6 + \":\" + index);\n              const accion = allAlarms[index];\n              // LswUtils.debug(7 + \":\" + index);\n              const id = index + 1;\n              const notificationCallback = LswRandomizer.getRandomItem(this.possibleNotifiers);\n              // LswUtils.debug(8 + \":\" + index);\n              const text = notificationCallback(accion);\n              // LswUtils.debug(9 + \":\" + index);\n              await this.$window.cordova.plugins.notification.local.cancel(id);\n              // LswUtils.debug(10 + \":\" + index);\n              await this.$window.cordova.plugins.notification.local.schedule({\n                id,\n                title: `${accion.en_concepto} * ${accion.tiene_inicio} @${accion.tiene_inicio}`,\n                text: text,\n                trigger: {\n                  at: LswTimer.utils.fromDatestringToDate(accion.tiene_inicio)\n                },\n                vibrate: [1000, 1000, 1000, 1000],\n                wakeUp: true,\n                lockscreen: true,\n                sound: soundFile\n              });\n              // LswUtils.debug(11 + \":\" + index);\n            }\n            this.$lsw.toasts.send({\n              title: \"Alarmas sincronizadas\",\n              text: `Unas ${allAlarms.length} alarmas fueron sincronizadas con el dispositivo`\n            });\n          } catch (error) {\n            // LswUtils.debug(100);\n            this.$lsw.toasts.showError(error);\n          }\n        }\n      }\n    },\n    unsynchronizeAlarms() {\n      this.$trace(\"lsw-agenda.methods.unsynchronizeAlarms\");\n      Cordova_injection: {\n        if (typeof this.$window.cordova !== \"undefined\") {\n          try {\n            this.$window.cordova.plugins.notification.local.cancelAll(() => {\n              this.$lsw.toasts.send({\n                title: \"Alarmas desincronizadas\",\n                text: \"Las alarmas se eliminaron del dispositivo\"\n              });\n            })\n          } catch (error) {\n            this.$lsw.toasts.showError(error);\n          }\n        }\n      }\n    },\n  },\n  watch: {\n  },\n  computed: {\n    isCalendarioSelected() {\n      return this.selectedAction === \"calendario\";\n    }\n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-agenda.mounted\");\n      const selectedDate = this.$refs.calendario.getValue();\n      await this.loadDateTasks(selectedDate, undefined, true);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgenda API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswDataExplorer API » LswDataExplorer API": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-data-explorer/lsw-data-explorer/lsw-data-explorer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswDataExplorer API » LswDataExplorer API",
              "$code": "Vue.component('LswDataExplorer', {\n  template: $template,\n  props: {\n    value: {\n      required: true\n    },\n    pageSize: {\n      type: Number,\n      default: 10\n    },\n    level: {\n      type: Number,\n      default: 0\n    },\n    pointer: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      hasLoadedInnerValue: true,\n      isLoadingInnerValue: false,\n      originalValue: this.value,\n      innerValue: this.value,\n      textFilter: \"\",\n      isShowingTopPanel: false,\n      isShowingRelatedDocuments: false,\n      documentTitle: \"\",\n      documentContent: \"\",\n      expanded: {},\n      relatedDocuments: [{\n        title: \"Document 1\",\n        text: \"console.log('hi!');\",\n      }],\n      propagateFastFilterTimeoutId: undefined,\n      propagateFastFilterTimeoutMs: 1500\n    };\n  },\n  methods: {\n    getRandomId() {\n      return this.$lsw.toasts.getRandomString();\n    },\n    toggleTopPanel() {\n      this.isShowingTopPanel = !this.isShowingTopPanel;\n    },\n    toggleExpand(key) {\n      this.$set(this.expanded, key, !this.expanded[key]);\n    },\n    toggleRelatedDocuments() {\n      this.isShowingRelatedDocuments = !this.isShowingRelatedDocuments;\n    },\n    openDocument(docIndex) {\n      // *@TODO:\n      const doc = this.relatedDocuments[docIndex];\n      this.documentTitle = doc.title;\n      this.documentContent = doc.text;\n      this.isShowingRelatedDocuments = false;\n    },\n    saveRelatedDocument() {\n\n    },\n    async applyFastFilter(textFilter = this.textFilter) {\n      // *@TODO:\n      try {\n        this.hasLoadedInnerValue = false;\n        this.$forceUpdate(true);\n        if(textFilter.trim() === \"\") {\n          this.innerValue = this.originalValue;\n          return;\n        }\n        const textFilterFunction = new Function(\"it,key,i\", \"try {\\n  return \" + textFilter + \";\\n} catch(e) {\\n  return false;\\n}\");\n        console.log(\"User-built filter function:\");\n        console.log(textFilterFunction.toString());\n        if(typeof this.originalValue !== \"object\") {\n          this.innerValue = this.originalValue;\n          return;\n        } else if(Array.isArray(this.originalValue)) {\n          this.innerValue = [].concat(this.originalValue).filter(textFilterFunction);\n        } else {\n          Object.keys(this.originalValue).reduce((out, key, i) => {\n            const value = this.originalValue[key];\n            const passesFilter = textFilterFunction(value, key, i);\n            if(passesFilter) {\n              out[key] = value;\n            }\n            return out;\n          }, {});\n          this.innerValue = out;\n        }\n      } catch (error) {\n        console.log(error);\n      } finally {\n        this.isLoadingInnerValue = false;\n        this.hasLoadedInnerValue = true;\n        this.$forceUpdate(true);\n      }\n    },\n    propagateFastFilter(textFilter = this.textFilter) {\n      this.isLoadingInnerValue = true;\n      clearTimeout(this.propagateFastFilterTimeoutId);\n      this.propagateFastFilterTimeoutId = setTimeout(() => {\n        this.applyFastFilter(textFilter);\n      }, this.propagateFastFilterTimeoutMs);\n    }\n  },\n  watch: {\n    textFilter(newValue) {\n      this.propagateFastFilter(newValue);\n    }\n  }\n});\n",
              "$code.label": "LswDataExplorer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswDataImplorer API » LswDataImplorer API": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-data-explorer/lsw-data-implorer/lsw-data-implorer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 116,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswDataImplorer API » LswDataImplorer API",
              "$code": "Vue.component('LswDataImplorer', {\n  template: $template,\n  props: {\n    value: {\n      required: true\n    },\n    pageSize: {\n      type: Number,\n      default: () => 10\n    },\n    level: {\n      type: Number,\n      default: () => 0\n    },\n    pointer: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      expanded: {},\n      isRoot: this.pointer.length === 0,\n      currentPageSize: this.pageSize,\n      currentPage: 1,\n      page: {},\n      entries: [],\n      paginatedEntries: [],\n      isPaginated: false,\n    };\n  },\n  methods: {\n    loadEntries() {\n      if (typeof this.value !== 'object' || this.value === null) {\n        return [{ key: 'value', value: this.value }];\n      }\n      this.entries = Object.entries(this.value).map(([key, value]) => ({ key, value }));\n    },\n    toggleExpand(key) {\n      this.$set(this.expanded, key, !this.expanded[key]);\n    },\n    goToPage(page) {\n      this.currentPage = page;\n      this.loadPaginatedEntries();\n    },\n    goToPreviousPage() {\n      if(this.currentPage <= 1) {\n        return;\n      }\n      this.currentPage--;\n      this.loadPaginatedEntries();\n    },\n    goToNextPage() {\n      if(this.currentPage >= Math.ceil(this.entries.length / this.pageSize)) {\n        return;\n      }\n      this.currentPage++;\n      this.loadPaginatedEntries();\n    },\n    goToLastPage() {\n      this.currentPage = Math.ceil(this.entries.length / this.pageSize);\n      this.loadPaginatedEntries();\n    },\n    paginateArray(array, pageSize = this.currentPageSize, currentPage = this.currentPage) {\n      const start = (currentPage - 1) * pageSize;\n      const end = start + pageSize;\n      return array.slice(start, end);\n    },\n    loadPaginatedEntries(entries = this.entries) {\n      this.paginatedEntries = this.paginateArray(entries);\n      this.isPaginated = this.paginatedEntries.length !== this.entries.length;\n    },\n  },\n  watch: {\n    entries(newValue) {\n      if(this.pageSize <= 0) {\n        return newValue;\n      }\n      this.loadPaginatedEntries(newValue);\n    }\n  },\n  mounted() {\n    this.loadEntries();\n  }\n});\n",
              "$code.label": "LswDataImplorer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswDatabaseBreadcrumb API » LswDatabaseBreadcrumb API": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/database-breadcrumb/database-breadcrumb.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 134,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswDatabaseBreadcrumb API » LswDatabaseBreadcrumb API",
              "$code": "Vue.component(\"LswDatabaseBreadcrumb\", {\n  template: $template,\n  props: {\n    databaseExplorer: {\n      type: Object,\n      required: true\n    },\n    breadcrumb: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      \n    }\n  },\n  methods: {\n    selectPage(page, args = {}) {\n      return this.databaseExplorer.selectPage(page, args);\n    }\n  },\n  async mounted() {\n    \n  },\n  unmounted() {\n\n  }\n});\n",
              "$code.label": "LswDatabaseBreadcrumb API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswDatabaseExplorer API » LswDatabaseExplorer API": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/database-explorer/database-explorer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 128,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswDatabaseExplorer API » LswDatabaseExplorer API",
              "$code": "Vue.component(\"LswDatabaseExplorer\", {\n  template: $template,\n  props: {\n    showBreadcrumb: {\n      type: Boolean,\n      default: () => true\n    },\n    initialPage: {\n      type: String,\n      default: () => \"lsw-page-tables\"\n    },\n    initialArgs: {\n      type: Object,\n      default: () => ({ database: \"lsw_default_database\" })\n    },\n  },\n  data() {\n    this.$trace(\"lsw-database-explorer.data\", []);\n    return {\n      isLoading: false,\n      selectedPage: this.initialPage,\n      selectedArgs: this.initialArgs,\n    }\n  },\n  methods: {\n    selectPage(page, args = {}) {\n      try {\n        this.$trace(\"lsw-database-explorer.methods.selectPage\", arguments);\n        $ensure({page}, 1).type(\"string\");\n        $ensure({args}, 1).type(\"object\");\n        this.isLoading = true;\n        this.$nextTick(() => {\n          this.selectedArgs = args;\n          this.selectedPage = page;\n          this.isLoading = false;\n        });\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    }\n  },\n  async mounted() {\n    this.$trace(\"lsw-database-explorer.methods.mounted\", arguments);\n  },\n  unmounted() {\n    this.$trace(\"lsw-database-explorer.methods.unmounted\", arguments);\n  }\n});\n",
              "$code.label": "LswDatabaseExplorer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswPageDatabases API » LswPageDatabases API": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/page-databases/page-databases.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 119,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswPageDatabases API » LswPageDatabases API",
              "$code": "Vue.component(\"LswPageDatabases\", {\n  template: $template,\n  props: {\n    databaseExplorer: {\n      type: Object,\n      required: true\n    },\n    args: {\n      type: Object,\n      required: true\n    },\n  },\n  data() {\n    return {\n      databases: [],\n      databasesForTable: false,\n      breadcrumb: [{\n        page: \"LswPageDatabases\",\n        name: \"Databases\",\n        args: {},\n        current: true\n      }],\n    }\n  },\n  methods: {\n    openDatabase(name) {\n      this.databaseExplorer.selectPage(\"LswPageTables\", { database: name });\n    }\n  },\n  watch: {\n    databases(value) {\n      AdaptingForTable: {\n        const databasesForTable = [];\n        if (typeof value !== \"object\") {\n          break AdaptingForTable;\n        }\n        const databaseIds = Object.keys(value);\n        for(let indexDatabase=0; indexDatabase<databaseIds.length; indexDatabase++) {\n          const databaseId = databaseIds[indexDatabase];\n          const databaseObject = value[databaseId];\n        }\n        this.databasesForTable = databasesForTable;\n      }\n    }\n  },\n  async mounted() {\n    this.databases = await LswDatabaseAdapter.listDatabases();\n    Filter_by_entity_schema_matched_db_names: {\n      $lswSchema\n    }\n  },\n  unmounted() {\n\n  }\n});\n",
              "$code.label": "LswPageDatabases API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswPageRow API » LswPageRow API": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/page-row/page-row.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 101,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswPageRow API » LswPageRow API",
              "$code": "Vue.component(\"LswPageRow\", {\n  template: $template,\n  props: {\n    databaseExplorer: {\n      type: Object,\n      required: true\n    },\n    args: {\n      type: Object,\n      required: true\n    },\n  },\n  data() {\n    this.$trace(\"lsw-page-row.data\", arguments);\n    $ensure(this.args.database).type(\"string\");\n    $ensure(this.args.table).type(\"string\");\n    $ensure(this.args.rowId).type(\"number\");\n    return {\n      isLoaded: false,\n      breadcrumb: [{\n        page: \"LswPageTables\",\n        name: this.args.database,\n        args: {\n          database: this.args.database\n        }\n      }, {\n        page: \"LswPageRows\",\n        name: this.args.table,\n        args: {\n          database: this.args.database,\n          table: this.args.table\n        },\n      }, {\n        page: \"LswPageRow\",\n        name: (this.args.rowId === -1) ? '#new' : (\"#\" + this.args.rowId),\n        args: {\n          database: this.args.database,\n          table: this.args.table,\n          rowId: this.args.rowId\n        },\n        current: true\n      }],\n      database: this.args.database,\n      table: this.args.table,\n      rowId: this.args.rowId,\n      connection: undefined,\n      row: false,\n    }\n  },\n  methods: {\n    goBack() {\n      this.$trace(\"lsw-page-row.methods.goBack\", arguments);\n      return this.databaseExplorer.selectPage(\"LswPageRows\", {\n        database: this.database,\n        table: this.table\n      });\n    },\n    async loadRow() {\n      this.$trace(\"lsw-page-row.methods.loadRow\", arguments);\n      try {\n        if (this.rowId === -1) {\n          return false;\n        }\n        this.connection = this.connection ?? new LswDatabaseAdapter(this.database);\n        await this.connection.open();\n        const matches = await this.connection.select(this.table, it => it.id === this.rowId);\n        this.row = matches[0];\n      } catch (error) {\n        console.log(\"Error loading row:\", error);\n        this.$lsw.toasts.showError(error);\n        throw error;\n      } finally {\n        this.row = false;\n      }\n    },\n    async upsertRow(value) {\n      this.$trace(\"lsw-page-row.methods.upsertRow\", arguments);\n      try {\n        const existsRow = this.rowId || ((typeof (this.row) === \"object\") && (typeof (this.row.id) === \"number\") && (this.row.id !== -1));\n        let id = this.rowId || this.row.id;\n        const operation = (existsRow && (id !== -1)) ? \"update\" : \"insert\";\n        if (operation === \"insert\") {\n          id = await this.$lsw.database.insert(this.table, value);\n        } else {\n          await this.$lsw.database.update(this.table, id, value);\n        }\n        this.$lsw.toasts.send({\n          title: `Nueva ${operation === 'insert' ? 'inserción' : 'actualización'}`,\n          text: `El registro #${id} de «${this.table}» fue ${operation === 'insert' ? 'insertado' : 'actualizado'} correctamente.`\n        });\n        if (operation === \"insert\") {\n          this.databaseExplorer.selectPage(\"LswPageRow\", {\n            database: this.database,\n            table: this.table,\n            rowId: id\n          });\n        } else {\n          // @OK.\n        }\n      } catch (error) {\n        console.log(error);\n        this.$lsw.toasts.showError(error);\n      }\n    }\n  },\n  async mounted() {\n    this.$trace(\"lsw-page-row.mounted\", arguments);\n    try {\n      await this.loadRow();\n    } catch (error) {\n      console.log(\"Error loading row:\", error);\n      throw error;\n    } finally {\n      this.isLoaded = true;\n    }\n  },\n  unmounted() {\n    this.$trace(\"lsw-page-row.unmounted\", arguments);\n    this.connection.close();\n  }\n});\n",
              "$code.label": "LswPageRow API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswPageRows API » LswPageRows API": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/page-rows/page-rows.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 104,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswPageRows API » LswPageRows API",
              "$code": "Vue.component(\"LswPageRows\", {\n  template: $template,\n  props: {\n    databaseExplorer: {\n      type: Object,\n      required: true\n    },\n    args: {\n      type: Object,\n      required: true\n    },\n  },\n  data() {\n    this.$trace(\"lsw-page-rows.data\", []);\n    $ensure({ \"args\": this.args }, 1).type(\"object\");\n    $ensure({ \"args.database\": this.args.database }, 1).type(\"string\");\n    $ensure({ \"args.table\": this.args.table }, 1).type(\"string\");\n    return {\n      breadcrumb: [{\n        page: \"LswPageTables\",\n        name: this.args.database,\n        args: {\n          database: this.args.database\n        }\n      }, {\n        page: \"LswPageRows\",\n        name: this.args.table,\n        args: {\n          database: this.args.database,\n          table: this.args.table\n        },\n        current: true\n      }],\n      database: this.args.database,\n      table: this.args.table,\n      rows: undefined,\n      connection: undefined,\n    }\n  },\n  methods: {\n    goBack() {\n      this.$trace(\"lsw-page-rows.methods.goBack\", arguments);\n      return this.databaseExplorer.selectPage(\"LswPageTables\", {\n        database: this.database,\n      });\n    },\n    getTableId() {\n      if(this.args.tableStorageId) {\n        return this.args.tableStorageId + '.json';\n      } else {\n        return 'lsw-database-ui.page-rows.' + this.args.database + '.' + this.args.table + '.json';\n      }\n    },\n    async loadRows() {\n      this.$trace(\"lsw-page-rows.methods.loadRows\", arguments);\n      this.connection = this.connection ?? new LswDatabaseAdapter(this.database);\n      await this.connection.open();\n      const filterCallback = (this.args.filterCallback && typeof(this.args.filterCallback) === \"function\") ? this.args.filterCallback : () => true;\n      const selection = await this.connection.select(this.table, filterCallback);\n      this.rows = selection;\n      return selection;\n    },\n    openRow(rowId) {\n      this.$trace(\"lsw-page-rows.methods.openRow\", arguments);\n      return this.databaseExplorer.selectPage(\"LswPageRow\", {\n        database: this.database,\n        table: this.table,\n        rowId: rowId\n      });\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-page-rows.mounted\", arguments);\n    this.loadRows();\n  },\n  unmounted() {\n    this.$trace(\"lsw-page-rows.unmounted\", arguments);\n    this.connection.close();\n  }\n});\n",
              "$code.label": "LswPageRows API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswPageSchema API » LswPageSchema API": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/page-schema/page-schema.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswPageSchema API » LswPageSchema API",
              "$code": "Vue.component(\"LswPageSchema\", {\n  template: $template,\n  props: {},\n  data() {\n    return {\n      \n    }\n  },\n  methods: {\n    \n  },\n  mounted() {\n    \n  },\n  unmounted() {\n\n  }\n});\n",
              "$code.label": "LswPageSchema API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswPageTables API » LswPageTables API": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-database-ui/page-tables/page-tables.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 110,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswPageTables API » LswPageTables API",
              "$code": "Vue.component(\"LswPageTables\", {\n  template: $template,\n  props: {\n    databaseExplorer: {\n      type: Object,\n      required: true\n    },\n    args: {\n      type: Object,\n      required: true\n    },\n  },\n  data() {\n    const ensureArgs = $ensure(this.args).type(\"object\");\n    ensureArgs.to.have.key(\"database\").its(\"database\").type(\"string\");\n    return {\n      breadcrumb: [{\n        page: \"LswPageTables\",\n        name: this.args.database,\n        args: {\n          database: this.args.database\n        },\n        current: true\n      }],\n      database: this.args.database,\n      tables: false,\n      tablesAsList: false,\n      isShowingSchema: false,\n    }\n  },\n  methods: {\n    async loadDatabase() {\n      const db = await LswDatabaseAdapter.getSchema(this.database);\n      this.tables = db;\n      console.log(`[*] Tables of database ${this.args.database}:`, db);\n    },\n    openTable(table) {\n      $ensure({ table }, 1).type(\"string\");\n      return this.databaseExplorer.selectPage(\"LswPageRows\", {\n        database: this.database,\n        table: table\n      });\n    },\n    toggleSchema() {\n      this.isShowingSchema = !this.isShowingSchema;\n    }\n  },\n  watch: {\n    tables(value) {\n      const tablesAsList = [];\n      const tableIds = Object.keys(value);\n      for(let index=0; index<tableIds.length; index++) {\n        const tableId = tableIds[index];\n        const tableData = value[tableId];\n        tablesAsList.push({\n          id: tableId,\n          name: tableId,\n          ...tableData,\n          indexes: tableData.indexes ? tableData.indexes.map(ind => ind.name) : []\n        });\n      }\n      this.tablesAsList = tablesAsList;\n    },\n  },\n  computed: {\n    tablesAsIdsList() {\n      return Object.keys(this.tablesAsList || {});\n    }\n  },\n  mounted() {\n    this.loadDatabase();\n  },\n  unmounted() {\n\n  }\n});\n",
              "$code.label": "LswPageTables API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Filesystem Explorer API » LswFilesystemButtonsPanel component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-filesystem-explorer/lsw-filesystem-buttons-panel/lsw-filesystem-buttons-panel.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 150,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Filesystem Explorer API » LswFilesystemButtonsPanel component",
              "$code": "Vue.component(\"LswFilesystemButtonsPanel\", {\n  name: \"LswFilesystemButtonsPanel\",\n  template: $template,\n  props: {\n    explorer: {\n      type: Object,\n      required: true\n    },\n    orientation: {\n      type: String,\n      default: () => \"row\" // could be \"column\" too\n    }\n  },\n  data() {\n    return {\n      buttons: []\n    };\n  },\n  watch: {\n\n  },\n  methods: {\n    setButtons(...buttons) {\n      this.$trace(\"lsw-filesystem-buttons-panel.methods.prependButtons\");\n      this.buttons = buttons;\n    },\n    prependButtons(...buttons) {\n      this.$trace(\"lsw-filesystem-buttons-panel.methods.prependButtons\");\n      this.buttons = buttons.concat(this.buttons);\n    },\n    appendButtons(...buttons) {\n      this.$trace(\"lsw-filesystem-buttons-panel.methods.appendButtons\");\n      this.buttons = this.buttons.concat(buttons);\n    },\n  },\n  mounted() {\n\n  }\n});\n",
              "$code.label": "LswFilesystemButtonsPanel API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Filesystem Explorer API » LswFilesystemEditor component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-filesystem-explorer/lsw-filesystem-editor/lsw-filesystem-editor.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 138,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Filesystem Explorer API » LswFilesystemEditor component",
              "$code": "Vue.component(\"LswFilesystemEditor\", {\n  name: \"LswFilesystemEditor\",\n  template: $template,\n  props: {\n    explorer: {\n      type: Object,\n      required: true\n    },\n    filecontents: {\n      type: String,\n      required: true\n    },\n  },\n  data() {\n    return {\n      contents: this.filecontents,\n      cursorPosition: false,\n      currentFontsize: 12,\n      currentFontfamily: \"Arial\"\n    };\n  },\n  watch: {\n\n  },\n  methods: {\n    getContents() {\n      return this.contents;\n    },\n    setContents(contents) {\n      this.contents = contents;\n    },\n    gainFocus() {\n      this.$refs.editorTextarea.focus();\n    },\n    increaseFontsize() {\n      this.$trace(\"lsw-filesystem-editor.methods.increaseFontsize\");\n      this.currentFontsize++;\n    },\n    decreaseFontsize() {\n      this.$trace(\"lsw-filesystem-editor.methods.decreaseFontsize\");\n      this.currentFontsize--;\n    },\n    toggleFontfamily() {\n      this.$trace(\"lsw-filesystem-editor.methods.toggleFontfamily\");\n      if(this.currentFontfamily === \"monospace\") {\n        this.currentFontfamily = \"Arial\";\n      } else {\n        this.currentFontfamily = \"monospace\";\n      }\n    },\n    async saveDocument() {\n      this.$trace(\"lsw-filesystem-editor.methods.saveDocument\");\n      await this.$lsw.fs.write_file(this.explorer.current_node, this.contents);\n      this.$lsw.toasts.send({\n        title: \"Documento guardado\",\n        text: \"El documento se guardó correctamente\"\n      });\n    },\n    async executeDocument() {\n      this.$trace(\"lsw-filesystem-editor.methods.executeDocument\");\n      if(this.explorer.current_node.endsWith(\".js\")) {\n        Ejecutar_javascript_asincronamente: {\n          this.explorer.processToExecuteFile();\n        }\n      }\n    },\n    async executeMobileDocument() {\n      this.$trace(\"lsw-filesystem-editor.methods.executeMobileDocument\");\n      if(this.explorer.current_node.endsWith(\".js\")) {\n        Ejecutar_javascript_asincronamente: {\n          this.explorer.processToExecuteFileOnAndroid();\n        }\n      }\n    },\n    beautifyDocument() {\n      this.$trace(\"lsw-filesystem-editor.methods.beautifyDocument\");\n      const fsExplorer = LswDom.getClosestParent(this.$el, \".lsw_filesystem_explorer\");\n      if(!fsExplorer) return;\n      LswDom.querySelectorFirst(\"button\", \"{js}\", fsExplorer).click();\n    },\n    searchReplace() {\n      this.$trace(\"lsw-filesystem-editor.methods.searchReplace\");\n      const fsExplorer = LswDom.getClosestParent(this.$el, \".lsw_filesystem_explorer\");\n      if(!fsExplorer) return;\n      LswDom.querySelectorFirst(\"button\", \"🔎↔️\", fsExplorer).click();\n    },\n    synchronizeCursor() {\n      this.$trace(\"lsw-filesystem-editor.methods.synchronizeCursor\");\n      const editorHtml = this.$refs.editorTextarea;\n      const offsetStart = editorHtml.selectionStart\n      const offsetEnd = editorHtml.selectionEnd;\n      let lineStart = undefined;\n      let lineEnd = undefined;\n      let columnStart = undefined;\n      let columnEnd = undefined;\n      Col_start: {\n        const beforeCursor = editorHtml.value.slice(0, offsetStart);\n        const lines = beforeCursor.split(\"\\n\");\n        lineStart = lines.length - 1;\n        columnStart = lines[lines.length - 1].length;\n      }\n      Col_end: {\n        const beforeCursor = editorHtml.value.slice(0, offsetEnd);\n        const lines = beforeCursor.split(\"\\n\");\n        lineEnd = lines.length - 1;\n        columnEnd = lines[lines.length - 1].length;\n      }\n      const cursor = {\n        start: {\n          offset: offsetStart,\n          line: lineStart,\n          column: columnStart,\n        },\n        end: {\n          offset: offsetEnd,\n          line: lineEnd,\n          column: columnEnd,\n        }\n      };\n      this.cursorPosition = cursor;\n      return cursor;\n    }\n  },\n  mounted() {\n\n  }\n});\n",
              "$code.label": "LswFilesystemEditor API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Filesystem Explorer API » LswFilesystemExplorer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-filesystem-explorer/lsw-filesystem-explorer/lsw-filesystem-explorer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 142,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Filesystem Explorer API » LswFilesystemExplorer component",
              "$code": "Vue.component(\"LswFilesystemExplorer\", {\n  name: \"LswFilesystemExplorer\",\n  template: $template,\n  props: {\n    absoluteLayout: {\n      type: Boolean,\n      default: () => false,\n    },\n    openedBy: {\n      type: String,\n      default: () => \"/\",\n    }\n  },\n  data() {\n    this.$trace(\"lsw-filesystem-explorer.data\");\n    return {\n      is_ready: false,\n      current_node: \"/\",\n      current_node_parts: undefined,\n      current_node_basename: undefined,\n      current_node_basedir: undefined,\n      current_node_contents: undefined,\n      current_node_subnodes: [],\n      current_node_is_file: false,\n      current_node_is_directory: false,\n      syntaxValidators: {},\n      STANDARIZED_REFRESH_DELAY: 100\n    };\n  },\n  methods: {\n    open(...args) {\n      this.$trace(\"lsw-filesystem-explorer.methods.open\");\n      return this.open_node(...args);\n    },\n    goUp() {\n      this.$trace(\"lsw-filesystem-explorer.methods.goUp\");\n      const parts = this.current_node.split(\"/\");\n      parts.pop();\n      const dest = this.normalize_path(\"/\" + parts.join(\"/\"));\n      return this.open(dest);\n    },\n    async refresh() {\n      this.$trace(\"lsw-filesystem-explorer.methods.refresh\");\n      this.is_ready = false;\n      try {\n        await this.open(this.current_node);\n      } catch (error) {\n        throw error;\n      } finally {\n        this.$nextTick(() => {\n          this.is_ready = true;\n          this.$forceUpdate(true);\n        });\n      }\n    },\n    normalize_path(subpath) {\n      this.$trace(\"lsw-filesystem-explorer.methods.normalize_path\");\n      return this.$lsw.fs.resolve_path(this.current_node, subpath);\n    },\n    async open_node(subpath = this.current_node) {\n      this.$trace(\"lsw-filesystem-explorer.methods.open_node\");\n      try {\n        if ([\"\", \"/\"].indexOf(subpath) !== -1) {\n          return await this._openDirectory(\"/\");\n        }\n        const temporaryPath = this.normalize_path(subpath);\n        const is_directory = await this.$lsw.fs.is_directory(temporaryPath);\n        if (is_directory) {\n          return await this._openDirectory(temporaryPath);\n        }\n        const is_file = await this.$lsw.fs.is_file(temporaryPath);\n        if (is_file) {\n          return await this._openFile(temporaryPath);\n        }\n        throw new Error(`Cannot open path because it does not exist: ${temporaryPath} on «LswFilesystemExplorer.methods.open_node»`);\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    },\n    async processToCreateFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToCreateFile\");\n      const filename = await this.$lsw.dialogs.open({\n        title: \"Crear fichero\",\n        template: `<div>\n          <div class=\"pad_1\">\n            <div>Estás en la carpeta:</div>\n            <div class=\"pad_2\">{{ current_directory }}</div>\n            <div>Di el nombre del nuevo fichero:</div>\n            <div class=\"pad_top_1\">\n              <input class=\"width_100\" type=\"text\" placeholder=\"myfile.txt\" v-model=\"filename\" v-focus v-on:keyup.enter=\"() => accept(filename)\" />\n            </div>\n          </div>\n          <hr />\n          <div class=\"flex_row centered pad_1\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 pad_right_1\">\n              <button class=\"supermini nowrap danger_button\" v-on:click=\"() => accept(filename)\">Crear fichero</button>\n            </div>\n            <div class=\"flex_1\">\n              <button class=\"supermini nowrap \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        </div>`,\n        factory: {\n          data() {\n            return {\n              current_directory: this.$lsw.fs.get_current_directory(),\n              filename: \"\",\n            };\n          },\n        },\n      });\n      if (!filename) return;\n      const filepath = this.$lsw.fs.resolve_path(this.$lsw.fs.get_current_directory(), filename);\n      await this.$lsw.fs.write_file(filepath, \"\");\n      this.refresh();\n    },\n    async processToCreateDirectory() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToCreateDirectory\");\n      const filename = await this.$lsw.dialogs.open({\n        title: \"Crear directorio\",\n        template: `<div>\n          <div class=\"pad_1\">\n            <div>Estás en la carpeta:</div>\n            <div class=\"pad_2\">{{ current_directory }}</div>\n            <div>Di el nombre del nuevo directorio:</div>\n            <div class=\"pad_top_1\">\n              <input class=\"width_100\" type=\"text\" placeholder=\"myfolder\" v-model=\"filename\" v-focus v-on:keyup.enter=\"() => accept(filename)\" />\n            </div>\n          </div>\n          <hr />\n          <div class=\"flex_row centered pad_1\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 pad_right_1\">\n              <button class=\"supermini nowrap danger_button\" v-on:click=\"() => accept(filename)\">Sí, seguro</button>\n            </div>\n            <div class=\"flex_1\">\n              <button class=\"supermini nowrap \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        </div>`,\n        factory: {\n          data() {\n            return {\n              current_directory: this.$lsw.fs.get_current_directory(),\n              filename: \"\",\n            };\n          },\n        },\n      });\n      if (!filename) return;\n      const filepath = this.$lsw.fs.resolve_path(this.$lsw.fs.get_current_directory(), filename);\n      await this.$lsw.fs.make_directory(filepath);\n      this.refresh();\n    },\n    async processToDeleteDirectory() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToDeleteDirectory\");\n      const confirmation = await this.$lsw.dialogs.open({\n        title: \"Eliminar directorio\",\n        template: `<div>\n          <div class=\"pad_1\">\n            <div>¿Seguro que quieres eliminar el directorio?</div>\n            <div class=\"pad_2\">{{ current_directory }}</div>\n          </div>\n          <hr />\n          <div class=\"flex_row centered pad_1\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 pad_right_1\">\n              <button class=\"supermini nowrap danger_button\" v-on:click=\"() => accept(true)\">Sí, seguro</button>\n            </div>\n            <div class=\"flex_1\">\n              <button class=\"supermini nowrap \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        </div>`,\n        factory: {\n          data: {\n            current_directory: this.$lsw.fs.get_current_directory(),\n          }\n        }\n      });\n      if (!confirmation) return;\n      await this.$lsw.fs.delete_directory(this.$lsw.fs.get_current_directory());\n      this.refresh();\n    },\n    async processToDeleteFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToDeleteFile\");\n      const confirmation = await this.$lsw.dialogs.open({\n        title: \"Eliminar fichero\",\n        template: `<div>\n          <div class=\"pad_1\">\n            <div>¿Seguro que quieres eliminar el fichero?</div>\n            <div class=\"pad_2\">{{ current_file }}</div>\n          </div>\n          <hr />\n          <div class=\"flex_row centered pad_1\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 pad_right_1\">\n              <button class=\"supermini nowrap danger_button\" v-on:click=\"() => accept(true)\">Sí, seguro</button>\n            </div>\n            <div class=\"flex_1\">\n              <button class=\"supermini nowrap \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        </div>`,\n        factory: {\n          data: {\n            current_file: this.current_node,\n          }\n        }\n      });\n      if (!confirmation) return;\n      await this.$lsw.fs.delete_file(this.current_node);\n      const upperDir = (() => {\n        const parts = this.current_node.split(\"/\");\n        parts.pop();\n        return parts.join(\"/\");\n      })();\n      this.refresh();\n    },\n    async processToRenameFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToRenameFile\");\n      const elementType = this.current_node_is_file ? \"fichero\" : \"directorio\";\n      const newName = await this.$lsw.dialogs.open({\n        title: \"Renombrar \" + elementType,\n        template: `<div>\n          <div class=\"pad_1\">\n            <div>Refiriéndose al {{ elementType }}:</div>\n            <div class=\"pad_2\">{{ filename }}</div>\n          </div>\n          <div class=\"pad_1\">\n            <div>Di el nuevo nombre del {{ elementType }}:</div>\n            <div class=\"pad_top_1\">\n              <input v-focus class=\"width_100\" type=\"text\" placeholder=\"Nuevo nombre aquí\" v-model=\"new_filename\" v-on:keyup.enter=\"() => accept(new_filename)\" />\n            </div>\n          </div>\n          <hr />\n          <div class=\"flex_row centered\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 pad_right_1\">\n              <button class=\"supermini nowrap danger_button\" v-on:click=\"() => accept(new_filename)\">Sí, seguro</button>\n            </div>\n            <div class=\"flex_1\">\n              <button class=\"supermini nowrap \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        </div>`,\n        factory: {\n          data: {\n            elementType,\n            filename: this.current_node,\n            new_filename: this.current_node.split(\"/\").pop(),\n          }\n        }\n      });\n      if (newName === false) return;\n      if (newName.trim() === \"\") return;\n      const allParts = this.current_node.split(\"/\");\n      allParts.pop();\n      const dirPath = \"/\" + allParts.join(\"/\");\n      const newFullpath = this.$lsw.fs.resolve_path(dirPath, newName);\n      await this.$lsw.fs.rename(this.current_node, newName.replace(/^\\/+/g, \"\"));\n      await this.open(newFullpath);\n    },\n    async processToExecuteFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToExecuteFile\");\n      const editorContents = this.$refs.editor.getContents();\n      const AsyncFunction = (async function () { }).constructor;\n      const asyncFunction = new AsyncFunction(editorContents);\n      try {\n        const result = await asyncFunction.call(this);\n        this.$lsw.toasts.debug(result);\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    },\n    async processToLoadFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToLoadFile\");\n      this.is_ready = false;\n      const contents = await this.$lsw.fs.read_file(this.current_node);\n      this.current_node_contents = contents;\n      this.$nextTick(() => {\n        this.is_ready = true;\n      });\n    },\n    async processToSaveFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods.processToSaveFile\");\n      try {\n        if (!this.$refs.editor) {\n          throw new Error(\"No hay editor ahora mismo\");\n        }\n        const editorContents = this.$refs.editor.getContents();\n        await this.$lsw.fs.write_file(this.current_node, editorContents);\n        this.$lsw.toasts.send({\n          title: \"Fichero guardado\",\n          text: \"Hablamos de: \" + this.current_node\n        });\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    },\n    _setButtonsForFile() {\n      this.$trace(\"lsw-filesystem-explorer.methods._setButtonsForFile\");\n      this.is_ready = false;\n      this.current_node_is_file = true;\n      this.current_node_is_directory = false;\n      Setup_panel_top_on_file: {\n        this.$refs.panelTop.setButtons({\n          text: \"➜\",\n          classes: \"reversed\",\n          click: () => this.goUp(),\n        });\n      }\n      Setup_panel_right_on_file: {\n        const rightButtonsOnFile = [\n          {\n            text: \"💾\",\n            click: () => this.processToSaveFile(),\n          }, {\n            text: \"↔️\",\n            click: () => this.processToRenameFile(),\n          }, {\n            text: \"🔄\",\n            click: () => this.processToLoadFile(),\n          }, {\n            text: \"📄 🔥\",\n            classes: \"danger_button\",\n            click: () => this.processToDeleteFile(),\n          }\n        ];\n        BUTTON_INJECTION_HERE__RIGHT_PANEL: {\n          // @INJECTABLE: add custom buttons for extensions:\n          Button_to_execute_javascript: {\n            if (this.current_node.endsWith(\".js\")) {\n              rightButtonsOnFile.push({\n                text: \"⚡️ js\",\n                classes: \"danger_button\",\n                click: () => this.processToExecuteFile(),\n              });\n            }\n          }\n          Button_to_compile_markdown_to_html: {\n            if (this.current_node.endsWith(\".md\")) {\n              rightButtonsOnFile.push({\n                text: \"🔩 md\",\n                classes: \"\",\n                click: () => this.processToCompileMarkdown(),\n              });\n            }\n          }\n          Button_to_compile_pegjs_to_js: {\n            if (this.current_node.endsWith(\".pegjs\")) {\n              rightButtonsOnFile.push({\n                text: \"🔩 pegjs\",\n                classes: \"\",\n                click: () => this.processToCompilePegjs(),\n              });\n            }\n          }\n          Button_to_compile_natyscript_to_json: {\n            if (this.current_node.endsWith(\".nsc\")) {\n              rightButtonsOnFile.push({\n                text: \"🔩 nsc\",\n                classes: \"\",\n                click: () => this.processToCompileNatyscript(),\n              });\n            }\n          }\n          Button_to_format_code: {\n            if (this.current_node.endsWith(\".html\")) {\n              rightButtonsOnFile.push({\n                text: \"{html}\",\n                classes: \"\",\n                click: () => this.processToFormatHtml(),\n              });\n            } else if (this.current_node.endsWith(\".css\")) {\n              rightButtonsOnFile.push({\n                text: \"{css}\",\n                classes: \"\",\n                click: () => this.processToFormatCss(),\n              });\n            } else if (this.current_node.endsWith(\".js\")) {\n              rightButtonsOnFile.push({\n                text: \"{js}\",\n                classes: \"\",\n                click: () => this.processToFormatJs(),\n              });\n              if(typeof cordova !== \"undefined\") {\n                rightButtonsOnFile.push({\n                  text: \"📱⚡️\",\n                  classes: \"\",\n                  click: () => this.processToExecuteFileOnAndroid(),\n                });\n              }\n            }\n          }\n          Button_to_download_file: {\n            rightButtonsOnFile.push({\n              text: \"📥\",\n              classes: \"\",\n              click: () => this.processToDownloadFile(),\n            });\n          }\n          Button_to_search_replace: {\n            rightButtonsOnFile.push({\n              text: \"🔎↔️\",\n              classes: \"\",\n              click: () => this.processToSearchReplace(),\n            });\n          }\n          Button_to_validate_code: {\n            if(this.hasSyntaxValidator(this.current_node)) {\n              rightButtonsOnFile.push({\n                text: \"✅\",\n                classes: \"\",\n                click: () => this.processToValidateCode(),\n              });\n            }\n          }\n        }\n        this.$refs.panelRight.setButtons(...rightButtonsOnFile);\n      }\n      Setup_panel_bottom_on_file: {\n        const bottomButtonsOnFile = [\n          {\n            text: \"➕\",\n            click: () => this.increaseFontsize(),\n          }, {\n            text: \"➖\",\n            click: () => this.decreaseFontsize(),\n          }, {\n            text: \"✍🏻|🐒\",\n            click: () => this.toggleFontfamily(),\n          }\n        ];\n        BUTTON_INJECTION_HERE__BOTTOM_PANEL: {\n          // @INJECTABLE: add custom buttons for extensions:\n          Button_to_view_code: {\n            if (this.current_node.endsWith(\".js\")) {\n              bottomButtonsOnFile.push({\n                text: \"🌈\",\n                click: () => this.openCodeViewerForJs()\n              });\n            } else if (this.current_node.endsWith(\".css\")) {\n              bottomButtonsOnFile.push({\n                text: \"🌈\",\n                click: () => this.openCodeViewerForCss()\n              });\n            } else if (this.current_node.endsWith(\".html\")) {\n              bottomButtonsOnFile.push({\n                text: \"🌈\",\n                click: () => this.openCodeViewerForHtml()\n              });\n            } else if (this.current_node.endsWith(\".mmd\")) {\n              bottomButtonsOnFile.push({\n                text: \"🌈\",\n                click: () => this.openCodeViewerForMermaid()\n              });\n            }\n          }\n          Button_to_view_html: {\n            if (this.current_node.endsWith(\".html\")) {\n              bottomButtonsOnFile.push({\n                text: \"📻\",\n                classes: \"\",\n                click: () => this.processToViewHtml(),\n              });\n            } else if (this.current_node.endsWith(\".md\")) {\n              bottomButtonsOnFile.push({\n                text: \"📻\",\n                classes: \"\",\n                click: () => this.processToViewMarkdown(),\n              });\n            }\n          }\n        }\n        this.$refs.panelBottom.setButtons(...bottomButtonsOnFile);\n      }\n      this.$nextTick(() => {\n        this.is_ready = true;\n      });\n    },\n    _setButtonsForDirectory() {\n      this.$trace(\"lsw-filesystem-explorer.methods._setButtonsForDirectory\");\n      this.is_ready = false;\n      this.current_node_is_directory = true;\n      this.current_node_is_file = false;\n      Setup_panel_top_on_directory: {\n        if (this.current_node === \"/\") {\n          this.$refs.panelTop.setButtons();\n        } else {\n          this.$refs.panelTop.setButtons({\n            text: \"➜\",\n            classes: \"reversed\",\n            click: () => this.goUp(),\n          });\n        }\n      }\n      Setup_panel_right_on_directory: {\n        this.$refs.panelRight.setButtons({\n          text: \"📄+\",\n          click: () => this.processToCreateFile(),\n        }, {\n          text: \"📁+\",\n          click: () => this.processToCreateDirectory(),\n        }, {\n          text: \"📁 🔥\",\n          classes: \"danger_button\",\n          click: () => this.processToDeleteDirectory()\n        });\n      }\n      Setup_panel_bottom_on_directory: {\n        this.$refs.panelBottom.setButtons();\n      }\n      this.$nextTick(() => {\n        this.is_ready = true;\n      });\n    },\n    increaseFontsize() {\n      this.$trace(\"lsw-filesystem-explorer.methods.increaseFontsize\");\n      this.$refs.editor.increaseFontsize();\n    },\n    decreaseFontsize() {\n      this.$trace(\"lsw-filesystem-explorer.methods.decreaseFontsize\");\n      this.$refs.editor.decreaseFontsize();\n    },\n    toggleFontfamily() {\n      this.$trace(\"lsw-filesystem-explorer.methods.toggleFontfamily\");\n      this.$refs.editor.toggleFontfamily();\n    },\n    async _openFile(subpath) {\n      this.$trace(\"lsw-filesystem-explorer.methods._openFile\");\n      this.current_node = subpath;\n      const contents = await this.$lsw.fs.read_file(this.current_node);\n      this.current_node_contents = contents;\n      this._setButtonsForFile();\n    },\n    async _openDirectory(subpath) {\n      this.$trace(\"lsw-filesystem-explorer.methods._openDirectory\");\n      this.current_node = subpath;\n      const subnodes = await this.$lsw.fs.read_directory(this.current_node);\n      const sortedSubnodes = {\n        files: [],\n        folders: []\n      };\n      Object.keys(subnodes).forEach(id => {\n        const subnode = subnodes[id];\n        const subnodeType = typeof subnode === \"string\" ? \"files\" : \"folders\";\n        sortedSubnodes[subnodeType].push(id);\n      });\n      const formattedSubnodes = {};\n      sortedSubnodes.folders.sort().forEach(folder => {\n        formattedSubnodes[folder] = {};\n      });\n      sortedSubnodes.files.sort().forEach(file => {\n        formattedSubnodes[file] = \"...\";\n      });\n      console.log(subnodes, formattedSubnodes);\n      this.$lsw.fs.change_directory(subpath);\n      this.current_node_subnodes = formattedSubnodes;\n      this._setButtonsForDirectory();\n    },\n    __update_node_parts(newValue = this.current_node) {\n      this.$trace(\"lsw-filesystem-explorer.methods.__update_node_parts\");\n      this.current_node_parts = newValue.split(\"/\").filter(p => p !== \"\");\n    },\n    __update_current_node_basename(current_node_parts = this.current_node_parts) {\n      this.$trace(\"lsw-filesystem-explorer.methods.__update_current_node_basename\");\n      if (current_node_parts.length) {\n        this.current_node_basename = current_node_parts[current_node_parts.length - 1];\n      } else {\n        this.current_node_basename = \"/\";\n      }\n    },\n    __update_current_node_basedir(current_node_parts = this.current_node_parts) {\n      this.$trace(\"lsw-filesystem-explorer.methods.__update_current_node_basedir\");\n      if (current_node_parts.length > 1) {\n        this.current_node_basedir = \"/\" + [].concat(current_node_parts).splice(0, current_node_parts.length - 1).join(\"/\") + \"/\";\n      } else {\n        this.current_node_basedir = \"/\";\n      }\n    },\n    _updateNodeSubdata(newValue = this.current_node) {\n      this.$trace(\"lsw-filesystem-explorer.methods._updateNodeSubdata\");\n      this.__update_node_parts(newValue);\n      this.__update_current_node_basename();\n      this.__update_current_node_basedir();\n    },\n    setPanelButtons(panelOptions = {}) {\n      this.$trace(\"lsw-filesystem-explorer.methods.setPanelButtons\");\n      Validation: {\n        if (typeof panelOptions !== \"object\") {\n          throw new Error(\"Required argument «panelOptions» to be an object on «LswFilesystemExplorer.methods.setPanelButtons»\");\n        }\n        const keys = Object.keys(panelOptions);\n        if (keys.length === 0) {\n          throw new Error(\"Required argument «panelOptions» to be have 1 or more keys on «LswFilesystemExplorer.methods.setPanelButtons»\");\n        }\n        const valid_keys = [\"top\", \"bottom\", \"left\", \"right\"];\n        for (let index = 0; index < keys.length; index++) {\n          const key = keys[index];\n          if (valid_keys.indexOf(key) === -1) {\n            throw new Error(`Required argument «panelOptions[${key}]» to be a valid key out of «${valid_keys.join(\",\")}», not «${key}» on «LswFilesystemExplorer.methods.setPanelButtons»`);\n          }\n          const value = panelOptions[key];\n          if (typeof value !== \"object\") {\n            throw new Error(`Required argument «panelOptions[${key}]» to be an object or array, not ${typeof value}» on «LswFilesystemExplorer.methods.setPanelButtons»`);\n          }\n        }\n      }\n    },\n    async openCodeViewerForJs() {\n      this.$trace(\"lsw-filesystem-explorer.methods.openCodeViewerForJs\");\n      console.log(this.current_node_contents);\n      this.$lsw.dialogs.open({\n        title: \"Visualizando código JS\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"\">{{ file }}:</div>\n            <hr />\n            <lsw-code-viewer :code=\"code\" language=\"js\" />\n          </div>`,\n        factory: {\n          data: {\n            file: this.current_node,\n            code: this.$refs.editor.getContents(),\n          }\n        },\n      })\n    },\n    async openCodeViewerForCss() {\n      this.$trace(\"lsw-filesystem-explorer.methods.openCodeViewerForCss\");\n      this.$lsw.dialogs.open({\n        title: \"Visualizando código CSS\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"\">{{ file }}:</div>\n            <hr />\n            <lsw-code-viewer :code=\"code\" language=\"css\" />\n          </div>`,\n        factory: {\n          data: {\n            file: this.current_node,\n            code: this.$refs.editor.getContents(),\n          }\n        },\n      })\n    },\n    async openCodeViewerForHtml() {\n      this.$trace(\"lsw-filesystem-explorer.methods.openCodeViewerForHtml\");\n      this.$lsw.dialogs.open({\n        title: \"Visualizando código HTML\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"\">{{ file }}:</div>\n            <hr />\n            <lsw-code-viewer :code=\"code\" language=\"html\" />\n          </div>`,\n        factory: {\n          data: {\n            file: this.current_node,\n            code: this.$refs.editor.getContents(),\n          }\n        },\n      });\n    },\n    async openCodeViewerForMermaid() {\n      this.$trace(\"lsw-filesystem.explorer.methods.openCodeViewerForMermaid\");\n      this.$lsw.dialogs.open({\n        title: \"Visualizando código HTML\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"\">{{ file }}:</div>\n            <hr />\n            <lsw-mermaid-viewer :initial-source=\"code\" initial-page=\"visualizador\" />\n          </div>`,\n        factory: {\n          data: {\n            file: this.current_node,\n            code: this.$refs.editor.getContents(),\n          }\n        },\n      });\n    },\n    async processToCompileMarkdown() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToCompileMarkdown\");\n      const mdContent = this.$refs.editor.getContents();\n      const htmlContent = LswMarkdown.global.parse(mdContent);\n      const fileoutput = await this.$lsw.dialogs.open({\n        title: \"Compilar markdown a html\",\n        template: `\n          <div class=\"pad_1\">\n            <div>¿A qué fichero quieres exportar el html? Especifica solo el nombre:</div>\n            <!--lsw-sourceable :code=\"htmlContent\"-->\n            <input class=\"width_100\" type=\"text\" v-model=\"value\" />\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            value: this.current_node.replace(this.current_node_basedir, \"\").replace(/\\.md$/, \".html\"),\n          }\n        }\n      });\n      if (typeof fileoutput !== \"string\") {\n        return;\n      }\n      const filepath = this.$lsw.fs.resolve_path(this.current_node_basedir, fileoutput);\n      try {\n        this.$lsw.fs.write_file(filepath, htmlContent);\n        this.$lsw.toasts.send({\n          title: \"Markdown compilado a HTML\",\n          text: \"La salida está en: \" + filepath,\n        });\n      } catch (error) {\n        this.$lsw.toasts.showError(error, false, true);\n      }\n    },\n    async processToCompileNatyscript() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToCompileNatyscript\");\n      const currentFile = this.current_node;\n      const natyscriptContent = this.$refs.editor.getContents();\n      const jsonData = NatyScriptParser.parse(natyscriptContent);\n      const jsonContent = JSON.stringify(jsonData, null, 2);\n      const jsonFile = currentFile.replace(/\\.nsc$/g, \".json\")\n      this.$lsw.fs.write_file(jsonFile, jsonContent);\n    },\n    async processToCompilePegjs() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToCompilePegjs\");\n      const currentFile = this.current_node;\n      const pegjsContent = this.$refs.editor.getContents();\n      const parserOptions = await this.$lsw.dialogs.open({\n        title: \"Compilar pegjs a js\",\n        template: `\n          <div class=\"pad_1\">\n            <div>Global a la que exportar:</div>\n            <input class=\"width_100\" type=\"text\" v-model=\"value.exportVar\" />\n            <hr />\n            <div>Fichero final:</div>\n            <input class=\"width_100\" type=\"text\" v-model=\"value.output\" />\n            <hr />\n            <div>Formato de exportación:</div>\n            <input class=\"width_100\" type=\"text\" v-model=\"value.format\" />\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            value: {\n              format: 'globals',\n              output: this.current_node.replace(this.current_node_basedir, \"\").replace(/\\.pegjs/g, \".js\"),\n              exportVar: 'DemoParser',\n            }\n          }\n        }\n      });\n      if (typeof parserOptions !== \"object\") return;\n      const fileoutput = parserOptions.output;\n      const parserFormat = parserOptions.format;\n      const parserExporter = parserOptions.exportVar;\n      await this.$lsw.lazyLoads.loadPegjs();\n      const filepath = this.$lsw.fs.resolve_path(this.current_node_basedir, fileoutput);\n      try {\n        const jsContent = PEG.buildParser(pegjsContent, {\n          output: \"source\",\n          format: parserFormat,\n          exportVar: parserExporter,\n        });\n        this.$lsw.fs.write_file(filepath, jsContent);\n        this.$lsw.toasts.send({\n          title: \"Pegjs compilado a JavaScript\",\n          text: \"La salida está en: \" + filepath,\n        });\n      } catch (error) {\n        this.$lsw.toasts.showError(error, false, true);\n      }\n    },\n    async processToFormatHtml() {\n      this.$trace(\"lsw-filesystem.exporer.methods.processToFormatHtml\");\n      try {\n        const input = this.$refs.editor.getContents();\n        await this.$lsw.lazyLoads.loadBeautifier();\n        const output = beautifier.html(input);\n        this.$refs.editor.setContents(output);\n      } catch (error) {\n        this.$lsw.toasts.showError(error, false, true);\n      }\n    },\n    async processToFormatCss() {\n      this.$trace(\"lsw-filesystem.exporer.methods.processToFormatCss\");\n      try {\n        const input = this.$refs.editor.getContents();\n        await this.$lsw.lazyLoads.loadBeautifier();\n        const output = beautifier.css(input);\n        this.$refs.editor.setContents(output);\n      } catch (error) {\n        this.$lsw.toasts.showError(error, false, true);\n      }\n    },\n    async processToFormatJs() {\n      this.$trace(\"lsw-filesystem.exporer.methods.processToFormatJs\");\n      try {\n        const input = this.$refs.editor.getContents();\n        await this.$lsw.lazyLoads.loadBeautifier();\n        const output = beautifier.js(input);\n        this.$refs.editor.setContents(output);\n        this.$lsw.toasts.send({\n          title: \"Documento formateado\",\n          text: \"El documento fue formateado en js correctamente\"\n        });\n      } catch (error) {\n        this.$lsw.toasts.showError(error, false, true);\n      }\n    },\n    processToExecuteFileOnAndroid() {\n      this.$trace(\"lsw-filesystem.exporer.methods.processToExecuteFileOnAndroid\");\n      return LswAndroid.evalFile(this.current_node);\n    },\n    async processToDownloadFile() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToDownloadFile\");\n      const filename = this.current_node.replace(this.current_node_basedir, \"\");\n      LswUtils.debug(filename);\n      const confirmation = await this.$lsw.dialogs.open({\n        title: \"Descargar fichero\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"pad_top_1\">¿Qué nombre quieres para el fichero a descargar?</div>\n            <input type=\"text\" class=\"width_100 margin_top_1\" v-model=\"value\" /> \n            <hr />\n            <div class=\"flex_row centered pad_top_1\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini danger_button\" v-on:click=\"() => accept(value)\">\n                  Aceptar\n                </button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini \" v-on:click=\"cancel\">\n                  Cancelar\n                </button>\n              </div>\n            </div>\n          </div>`,\n        factory: {\n          data: {\n            value: filename\n          }\n        },\n      });\n      LswUtils.debug(confirmation);\n      if (typeof confirmation !== \"string\") return;\n      const filecontents = this.current_node_contents;\n      LswUtils.downloadFile(filename, filecontents);\n    },\n    processToViewHtml() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToCompilePegjs\");\n      const htmlContent = this.$refs.editor.getContents();\n      return this.$lsw.dialogs.open({\n        title: \"Ver html en vivo\",\n        template: `\n          <div class=\"pad_1\">\n            ${htmlContent}\n          </div>\n        `,\n      });\n    },\n    processToViewMarkdown() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToCompilePegjs\");\n      const mdContent = this.$refs.editor.getContents();\n      const htmlContent = LswMarkdown.global.parse(mdContent);\n      return this.$lsw.dialogs.open({\n        title: \"Ver markdown en vivo\",\n        template: `\n          <div class=\"pad_1\">\n            ${htmlContent}\n          </div>\n        `,\n      });\n    },\n    async processToSearchReplace() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToSearchReplace\");\n      let selectedText = \"\";\n      Extract_selected_text: {\n        try {\n          const textareaHtml = this.$refs.editor.$refs.editorTextarea;\n          selectedText = textareaHtml.value.substring(textareaHtml.selectionStart, textareaHtml.selectionEnd);\n        } catch (error) {\n          // @BADLUCK\n          console.log(error);\n        }\n      }\n      const fse = this;\n      const value = await this.$lsw.dialogs.open({\n        title: \"Buscar y reemplazar\",\n        template: `\n          <lsw-search-replacer\n            :input=\"input\"\n            :initial-search=\"search\"\n            :initial-replace=\"replace\"\n            :on-accept=\"out => accept(out)\"\n            :on-cancel=\"comeBack\"\n          />\n        `,\n        factory: {\n          data: {\n            input: this.$refs.editor.getContents(),\n            search: selectedText,\n            replace: selectedText,\n          },\n          methods: {\n            comeBack() {\n              this.cancel();\n              fse.$refs.editor.gainFocus();\n            }\n          }\n        }\n      });\n      if (typeof value !== \"string\") return;\n      this.$refs.editor.setContents(value);\n    },\n    processToValidateCode() {\n      this.$trace(\"lsw-filesystem.explorer.methods.processToValidateCode\");\n      const currentContents = this.$refs.editor.getContents();\n      const syntaxExtensions = Object.keys(this.syntaxValidators).map(id => \".\" + id);\n      let associatedSyntax = undefined;\n      Iterating_syntaxes:\n      for (let index = 0; index < syntaxExtensions.length; index++) {\n        const syntaxExtension = syntaxExtensions[index];\n        const isSyntaxCompliant = this.current_node.endsWith(syntaxExtension);\n        if (isSyntaxCompliant) {\n          associatedSyntax = syntaxExtension;\n          break Iterating_syntaxes;\n        }\n      }\n      if (!associatedSyntax) {\n        return -1;\n      }\n      const associatedValidator = this.syntaxValidators[associatedSyntax];\n      if (!associatedValidator) {\n        return -2;\n      }\n      try {\n        const isValid = associatedValidator(currentContents);\n        this.$lsw.toasts.debug(isValid);\n      } catch (error) {\n        this.$lsw.toasts.showError(error);\n      }\n    },\n    async loadSyntaxValidators() {\n      this.$trace(\"lsw-filesystem-explorer.methods.loadSyntaxValidators\");\n      const validatorsAsMap = await this.$lsw.fs.read_directory(\"/kernel/editor/validators\");\n      const ids = Object.keys(validatorsAsMap).map(f => f.replace(/\\.js/g, \"\"));\n      const allValidators = {};\n      for(let index=0; index<ids.length; index++) {\n        const id = ids[index];\n        const validator = await this.$lsw.fs.evaluateAsJavascriptFileOrReturn(`/kernel/editor/validators/${id}.js`, () => true);\n        allValidators[id] = validator;\n      }\n      this.syntaxValidators = allValidators;\n      \n    },\n    hasSyntaxValidator(file) {\n      const currentExtension = file.replace(/^([^.]*\\.)+/g, \"\");\n      return Object.keys(this.syntaxValidators || {}).indexOf(currentExtension) !== -1;\n    },\n  },\n  watch: {\n    current_node(newValue) {\n      this.$trace(\"lsw-filesystem-explorer.watch.current_node\");\n      this._updateNodeSubdata(newValue);\n    }\n  },\n  computed: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-filesystem-explorer.mounted\");\n      await this.loadSyntaxValidators();\n      this.$lsw.fsExplorer = this;\n      // await this.initializeFilesystemForLsw();\n      await this.open(this.openedBy ?? \"/\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswFilesystemExplorer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Filesystem Explorer API » LswFilesystemTreeviewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-filesystem-explorer/lsw-filesystem-treeviewer/lsw-filesystem-treeviewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 146,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Filesystem Explorer API » LswFilesystemTreeviewer component",
              "$code": "Vue.component(\"LswFilesystemTreeviewer\", {\n  name: \"LswFilesystemTreeviewer\",\n  template: $template,\n  props: {\n    explorer: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    this.$trace(\"lsw-filesystem-treeviewer.data\");\n    return {};\n  },\n  watch: {},\n  methods: {\n    goUp() {\n      this.$trace(\"lsw-filesystem-treeviewer.methods.goUp\");\n      return this.explorer.goUp();\n    },\n    openSubnode(subnodeIndex) {\n      this.$trace(\"lsw-filesystem-treeviewer.methods.openSubnode\");\n      return this.explorer.open(subnodeIndex);\n    },\n    async deleteNode(subnodeIndex) {\n      this.$trace(\"lsw-filesystem-treeviewer.methods.deleteNode\");\n      const fullpath = this.$lsw.fs.resolve_path(subnodeIndex);\n      const isDirectory = await this.$lsw.fs.is_directory(fullpath);\n      const elementType = isDirectory ? 'directorio' : 'fichero';\n      const confirmation = await this.$lsw.dialogs.open({\n        title: `Proceder a eliminar ${elementType}`,\n        template: `\n          <div class=\"pad_1\">\n            <div>Seguro que quieres eliminar el {{ elementType }} «{{ fullpath }}»?</div>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_right_1\">\n                <button class=\"supermini danger_button nowrap\" v-on:click=\"() => accept(true)\">Sí, eliminar</button>\n              </div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"() => accept(false)\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            elementType,\n            fullpath,\n          }\n        }\n      });\n      if (!confirmation) return;\n      try {\n        if (isDirectory) {\n          await this.$lsw.fs.delete_directory(fullpath);\n        } else {\n          await this.$lsw.fs.delete_file(fullpath);\n        }\n        await this.explorer.refresh();\n      } catch (error) {\n        await this.$lsw.dialogs.open({\n          title: `El fichero no se pudo eliminar`,\n          template: `\n            <div class=\"pad_1\">\n              <div>El fichero «{{ fullpath }}» no se pudo eliminar debido al siguiente error:</div>\n              <hr />\n              <div v-if=\"error\">{{ error.name }}: {{ error.message }}</div>\n            </div>\n          `,\n          factory: {\n            data: {\n              error,\n              fullpath,\n            }\n          }\n        });\n      }\n    },\n    async renameNode(subnodeIndex) {\n      this.$trace(\"lsw-filesystem-treeviewer.methods.renameNode\");\n      const fullpath = this.$lsw.fs.resolve_path(subnodeIndex);\n      const isDirectory = await this.$lsw.fs.is_directory(fullpath);\n      const elementType = isDirectory ? 'directorio' : 'fichero';\n      const newName = await this.$lsw.dialogs.open({\n        title: \"Renombrar \" + elementType,\n        template: `<div>\n          <div class=\"pad_1\">\n            <div>Refiriéndose al {{ elementType }}:</div>\n            <div class=\"pad_2\">{{ filename }}</div>\n            <div>Di el nuevo nombre del {{ elementType }}:</div>\n            <input v-focus class=\"width_100\" type=\"text\" v-model=\"newFilename\" v-on:keyup.enter=\"() => accept(newFilename)\" />\n          </div>\n          <hr />\n          <div class=\"flex_row centered pad_1\">\n            <div class=\"flex_100\"></div>\n            <div class=\"flex_1 pad_right_1\">\n              <button class=\"supermini\" v-on:click=\"() => accept(newFilename)\">Renombrar</button>\n            </div>\n            <div class=\"flex_1\">\n              <button class=\"supermini\" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        </div>`,\n        factory: {\n          data: {\n            elementType,\n            fullpath,\n            filename: subnodeIndex,\n            newFilename: subnodeIndex,\n          }\n        }\n      });\n      if (typeof newName !== \"string\") return;\n      if (newName.trim() === \"\") return;\n      await this.$lsw.fs.rename(subnodeIndex, newName.replace(/^\\/+/g, \"\"));\n      this.explorer.refresh();\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-filesystem-treeviewer.mounted\");\n    this.explorer.setPanelButtons({\n      top: [],\n      left: [],\n      right: [],\n      bottom: [],\n    })\n  },\n  unmounted() {\n    this.$trace(\"lsw-filesystem-treeviewer.unmounted\");\n  }\n});\n",
              "$code.label": "LswFilesystemTreeviewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswFormtypesUtils component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/api/api.js",
              "$location": {
                "start": {
                  "offset": 288,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 414,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswFormtypesUtils component",
              "$code": "  class LswFormtypesUtils {\n\n    static class = this;\n\n    static async submitControl() {\n      if (this.settings.parentSchemaForm) {\n        await this.validate();\n      }\n\n    }\n\n    static validateControl() {\n      return this.$refs.controller.$xform.validate();\n    }\n\n    static validateSettings() {\n      LswXForm.validateSettings(this.settings);\n      const ensureSettings = $ensure(this.settings);\n      const checkSettings = $check(this.settings);\n      ensureSettings.to.have.onlyPotentialKeys([\n        \"name\",\n        \"input\",\n        \"entity\",\n        \"database\",\n        \"table\",\n        \"column\",\n        \"initialValue\",\n        \"label\",\n        \"parentSchemaForm\",\n        \"extraAttributes\",\n        \"formtypeParameters\",\n        \"formtypeSettings\"\n      ]);\n      if (checkSettings.to.have.key(\"initialValue\")) {\n        const ensureInitialValue = ensureSettings.its(\"initialValue\").type(\"string\");\n      }\n      if (checkSettings.to.have.key(\"label\")) {\n        const ensureHasLabel = ensureSettings.its(\"label\").type([\"string\", \"undefined\", \"boolean\"]);\n      }\n    }\n\n  }\n\n  class LswFormtypes {\n\n    static class = this;\n\n    constructor() {\n      this.$formtypes = new Map();\n    }\n\n    static utils = LswFormtypesUtils;\n\n  }\n\n  window.commonFormtypes = new LswFormtypes();\n\n  return LswFormtypes;\n",
              "$code.label": "LswFormtypesUtils API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswKeyboard1Text component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-keyboard-1/lsw-keyboard-1-text/lsw-keyboard-1-text.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 102,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswKeyboard1Text component",
              "$code": "(function () {\n\n  \n  const keyEvents = {\n    \"DefaultAction\": function (event) {\n      this.injectCharacter(event.key);\n    },\n    \"Backspace\": function () {\n      this.deleteSelectionOrCharacter(true);\n    },\n    \"Delete\": function () {\n      this.deleteSelectionOrCharacter(false);\n    },\n    \"Enter\": function () {\n      this.injectCharacter(\"\\n\");\n    },\n    \"Control\": function () {\n\n    },\n    \"Shift\": function () {\n\n    },\n    \"ArrowLeft\": function (event) {\n      if (event.ctrlKey) {\n        if (event.shiftKey) {\n          this.dragCursorWordLeft();\n        } else {\n          this.moveCursorWordLeft();\n        }\n      } else if (event.shiftKey) {\n        this.dragCursorCharacterLeft();\n      } else {\n        this.moveCursorHorizontally(-1);\n      }\n    },\n    \"ArrowRight\": function (event) {\n      if (event.ctrlKey) {\n        if (event.shiftKey) {\n          this.dragCursorWordRight();\n        } else {\n          this.moveCursorWordRight();\n        }\n      } else if (event.shiftKey) {\n        this.dragCursorCharacterRight();\n      } else {\n        this.moveCursorHorizontally(1);\n      }\n    },\n    \"ArrowUp\": function (event) {\n      if (event.shiftKey) {\n        this.dragCursorLineUp();\n      } else {\n        this.moveCursorVertically(-1);\n      }\n    },\n    \"ArrowDown\": function (event) {\n      if (event.shiftKey) {\n        this.dragCursorLineDown();\n      } else {\n        this.moveCursorVertically(1);\n      }\n    },\n    \"Home\": function (event) {\n      if (event.shiftKey) {\n        this.dragCursorToLineStart();\n      } else {\n        this.moveCursorToLineStart();\n      }\n    },\n    \"End\": function (event) {\n      if (event.shiftKey) {\n        this.dragCursorToLineEnd();\n      } else {\n        this.moveCursorToLineEnd();\n      }\n    },\n    \"PageUp\": function (event) {\n      if (event.ctrlKey) {\n        this.scrollPageUp();\n      } else if (event.shiftKey) {\n        this.dragCursorToPageUp();\n      } else {\n        this.moveCursorToPageUp();\n      }\n    },\n    \"PageDown\": function (event) {\n      if (event.ctrlKey) {\n        this.scrollPageDown();\n      } else if (event.shiftKey) {\n        this.dragCursorToPageDown();\n      } else {\n        this.moveCursorToPageDown();\n      }\n    },\n\n  };\n  let cursorLine = 0;\n  let cursorColumn = 0;\n  Vue.component(\"LswKeyboard1Text\", {\n    template: $template,\n    props: {\n      text: {\n        type: Array,\n        required: true,\n      },\n      keyboard: {\n        type: Object,\n        required: true,\n      }\n    },\n    data() {\n      this.$trace(\"lsw-keyboard-1-text.data\");\n      let pos = 0;\n      return {\n        currentText: this.text,\n        pageUpDownLines: 20,\n        textMatrix: this.getTextMatrix(this.text),\n        cursorStart: 0,\n        cursorEnd: 0,\n        cursorPosition: 0,\n        cursorLine: 0,\n        cursorColumn: 0,\n      };\n    },\n    methods: {\n      getTextMatrix(text = this.currentText) {\n        this.$trace(\"lsw-keyboard-1-text.methods.getTextMatrix\");\n        let pos = 0;\n        return text.split(/\\n/g).map(line => line.split(\"\").map(ch => {\n          return {\n            ch,\n            pos: pos++\n          }\n        }).concat([{\n          ch: \"\\n\",\n          pos: pos++,\n        }]));\n      },\n      getTextFromMatrix(matrix = this.textMatrix) {\n        this.$trace(\"lsw-keyboard-1-text.methods.getTextFromMatrix\");\n        return matrix.map(line => line.join(\"\")).join(\"\");\n      },\n      synchronizeTextFromMatrix() {\n        this.$trace(\"lsw-keyboard-1-text.methods.synchronizeMatrixFromText\");\n        this.currentText = this.getTextFromMatrix(this.textMatrix);\n      },\n      synchronizeMatrixFromText() {\n        this.$trace(\"lsw-keyboard-1-text.methods.synchronizeMatrixFromText\");\n        this.textMatrix = this.getTextMatrix(this.currentText);\n      },\n      isSelectedPosition(textPos) {\n        this.$trace(\"lsw-keyboard-1-text.methods.isSelectedPosition\");\n        return (this.cursorStart <= textPos) && (this.cursorEnd > textPos);\n      },\n      hasSelectedRange() {\n        return this.cursorStart !== this.cursorEnd;\n      },\n      setSelectedPosition(startPos, endPos = startPos, cursorPos = false) {\n        this.$trace(\"lsw-keyboard-1-text.methods.setSelectedPosition\");\n        this.cursorStart = startPos;\n        this.cursorEnd = endPos;\n        if (typeof cursorPos === \"number\") {\n          this.cursorPosition = cursorPos;\n        } else {\n          this.cursorPosition = this.cursorStart;\n        }\n        HOOKS_PARA_CADA_MOVIMIENTO_DEL_CURSOR_POR_EL_TEXTO: {\n          this.synchronizeCursorPath();\n        }\n      },\n      synchronizeCursorPath() {\n        this.$trace(\"lsw-keyboard-1-text.methods.synchronizeCursorPath\");\n        let currentPos = 0;\n        Iterating_text:\n        for(let lineIndex=0; lineIndex<this.textMatrix.length; lineIndex++) {\n          const line = this.textMatrix[lineIndex];\n          const finalLinePos = currentPos + (line.length);\n          if(finalLinePos > this.cursorPosition) {\n            for(let columnIndex=0; columnIndex<line.length; columnIndex++) {\n              const cell = line[columnIndex];\n              if(cell.pos === this.cursorPosition) {\n                this.cursorLine = lineIndex;\n                this.cursorColumn = columnIndex;\n                break Iterating_text;\n              }\n            }\n          } else if(finalLinePos === this.cursorPosition) {\n            this.cursorLine = lineIndex;\n            this.cursorColumn = line.length;\n            break Iterating_text;\n          } else {\n            currentPos = finalLinePos;\n          }\n          currentPos++;\n        }\n        \n      },\n      setFocusToKeyboard() {\n        this.$trace(\"lsw-keyboard-1-text.methods.setFocusToKeyboard\");\n        this.keyboard.gainFocus();\n      },\n      onKeyClicked(textPos) {\n        this.$trace(\"lsw-keyboard-1-text.methods.onKeyClicked\");\n        this.setSelectedPosition(textPos);\n        this.setFocusToKeyboard();\n      },\n      moveCursorHorizontally(movement) {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorHorizontally\");\n        if (this.hasSelectedRange()) {\n          if (movement < 0) {\n            this.setSelectedPosition(this.cursorStart);\n          } else {\n            this.setSelectedPosition(this.cursorEnd);\n          }\n        } else {\n          if (movement < 0) {\n            if (this.cursorStart === 0) {\n              return false;\n            }\n          } else if (movement > 0) {\n            if (this.cursorEnd >= this.currentText.length) {\n              return false;\n            }\n          }\n          this.setSelectedPosition(this.cursorStart + movement);\n        }\n      },\n      getCursorPosition() {\n        this.$trace(\"lsw-keyboard-1-text.methods.getCursorPosition\");\n        const currentKey = this.$refs.cursor[0];\n        const pos = parseInt(currentKey.getAttribute(\"data-cursor-position\"));\n        const line = parseInt(currentKey.getAttribute(\"data-cursor-line\"));\n        const ch = parseInt(currentKey.getAttribute(\"data-cursor-character\"));\n        return { pos, line, ch };\n      },\n      setCursorPath(lineIndex, columnIndex) {\n        this.$trace(\"lsw-keyboard-1-text.methods.setCursorPath\");\n        cursorLine = lineIndex;\n        cursorColumn = columnIndex;\n        return true;\n      },\n      getCursorPath() {\n        this.$trace(\"lsw-keyboard-1-text.methods.getCursorPath\");\n        return {\n          line: cursorLine,\n          column: cursorColumn\n        }\n      },\n      moveCursorVertically(movement) {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorVertically\");\n        const { pos, line, ch } = this.getCursorPosition();\n        const goesUp = movement < 0;\n        if ((line === 0) && (goesUp)) {\n          return false;\n        }\n        if ((line === this.textMatrix.length) && (!goesUp)) {\n          return false;\n        }\n        let nextPosition = undefined;\n        let nextLine = undefined;\n        let nextColumn = ch;\n        Calculate_next_line: {\n          nextLine = line + movement;\n        }\n        Calculate_next_column: {\n          const nextLineArray = this.textMatrix[nextLine];\n          if (!nextLineArray) {\n            return false;\n          }\n          if (nextLineArray.length <= ch) {\n            nextColumn = nextLineArray.length - 1;\n          }\n        }\n        Calculate_next_position: {\n          nextPosition = this.textMatrix[nextLine][nextColumn].pos;\n        }\n        this.setSelectedPosition(nextPosition);\n      },\n      dispatchKeyPress(keyId, event) {\n        this.$trace(\"lsw-keyboard-1-text.methods.dispatchKeyPress\");\n        const keyEvent = keyId in keyEvents ? keyEvents[keyId] : keyEvents.DefaultAction;\n        event.preventDefault();\n        return keyEvent.call(this, event);\n      },\n      moveCursorToLineStart() {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorToLineStart\");\n        const { pos, line, ch } = this.getCursorPosition();\n        this.setSelectedPosition(this.textMatrix[line][0].pos);\n      },\n      moveCursorToLineEnd() {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorToLineEnd\");\n        const { pos, line, ch } = this.getCursorPosition();\n        const currentLineArray = this.textMatrix[line];\n        this.setSelectedPosition(currentLineArray[currentLineArray.length - 1].pos);\n      },\n      getLineUpPosition(cursor = this.getCursorPosition()) {\n        this.$trace(\"lsw-keyboard-1-text.methods.getLineUpPosition\");\n        const { line, ch, pos } = cursor;\n        if(line === 0) {\n          // CASO 1: si no hay línea anterior, el cursor va al inicio\n          return 0;\n        }\n        const nextLineArray = this.textMatrix[line-1];\n        if(ch > nextLineArray.length) {\n          // CASO 2: si sí hay línea anterior, pero no caracter: va al final de la linea anterior\n          return nextLineArray[nextLineArray.length - 1].pos;\n        } else {\n          // CASO 3: si sí hay línea anterior, y sí hay caracter: normal\n          return nextLineArray[ch].pos;\n        }\n      },\n      getLineDownPosition(cursor = this.getCursorPosition()) {\n        this.$trace(\"lsw-keyboard-1-text.methods.getLineDownPosition\");\n        const { line, ch, pos } = cursor;\n        if(line === (this.textMatrix.length-1)) {\n          // CASO 1: si no hay línea posterior, el cursor va al final\n          return this.currentText.length - 1;\n        }\n        const nextLineArray = this.textMatrix[line+1];\n        if(ch > nextLineArray.length) {\n          // CASO 2: si sí hay línea posterior, pero no caracter: va al final de la linea posterior\n          return nextLineArray[nextLineArray.length - 1].pos;\n        } else {\n          // CASO 3: si sí hay línea posterior, y sí hay caracter: normal\n          return nextLineArray[ch].pos;\n        }\n      },\n      getWordLeftPosition() {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorWordRight\");\n        const { pos, line, ch } = this.getCursorPosition();\n        const currentLineArray = this.textMatrix[line];\n        const firstPosition = ch - 2;\n        if (firstPosition < 0) {\n          return pos;\n        }\n        for (let index = firstPosition; index >= 0; index--) {\n          const currentCh = currentLineArray[index];\n          if ([\" \", \".\", \",\"].indexOf(currentCh.ch) !== -1) {\n            return currentLineArray[index].pos + 1;\n          }\n        }\n        return currentLineArray[0].pos;\n      },\n      getWordRightPosition() {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorWordRight\");\n        const { pos, line, ch } = this.getCursorPosition();\n        const currentLineArray = this.textMatrix[line];\n        for (let index = ch + 1; index < currentLineArray.length; index++) {\n          const currentCh = currentLineArray[index];\n          if ([\" \", \".\", \",\"].indexOf(currentCh.ch) !== -1) {\n            return currentLineArray[index].pos;\n          }\n        }\n        return currentLineArray[currentLineArray.length - 1].pos;\n      },\n      moveCursorWordLeft() {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorWordLeft\");\n        const newPos = this.getWordLeftPosition();\n        return this.setSelectedPosition(newPos);\n      },\n      moveCursorWordRight() {\n        this.$trace(\"lsw-keyboard-1-text.methods.moveCursorWordRight\");\n        const newPos = this.getWordRightPosition();\n        return this.setSelectedPosition(newPos);\n      },\n      moveCursorToPageUp() {\n        this.$trace(\"moveCursorToPageUp\");\n        // @BYCHATGPT:\n        const { line, ch } = this.getCursorPosition();\n        const targetLine = Math.max(0, line - this.pageUpDownLines);\n        const col = Math.min(ch, this.textMatrix[targetLine].length - 1);\n        const pos = this.textMatrix[targetLine][col].pos;\n        this.setSelectedPosition(pos);\n      },\n      moveCursorToPageDown() {\n        this.$trace(\"moveCursorToPageDown\");\n        // @BYCHATGPT:\n        const { line, ch } = this.getCursorPosition();\n        const targetLine = Math.min(this.textMatrix.length - 1, line + this.pageUpDownLines);\n        const col = Math.min(ch, this.textMatrix[targetLine].length - 1);\n        const pos = this.textMatrix[targetLine][col].pos;\n        this.setSelectedPosition(pos);\n      },\n      dragCursorCharacterLeft() {\n        this.$trace(\"dragCursorCharacterLeft\");\n        // @BYME:\n        if (this.hasSelectedRange()) {\n          if (this.cursorStart === this.cursorPosition) {\n            if (this.cursorStart > 0) {\n              const finalPos = this.cursorStart - 1;\n              this.setSelectedPosition(finalPos, this.cursorEnd, finalPos);\n            }\n          } else if (this.cursorEnd === this.cursorPosition) {\n            if (this.cursorEnd > 0) {\n              const finalPos = this.cursorEnd - 1;\n              this.setSelectedPosition(this.cursorStart, finalPos, finalPos);\n            }\n          }\n        } else {\n          if (this.cursorStart > 0) {\n            const finalPos = this.cursorStart - 1;\n            this.setSelectedPosition(finalPos, this.cursorEnd, finalPos);\n          }\n        }\n      },\n      dragCursorCharacterRight() {\n        this.$trace(\"dragCursorCharacterRight\");\n        // @BYME:\n        if (this.hasSelectedRange()) {\n          if (this.cursorStart === this.cursorPosition) {\n            if (this.cursorStart < (this.currentText.length - 1)) {\n              const finalPos = this.cursorStart + 1;\n              this.setSelectedPosition(finalPos, this.cursorEnd, finalPos);\n            }\n          } else if (this.cursorEnd === this.cursorPosition) {\n            if (this.cursorEnd < (this.currentText.length - 1)) {\n              const finalPos = this.cursorEnd + 1;\n              this.setSelectedPosition(this.cursorStart, finalPos, finalPos);\n            }\n          }\n        } else {\n          if (this.cursorEnd < (this.currentText.length - 1)) {\n            const finalPos = this.cursorEnd + 1;\n            this.setSelectedPosition(this.cursorStart, finalPos, finalPos);\n          }\n        }\n      },\n      dragCursorWordRight() {\n        this.$trace(\"dragCursorWordRight\");\n        // @BYME:\n        const { line, ch, pos } = this.getCursorPosition();\n        const newPos = this.getWordRightPosition();\n        if (pos === this.cursorEnd) {\n          // CASO 1: Cuando el nuevo cursor coincide con el end: solo movemos el end\n          this.setSelectedPosition(this.cursorStart, newPos, newPos);\n        } else {\n          if (newPos > this.cursorEnd) {\n            // CASO 2: Cuando el nuevo cursor es mayor que el end: \n            return this.setSelectedPosition(this.cursorEnd, newPos, newPos);\n          } else {\n            // CASO 2: Cuando el nuevo cursor es menor que el end: \n            return this.setSelectedPosition(newPos, this.cursorEnd, newPos);\n          }\n        }\n      },\n      dragCursorWordLeft() {\n        this.$trace(\"dragCursorWordLeft\");\n        // @BYME:\n        const { line, ch, pos } = this.getCursorPosition();\n        const newPos = this.getWordLeftPosition();\n        if (pos === this.cursorStart) {\n          // CASO 1: Cuando el nuevo cursor coincide con el start: solo movemos el start\n          this.setSelectedPosition(newPos, this.cursorEnd, newPos);\n        } else if (newPos < this.cursorStart) {\n          // CASO 2: Cuando el nuevo cursor es menor que el start: \n          return this.setSelectedPosition(newPos, this.cursorStart, newPos);\n        } else {\n          // CASO 3: Cuando el nuevo cursor es mayor al start: \n          return this.setSelectedPosition(this.cursorStart, newPos, newPos);\n        }\n      },\n      dragCursorLineUp() {\n        this.$trace(\"dragCursorLineUp\");\n        // @BYME:\n        const { line, ch, pos } = this.getCursorPosition();\n        const newPos = this.getLineUpPosition();\n        if(this.cursorStart === pos) {\n          // CASO 1: si movemos desde el start (para arriba)\n          return this.setSelectedPosition(newPos, this.cursorEnd, newPos);\n        } else if(this.cursorEnd === pos) {\n          // CASO 2: si movemos desde el end\n          if(newPos <= this.cursorStart) {\n            return this.setSelectedPosition(newPos, this.cursorStart, newPos);\n          } else {\n            return this.setSelectedPosition(this.cursorStart, newPos, newPos);\n          }\n        }\n      },\n      dragCursorLineDown() {\n        this.$trace(\"dragCursorLineDown\");\n        // @BYME:\n        const { line, ch, pos } = this.getCursorPosition();\n        const newPos = this.getLineDownPosition();\n        if(this.cursorStart === pos) {\n          // CASO 1: si movemos desde el start (para abajo)\n          if(newPos > this.cursorEnd) {\n            // CASO 2: si la nueva posición está después del end: movemos el end, y el start donde el end\n            return this.setSelectedPosition(this.cursorEnd, newPos, newPos);\n          } else if(newPos <= this.cursorEnd) {\n            // CASO 3: si la nueva posición está antes del end: movemos el start\n            return this.setSelectedPosition(newPos, this.cursorEnd, newPos);\n          }\n        } else if(this.cursorEnd === pos) {\n          // CASO 4: si movemos desde el end\n          return this.setSelectedPosition(this.cursorStart, newPos, newPos);\n        }\n      },\n      dragCursorToLineStart() {\n        this.$trace(\"dragCursorToLineStart\");\n        // @BYME:\n        const { line, ch, pos } = this.getCursorPosition();\n        const newPos = this.textMatrix[line][0].pos;\n        if (pos <= this.cursorStart) {\n          // CASO 1: Cuando el viejo cursor está antes o igual que el start:\n          return this.setSelectedPosition(newPos, this.cursorEnd, newPos);\n        } else {\n          // CASO 2: Cuando el viejo cursor está después que el start (y en el end, se supone):\n          if (newPos <= this.cursorStart) {\n            // CASO 3: Cuando el nuevo cursor está antes que el start: movemos el start y el end donde el start:\n            return this.setSelectedPosition(newPos, this.cursorStart, newPos);\n          } else {\n            // CASO 4: Cuando el nuevo cursor está que el start: movemos el end solamente:\n            return this.setSelectedPosition(this.cursorStart, newPos, newPos);\n          }\n        }\n      },\n      dragCursorToLineEnd() {\n        this.$trace(\"dragCursorToLineEnd\");\n        // @TOSOLVE\n        // @BYME:\n        const { line, ch, pos } = this.getCursorPosition();\n        const currentLineArray = this.textMatrix[line];\n        const newPos = currentLineArray[this.textMatrix[line].length - 1].pos;\n        if (pos >= this.cursorEnd) {\n          // CASO 1: Cuando el viejo cursor está después o igual que el end:\n          return this.setSelectedPosition(this.cursorStart, newPos, newPos);\n        } else {\n          // CASO 2: Cuando el viejo cursor está antes que el end (y en el start, se supone):\n          if (newPos >= this.cursorEnd) {\n            // CASO 3: Cuando el nuevo cursor está antes que el start: movemos el start y el end donde el start:\n            return this.setSelectedPosition(this.cursorEnd, newPos, newPos);\n          } else {\n            // CASO 4: Cuando el nuevo cursor está que el start: movemos el end solamente:\n            return this.setSelectedPosition(newPos, this.cursorEnd, newPos);\n          }\n        }\n      },\n      dragCursorToPageUp() {\n        this.$trace(\"dragCursorToPageUp\");\n        // @TOSOLVE\n      },\n      dragCursorToPageDown() {\n        this.$trace(\"dragCursorToPageDown\");\n        // @TOSOLVE\n      },\n      scrollPageUp() {\n        this.$trace(\"scrollPageUp\");\n        // @TOSOLVE\n      },\n      scrollPageDown() {\n        this.$trace(\"scrollPageDown\");\n        // @TOSOLVE\n      },\n      injectCharacter(newCh) {\n        this.$trace(\"injectCharacter\");\n        const { pos } = this.getCursorPosition();\n        const newPos = pos + 1;\n        this.currentText = this.currentText.slice(0, pos) + newCh + this.currentText.slice(pos);\n        this.synchronizeMatrixFromText();\n        this.setSelectedPosition(newPos, newPos, newPos);\n      },\n      dropSelection() {\n        this.$trace(\"dropSelection\");\n        const { line, ch, pos } = this.getCursorPosition();\n        const posIni = this.cursorStart;\n        const posEnd = this.cursorEnd;\n        this.currentText = this.currentText.slice(0, posIni) + this.currentText.slice(posEnd);\n        this.synchronizeMatrixFromText();\n        this.setSelectedPosition(posIni, posIni, posIni);\n      },\n      deleteSelectionOrCharacter(isBackspace = false) {\n        this.$trace(\"deleteSelectionOrCharacter\");\n        if (this.hasSelectedRange()) {\n          this.dropSelection();\n        } else {\n          if (isBackspace) {\n            const { pos } = this.getCursorPosition();\n            const newPos = pos - 1;\n            if(newPos < 0) {\n              return;\n            }\n            this.currentText = this.currentText.slice(0, newPos) + this.currentText.slice(pos);\n            this.synchronizeMatrixFromText();\n            this.setSelectedPosition(newPos, newPos, newPos);\n          } else {\n            const { pos } = this.getCursorPosition();\n            const newPos = pos;\n            if(newPos >= this.currentText.length) {\n              return;\n            }\n            this.currentText = this.currentText.slice(0, newPos) + this.currentText.slice(newPos + 1);\n            this.synchronizeMatrixFromText();\n            this.setSelectedPosition(newPos, newPos, newPos);\n          }\n        }\n      }\n    },\n    watch: {\n\n    },\n    async mounted() {\n      try {\n        this.$trace(\"lsw-keyboard-1-text.mounted\");\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  });\n})();\n",
              "$code.label": "LswKeyboard1Text API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Wiki API » LswNatyScriptEditor component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-naty-script/editor/lsw-naty-script-editor.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 123,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Wiki API » LswNatyScriptEditor component",
              "$code": "Vue.component(\"LswNatyScriptEditor\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-naty-script-editor.data\");\n    return {\n      currentPage: \"buscador\", // also: \"editor\", \"buscador\"\n      // EDITOR:\n      isOpenedFile: false,\n      input: `Dios > dice { ok }`,\n      output: false,\n      error: false,\n      errorSummary: false,\n      // BUSCADOR:\n      searcherMemory: {},\n      searchText: \"\",\n      searchOutput: [],\n      // EXPLORADOR:\n      hasSearched: false,\n      natyFiles: false,\n    };\n  },\n  methods: {\n    async runTest() {\n      this.$trace(\"lsw-naty-script-editor.methods.runTest\");\n      try {\n        this.searcherMemory = {};\n        this.output = NatyScriptParser.parse(this.input, {\n          options: {\n            memory: this.searcherMemory\n          }\n        });\n        this.setError(false);\n      } catch (error) {\n        console.error(error);\n        this.setError(error);\n      }\n    },\n    setError(error = false) {\n      this.$trace(\"lsw-naty-script-editor.methods.setError\");\n      this.error = error;\n    },\n    async load() {\n      this.$trace(\"lsw-naty-script-editor.methods.load\");\n      const filesMap = await this.$lsw.fs.read_directory(\"/kernel/natyscript/data\")\n      const filesList = Object.keys(filesMap);\n      this.natyFiles = filesList;\n    },\n    async exportAsFile() {\n      this.$trace(\"lsw-naty-script-editor.methods.exportAsFile\");\n      const filesMap = await this.$lsw.fs.read_directory(\"/kernel/natyscript/data\")\n      const filesList = Object.keys(filesMap);\n      const filename = await this.$lsw.dialogs.open({\n        title: \"Exportando fichero NatyScript\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"pad_vertical_1\">Especifica el nombre del fichero (formato .naty):</div>\n            <div class=\"pad_vertical_1 flex_row centered\">\n              <input class=\"flex_100 width_100\" type=\"text\" v-model=\"value\" v-focus />\n              <div class=\"flex_1\">.naty</div>\n            </div>\n            <hr />\n            <div class=\"pad_vertical_1 flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n            <div class=\"pad_vertical_1\">Los siguientes valores están ocupados:</div>\n            <ul class=\"pad_vertical_1\">\n              <li v-for=\"file, fileIndex in filesList\"\n                v-bind:key=\"'file_' + fileIndex\">\n                {{ file }}\n              </li>\n            </ul>\n          </div>\n        `,\n        factory: {\n          data: {\n            filesList,\n          }\n        }\n      });\n      if(typeof filename !== \"string\") {\n        return;\n      }\n      if(filename.trim() === \"\") {\n        return;\n      }\n      if(filesList.indexOf(filename + \".naty\") !== -1) {\n        const overwriteConfirmation = await this.$lsw.dialogs.open({\n          title: \"El fichero natyscript indicado ya existe\",\n          template: `\n            <div class=\"pad_1\">\n              <div class=\"pad_vertical_1\">El fichero «${filename}.naty» ya existe. ¿Desea sobreescribirlo?</div>\n              <hr />\n              <div class=\"flex_row centered\">\n                <div class=\"flex_100\"></div>\n                <div class=\"flex_1 pad_left_1\">\n                  <button class=\"supermini\" v-on:click=\"accept\">Aceptar</button>\n                </div>\n                <div class=\"flex_1 pad_left_1\">\n                  <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n                </div>\n              </div>\n            </div>\n          `\n        });\n        if(overwriteConfirmation === -1) {\n          return;\n        }\n      }\n      await this.$lsw.fs.write_file(`/kernel/natyscript/data/${filename}.naty`, this.input);\n      this.$lsw.toasts.send({\n        title: \"Exportación de natyscript exitosa\",\n        text: `Fichero «${filename}.naty» exportado correctamente`\n      });\n    },\n    openSearcher() {\n      this.$trace(\"lsw-naty-script-editor.methods.openSearcher\");\n      this.currentPage = \"buscador\";\n    },\n    openEditor() {\n      this.$trace(\"lsw-naty-script-editor.methods.openEditor\");\n      this.currentPage = \"editor\";\n    },\n    async openFile(fileId) {\n      this.$trace(\"lsw-naty-script-editor.methods.openFile\");\n      this.currentPage = \"editor\";\n      this.input = await this.$lsw.fs.read_file(`/kernel/natyscript/data/${fileId}`);\n      this.isOpenedFile = fileId;\n    },\n    async saveFile() {\n      this.$trace(\"lsw-naty-script-editor.methods.saveFile\");\n      const ruta = `/kernel/natyscript/data/${this.isOpenedFile}`;\n      await this.$lsw.fs.write_file(ruta, this.input);\n      this.$lsw.toasts.send({\n        title: \"Fichero natyscript guardado\",\n        text: `Fichero «${ruta}» correctamente`\n      });\n    },\n    clearSearch() {\n      this.$trace(\"lsw-naty-script-editor.methods.clearSearch\");\n      this.hasSearched = false;\n    },\n    digestSearch() {\n      this.$trace(\"lsw-naty-script-editor.methods.digestSearch\");\n      // @TODO....\n      // @TODO....\n      // @TODO....\n      // @TODO....\n      // @TODO....\n      // @TODO....\n      // @TODO....\n      this.searchOutput = [];\n      this.hasSearched = true;\n    }\n  },\n  watch: {\n    error(error) {\n      this.$trace(\"lsw-naty-script-editor.watch.error\");\n      if(error.expected) {\n        error.expected = LswUtils.uniquizeArray(error.expected.map(sugg => sugg.description));\n      }\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-naty-script-editor.mounted\");\n    this.load();\n  },\n  unmount() {\n    this.$trace(\"lsw-naty-script-editor.unmount\");\n  }\n});\n",
              "$code.label": "LswNatyScriptEditor API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Table API » LswTable component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-table/lsw-table/lsw-table.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 102,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Table API » LswTable component",
              "$code": "Vue.component(\"LswTable\", {\n  template: $template,\n  props: {\n    initialInput: {\n      type: Array,\n      default: () => []\n    },\n    initialSettings: {\n      type: Object,\n      default: () => ({})\n    },\n    rowButtons: {\n      type: Array,\n      default: () => []\n    },\n    tableButtons: {\n      type: Array,\n      default: () => []\n    },\n    selectable: {\n      type: String,\n      default: () => \"none\"\n    },\n    onChooseRow: {\n      type: Function,\n      default: () => { }\n    },\n    choosableId: {\n      type: String,\n      default: () => \"id\"\n    },\n    initialChoosenValue: {\n      type: [],\n      default: () => []\n    },\n    storageId: {\n      type: [String, Boolean],\n      default: () => false\n    },\n    storageStrategy: {\n      type: String,\n      default: () => \"ufs/lsw\", // No otras de momento.\n    }\n  },\n  data() {\n    this.$trace(\"lsw-table.data\");\n    const input = [].concat(this.initialInput);\n    return {\n      input,\n      self: this,\n      title: this.initialSettings?.title || \"\",\n      isShowingMenu: this.initialSettings?.isShowingMenu || false,\n      isShowingSubpanel: this.initialSettings?.isShowingSubpanel || \"Todo\", // \"Buscador\", ...\n      selectedRows: [],\n      choosenRows: this.initialChoosenValue || [],\n      searcher: this.initialSettings?.searcher || \"\",\n      extender: this.initialSettings?.extender || \"\",\n      filter: this.initialSettings?.filter || \"\",\n      sorter: this.initialSettings?.sorter || \"\",\n      autosorter: [],\n      itemsPerPageOnForm: this.initialSettings?.itemsPerPage || 10,\n      itemsPerPage: this.initialSettings?.itemsPerPage || 10,\n      currentPage: this.initialSettings?.currentPage || 0,\n      currentPageOnForm: (this.initialSettings?.currentPage + 1) || 1,\n      columnsAsList: this.initialSettings?.columnsAsList || [],\n      columnsOrder: this.initialSettings?.columnsOrder || [],\n      columnsOrderInput: (this.initialSettings?.columnsOrder || []).join(\", \"),\n      output: [],\n      paginatedOutput: [],\n      headers: [],\n      attachedHeaders: this._adaptRowButtonsToHeaders(this.rowButtons),\n      attachedColumns: this._adaptRowButtonsToColumns(this.rowButtons),\n      attachedTopButtons: this._adaptRowButtonsToColumns(this.tableButtons),\n      placeholderForExtensor: \"data.map(function(it, i) {\\n  return Object.assign({}, it, /* you start here */ || {});\\n});\",\n      placeholderForOrdenador: \"data.sort(function(a, b) {\\n  return /* you start here */;\\n});\",\n      placeholderForFiltro: \"data.filter(function(it, i) {\\n  return /* you start here */;\\n});\",\n      placeholderForBuscador: \"Búsqueda de texto rápida\",\n      placeholderForPaginador: \"Ítems por página. Por defecto: 10\"\n    };\n  },\n  methods: {\n    goToFirstPage() {\n      this.$trace(\"lsw-table.methods.goToFirstPage\");\n      this.currentPage = 0;\n    },\n    decreasePage() {\n      this.$trace(\"lsw-table.methods.decreasePage\");\n      if (this.currentPage > 0) {\n        this.currentPage--;\n      }\n    },\n    increasePage() {\n      this.$trace(\"lsw-table.methods.increasePage\");\n      const lastPage = Math.floor(this.output.length / this.itemsPerPage);\n      if (this.currentPage < lastPage) {\n        this.currentPage++;\n      }\n    },\n    goToLastPage() {\n      this.$trace(\"lsw-table.methods.goToLastPage\");\n      const lastPage = Math.floor(this.output.length / this.itemsPerPage);\n      if (this.currentPage !== lastPage) {\n        this.currentPage = lastPage;\n      }\n    },\n    toggleChoosenRow(rowId) {\n      this.$trace(\"lsw-table.methods.toggleChoosenRow\");\n      if (this.selectable === 'many') {\n        const pos = this.choosenRows.indexOf(rowId);\n        if (pos === -1) {\n          this.choosenRows.push(rowId);\n        } else {\n          this.choosenRows.splice(pos, 1);\n        }\n      } else if (this.selectable === 'one') {\n        const isSame = this.choosenRows === rowId;\n        if (isSame) {\n          this.choosenRows = undefined;\n        } else {\n          this.choosenRows = rowId;\n        }\n      }\n    },\n    toggleRow(rowIndex) {\n      this.$trace(\"lsw-table.methods.toggleRow\");\n      if (typeof rowIndex === \"undefined\") {\n        return this.$lsw.toasts.send({\n          title: \"La row no se desplegará\",\n          text: \"Añade «id» para que se puedan seleccionar las rows\"\n        })\n      }\n      const pos = this.selectedRows.indexOf(rowIndex);\n      if (pos === -1) {\n        this.selectedRows.push(rowIndex);\n      } else {\n        this.selectedRows.splice(pos, 1);\n      }\n    },\n    toggleMenu() {\n      this.$trace(\"lsw-table.methods.toggleMenu\");\n      this.isShowingMenu = !this.isShowingMenu;\n    },\n    reloadInput(input) {\n      this.$trace(\"lsw-table.methods.reloadInput\");\n      this.input = input;\n      this.digestOutput();\n    },\n    nextSortStateFor(header) {\n      this.$trace(\"lsw-table.methods.nextSortStateFor\");\n      const posIncrease = this.autosorter.indexOf(header);\n      const posDecrease = this.autosorter.indexOf(\"!\" + header);\n      if (posIncrease !== -1) {\n        this.autosorter.splice(posIncrease, 1, \"!\" + header);\n      } else if (posDecrease !== -1) {\n        this.autosorter.splice(posDecrease, 1);\n      } else {\n        this.autosorter.push(header);\n      }\n      this.digestOutput();\n    },\n    getAutoSorterCallback() {\n      this.$trace(\"lsw-table.methods.getAutoSorterCallback\");\n      return (a, b) => {\n        for(let indexRow=0; indexRow<this.autosorter.length; indexRow++) {\n          const header = this.autosorter[indexRow];\n          const isReversed = header.startsWith(\"!\");\n          const field = isReversed ? header.substr(1) : header.substr(0);\n          const va = a[field];\n          const vb = b[field];\n          if(typeof vb === \"undefined\") {\n            return isReversed ? 1 : -1;\n          } else if(typeof va === \"undefined\") {\n            return isReversed ? -1 : 1;\n          }\n          const van = LswUtils.toFloatOr(va, va);\n          const vbn = LswUtils.toFloatOr(vb, vb);\n          if(van < vbn) {\n            return isReversed ? 1 : -1;\n          } else if(van > vbn) {\n            return isReversed ? -1 : 1;\n          }\n        }\n        return 0;\n      };\n    },\n    digestOutput() {\n      this.$trace(\"lsw-table.methods.digestOutput\");\n      const input = this.input;\n      let temp = [];\n      const extenderExpression = this.extender.trim() || \"{}\";\n      const extenderFunction = new Function(\"it\", \"i\", `return ${extenderExpression}`);\n      const filterExpression = this.filter.trim() || \"true\";\n      const filterFunction = new Function(\"it\", \"i\", `return ${filterExpression}`);\n      const sorterExpression = this.sorter.trim() || \"0\";\n      const sorterFunction = new Function(\"a\", \"b\", `return ${sorterExpression}`);\n      let tempHeaders = new Set();\n      Iterating_rows:\n      for (let index = 0; index < input.length; index++) {\n        const row = input[index];\n        let extendedRow = undefined;\n        Apply_extender: {\n          try {\n            const extenderProduct = extenderFunction(row, index) || {};\n            extendedRow = Object.assign({}, row, extenderProduct);\n          } catch (error) {\n            extendedRow = Object.assign({}, row);\n          }\n        }\n        let isValidFinally = true;\n        Apply_searcher: {\n          if (this.searcher.trim() !== \"\") {\n            const hasMatch = JSON.stringify(extendedRow).toLowerCase().indexOf(this.searcher.toLowerCase()) !== -1;\n            if (!hasMatch) {\n              isValidFinally = isValidFinally && false;\n            }\n          }\n        }\n        Apply_filter: {\n          try {\n            const filterProduct = filterFunction(extendedRow, index);\n            if (filterProduct !== true) {\n              isValidFinally = isValidFinally && false;\n            }\n          } catch (error) {\n            // @OK.\n          }\n        }\n        Extract_row: {\n          if (isValidFinally) {\n            temp.push(extendedRow);\n          }\n        }\n        Extract_headers: {\n          try {\n            Object.keys(extendedRow).forEach(key => {\n              tempHeaders.add(key);\n            });\n          } catch (error) {\n            // @OK.\n          }\n        }\n      }\n      Apply_sorter: {\n        try {\n          if(this.autosorter.length) {\n            const autosorter = this.getAutoSorterCallback();\n            temp = temp.sort(autosorter);\n          } else {\n            temp = temp.sort(sorterFunction);\n          }\n        } catch (error) {\n          // @OK.\n        }\n        Also_to_headers: {\n          if (Array.isArray(this.columnsOrder) && this.columnsOrder.length) {\n            tempHeaders = [...tempHeaders].sort((h1, h2) => {\n              const pos1 = this.columnsOrder.indexOf(h1);\n              const pos2 = this.columnsOrder.indexOf(h2);\n              if (pos1 === -1 && pos2 === -1) {\n                return -1;\n              } else if (pos1 === -1) {\n                return 1;\n              } else if (pos2 === -1) {\n                return -1;\n              } else if (pos1 > pos2) {\n                return 1;\n              }\n              return -1;\n            });\n          }\n        }\n      }\n      this.headers = tempHeaders;\n      this.output = temp;\n      this.digestPagination();\n    },\n    digestPagination() {\n      this.$trace(\"lsw-table.methods.digestPagination\");\n      const page = this.currentPageOnForm - 1;\n      Inject_form_state_of_items_per_page_here: {\n        this.itemsPerPage = this.itemsPerPageOnForm;\n      }\n      const items = this.itemsPerPage;\n      const firstPosition = items * (page);\n      this.selectedRows = [];\n      this.paginatedOutput = [].concat(this.output).splice(firstPosition, items);\n    },\n    saveCurrentTransformer() {\n      this.$trace(\"lsw-table.methods.saveCurrentTransformer\");\n    },\n    _adaptRowButtonsToHeaders(rowButtons) {\n      const attachedHeaders = [];\n      for (let index = 0; index < rowButtons.length; index++) {\n        const attachedButton = rowButtons[index];\n        attachedHeaders.push({\n          text: attachedButton.header || \"\"\n        });\n      }\n      return attachedHeaders;\n    },\n    _adaptRowButtonsToColumns(rowButtons) {\n      const attachedColumns = [];\n      for (let index = 0; index < rowButtons.length; index++) {\n        const attachedButton = rowButtons[index];\n        attachedColumns.push({\n          text: attachedButton.text || \"\",\n          event: attachedButton.event || this.$noop,\n        });\n      }\n      return attachedColumns;\n    },\n    updateColumnsOrderFromInput() {\n      this.$trace(\"lsw-table.methods.updateColumnsOrderFromInput\");\n      this.columnsOrder = this.columnsOrderInput.split(\",\").map(it => it.trim());\n      this.digestOutput();\n    },\n    increaseItemsPerPage() {\n      this.$trace(\"lsw-table.methods.increaseItemsPerPage\");\n      this.itemsPerPageOnForm++;\n    },\n    decreaseItemsPerPage() {\n      this.$trace(\"lsw-table.methods.decreaseItemsPerPage\");\n      this.itemsPerPageOnForm--;\n    },\n    getStoragePathFor(id) {\n      this.$trace(\"lsw-table.methods.getStoragePathFor\");\n      return this.$lsw.fs.resolve_path(\"/kernel/settings/table/storage/\", id);\n    },\n    async loadState() {\n      this.$trace(\"lsw-table.methods.loadState\");\n      Check_strategy_and_validation: {\n        if (this.storageStrategy !== \"ufs/lsw\") {\n          console.log(`[*] Could not load state on lsw-table because of: UnknownStorageStrategy (=${this.storageStrategy})`);\n          return -1;\n        }\n        if (!this.storageId) {\n          // console.log(`[*] Could not load state on lsw-table because of: NoStorageId (=${this.storageId})`);\n          return -2;\n        }\n      }\n      const storagePath = this.getStoragePathFor(this.storageId);\n      const storageJson = await (() => {\n        try {\n          return this.$lsw.fs.read_file(storagePath);\n        } catch (error) {\n          console.log(`[*] Could not load state on lsw-table because of: BadStoragePath (=${this.storagePath})`);\n          return undefined;\n        }\n      })();\n      if (typeof storageJson !== \"string\") {\n        console.log(`[*] Could not load state on lsw-table because of: JsonStorageNotString (=${typeof storageJson})`);\n        return -3;\n      }\n      let storageData = undefined;\n      try {\n        storageData = JSON.parse(storageJson);\n      } catch (error) {\n        console.log(`[*] Could not load state on lsw-table because of: JsonStorageNotParseable (${error.name}=${error.message})`);\n        return -4;\n      }\n      Cargar_estado: {\n        if (typeof storageData !== \"object\") {\n          console.log(`[*] Could not load state on lsw-table because of: StorageDataNotObject (${typeof storageData})`);\n          return -5;\n        }\n        console.log(\"[*] Loading lsw-table state from: \", storageData);\n        Object.assign(this, storageData);\n      }\n    },\n    saveState() {\n      this.$trace(\"lsw-table.methods.saveState\");\n      Check_strategy_and_validation: {\n        if (this.storageStrategy !== \"ufs/lsw\") {\n          console.log(`[*] Could not save state on lsw-table because of: UnknownStorageStrategy (=${this.storageStrategy})`);\n          return -1;\n        }\n        if (!this.storageId) {\n          // console.log(`[*] Could not save state on lsw-table because of: NoStorageId (=${this.storageId})`);\n          return -2;\n        }\n      }\n      const storagePath = this.getStoragePathFor(this.storageId);\n      const storageState = this.extractState();\n      const storageJson = JSON.stringify(storageState, null, 2);\n      Guardar_estado: {\n        console.log(\"[*] Saving lsw-table state as: \", storageState);\n        this.$lsw.fs.write_file(storagePath, storageJson);\n        this.$lsw.toasts.send({\n          title: \"Estado de tabla guardado\",\n          text: \"Con identificador: \" + this.storageId,\n        });\n      }\n      return true;\n    },\n    extractState() {\n      this.$trace(\"lsw-table.methods.extractState\");\n      return LswUtils.extractPropertiesFrom(this, [\n        // \"input\",\n        \"title\",\n        \"isShowingMenu\",\n        \"isShowingSubpanel\",\n        \"selectedRows\",\n        \"choosenRows\",\n        \"searcher\",\n        \"extender\",\n        \"filter\",\n        \"sorter\",\n        \"itemsPerPageOnForm\",\n        \"itemsPerPage\",\n        \"currentPage\",\n        \"currentPageOnForm\",\n        \"columnsAsList\",\n        \"columnsOrder\",\n        \"columnsOrderInput\",\n        // \"output\",\n        // \"paginatedOutput\",\n        \"headers\",\n        // \"attachedHeaders\",\n        // \"attachedColumns\",\n        // \"attachedTopButtons\",\n        // \"placeholderForExtensor\",\n        // \"placeholderForOrdenador\",\n        // \"placeholderForFiltro\",\n        // \"placeholderForBuscador\",\n        // \"placeholderForPaginador\",\n      ], [\n        \"input\",\n        \"output\",\n        \"paginatedOutput\",\n        \"attachedHeaders\",\n        \"attachedColumns\",\n        \"attachedTopButtons\",\n        \"placeholderForExtensor\",\n        \"placeholderForOrdenador\",\n        \"placeholderForFiltro\",\n        \"placeholderForBuscador\",\n        \"placeholderForPaginador\",\n      ], {\n        isShowingMenu: false,\n        isShowingSubpanel: \"Todo\",\n      });\n    },\n  },\n  watch: {\n    itemsPerPage(value) {\n      this.$trace(\"lsw-table.watch.itemsPerPage\");\n      /// this.digestPagination();\n    },\n    currentPage(value) {\n      this.$trace(\"lsw-table.watch.currentPage\");\n      this.currentPageOnForm = value + 1;\n      this.digestPagination();\n    },\n    choosenRows(v) {\n      this.$trace(\"lsw-table.watch.value\");\n      this.onChooseRow(v, this);\n    }\n  },\n  computed: {\n    hasFiltersApplying() {\n      // @BUGGY: estos logs causan recursividad en el console-hooker\n      // this.$trace(\"lsw-table.computed.hasFiltersApplying\");\n      if (this.autosorter.length) {\n        return true;\n      }\n      if (this.extender.length) {\n        return true;\n      }\n      if (this.filter.length) {\n        return true;\n      }\n      if (this.sorter.length) {\n        return true;\n      };\n      if (this.searcher.length) {\n        return true;\n      }\n      if (this.currentPage !== 0) {\n        return true;\n      }\n      if ((this.currentPage + 1) !== this.currentPageOnForm) {\n        return true;\n      }\n      if (this.itemsPerPage < 10) {\n        return true;\n      }\n      if (this.itemsPerPageOnForm !== this.itemsPerPage) {\n        return true;\n      }\n      if ([\"id\", \"\"].indexOf(this.columnsOrderInput) === -1) {\n        return true;\n      }\n      if ([0, 1].indexOf(this.columnsOrder.length) === 1) {\n        return true;\n      }\n      return false;\n    },\n    totalOfPages() {\n      // @BUGGY: estos logs causan recursividad en el console-hooker\n      // this.$trace(\"lsw-table.computed.totalOfPages\");\n      return Math.ceil(this.output.length / this.itemsPerPage) || 1;\n    },\n    currentLastPage() {\n      this.$trace(\"lsw-table.computed.currentLastPage\");\n      return Math.floor(this.output.length / this.itemsPerPage) || 1;\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-table.mounted\");\n    this.loadState();\n    this.digestOutput();\n  }\n});\n",
              "$code.label": "LswTable API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Wiki API » LswWiki component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki/lsw-wiki.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 99,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWiki component",
              "$code": "Vue.component(\"LswWiki\", {\n  name: \"LswWiki\",\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-wiki.data\");\n    return {\n      isSearching: true,\n      isShowingNavigation: false,\n      isLoadedLibros: true,\n      isLoadedCategorias: true,\n      selectedSection: 'articulos',\n    };\n  },\n  methods: {\n    selectSection(section) {\n      this.$trace(\"lsw-wiki.methods.selectSection\");\n      this.selectedSection = section;\n      this.isShowingNavigation = false;\n    },\n    toggleNavigation() {\n      this.$trace(\"lsw-wiki.methods.toggleNavigation\");\n      this.isShowingNavigation = !this.isShowingNavigation;\n    },\n    hideNavigation() {\n      this.$trace(\"lsw-wiki.methods.hideNavigation\");\n      this.isShowingNavigation = false;\n    },\n    openLibrosFolder() {\n      this.$trace(\"lsw-wiki.methods.openLibrosFolder\");\n      this.$lsw.dialogs.open({\n        id: LswRandomizer.getRandomString(10),\n        title: \"Todos los libros\",\n        template: `\n          <lsw-filesystem-explorer\n            :absolute-layout=\"true\"\n            opened-by=\"/kernel/wiki/libros\"\n          />\n        `\n      });\n    },\n    openCategoriasFile() {\n      this.$trace(\"lsw-wiki.methods.openCategoriasFile\");\n      this.$lsw.dialogs.open({\n        id: LswRandomizer.getRandomString(10),\n        title: \"Todas las categorías\",\n        template: `\n          <lsw-filesystem-explorer\n            :absolute-layout=\"true\"\n            opened-by=\"/kernel/wiki/categorias.tri\"\n          />\n        `\n      });\n    },\n    refreshLibros() {\n      this.$trace(\"lsw-wiki.methods.refreshLibros\");\n      this.isLoadedLibros = false;\n      setTimeout(() => {\n        this.isLoadedLibros = true;\n      }, 100);\n    },\n    refreshCategorias() {\n      this.$trace(\"lsw-wiki.methods.refreshCategorias\");\n      this.isLoadedCategorias = false;\n      setTimeout(() => {\n        this.isLoadedCategorias = true;\n      }, 100);\n    },\n    refreshRevistas() {\n      this.$trace(\"lsw-wiki.methods.refreshRevistas\");\n    },\n    refreshBuscador() {\n      this.$trace(\"lsw-wiki.methods.refreshBuscador\");\n    },\n    refreshArticulos() {\n      this.$trace(\"lsw-wiki.methods.refreshArticulos\");\n    },\n    goToAddArticulo() {\n      this.$trace(\"lsw-wiki.methods.goToAddArticulo\");\n      this.$lsw.dialogs.open({\n        title: \"Añadir nuevo artículo\",\n        template: `<lsw-spontaneous-form-articulo :on-submitted=\"closeAndRefresh\" />`,\n        factory: {\n          methods: {\n            closeAndRefresh() {\n              this.close();\n              // @DONT because maybe you have something in hands.\n            }\n          }\n        },\n      });\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswWiki API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Wiki API » LswWikiArticuloViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-articulo-viewer/lsw-wiki-articulo-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 127,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiArticuloViewer component",
              "$code": "Vue.component(\"LswWikiArticuloViewer\", {\n  name: \"LswWikiArticuloViewer\",\n  template: $template,\n  props: {\n    articuloId: {\n      type: [Number, String],\n      required: true,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-wiki-articulo-viewer.data\");\n    return {\n      isLoaded: false,\n      selectedArticulos: false,\n      markdownContent: false,\n      error: false,\n    };\n  },\n  methods: {\n    setError(error) {\n      this.$trace(\"lsw-wiki-articulo-viewer.methods.setError\");\n      this.error = error;\n    },\n    async loadContent() {\n      this.$trace(\"lsw-wiki-articulo-viewer.methods.loadContent\");\n      const matchedRows = await this.$lsw.database.selectMany(\"Articulo\", articulo => {\n        return articulo.tiene_titulo === this.articuloId;\n      });\n      console.log(\"[*] Artículos coincidentes:\", matchedRows);\n      try {\n        if(matchedRows.length === 0) {\n          throw new Error(`Articulo no encontrado por «${this.articuloId}»`);\n        } else if(matchedRows.length === 1) {\n          this.markdownContent = LswMarkdown.global.parse(matchedRows[0].tiene_contenido);\n        } else {\n          this.markdownContent = matchedRows.map(row => LswMarkdown.global.parse(row.tiene_contenido)).join(\"\\n\\n----\\n\\n\");\n        }\n        this.selectedArticulos = matchedRows;\n      } catch (error) {\n        console.log(\"[*] Error loading articulo:\", error);\n        this.setError(error);\n      } finally {\n        this.isLoaded = true;\n      }\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-articulo-viewer.mounted\");\n      await this.loadContent();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswWikiArticuloViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Wiki API » LswWikiArticulos component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-articulos/lsw-wiki-articulos.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 117,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiArticulos component",
              "$code": "Vue.component(\"LswWikiArticulos\", {\n  name: \"LswWikiArticulos\",\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-wiki-articulos.data\");\n    return {\n      articulos: false,\n      isSearching: false,\n      searchText: \"\",\n      timeoutId: undefined,\n      timeoutSeconds: 0.4,\n      openedArticulos: [],\n    };\n  },\n  methods: {\n    async loadArticulos() {\n      this.$trace(\"lsw-wiki-articulos.methods.loadArticulos\");\n      clearTimeout(this.searchTimeoutId);\n      this.isSearching = true;\n      const articulos = await (() => {\n        if(this.searchText) {\n          return this.$lsw.database.selectMany(\"Articulo\", articulo => {\n            return JSON.stringify(articulo).indexOf(this.searchText) !== -1;\n          });\n        } else {\n          return this.$lsw.database.selectMany(\"Articulo\");\n        }\n      })();\n      const articulosOrdenados = articulos.sort((a1, a2) => {\n        const f1 = a1.tiene_fecha || 0;\n        const f2 = a2.tiene_fecha || 0;\n        if(f1 < f2) return 1;\n        if(f1 > f2) return -1;\n        return -1;\n      });\n      this.openedArticulos = [];\n      this.articulos = articulosOrdenados;\n      this.isSearching = false;\n    },\n    loadArticulosDelayed() {\n      this.$trace(\"lsw-wiki-articulos.methods.loadArticulosDelayed\");\n      clearTimeout(this.searchTimeoutId);\n      this.isSearching = true;\n      this.searchTimeoutId = setTimeout(() => {\n        this.loadArticulos();\n      }, 1000 * this.timeoutSeconds);\n    },\n    toggleArticulo(articuloId) {\n      this.$trace(\"lsw-wiki-articulos.methods.toggleArticulo\");\n      const pos = this.openedArticulos.indexOf(articuloId);\n      if(pos === -1) {\n        this.openedArticulos.push(articuloId);\n      } else {\n        this.openedArticulos.splice(pos, 1);\n      }\n    },\n    async createArticulo() {\n      this.$trace(\"lsw-wiki-articulos.methods.createArticulo\");\n      const articulosComponent = this;\n      await this.$dialogs.open({\n        id: LswRandomizer.getRandomString(10),\n        title: \"Crear nuevo artículo\",\n        template: `\n          <div>\n            <lsw-schema-based-form\n              :on-submit=\"submitCallback\"\n              :model=\"{\n                  connection: $lsw.database,\n                  databaseId: 'lsw_default_database',\n                  tableId: 'Articulo',\n                  rowId: -1,\n              }\"\n            />\n          </div>\n        `,\n        factory: {\n          methods: {\n            async submitCallback(value) {\n              try {\n                this.$trace(\"Dialogs.CrearNuevoArticulo.methods.submitCallback\");\n                await this.$lsw.database.insert(\"Articulo\", value);\n                await this.$lsw.toasts.send({\n                  title: \"Artículo añadido correctamente\",\n                  text: \"El artículo ha sido añadido con éxito.\"\n                });\n                this.close();\n                articulosComponent.loadArticulos();\n              } catch (error) {\n                console.log(error);\n                await this.$lsw.toasts.send({\n                  title: \"Error al añadir artículo\",\n                  text: \"No se pudo añadir el artículo por un error: \" + error.message,\n                  background: \"red\",\n                });\n              }\n\n            }\n          }\n        }\n      })\n    },\n    async editArticulo(articulo) {\n      this.$trace(\"lsw-wiki-articulos.methods.editArticulo\");\n      const articulosComponent = this;\n      await this.$lsw.dialogs.open({\n        title: \"🔬 Editar artículo\",\n        template: `\n          <div>\n            <lsw-schema-based-form\n              :show-breadcrumb=\"false\"\n              :on-submit=\"(value) => submitCallback(value)\"\n              :on-delete-row=\"deleteCallback\"\n              :model=\"{\n                  connection: $lsw.database,\n                  databaseId: 'lsw_default_database',\n                  tableId: 'Articulo',\n                  rowId: articuloId,\n              }\"\n            />\n          </div>\n        `,\n        factory: {\n          data: { articuloId: articulo.id },\n          methods: {\n            async submitCallback(value) {\n              this.$trace(\"Dialogs.EditarArticulo.methods.submitCallback\");\n              try {\n                await this.$lsw.database.update(\"Articulo\", this.articuloId, value);\n                await this.$lsw.toasts.send({\n                  title: \"Artículo actualizado correctamente\",\n                  text: \"El artículo ha sido actualizado con éxito.\"\n                });\n                this.close();\n                articulosComponent.loadArticulos();\n              } catch (error) {\n                console.log(error);\n                await this.$lsw.toasts.send({\n                  title: \"Error al actualizar artículo\",\n                  text: \"No se pudo actualizar el artículo por un error: \" + error.message,\n                  background: \"red\",\n                });\n              }\n            },\n            async deleteCallback() {\n              this.$trace(\"Dialogs.EditarArticulo.methods.deleteCallback\");\n              this.close();\n              articulosComponent.loadArticulos();\n              await this.$lsw.toasts.send({\n                title: \"Artículo eliminado correctamente\",\n                text: \"El artículo se eliminó con éxito.\",\n              });\n            }\n          }\n        }\n      });\n      this.loadArticulos();\n    }, \n    async deleteArticulo(articulo) {\n      this.$trace(\"lsw-wiki-articulos.methods.deleteArticulo\");\n      const articulosComponent = this;\n      const respuesta = await this.$lsw.dialogs.open({\n        title: \"Eliminar artículo\",\n        template: `\n          <div class=\"pad_2\">\n            <div class=\"\">¿Estás seguro que quieres eliminar el artículo?</div>\n            <pre class=\"codeblock margin_top_2 margin_bottom_2\">{{ articulo }}</pre>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_right_1\">\n                <button class=\"flex_1\" v-on:click=\"() => accept(true)\">Aceptar</button>\n              </div>\n              <div class=\"flex_1\">\n                <button class=\"flex_1 \" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: { articulo },\n          methods: {}\n        }\n      });\n      if(respuesta !== true) return;\n      await this.$lsw.database.delete(\"Articulo\", articulo.id);\n      this.$lsw.toasts.send({\n        title: \"Artículo eliminado correctamente\",\n        text: \"El artículo fue eliminado correctamente\"\n      });\n      this.loadArticulos();\n    },\n    async sendArticuloToNotas(articulo) {\n      this.$trace(\"lsw-spontaneous-table-nota.methods.sendArticuloToNotas\");\n      const respuesta = await this.$lsw.dialogs.open({\n        title: \"Pasar artículo a notas\",\n        template: `\n          <div class=\"pad_1\">\n            <div>Vas a pasar el siguiente artículo a nota: </div>\n            <div class=\"pad_2\">\n              <pre class=\"codeblock\">{{ articulo }}</pre>\n            </div>\n            <div>¿Estás seguro?</div>\n            <hr/>\n            <div class=\"flex_row centered text_align_right\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_right_1\">\n                <button class=\"supermini danger_button\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1\">\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: { data: { articulo } },\n      });\n      if(respuesta === -1) return;\n      const notaNew = Object.assign({\n        tiene_titulo: '',\n        tiene_fecha: '',\n        tiene_estado: \"creada\",\n        tiene_categorias: '',\n        tiene_contenido: '',\n        tiene_garantia: '',\n        tiene_tags: '',\n      }, articulo);\n      delete notaNew.id;\n      await this.$lsw.database.insert(\"Nota\", notaNew);\n      await this.$lsw.database.delete(\"Articulo\", articulo.id);\n      this.$lsw.toasts.send({\n        title: \"Artículo a nota bien\",\n        text: \"El artículo ha sido pasado a nota correctamente\",\n      });\n      this.loadArticulos();\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-articulos.mounted\");\n      await this.loadArticulos();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswWikiArticulos API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Wiki API » LswWikiCategorias component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-categorias/lsw-wiki-categorias.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 119,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiCategorias component",
              "$code": "Vue.component(\"LswWikiCategorias\", {\n  name: \"LswWikiCategorias\",\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-wiki-categorias.data\");\n    return {\n      categorias: false,\n    };\n  },\n  methods: {\n    async loadCategorias() {\n      this.$trace(\"LswWikiCategorias.methods.loadCategorias\");\n      this.categorias = await LswWikiUtils.getCategorias();\n    },\n    async abrirCategoria(categoria) {\n      this.$trace(\"LswWikiCategorias.methods.abrirCategoria\");\n      const articulosCategorizados = await this.$lsw.database.selectMany(\"Articulo\", articulo => {\n        return articulo.tiene_categorias.indexOf(categoria.id) !== -1;\n      })\n      console.log(categoria);\n      this.$lsw.dialogs.open({\n        id: LswRandomizer.getRandomString(10),\n        title: \"Ver categoría: \" + categoria.id,\n        template: `\n          <div>\n            <lsw-database-explorer\n              :show-breadcrumb=\"false\"\n              initial-page=\"lsw-page-rows\"\n              :initial-args=\"{\n                database: 'lsw_default_database',\n                table: 'Articulo',\n                tableStorageId: 'categoria-' + categoriaId,\n                filterCallback: it => it.tiene_categorias && (it.tiene_categorias.toLowerCase().indexOf(categoriaId.toLowerCase()) !== -1),\n              }\"\n            />\n          </div>\n        `,\n        factory: {\n          data: { categoriaId: categoria.id, articulosCategorizados }\n        }\n      });\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-categorias.mounted\");\n      await this.loadCategorias();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswWikiCategorias API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Wiki API » LswWikiLibroViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-libro-viewer/lsw-wiki-libro-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 121,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiLibroViewer component",
              "$code": "Vue.component(\"LswWikiLibroViewer\", {\n  name: \"LswWikiLibroViewer\",\n  template: $template,\n  props: {\n    idHeredado: {\n      type: Array,\n      default: () => [],\n    },\n    indiceDeArbol: {\n      type: Number,\n      default: () => 0,\n    },\n    arbol: {\n      type: Object,\n      required: true,\n    },\n    onClickLink: {\n      type: [Boolean, Function],\n      default: () => false,\n    },\n    onClickClip: {\n      type: Function,\n      default: () => {},\n    }\n  },\n  data() {\n    this.$trace(\"lsw-wiki-libro-viewer.data\");\n    return {\n      isSelected: false,\n      isShowingTree: false,\n      isShowingDefinition: false,\n    };\n  },\n  methods: {\n    getIdFor(node) {\n      this.$trace(\"lsw-wiki-libro-viewer.methods.getIdFor\");\n      const lastPartId = node.id || node.link;\n      return [].concat(this.idHeredado).concat([lastPartId]);\n    },\n    toggleState() {\n      this.$trace(\"lsw-wiki-libro-viewer.methods.toggleState\");\n      this.isSelected = !this.isSelected;\n    },\n    toggleTree() {\n      this.$trace(\"lsw-wiki-libro-viewer.methods.toggleTree\");\n      this.isShowingTree = !this.isShowingTree;\n    },\n    toggleDefinition() {\n      this.$trace(\"lsw-wiki-libro-viewer.methods.toggleDefinition\");\n      this.isShowingDefinition = !this.isShowingDefinition;\n    },\n    abrirLink(nodo) {\n      this.$trace(\"lsw-wiki-libro-viewer.methods.abrirLink\");\n      if(this.onClickLink) {\n        this.onClickLink(nodo, this);\n      } else {\n        this.toggleState();\n      }\n    },\n    abrirClip(nodo) {\n      this.$trace(\"lsw-wiki-libro-viewer.methods.abrirClip\");\n      this.onClickClip(nodo, this);\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-libro-viewer.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswWikiLibroViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Wiki API » LswWikiLibros component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-libros/lsw-wiki-libros.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 111,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiLibros component",
              "$code": "Vue.component(\"LswWikiLibros\", {\n  name: \"LswWikiLibros\",\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-wiki-libros.data\");\n    return {\n      selectedLibros: [],\n      selectedLibroInfos: [],\n      loadedLibros: {},\n      libros: false,\n    };\n  },\n  methods: {\n    async toggleLibro(libroId) {\n      this.$trace(\"LswWikiLibros.methods.loadLibros\");\n      const pos = this.selectedLibros.indexOf(libroId);\n      if(pos === -1) {\n        await this.loadLibro(libroId);\n        this.selectedLibros.push(libroId);\n      } else {\n        this.selectedLibros.splice(pos, 1);\n      }\n      this.$forceUpdate(true);\n    },\n    async toggleLibroInfo(libroId) {\n      this.$trace(\"LswWikiLibros.methods.toggleLibroInfo\");\n      const pos = this.selectedLibroInfos.indexOf(libroId);\n      if(pos === -1) {\n        this.selectedLibroInfos.push(libroId);\n      } else {\n        this.selectedLibroInfos.splice(pos, 1);\n      }\n      this.$forceUpdate(true);\n    },\n    async loadLibro(libroId) {\n      this.$trace(\"LswWikiLibros.methods.loadLibro\");\n      const libroData = await this.$lsw.fs.evaluateAsTripiFileOrReturn(`/kernel/wiki/libros/${libroId}`, false);\n      if(!libroData) return;\n      this.loadedLibros[libroId] = libroData;\n      return libroData;\n    },\n    async loadLibros() {\n      this.$trace(\"LswWikiLibros.methods.loadLibros\");\n      const librosBrute = await LswWikiUtils.getLibros();\n      this.libros = librosBrute;\n    },\n    getLibroName(file) {\n      this.$trace(\"LswWikiLibros.methods.getLibroName\");\n      return file.replace(/\\.tri(pi)?/g, \"\")\n    },\n    async abrirArticulo(articulo, componenteDeArticulo) {\n      this.$trace(\"LswWikiLibros.methods.abrirLibro\");\n      console.log(\"Abriendo artículo:\", articulo.link);\n      componenteDeArticulo.toggleState();\n    },\n    async editLibro(libro) {\n      this.$trace(\"LswWikiLibros.methods.editLibro\");\n      await this.$lsw.dialogs.open({\n        id: LswRandomizer.getRandomString(10),\n        title: \"Editar libro\",\n        template: `\n          <lsw-filesystem-explorer\n            :absolute-layout=\"true\"\n            :opened-by=\"'/kernel/wiki/libros/' + libro\"\n          />\n        `,\n        factory: {\n          data: { libro }\n        }\n      });\n    },\n    async printLibro(libroId) {\n      this.$trace(\"LswWikiLibros.methods.printLibro\");\n      const libroTree = await this.loadLibro(libroId);\n      const libroTexted = await this.resolveLibroTree(libroTree)\n      await this.$lsw.dialogs.open({\n        id: LswRandomizer.getRandomString(10),\n        title: \"Imprimir libro\",\n        template: `\n          <lsw-data-printer-report :input=\"libro\" />\n        `,\n        factory: {\n          data: { libro: libroTexted }\n        }\n      });\n    },\n    async resolveLibroTree(treeNode) {\n      this.$trace(\"LswWikiLibros.methods.resolveLibroTree\");\n      if(typeof treeNode === \"undefined\") {\n        return \"\";\n      }\n      let out = \"\";\n      const { id, link, subtree } = treeNode;\n      const reference = id || link;\n      const articulosCoincidentes = await this.$lsw.database.selectMany(\"Articulo\", articulo => {\n        return articulo.tiene_titulo === reference;\n      });\n      out += `### ${id}\\n\\n`;\n      if(articulosCoincidentes && articulosCoincidentes.length) {\n        const articuloTextualizado = articulosCoincidentes.map(articulo => articulo.tiene_contenido).join(\"\\n\\n\");\n        out += `${articuloTextualizado || \"\"}\\n\\n`;\n      }\n      if(typeof subtree === \"object\") {\n        for(let prop in subtree) {\n          out += await this.resolveLibroTree(subtree[prop]);\n        }\n      }\n      return out;\n    },\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-libros.mounted\");\n      await this.loadLibros();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswWikiLibros API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Wiki API » LswWikiRevistas component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-revistas/lsw-wiki-revistas.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 115,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiRevistas component",
              "$code": "Vue.component(\"LswWikiRevistas\", {\n  name: \"LswWikiRevistas\",\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-wiki-revistas.data\");\n    return {\n      revistas: false,\n    };\n  },\n  methods: {\n    async loadRevistas() {\n      this.$trace(\"lsw-wiki.methods.loadRevistas\");\n      this.revistas = await LswWikiUtils.getRevistas();\n    },\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-revistas.mounted\");\n      await this.loadRevistas();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswWikiRevistas API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Wiki API » LswWikiTree component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-tree/lsw-wiki-tree.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 107,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiTree component",
              "$code": "Vue.component(\"LswWikiTree\", {\n  name: \"LswWikiTree\",\n  template: $template,\n  props: {\n    initialInput: {\n      type: Array,\n      default: () => [],\n    },\n    initialSettings: {\n      type: Object,\n      default: () => {},\n    }\n  },\n  data() {\n    this.$trace(\"lsw-wiki-tree.data\");\n    const initialData = this.validateInput(this.initialInput || {});\n    return {\n      selectedNodes: [],\n      treeData: initialData,\n    };\n  },\n  methods: {\n    validateInput(jsonTree) {\n      this.$trace(\"LswWikiTree.methods.validateInput\");\n      $ensure({ jsonTree }, 1).to.be.array().its(\"length\").type(\"number\");\n      return jsonTree;\n    },\n    toggleNode(nodeId) {\n      this.$trace(\"LswWikiTree.methods.toggleNode\");\n      const pos = this.selectedNodes.indexOf(nodeId);\n      if(pos === -1) {\n        this.selectedNodes.push(nodeId);\n      } else {\n        this.selectedNodes.splice(nodeId, 1);\n      }\n    }\n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-tree.mounted\");\n      \n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswWikiTree API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Wiki API » LswWikiTreenode component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-wiki/lsw-wiki-treenode/lsw-wiki-treenode.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 115,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Wiki API » LswWikiTreenode component",
              "$code": "Vue.component(\"LswWikiTreenode\", {\n  name: \"LswWikiTreenode\",\n  template: $template,\n  props: {\n    initialInput: {\n      type: Array,\n      default: () => [],\n    },\n    initialSettings: {\n      type: Object,\n      default: () => {},\n    }\n  },\n  data() {\n    this.$trace(\"lsw-wiki-treenode.data\");\n    return {\n      treeNode: this.initialInput || [],\n    };\n  },\n  methods: {\n    \n  },\n  watch: {\n    \n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-wiki-treenode.mounted\");\n      \n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswWikiTreenode API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Windows API » LswWindowsMainTab component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-windows/lsw-windows-main-tab/lsw-windows-main-tab.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 122,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Windows API » LswWindowsMainTab component",
              "$code": "// Change this component at your convenience:\nVue.component(\"LswWindowsMainTab\", {\n  template: $template,\n  props: {\n    viewer: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    this.$trace(\"lsw-windows-main-tab.data\");\n    return {\n      isShowingApps: false,\n    };\n  },\n  methods: {\n    async showConsole() {\n      this.$trace(\"lsw-windows-main-tab.methods.showConsole\");\n      this.$consoleHooker.toggleConsole();\n    },\n    getRandomString(len = 10) {\n      this.$trace(\"lsw-windows-main-tab.methods.getRandomString\");\n      const alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n      let out = \"\";\n      while(out.length < len) {\n        out += alphabet[Math.floor(Math.random() * alphabet.length)];\n      }\n      return out;\n    },\n    openRest() {\n      this.$trace(\"lsw-windows-main-tab.methods.openRest\");\n      this.viewer.hide();\n      this.$dialogs.open({\n        id: \"database-explorer-\" + this.getRandomString(5),\n        title: \"Database explorer\",\n        template: `<div class=\"pad_1\"><lsw-database-explorer /></div>`,\n      });\n    },\n    openFilesystem() {\n      this.$trace(\"lsw-windows-main-tab.methods.openFilesystem\");\n      this.viewer.hide();\n      this.$dialogs.open({\n        id: \"filesystem-explorer-\" + this.getRandomString(5),\n        title: \"Filesystem explorer\",\n        template: `<lsw-filesystem-explorer  :absolute-layout=\"true\" />`,\n      });\n    },\n    openWiki() {\n      this.$trace(\"lsw-windows-main-tab.methods.openWiki\");\n      this.viewer.hide();\n      this.$dialogs.open({\n        id: \"wiki-explorer-\" + this.getRandomString(5),\n        title: \"Wiki explorer\",\n        template: `<div class=\"pad_1\"><lsw-wiki /></div>`,\n      });\n    },\n    openAgenda() {\n      this.$trace(\"lsw-windows-main-tab.methods.openAgenda\");\n      this.viewer.hide();\n      this.$dialogs.open({\n        id: \"agenda-viewer-\" + this.getRandomString(5),\n        title: \"Agenda viewer\",\n        template: `<div class=\"pad_horizontal_1\"><lsw-agenda /></div>`,\n      });\n    },\n    openAutomessages() {\n      this.$trace(\"lsw-windows-main-tab.methods.openAutomessages\");\n      this.viewer.hide();\n    },\n    openNoteUploader() {\n      this.$trace(\"lsw-windows-main-tab.methods.openNoteUploader\");\n      this.viewer.hide();\n      this.$dialogs.open({\n        id: \"notas-\" + this.getRandomString(5),\n        title: \"Notas\",\n        template: `<div class=\"pad_1\"><lsw-spontaneous-table-nota /></div>`,\n      });\n    },\n    openConfigurationsPage() {\n      this.$trace(\"lsw-windows-main-tab.methods.openConfigurationsPage\");\n      this.viewer.hide();\n      this.$dialogs.open({\n        id: \"configurations-page-\" + this.getRandomString(5),\n        title: \"Configuraciones\",\n        template: `<div class=\"pad_1\"><lsw-configurations-page /></div>`,\n      });\n    },\n    closeProcess(dialog) {\n      this.$trace(\"lsw-windows-main-tab.methods.closeProcess\");\n      this.$lsw.dialogs.close(dialog.id);\n    },\n    toggleApps() {\n      this.$trace(\"lsw-windows-main-tab.methods.toggleApps\");\n      this.isShowingApps = !this.isShowingApps;\n    },\n    openApp() {\n      \n    }\n  },\n  mounted() {\n    this.$lsw.windowsMainTab = this;\n  }\n});\n",
              "$code.label": "LswWindowsMainTab API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Windows API » LswWindowsPivotButton component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-windows/lsw-windows-pivot-button/lsw-windows-pivot-button.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 130,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Windows API » LswWindowsPivotButton component",
              "$code": "// Change this component at your convenience:\nVue.component(\"LswWindowsPivotButton\", {\n  template: $template,\n  props: {\n    viewer: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    this.$trace(\"lsw-windows-pivot-button.data\");\n    return {\n      \n    };\n  },\n  methods: {\n    onClick(event) {\n      this.$trace(\"lsw-windows-pivot-button.methods.onClick\");\n      this.viewer.toggleState();\n    },\n  },\n});\n",
              "$code.label": "LswWindowsPivotButton API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Windows API » LswWindowsViewer classes and functions": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-windows/lsw-windows-viewer/lsw-windows-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 132,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Windows API » LswWindowsViewer classes and functions",
              "$code": "// Change this component at your convenience:\nVue.component(\"LswWindowsViewer\", {\n  template: $template,\n  props: {},\n  data() {\n    return {\n      isShowing: false\n    };\n  },\n  methods: {\n    hide() {\n      this.isShowing = false;\n    },\n    show() {\n      this.isShowing = true;\n    },\n    toggleState() {\n      this.isShowing = !this.isShowing;\n      this.$forceUpdate(true);\n    },\n    selectDialog(id) {\n      this.hide();\n      this.$refs.dialogs.maximize(id);\n    }\n  },\n  mounted() {\n    this.$window.LswWindows = this;\n    this.$lsw.windows = this;\n    this.$lsw.windowsViewer = this;\n  }\n});\n",
              "$code.label": "LswWindowsViewer API",
              "$output": "index.html"
            }
          ],
          "LswStore API » LswStore class": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/apis/lsw-store/src/lib/002.store.js",
              "$location": {
                "start": {
                  "offset": 280,
                  "line": 14,
                  "column": 1
                },
                "end": {
                  "offset": 356,
                  "line": 15,
                  "column": 1
                }
              },
              "$section": "LswStore API » LswStore class",
              "$code": "  const Store = class {\n\n    static create(...args) {\n      return new this(...args);\n    }\n\n    constructor(initialState = {}, path_to_store = \"original_store.json\") {\n      this.$store = initialState;\n      this.$storePath = path_to_store;\n      this.events = {};\n    }\n\n    _triggerParentEvents(event, path, value) {\n      const originalPath = path.join(\".\");\n      if (this.events[originalPath]) {\n        this.events[originalPath].forEach((callback) => {\n          return callback(event, path, value);\n        });\n      }\n      while (path.length > 0) {\n        path.pop();\n        const parentPath = path.join(\".\");\n        if (this.events[parentPath]) {\n          this.events[parentPath].forEach((callback) => {\n            const value = this.get(path);\n            return callback(event, path, value);\n          });\n        }\n      }\n    }\n\n    get(path = []) {\n      return path.reduce((acc, key) => (acc && acc[key] !== undefined ? acc[key] : undefined), this.$store);\n    }\n\n    set(path, value) {\n      if (!Array.isArray(path) || path.length === 0) {\n        throw new Error(\"La ruta debe ser un array de strings no vacío.\");\n      }\n      const lastKey = path.pop();\n      const target = path.reduce((acc, key) => {\n        if (!acc[key]) acc[key] = {};\n        return acc[key];\n      }, this.$store);\n      target[lastKey] = value;\n      path.push(lastKey);\n      this._triggerParentEvents(\"set\", path, value);\n    }\n\n    watch(path, callback) {\n      const key = path.join(\".\");\n      if (!this.events[key]) {\n        this.events[key] = [];\n      }\n      this.events[key].push(callback);\n    }\n\n    unwatch(path, callback) {\n      const key = path.join(\".\");\n      if (this.events[key]) {\n        this.events[key] = this.events[key].filter((cb) => {\n          return cb !== callback;\n        });\n        if (this.events[key].length === 0) {\n          delete this.events[key];\n        }\n      }\n    }\n\n    delete(path) {\n      if (!Array.isArray(path) || path.length === 0) {\n        throw new Error(\"La ruta debe ser un array de strings no vacío.\");\n      }\n      const lastKey = path.pop();\n      const target = this.get(path);\n      if (target && target.hasOwnProperty(lastKey)) {\n        delete target[lastKey];\n        this._triggerParentEvents(\"delete\", path);\n      }\n    }\n\n    push(path, value) {\n      const array = this.get(path);\n      if (Array.isArray(array)) {\n        array.push(value);\n        this._triggerParentEvents(\"push\", path, array);\n      }\n    }\n\n    pop(path) {\n      const array = this.get(path);\n      if (Array.isArray(array)) {\n        const value = array.pop();\n        this._triggerParentEvents(\"pop\", path, array);\n        return value;\n      }\n    }\n\n    unshift(path, value) {\n      const array = this.get(path);\n      if (Array.isArray(array)) {\n        array.unshift(value);\n        this._triggerParentEvents(\"unshift\", path, array);\n      }\n    }\n\n    shift(path) {\n      const array = this.get(path);\n      if (Array.isArray(array)) {\n        const value = array.shift();\n        this._triggerParentEvents(\"shift\", path, array);\n        return value;\n      }\n    }\n\n    add(path, key, value) {\n      const object = this.get(path);\n      if (object && typeof object === 'object' && !Array.isArray(object)) {\n        object[key] = value;\n        this._triggerParentEvents(\"add\", path, object);\n      }\n    }\n\n    remove(path, key) {\n      const object = this.get(path);\n      if (object && typeof object === 'object' && !Array.isArray(object)) {\n        delete object[key];\n        this._triggerParentEvents(\"remove\", path, object);\n      }\n    }\n\n    splice(path, start, deleteCount, ...items) {\n      const array = this.get(path);\n      if (Array.isArray(array)) {\n        const result = array.splice(start, deleteCount, ...items);\n        this._triggerParentEvents(\"splice\", path, array);\n        return result;\n      }\n    }\n\n    extend(path, newProps) {\n      const object = this.get(path);\n      if (object && typeof object === 'object' && !Array.isArray(object)) {\n        Object.assign(object, newProps);\n        this._triggerParentEvents(\"extend\", path, object);\n      }\n    }\n\n    multiextend(...extensions) {\n      for (let index = 0; index < extensions.length; index++) {\n        const {\n          selector,\n          value: targetValue,\n          mode,\n          modifier\n        } = extensions[index];\n        this.modify(selector, currentValue => {\n          let lastValue = currentValue;\n          Set_value: {\n            if (mode === \"assign\") {\n              lastValue = Object.assign(currentValue, targetValue);\n            } else if (mode === \"default\") {\n              lastValue = Object.assign({}, targetValue, currentValue);\n            } else if (mode === \"set\") {\n              lastValue = targetValue;\n            } else if (mode === \"concat\") {\n              lastValue = currentValue.concat(targetValue);\n            }\n          }\n          Run_modifier: {\n            if (modifier) {\n              const result = modifier(lastValue);\n              if (typeof result !== \"undefined\") {\n                return result;\n              }\n            }\n            return lastValue;\n          }\n        });\n      }\n    }\n\n    modify(path, modifier) {\n      const currentValue = this.get(path);\n      const newValue = modifier(currentValue);\n      const isNotSame = newValue !== currentValue;\n      const isNotUndefined = typeof newValue !== \"undefined\";\n      if (isNotUndefined && isNotSame) {\n        this.set(path, newValue);\n      }\n    }\n\n    hydrate(file) {\n      const ufs = UFS_manager.create(this.$storePath);\n      this.$store = JSON.parse(ufs.read_file(file));\n    }\n\n    dehydrate(file) {\n      const ufs = UFS_manager.create(this.$storePath);\n      ufs.write_file(file, JSON.stringify(this.$store));\n    }\n\n  };\n\n  Store.default = Store;\n\n  return Store;\n",
              "$code.label": "LswStore class",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaAccionAdd API » LswAgendaAccionAdd component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-accion-add/lsw-agenda-accion-add.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 147,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaAccionAdd API » LswAgendaAccionAdd component",
              "$code": "Vue.component(\"LswAgendaAccionAdd\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-accion-add.data\");\n    return {\n      // \n    };\n  },\n  methods: {\n    async insertAccion(v) {\n      this.$trace(\"lsw-agenda-accion-add.methods.insertAccion\");\n      await this.$lsw.database.insert(\"Accion\", v);\n      // *@TODO: should redirect\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-accion-add.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaAccionAdd API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaAccionSearch API » LswAgendaAccionSearch component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-accion-search/lsw-agenda-accion-search.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 156,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaAccionSearch API » LswAgendaAccionSearch component",
              "$code": "Vue.component(\"LswAgendaAccionSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-accion-search.data\");\n    return {\n      isLoaded: false,\n    };\n  },\n  methods: {\n    async loadRows() {\n      this.$trace(\"lsw-agenda-accion-search.methods.loadRows\");\n      this.rows = await this.$lsw.database.selectMany(\"Accion\", it => true);\n      this.isLoaded = true;\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-accion-search.mounted\");\n      this.loadRows();\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaAccionSearch API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaAccionesViewer API » LswAgendaAccionesViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-acciones-viewer/lsw-agenda-acciones-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 162,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaAccionesViewer API » LswAgendaAccionesViewer component",
              "$code": "Vue.component(\"LswAgendaAccionesViewer\", {\n  name: \"LswAgendaAccionesViewer\",\n  template: $template,\n  props: {\n    initialDate: {\n      type: Date,\n      default: () => new Date(),\n    },\n    sorterStrategy: {\n      type: String,\n      default: () => false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-agenda-acciones-viewer.data\");\n    return {\n      isLoading: true,\n      isShowingGoals: true,\n      isShowingRandomizer: false,\n      selectedDate: this.initialDate,\n      selectedAccion: \"\",\n      selectedForm: false,\n      selectedDateTasks: undefined,\n      selectedDateTasksSorted: undefined,\n      selectedSorterStrategy: this.sorterStrategy,\n      selectedSorterMoment: false,\n      hiddenDateHours: [],\n      shownAcciones: [],\n    };\n  },\n  methods: {\n    hideRandomizer() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.hideRandomizer\");\n      this.isShowingRandomizer = false;\n    },\n    toggleRandomizer() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.toggleRandomizer\");\n      this.isShowingRandomizer = !this.isShowingRandomizer;\n    },\n    toggleSorterStrategy() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.toggleSorterStrategy\");\n      if (this.selectedSorterStrategy === \"antes\") {\n        this.selectedSorterStrategy = false;\n      } else if (this.selectedSorterStrategy === \"despues\") {\n        this.selectedSorterStrategy = \"antes\";\n      } else {\n        this.selectedSorterStrategy = \"despues\";\n      }\n      this.loadDateTasks();\n    },\n    openRandomizerFile() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.openRandomizerFile\");\n      this.hideRandomizer();\n      Load_secretly_random_actions_as_concepts: {\n        setTimeout(async () => {\n          const randomizables = await this.$lsw.fs.evaluateAsDotenvFileOrReturn(\"/kernel/settings/randomizables.env\", {});\n          const names = Object.keys(randomizables);\n          const knownNames = await this.$lsw.database.selectMany(\"Concepto\", c => {\n            return names.indexOf(c.tiene_nombre) !== -1;\n          });\n          const missingNames = LswUtils.arrays.getMissingInFirst(knownNames, names);\n          const conceptos = missingNames.map(name => {\n            return {\n              tiene_nombre: name,\n              tiene_comentarios: \"\",\n            }\n          });\n          for (let indexConcepto = 0; indexConcepto < conceptos.length; indexConcepto++) {\n            const concepto = conceptos[indexConcepto];\n            try {\n              await this.$lsw.database.insert(\"Concepto\", concepto);\n            } catch (error) {\n              // @BADLUCK\n            }\n          }\n        }, 0);\n      }\n      this.$lsw.dialogs.open({\n        title: \"Editar randomizables.env\",\n        template: `\n          <div>\n            <lsw-filesystem-explorer opened-by=\"/kernel/settings/randomizables.env\" :absolute-layout=\"true\" />\n          </div>\n        `,\n      });\n    },\n    changeDate(selectedDate) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.changeDate\");\n      this.selectedDate = selectedDate;\n      this.loadDateTasks();\n    },\n    selectForm(hora) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.selectForm\");\n      if (this.selectedForm === hora) {\n        this.selectedForm = undefined;\n      } else {\n        this.selectedForm = hora;\n      }\n    },\n    async onInsertTask(v, tarea) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.onInsertTask\");\n      const id = await this.$lsw.database.insert('Accion', v);\n      this.selectForm(id);\n      this.loadDateTasks();\n    },\n    async toggleAutogeneration(tarea) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.toggleAutogeneration\");\n      const siguientesParametros = (() => {\n        if (tarea.tiene_parametros.startsWith(\"[*autogenerada]\")) {\n          return tarea.tiene_parametros.replace(/^\\[\\*autogenerada\\] */g, \"\");\n        }\n        return \"[*autogenerada] \" + tarea.tiene_parametros;\n      })();\n      await this.$lsw.database.overwrite('Accion', tarea.id, {\n        tiene_parametros: siguientesParametros\n      });\n      await this.loadDateTasks();\n    },\n    async advanceTaskState(tarea) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.advanceTaskState\");\n      const siguienteEstado = (() => {\n        switch (tarea.tiene_estado) {\n          case \"pendiente\": return \"completada\";\n          case \"completada\": return \"fallida\";\n          case \"fallida\": return \"pendiente\";\n          default: return \"pendiente\";\n        }\n      })();\n      await this.$lsw.database.overwrite('Accion', tarea.id, {\n        tiene_estado: siguienteEstado\n      });\n      await this.loadDateTasks();\n    },\n    toggleShowAccion(accionId) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.toggleShowAccion\");\n      const pos = this.shownAcciones.indexOf(accionId);\n      if (pos === -1) {\n        this.shownAcciones.push(accionId);\n      } else {\n        this.shownAcciones.splice(pos, 1);\n      }\n    },\n    async loadDateTasks(selectedDateInput = false) {\n      this.isLoading = true;\n      const selectedDate = (() => {\n        if (selectedDateInput instanceof Date) {\n          this.selectedDate = selectedDateInput;\n        } else if (this.$refs.calendario) {\n          this.selectedDate = this.$refs.calendario.getValue();\n        }\n        console.log(this.selectedDate);\n        return this.selectedDate;\n      })();\n      console.log(\"Decidiendo selectedDate\", selectedDate)\n      const selectedDateTasks = await this.$lsw.database.selectMany(\"Accion\", valueBrute => {\n        try {\n          const valueList = LswTimer.parser.parse(valueBrute.tiene_inicio);\n          const value = valueList[0];\n          const isSameYear = value.anio === selectedDate.getFullYear();\n          const isSameMonth = value.mes === (selectedDate.getMonth() + 1);\n          const isSameDay = value.dia === selectedDate.getDate();\n          const isAccepted = isSameYear && isSameMonth && isSameDay;\n          return isAccepted;\n        } catch (error) {\n          return true;\n        }\n      });\n      Constitute_date_tasks_as_required: {\n        if (this.selectedSorterStrategy === false) {\n          this.selectedDateTasks = selectedDateTasks;\n          this.selectedDateTasksSorted = selectedDateTasks.sort((accion1, accion2) => {\n            let inicio1 = undefined;\n            let inicio2 = undefined;\n            try {\n              inicio1 = LswTimer.utils.fromDatestringToDate(accion1.tiene_inicio);\n            } catch (error) {\n              return 1;\n            }\n            try {\n              inicio2 = LswTimer.utils.fromDatestringToDate(accion2.tiene_inicio);\n            } catch (error) {\n              return -1;\n            }\n            if (inicio1 < inicio2) {\n              return -1;\n            } else if (inicio1 > inicio2) {\n              return 1;\n            } else {\n              return -1;\n            }\n          });\n        } else if (this.selectedSorterStrategy === \"despues\") {\n          this.selectedDateTasks = selectedDateTasks;\n          this.selectedSorterMoment = new Date();\n          Mostramos_las_tareas_de_la_hora_actual_en_adelante: {\n            this.selectedSorterMoment.setMinutes(0);\n          }\n          this.selectedDateTasksSorted = selectedDateTasks.filter(accion => {\n            const dateInicio = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n            try {\n              return this.selectedSorterMoment <= dateInicio;\n            } catch (error) {\n              console.log(error);\n              return false;\n            }\n          }).sort((accion1, accion2) => {\n            let inicio1 = undefined;\n            let inicio2 = undefined;\n            try {\n              inicio1 = LswTimer.utils.fromDatestringToDate(accion1.tiene_inicio);\n            } catch (error) {\n              return 1;\n            }\n            try {\n              inicio2 = LswTimer.utils.fromDatestringToDate(accion2.tiene_inicio);\n            } catch (error) {\n              return -1;\n            }\n            if (inicio1 < inicio2) {\n              return -1;\n            } else if (inicio1 > inicio2) {\n              return 1;\n            } else {\n              return -1;\n            }\n          });\n        } else if (this.selectedSorterStrategy === \"antes\") {\n          this.selectedDateTasks = selectedDateTasks;\n          this.selectedSorterMoment = new Date();\n          this.selectedDateTasksSorted = selectedDateTasks.filter(accion => {\n            const dateInicio = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n            try {\n              return this.selectedSorterMoment >= dateInicio;\n            } catch (error) {\n              console.log(error);\n              return false;\n            }\n          }).sort((accion1, accion2) => {\n            let inicio1 = undefined;\n            let inicio2 = undefined;\n            try {\n              inicio1 = LswTimer.utils.fromDatestringToDate(accion1.tiene_inicio);\n            } catch (error) {\n              return 1;\n            }\n            try {\n              inicio2 = LswTimer.utils.fromDatestringToDate(accion2.tiene_inicio);\n            } catch (error) {\n              return -1;\n            }\n            if (inicio1 < inicio2) {\n              return 1;\n            } else if (inicio1 > inicio2) {\n              return -1;\n            } else {\n              return 1;\n            }\n          });\n        }\n        this.$nextTick(() => {\n          this.isLoading = false;\n        });\n      }\n    },\n    showAllHours() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.showAllHours\");\n      this.hiddenDateHours = [];\n    },\n    hideAllHours() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.hideAllHours\");\n      this.hiddenDateHours = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\"];\n    },\n    sameDayPendingAndAutogeneratedFilter(currentDate) {\n      return (accion) => {\n        try {\n          const accionDate = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n          const sameYear = currentDate.getFullYear() === accionDate.getFullYear();\n          const sameMonth = currentDate.getMonth() === accionDate.getMonth();\n          const sameDay = currentDate.getDate() === accionDate.getDate();\n          const isPendiente = accion.tiene_estado === \"pendiente\";\n          const isAutogenerated = accion.tiene_parametros.startsWith(\"[*autogenerada]\");\n          const isValid = sameYear && sameMonth && sameDay && isPendiente && isAutogenerated;\n          if (isValid) {\n            console.log(\"!!!\", accion.en_concepto);\n          } else {\n            console.log(\"sameYear, sameMonth, sameDay, isPendiente\");\n            console.log(\"Fallo:\", sameYear, sameMonth, sameDay, isPendiente, isAutogenerated);\n          }\n          return isValid;\n        } catch (error) {\n          console.log(error);\n          return false;\n        }\n      }\n    },\n    async cleanRandomizedDays() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.cleanRandomizedDays\");\n      this.hideRandomizer();\n      const currentDate = this.selectedDate || new Date();\n      const filterAutogeneratedPendingOfCurrentDate = this.sameDayPendingAndAutogeneratedFilter(currentDate);\n      const matchedAcciones = await this.$lsw.database.selectMany(\"Accion\", filterAutogeneratedPendingOfCurrentDate);\n      if (!matchedAcciones.length) {\n        return this.$lsw.toasts.send({\n          title: \"No hay acciones randomizadas\",\n          text: \"Niniguna acción fue eliminada por ello.\"\n        });\n      }\n      const respuesta = await this.$lsw.dialogs.open({\n        title: \"Eliminar registros randomizados\",\n        template: `<div>\n                    <div class=\"pad_1\">\n                    <div>¿Estás seguro que quieres eliminar los registros randomizados?</div>\n                    <div>Se eliminarán {{ accionesToDelete.length }} registros de acciones randomizados de hoy.</div>\n                    <hr />\n                    <div class=\"flex_row pad_1\">\n                        <div class=\"flex_100\"></div>\n                        <div class=\"flex_1 pad_left_1\">\n                        <button v-on:click=\"() => accept(true)\" class=\"supermini danger_button\">Eliminar</button>\n                        </div>\n                        <div class=\"flex_1 pad_left_1\">\n                        <button v-on:click=\"cancel\" class=\"supermini\">Cancelar</button>\n                        </div>\n                    </div>\n                    </div>\n                </div>`,\n        factory: {\n          data: {\n            accionesToDelete: matchedAcciones\n          }\n        }\n      });\n      if (respuesta !== true) return;\n      await this.$lsw.database.deleteMany(\"Accion\", filterAutogeneratedPendingOfCurrentDate);\n      await this.loadDateTasks(currentDate);\n    },\n    async randomizeDay() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.randomizeDay\");\n      this.hideRandomizer();\n      const respuesta = await this.$dialogs.open({\n        title: \"Cuestionario de randomizar día\",\n        template: `<div>\n            <div class=\"pad_1 pad_bottom_0\">\n                <div class=\"pad_1 pad_bottom_0\">¿Qué duración quieres para las acciones de randomizado de día?</div>\n                <div class=\"pad_1 pad_top_2 pad_bottom_0\">\n                    <lsw-duration-control ref=\"duracion\" :settings=\"{name:'duracion',initialValue:'20min'}\" :skip-label=\"true\" />\n                </div>\n                <hr />\n                <div class=\"pad_1 pad_bottom_0\">¿Desde qué hora quieres randomizar? Mínimo: 0.</div>\n                <div class=\"pad_1 pad_top_2 pad_bottom_0\">\n                    <lsw-text-control ref=\"hora_inicio\" :settings=\"{name:'hora_inicio',initialValue:currentHour}\" :skip-label=\"true\" />\n                </div>\n                <hr />\n                <div class=\"pad_1 pad_bottom_0\">¿Hasta qué hora quieres randomizar? Máximo: 24</div>\n                <div class=\"pad_1 pad_top_2 pad_bottom_0\">\n                    <lsw-text-control ref=\"hora_final\" :settings=\"{name:'hora_final',initialValue:'24'}\" :skip-label=\"true\" />\n                </div>\n            </div>\n            <div class=\"box_error_layout\" v-if=\"error\">\n                <hr/>\n                <div class=\"box_error_container error_is_affecting_field\" v-on:click=\"() => setError(false)\">\n                    <div class=\"box_error_content\">{{ error.name }}: {{ error.message }}</div>\n                </div>\n            </div>\n            <hr />\n            <div class=\"text_align_right pad_right_1\">\n                <button class=\"supermini danger_button\" v-on:click=\"submit\">Randomizar día</button>\n                <button class=\"supermini\" v-on:click=\"cancel\">Cancelar</button>\n            </div>\n        </div>`,\n        factory: {\n          data: {\n            error: false,\n            currentHour: (new Date()).getHours() + \"\",\n          },\n          methods: {\n            setError(error) {\n              this.error = error;\n            },\n            submit() {\n              this.$trace(\"Dialogs.randomizar_dia.methos.submit\");\n              try {\n                const valor = this.$refs.duracion.value;\n                const ast = LswTimer.parser.parse(valor);\n                const esValido = (valor.trim() !== \"\") && (typeof ast[0] === \"object\") && (ast[0].tipo === \"Duracion\");\n                if (!esValido) return;\n                this.value = {\n                  duracion: valor,\n                  hora_inicio: parseInt(this.$refs.hora_inicio.value),\n                  hora_final: parseInt(this.$refs.hora_final.value),\n                };\n                if (this.value.hora_inicio < 0) {\n                  throw new Error(\"Hora de inicio debe ser mayor que 0\");\n                }\n                if (this.value.hora_inicio > 24) {\n                  throw new Error(\"Hora de inicio debe ser menor o igual que 24\");\n                }\n                if (this.value.hora_final < 0) {\n                  throw new Error(\"Hora de final debe ser mayor que 0\");\n                }\n                if (this.value.hora_final > 24) {\n                  throw new Error(\"Hora de final debe ser menor o igual que 24\");\n                }\n                return this.accept();\n              } catch (error) {\n                console.log(error);\n                this.setError(error);\n              }\n            }\n          }\n        }\n      });\n      const {\n        duracion: duracion_de_bloques,\n        hora_inicio,\n        hora_final\n      } = respuesta;\n      if (typeof duracion_de_bloques !== \"string\") return;\n      const currentDate = this.selectedDate;\n      const accionesDelDia = await this.$lsw.database.select(\"Accion\", accion => {\n        try {\n          const accionDate = LswTimer.utils.fromDatestringToDate(accion.tiene_inicio);\n          const sameYear = currentDate.getFullYear() === accionDate.getFullYear();\n          const sameMonth = currentDate.getMonth() === accionDate.getMonth();\n          const sameDay = currentDate.getDate() === accionDate.getDate();\n          const isNotPendiente = accion.tiene_estado !== \"pendiente\";\n          const isValid = sameYear && sameMonth && sameDay && isNotPendiente;\n          return isValid;\n        } catch (error) {\n          console.log(error);\n          return false;\n        }\n      });\n      const momentoInicio = new Date(this.selectedDate);\n      Configurar_hora_de_inicio: {\n        momentoInicio.setHours(hora_inicio);\n        momentoInicio.setMinutes(0);\n        momentoInicio.setSeconds(0);\n        momentoInicio.setMilliseconds(0);\n      }\n      const momentoFinal = new Date(this.selectedDate);\n      Configurar_hora_de_final: {\n        momentoFinal.setHours(hora_final - 1);\n        momentoFinal.setMinutes(0);\n        momentoFinal.setSeconds(0);\n        momentoFinal.setMilliseconds(0);\n      }\n      const randomizableRules = await this.$lsw.fs.evaluateAsDotenvFileOrReturn(\"/kernel/settings/randomizables.env\", {});\n      const accionesAutogeneradas = LswAgendaRandomizer.generar(\n        randomizableRules,\n        accionesDelDia,\n        momentoInicio,\n        duracion_de_bloques,\n        momentoFinal,\n        0.2\n      );\n      accionesAutogeneradas.forEach(accion => {\n        delete accion.id;\n        accion.tiene_estado = \"pendiente\";\n        accion.tiene_parametros = (\"[*autogenerada] \" + (accion.tiene_parametros.replace(/^\\[\\*autogenerada\\]/g, \"\"))).trim();\n      });\n      Insertar_rows: {\n        await this.$lsw.database.insertMany(\"Accion\", accionesAutogeneradas);\n        await this.loadDateTasks(this.selectedDate);\n      }\n    },\n    async openDeleteTaskDialog(tarea, e) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.openDeleteTaskDialog\");\n      const confirmed = await Vue.prototype.$dialogs.open({\n        title: \"Eliminar registro\",\n        template: `\n          <div>\n            <div class=\"pad_2\">¿Seguro que quieres eliminar el registro?</div>\n            <hr class=\"margin_0\" />\n            <div class=\"pad_2 text_align_right\">\n              <button class=\"supermini danger_button\" v-on:click=\"() => accept(true)\">Eliminar</button>\n              <button class=\"supermini \" v-on:click=\"() => accept(false)\">Cancelar</button>\n            </div>\n          </div>\n        `,\n      });\n      if (!confirmed) return false;\n      await this.$lsw.database.delete(\"Accion\", tarea.id);\n      this.selectedForm = undefined;\n      this.loadDateTasks();\n    },\n    async onUpdateTask(v, tarea) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.onUpdateTask\");\n      await this.$lsw.database.update('Accion', tarea.id, v);\n      this.selectedForm = tarea.id;\n      this.loadDateTasks();\n    },\n    openNewRowDialog() {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.openNewRowDialog\");\n      const that = this;\n      this.$lsw.dialogs.open({\n        title: \"Crear acción\",\n        template: `\n          <lsw-schema-based-form\n            :on-submit=\"v => onInsertTask(v)\"\n            :on-delete-row=\"loadDateTasks\"\n            :overriden-values=\"{\n              tiene_estado: 'pendiente',\n              tiene_inicio: $lsw.timer.utils.formatDatestringFromDate(selectedDate, 1)\n              + ' '\n              + $lsw.timer.utils.fromDateToHour(selectedDate, true)\n            }\"\n            :model=\"{\n              connection: $lsw.database,\n              databaseId: 'lsw_default_database',\n              rowId: -1,\n              tableId: 'Accion',\n            }\"\n          />\n        `,\n        factory: {\n          data: {\n            selectedDate: that.selectedDate,\n          },\n          methods: {\n            onInsertTask(v) {\n              that.onInsertTask(v)\n              this.cancel();\n            },\n            loadDateTasks() {\n              that.loadDateTasks();\n              this.cancel();\n            },\n          }\n        }\n      });\n    },\n    openEditRowDialog(accion) {\n      this.$trace(\"lsw-agenda-acciones-viewer.methods.openEditRowDialog\");\n      const that = this;\n      this.$lsw.dialogs.open({\n        title: \"Editar acción\",\n        template: `\n\n          <lsw-schema-based-form\n            :on-submit=\"v => onUpdateTask(v, accion)\"\n            :on-delete-row=\"loadDateTasks\"\n            :overriden-values=\"{\n                tiene_inicio: accion.tiene_inicio\n            }\"\n            :model=\"{\n                connection: $lsw.database,\n                databaseId: 'lsw_default_database',\n                rowId: accion.id,\n                tableId: 'Accion',\n            }\"\n          />\n        `,\n        factory: {\n          data: {\n            accion,\n            selectedDate: that.selectedDate,\n          },\n          methods: {\n            onUpdateTask(v, accion) {\n              that.onUpdateTask(v, accion);\n              this.cancel();\n            },\n            loadDateTasks() {\n              that.loadDateTasks();\n              this.cancel();\n            },\n          }\n        }\n      });\n    },\n    getDateIcon(someDate) {\n      const theDate = someDate.getDate();\n      if (theDate === 30) return \"🐶\";\n      if (theDate === 29) return \"🐱\";\n      if (theDate === 28) return \"🐭\";\n      if (theDate === 27) return \"🐹\";\n      if (theDate === 26) return \"🐰\";\n      if (theDate === 25) return \"🦊\";\n      if (theDate === 24) return \"🐻\";\n      if (theDate === 23) return \"🐼\";\n      if (theDate === 22) return \"🐻‍❄️\";\n      if (theDate === 21) return \"🐨\";\n      if (theDate === 20) return \"🐯\";\n      if (theDate === 19) return \"🦁\";\n      if (theDate === 18) return \"🐮\";\n      if (theDate === 17) return \"🐷\";\n      if (theDate === 16) return \"🐽\";\n      if (theDate === 15) return \"🐸\";\n      if (theDate === 14) return \"🐵\";\n      if (theDate === 13) return \"🙈\";\n      if (theDate === 12) return \"🙉\";\n      if (theDate === 11) return \"🙊\";\n      if (theDate === 10) return \"🐒\";\n      if (theDate === 9) return \"🐔\";\n      if (theDate === 8) return \"🐧\";\n      if (theDate === 7) return \"🐦\";\n      if (theDate === 6) return \"🐦‍⬛\";\n      if (theDate === 5) return \"🐤\";\n      if (theDate === 4) return \"🐣\";\n      if (theDate === 3) return \"🐥\";\n      if (theDate === 2) return \"🦆\";\n      if (theDate === 1) return \"🦅\";\n      return \"⭐️\";\n    },\n  },\n  watch: {\n\n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-agenda-acciones-viewer.mounted\");\n      await this.loadDateTasks();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaAccionesViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaBreadcrumb API » LswAgendaBreadcrumb component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-breadcrumb/lsw-agenda-breadcrumb.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 150,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaBreadcrumb API » LswAgendaBreadcrumb component",
              "$code": "Vue.component(\"LswAgendaBreadcrumb\", {\n  name: \"LswAgendaBreadcrumb\",\n  template: $template,\n  props: {\n    agenda: {\n      type: Object,\n      default: () => null\n    },\n    pathItems: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    this.$trace(\"lsw-agenda-breadcrumb.data\");\n    return {\n      \n    };\n  },\n  methods: {\n    goToSection(section) {\n      this.$trace(\"lsw-agenda-breadcrumb.methods.goToSection\");\n      if(this.agenda) {\n        this.agenda.selectContext(section);\n      }\n    }\n  },\n  watch: {\n\n  },\n  async mounted() {\n    try {\n      this.$trace(\"lsw-agenda-breadcrumb.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaBreadcrumb API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaConceptoAdd API » LswAgendaConceptoAdd component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-concepto-add/lsw-agenda-concepto-add.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 153,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaConceptoAdd API » LswAgendaConceptoAdd component",
              "$code": "Vue.component(\"LswAgendaConceptoAdd\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-concepto-add.data\");\n    return {\n      // \n    };\n  },\n  methods: {\n    async insertConcepto(v) {\n      this.$trace(\"lsw-agenda-concepto-add.methods.insertConcepto\");\n      await this.$lsw.database.insert(\"Concepto\", v);\n      // *@TODO: should redirect\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-concepto-add.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaConceptoAdd API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaConceptoSearch API » LswAgendaConceptoSearch component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-concepto-search/lsw-agenda-concepto-search.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 162,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaConceptoSearch API » LswAgendaConceptoSearch component",
              "$code": "Vue.component(\"LswAgendaConceptoSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-concepto-search.data\");\n    return {\n      isLoaded: false,\n    };\n  },\n  methods: {\n    async loadRows() {\n      this.$trace(\"lsw-agenda-concepto-search.methods.loadRows\");\n      this.rows = await this.$lsw.database.selectMany(\"Concepto\", it => true);\n      this.isLoaded = true;\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-concepto-search.mounted\");\n      this.loadRows();\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaConceptoSearch API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaEventoSearch API » LswAgendaEventoSearch component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-evento-search/lsw-agenda-evento-search.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 156,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaEventoSearch API » LswAgendaEventoSearch component",
              "$code": "Vue.component(\"LswAgendaEventoSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-evento-search.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-evento-search.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaEventoSearch API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaForm API » LswAgendaForm component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-form/lsw-agenda-form.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 132,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaForm API » LswAgendaForm component",
              "$code": "Vue.component(\"LswAgendaForm\", {\n  template: $template,\n  props: {\n    formMetadata: {\n      type: Object,\n      required: true,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-agenda-form.data\");\n    this.validateFormMetadata(this.formMetadata);\n    return {\n      expandedExplanations: [],\n      formScope: {},\n      formState: {}\n    };\n  },\n  methods: {\n    validateFormMetadata(v) {\n      const isObject = typeof v === \"object\";\n      const hasFormAsObject = typeof v.form === \"object\";\n      const hasFieldsAsArray = Array.isArray(v.fields);\n      if(!isObject) {\n        throw new Error(\"Required parameter «formMetadata» to be an object on «LswAgendaForm.methods.validateFormMetadata»\");\n      }\n      if(!hasFormAsObject) {\n        throw new Error(\"Required parameter «formMetadata.form» to be an object on «LswAgendaForm.methods.validateFormMetadata»\");\n      }\n      if(!hasFieldsAsArray) {\n        throw new Error(\"Required parameter «formMetadata.fields» to be an array on «LswAgendaForm.methods.validateFormMetadata»\");\n      }\n    },\n    toggleExplanation(id) {\n      const pos = this.expandedExplanations.indexOf(id);\n      if(pos === -1) {\n        this.expandedExplanations.push(id);\n      } else {\n        this.expandedExplanations.splice(pos, 1);\n      }\n    },\n    loadFields() {\n      this.$window.F = this.$refs.agenda_form;\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-form.mounted\");\n      this.loadFields();\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaForm API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaImpresionAdd API » LswAgendaImpresionAdd component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-impresion-add/lsw-agenda-impresion-add.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 156,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaImpresionAdd API » LswAgendaImpresionAdd component",
              "$code": "Vue.component(\"LswAgendaImpresionAdd\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-impresion-add.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-impresion-add.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaImpresionAdd API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaImpresionSearch API » LswAgendaImpresionSearch component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-impresion-search/lsw-agenda-impresion-search.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 165,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaImpresionSearch API » LswAgendaImpresionSearch component",
              "$code": "Vue.component(\"LswAgendaImpresionSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-impresion-search.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-impresion-search.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaImpresionSearch API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaInfraccionSearch API » LswAgendaInfraccionSearch component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-infraccion-search/lsw-agenda-infraccion-search.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 168,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaInfraccionSearch API » LswAgendaInfraccionSearch component",
              "$code": "Vue.component(\"LswAgendaInfraccionSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-infraccion-search.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-infraccion-search.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaInfraccionSearch API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaLimitadorAdd API » LswAgendaLimitadorAdd component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-limitador-add/lsw-agenda-limitador-add.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 156,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaLimitadorAdd API » LswAgendaLimitadorAdd component",
              "$code": "Vue.component(\"LswAgendaLimitadorAdd\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-limitador-add.data\");\n    return {\n      // \n    };\n  },\n  methods: {\n    async insertLimitador(v) {\n      this.$trace(\"lsw-agenda-limitador-add.methods.insertLimitador\");\n      await this.$lsw.database.insert(\"Limitador\", v);\n      // *@TODO: should redirect\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-limitador-add.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaLimitadorAdd API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaLimitadorSearch API » LswAgendaLimitadorSearch component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-limitador-search/lsw-agenda-limitador-search.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 165,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaLimitadorSearch API » LswAgendaLimitadorSearch component",
              "$code": "Vue.component(\"LswAgendaLimitadorSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-limitador-search.data\");\n    return {\n      isLoaded: false,\n    };\n  },\n  methods: {\n    async loadRows() {\n      this.$trace(\"lsw-agenda-limitador-search.methods.loadRows\");\n      this.rows = await this.$lsw.database.selectMany(\"Limitador\", it => true);\n      this.isLoaded = true;\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-limitador-search.mounted\");\n      this.loadRows();\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaLimitadorSearch API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaLimitadorViewer API » LswAgendaLimitadorViewer component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-limitador-viewer/lsw-agenda-limitador-viewer.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 165,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaLimitadorViewer API » LswAgendaLimitadorViewer component",
              "$code": "Vue.component(\"LswAgendaLimitadorViewer\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-limitador-viewer.data\");\n    return {\n      isLoaded: false,\n      limitadores: undefined,\n      infracciones: [],\n    };\n  },\n  methods: {\n    fixAsyncCode(asyncCode) {\n      if(asyncCode.trim().startsWith(\"async \")) {\n        return `return await (${asyncCode}).call(this)`\n      }\n      return asyncCode;\n    },\n    async executeLimitadores() {\n      const lims = this.limitadores;\n      for(let index=0; index<lims.length; index++) {\n        const limitador = lims[index];\n        const asyncCode = limitador.tiene_funcion;\n        const AsyncFunc = (async function() {}).constructor;\n        const fixedAsyncCode = this.fixAsyncCode(asyncCode);\n        const asyncFunc = new AsyncFunc(fixedAsyncCode);\n        console.log(asyncFunc);\n        try {\n          await asyncFunc.call(this);\n        } catch (error) {\n          this.infracciones.push(error);\n        }\n      }\n    },\n    async loadLimitadores() {\n      this.$trace(\"lsw-agenda-limitador-viewer.methods.loadLimitadores\");\n      const limitadores = await this.$lsw.database.selectMany(\"Limitador\");\n      this.limitadores = limitadores;\n      await this.executeLimitadores();\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-agenda-limitador-viewer.mounted\");\n      await this.loadLimitadores();\n      this.isLoaded = true;\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaLimitadorViewer API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaPostimpresionSearch API » LswAgendaPostimpresionSearch component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-postimpresion-search/lsw-agenda-postimpresion-search.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 177,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaPostimpresionSearch API » LswAgendaPostimpresionSearch component",
              "$code": "Vue.component(\"LswAgendaPostimpresionSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-postimpresion-search.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-postimpresion-search.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaPostimpresionSearch API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaPropagacionSearch API » LswAgendaPropagacionSearch component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-propagacion-search/lsw-agenda-propagacion-search.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 171,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaPropagacionSearch API » LswAgendaPropagacionSearch component",
              "$code": "Vue.component(\"LswAgendaPropagacionSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-propagacion-search.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-propagacion-search.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaPropagacionSearch API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswAgenda API » LswAgendaPropagadorSearch API » LswAgendaPropagadorSearch component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-agenda/components/lsw-agenda-propagador-search/lsw-agenda-propagador-search.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 168,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswAgenda API » LswAgendaPropagadorSearch API » LswAgendaPropagadorSearch component",
              "$code": "Vue.component(\"LswAgendaPropagadorSearch\", {\n  template: $template,\n  props: {},\n  data() {\n    this.$trace(\"lsw-agenda-propagador-search.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-agenda-propagador-search.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswAgendaPropagadorSearch API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswBarsGraphBar component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-bars-graph/components/lsw-bars-graph-bar/lsw-bars-graph-bar.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 100,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswBarsGraphBar component",
              "$code": "Vue.component(\"LswBarsGraphBar\", {\n  template: $template,\n  props: {\n    value: {\n      type: Number,\n      required: true,\n    },\n    text: {\n      type: [String, Boolean],\n      required: true,\n    },\n    onClick: {\n      type: Function,\n      default: () => {},\n    },\n    color: {\n      type: [String, Boolean],\n      default: () => false\n    }\n  },\n  data() {\n    this.$trace(\"lsw-bars-graph-bar.data\");\n    return {\n      \n    };\n  },\n  methods: {\n    \n  },\n  mounted() {\n    this.$trace(\"lsw-bars-graph-bar.mounted\");\n    \n  },\n  unmount() {\n    this.$trace(\"lsw-bars-graph-bar.unmounted\");\n  }\n});\n",
              "$code.label": "LswBarsGraphBar API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswFormBuilder component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-form-builder/lsw-form-builder.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswFormBuilder component",
              "$code": "Vue.component(\"LswFormBuilder\", {\n  template: $template,\n  props: {\n    validate: {\n      type: Object,\n      default: () => ({})\n    },\n    submit: {\n      type: Object,\n      default: () => ({})\n    },\n    fields: {\n      type: Array,\n      required: true,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-form-builder.data\");\n    this.formatFields();\n    return {\n      formMetadata: false,\n    };\n  },\n  methods: {\n    setError(error) {\n      this.$trace(\"lsw-form-builder.setError\");\n      this.error = error;\n    },\n    formatFields(value = this.fields) {\n      this.$trace(\"lsw-form-builder.formatFields\");\n      try {\n        const $outterScope = {};\n        if (value.length === 0) {\n          throw new Error(\"Required property «prop.fields» to be an array on «LswFormBuilder.props.fields.validator»\");\n        }\n        const fields = [];\n        const form = {\n          scope: $outterScope,\n          id: \"form.default\"\n        };\n        const metadata = { fields, form, scope: $outterScope };\n        form.vForm = {\n          selfScope: $outterScope,\n          selfId: form.id,\n          onValidate: typeof this.validate.onClick === 'function' ? this.validate.onClick : this.$noop,\n          onSubmit: typeof this.submit.onClick === 'function' ? this.submit.onClick : this.$noop,\n        }\n        for (let index = 0; index < value.length; index++) {\n          const row = value[index];\n          if (typeof row !== \"object\") {\n            throw new Error(`Required all rows on «prop.fields» to be an object but row «${index}» does not on «LswFormBuilder.props.fields.validator»`)\n          }\n          if (!(\"type\" in row)) {\n            throw new Error(`Required all rows on «prop.fields» to have property «type» but row «${index}» does not on «LswFormBuilder.props.fields.validator»`)\n          }\n          if (typeof row.type !== \"string\") {\n            throw new Error(`Required all rows on «prop.fields» to have property «type» as a string but row «${index}» does not on «LswFormBuilder.props.fields.validator»`)\n          }\n          if (!(\"name\" in row)) {\n            throw new Error(`Required all rows on «prop.fields» to have property «name» but row «${index}» does not on «LswFormBuilder.props.fields.validator»`)\n          }\n          if (typeof row.name !== \"string\") {\n            throw new Error(`Required all rows on «prop.fields» to have property «name» as a string but row «${index}» does not on «LswFormBuilder.props.fields.validator»`)\n          }\n          const $innerScope = {};\n          row.vForm = {\n            parentScope: $outterScope,\n            parentId: metadata.form.id,\n            selfScope: $innerScope,\n            selfId: row.name,\n            name: row.name,\n          };\n          if (row.type === \"point\") {\n            row.dimensions = [];\n            row.vFormForPoint = {\n              parentScope: $innerScope,\n              parentId: row.name,\n              selfScope: $innerScope,\n              selfId: \"point.control\",\n              name: null,\n            };\n            row.dimensions = [{\n              label: \"Axis 1:\",\n              vForm: {\n                parentScope: $innerScope,\n                parentId: \"point.control\",\n                name: \"axis_1\"\n              }\n            }, {\n              label: \"Axis 2:\",\n              vForm: {\n                parentScope: $innerScope,\n                parentId: \"point.control\",\n                name: \"axis_2\"\n              }\n            }];\n            if (row.dimensions.length < 2) {\n              throw new Error(`Required property «row.dimensions» to have more than 1 item on row «${index}» on «adaptRowToVForm»`);\n            }\n            for (let indexDimension = 0; indexDimension < row.dimensions.length; indexDimension++) {\n\n            }\n          }\n          fields.push(row);\n        }\n        this.formMetadata = Object.freeze(metadata);\n      } catch (error) {\n        console.log(error);\n        this.setError(error);\n      }\n    },\n    adaptRowToVForm(row, metadata, indexRow) {\n      this.$trace(\"lsw-form-builder.adaptRowToVForm\");\n\n    }\n  },\n  watch: {},\n  mount() {\n    try {\n      this.$trace(\"lsw-form-builder.mount\");\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  mounted() {\n    try {\n      this.$trace(\"lsw-form-builder.mounted\");\n      this.formatFields();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswFormBuilder API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » LswVolatileUi component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-volatile-db/components/lsw-volatile-ui/lsw-volatile-ui.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 96,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » LswVolatileUi component",
              "$code": "Vue.component(\"LswVolatileUi\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-volatile-ui.data\");\n    return {\n      // BUTTONS:\n      tablePageButtons: [\n        { text: '⬅️ Atrás', event: () => this.selectPage('tables'), },\n        { text: 'Fila ➕', event: this.openCreateRowDialog, }\n      ],\n      tablesPageButtons: [\n        { text: 'Tabla ➕', event: this.openCreateTableDialog }\n      ],\n      // STATE:\n      currentPage: \"tables\",\n      currentTable: false,\n      isMetadataLoaded: false,\n      isDataLoaded: false,\n      isExpandedRow: {},\n      // METADATA:\n      allTables: false,\n      // DATA:\n      allRows: false,\n    };\n  },\n  methods: {\n    expandValue(table, rowId) {\n      this.$trace(\"lsw-volatile-ui.methods.expandValue\");\n      this.isExpandedRow[table + \"::\" + rowId] = true;\n      this.$forceUpdate(true);\n    },\n    unexpandValue(table, rowId) {\n      this.$trace(\"lsw-volatile-ui.methods.unexpandValue\");\n      this.isExpandedRow[table + \"::\" + rowId] = false;\n      this.$forceUpdate(true);\n    },\n    loadData() {\n      this.$trace(\"lsw-volatile-ui.methods.loadData\");\n      this.isDataLoaded = false;\n      this.allRows = LswVolatileDB.global.data[this.currentTable].selectAll();\n      this.$nextTick(() => {\n        this.isDataLoaded = true;\n      });\n    },\n    loadMetadata() {\n      this.$trace(\"lsw-volatile-ui.methods.loadMetadata\");\n      this.isMetadataLoaded = false;\n      this.allTables = LswVolatileDB.global.getSchema({ sorted: true });\n      this.$nextTick(() => {\n        this.isMetadataLoaded = true;\n      });\n    },\n    selectPage() {\n      this.$trace(\"lsw-volatile-ui.methods.selectPage\");\n      this.currentPage = \"tables\";\n      this.currentTable = undefined;\n    },\n    selectTable(tableId) {\n      this.$trace(\"lsw-volatile-ui.methods.selectTable\");\n      this.currentTable = tableId;\n      this.currentPage = \"table\";\n      this.loadData();\n    },\n    async openCreateTableDialog() {\n      this.$trace(\"lsw-volatile-ui.methods.openCreateTableDialog\");\n      const tableId = await this.$lsw.dialogs.open({\n        title: \"Crear tabla volátil\",\n        template: `\n          <div class=\"pad_1\">\n            <div>Especifica el nombre de la tabla:</div>\n            <input class=\"width_100\" type=\"text\" v-model=\"value\" v-on:keypress.enter=\"accept\" v-focus />\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `\n      });\n      if(typeof tableId !== 'string') return;\n      if(tableId.trim() === '') return;\n      LswVolatileDB.global.createTable(tableId);\n      this.loadMetadata();\n    },\n    async openCreateRowDialog() {\n      this.$trace(\"lsw-volatile-ui.methods.openCreateRowDialog\");\n      const rowData = await this.$lsw.dialogs.open({\n        title: \"Crear fila volátil\",\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\">Propiedades:</div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini width_100\" v-on:click=\"increasePropiedades\">➕ Nueva propiedad</button>\n              </div>\n            </div>\n            <div class=\"propiedades_list\">\n              <div class=\"propiedad_item\"\n                v-for=\"propiedad, propIndex in propiedades\"\n                v-bind:key=\"'propiedad_' + propIndex\">\n                <div class=\"flex_row centered\">\n                  <div class=\"flex_100\">Propiedad:</div>\n                  <div class=\"flex_1 pad_left_1\">\n                    <button class=\"supermini\" v-on:click=\"deletePropiedad(propIndex)\">❌</button>\n                  </div>\n                </div>\n                <div class=\"pad_vertical_1\">\n                  <input class=\"supermini width_100\" type=\"text\" v-model=\"propiedades[propIndex].nombre\" />\n                </div>\n                <div>Valor:</div>\n                <textarea class=\"width_100\" v-model=\"propiedades[propIndex].valor\" spellcheck=\"false\" />\n              </div>\n            </div>\n            <div class=\"flex_row centered pad_top_1\" v-if=\"Object.keys(propiedades).length\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"supermini width_100\" v-on:click=\"increasePropiedades\">➕ Nueva propiedad</button>\n              </div>\n            </div>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button v-on:click=\"() => accept(propiedades)\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            propiedades: []\n          },\n          methods: {\n            deletePropiedad(propIndex) {\n              this.$trace(\"lsw-volatile-ui.methods.openCreateRowDialog.Dialog.methods.deletePropiedad\");\n              this.propiedades.splice(propIndex, 1);\n            },\n            increasePropiedades() {\n              this.$trace(\"lsw-volatile-ui.methods.openCreateRowDialog.Dialog.methods.increasePropiedades\");\n              this.propiedades.push({\n                nombre: \"\",\n                valor: \"\",\n              });\n            }\n          }\n        }\n      });\n      if(!Array.isArray(rowData)) {\n        return; \n      }\n      const dataObject = this.fromArrayToObject(rowData, \"nombre\", \"valor\");\n      LswVolatileDB.global.data[this.currentTable].insert(dataObject);\n      this.loadData();\n    },\n    fromArrayToObject(rowData, propId, valId) {\n      this.$trace(\"lsw-volatile-ui.methods.fromArrayToObject\");\n      const output = {};\n      for(let index=0; index<rowData.length; index++) {\n        const rowDataItem = rowData[index];\n        const nombre = rowDataItem[propId];\n        const valor = rowDataItem[valId];\n        output[nombre] = valor;\n      }\n      return output;\n    },\n    deleteRow(table, rowId) {\n      this.$trace(\"lsw-volatile-ui.methods.deleteRow\");\n      LswVolatileDB.global.data[table].delete(rowId);\n      this.loadData();\n    },\n    async deleteTable(tableId) {\n      this.$trace(\"lsw-volatile-ui.methods.deleteTable\");\n      const confirmation = await this.$lsw.dialogs.open({\n        title: `Eliminando tabla`,\n        template: `\n          <div>\n            <div class=\"pad_1\">\n              <div class=\"pad_vertical_1\">¿Seguro que quieres eliminar tabla «{{ tableId }}»?</div>\n              <div class=\"pad_vertical_1\">Tiene «{{ rowsLength }}» filas dentro.</div>\n            </div>\n            <hr/>\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button class=\"danger_button\" v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button class=\"\" v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            tableId,\n            rowsLength: Object.keys(LswVolatileDB.global.data[tableId].data).length,\n            value: true,\n          }\n        }\n      });\n      if(confirmation !== true) {\n        return;\n      }\n      delete LswVolatileDB.global.data[tableId];\n      LswVolatileDB.global.persist();\n      this.loadMetadata();\n    },\n    async openEditRowPropertyDialog(tableId, rowId, propertyId, currentValue) {\n      this.$trace(\"lsw-volatile-ui.methods.openEditRowPropertyDialog\");\n      const newValue = await this.$lsw.dialogs.open({\n        title: `Editando propiedad «${propertyId}» de ${tableId} #${rowId}`,\n        template: `\n          <div class=\"pad_1\">\n            <div class=\"pad_vertical_1\">{{ tableId }}#{{ rowId }}/{{ propertyId }}</div>\n            <div class=\"pad_vertical_1\">Valor anterior:</div>\n            <div class=\"pad_vertical_1 cursor_pointer\" v-on:click=\"expandValue\" v-if=\"isNotExpanded\">\n              <b>{{ LswUtils.subtextualize(currentValue, 30) }}</b>\n            </div>\n            <div class=\"pad_vertical_1\" v-on:click=\"expandValue\" v-else>\n              <pre><b>{{ currentValue }}</b></pre>\n            </div>\n            <div class=\"pad_vertical_1\">\n              <div class=\"\">Valor nuevo:</div>\n            </div>\n            <div class=\"pad_vertical_1\">\n              <div class=\"\">\n                <textarea v-model=\"value\" v-focus spellcheck=\"false\" />\n              </div>\n            </div>\n            <hr />\n            <div class=\"flex_row centered\">\n              <div class=\"flex_100\"></div>\n              <div class=\"flex_1\">\n                <button v-on:click=\"accept\">Aceptar</button>\n              </div>\n              <div class=\"flex_1 pad_left_1\">\n                <button v-on:click=\"cancel\">Cancelar</button>\n              </div>\n            </div>\n          </div>\n        `,\n        factory: {\n          data: {\n            isNotExpanded: true,\n            tableId,\n            rowId,\n            propertyId,\n            currentValue,\n            value: currentValue,\n          },\n          methods: {\n            expandValue() {\n              this.isNotExpanded = false;\n            }\n          }\n        }\n      });\n      if(typeof newValue !== \"string\") {\n        return;\n      }\n      LswVolatileDB.global.data[tableId].update(rowId, { [propertyId]: newValue });\n      this.loadData();\n    }\n  },\n  mounted() {\n    this.$trace(\"lsw-volatile-ui.mounted\");\n    this.loadMetadata();\n  },\n  unmount() {\n    this.$trace(\"lsw-volatile-ui.unmounted\");\n  }\n});\n",
              "$code.label": "LswVolatileUi API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswControlError component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/partials/lsw-control-error/lsw-control-error.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 120,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswControlError component",
              "$code": "Vue.component(\"LswControlError\", {\n  template: $template,\n  props: {\n    \n  },\n  data() {\n    this.$trace(\"lsw-control-error-control.data\");\n    return {\n      \n    };\n  },\n  methods: {\n    removeError() {\n      this.$trace(\"lsw-control-error-control.methods.removeError\");\n      this.$refs.errorBox.$xform.$clearError();\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-control-error-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswControlError API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswControlLabel component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/partials/lsw-control-label/lsw-control-label.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 120,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswControlLabel component",
              "$code": "Vue.component(\"LswControlLabel\", {\n  template: $template,\n  props: {\n    parentFormtype: {\n      type: Object,\n      required: false,\n    },\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-control-label-control.data\");\n    this.validateSettings();\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      isShowingDescription: false,\n      name: this.settings?.name,\n      label: (typeof (this.settings?.label) !== \"undefined\") ? this.settings.label : this.settings?.column?.hasLabel,\n      description: this.settings?.column?.hasDescription\n    };\n  },\n  methods: {\n    toggleDescription() {\n      this.isShowingDescription = !this.isShowingDescription;\n    },\n    validateSettings() {\n      this.$trace(\"lsw-control-label-control.methods.validateSettings\");\n      LswXForm.validateSettings(this.settings);\n      const ensureSettings = $ensure(this.settings);\n      const checkSettings = $check(this.settings);\n      // @OK\n    },\n    makeEditable() {\n      this.$trace(\"lsw-control-label-control.methods.makeEditable\");\n      Behaviour_for_controls: {\n        const immediateControl = LswVue2.getClosestParent(this, component => {\n          return component.$el.classList.contains(\"lsw_form_control\");\n        });\n        if (immediateControl) {\n          immediateControl.isEditable = true;\n          // immediateControl.$forceUpdate(true);\n        }\n      }\n      Behaviour_for_schema_forms: {\n        \n      }\n    },\n    makeUneditable() {\n      this.$trace(\"lsw-control-label-control.methods.makeUneditable\");\n      Behaviour_for_controls: {\n        const immediateControl = LswVue2.getClosestParent(this, component => {\n          return component.$el.classList.contains(\"lsw_form_control\");\n        });\n        if (immediateControl) {\n          immediateControl.isEditable = false;\n          // immediateControl.$forceUpdate(true);\n        }\n\n      }\n      Behaviour_for_schema_forms: {\n        \n      }\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-control-label-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswControlLabel API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswBooleanControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-boolean-control/lsw-boolean-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswBooleanControl component",
              "$code": "Vue.component(\"LswBooleanControl\", {\n  template: $template,\n  props: {\n    configurations: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    this.$trace(\"lsw-boolean-control.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-boolean-control.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswBooleanControl API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswButtonActionControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-button-action-control/lsw-button-action-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 134,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswButtonActionControl component",
              "$code": "Vue.component(\"LswButtonActionControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-button-action-control.data\");\n    this.validateSettings();\n    const value = this.settings?.initialValue || this.settings?.column.hasDefaultValue || \"\";\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value,\n      isEditable: true,\n    };\n  },\n  methods: {\n    async submit() {\n      this.$trace(\"lsw-text-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-button-action-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswButtonActionControl API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswDateControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-date-control/lsw-date-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswDateControl component",
              "$code": "Vue.component(\"LswDateControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n    mode: {\n      type: String,\n      default: () => \"date\" // can be: date, datetime, time\n    }\n  },\n  data() {\n    this.$trace(\"lsw-date-control.data\");\n    this.validateMode();\n    this.validateSettings();\n    const respectivePlaceholder = this.generatePlaceholder();\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value: this.settings?.initialValue || this.settings?.column?.hasInitialValue?.call() || \"\",\n      isEditable: true,\n      isShowingCalendar: false,\n      respectivePlaceholder,\n      formMode: this.settings?.column?.isFormSubtype || this.mode || \"datetime\",\n    };\n  },\n  methods: {\n    toggleCalendar() {\n      this.$trace(\"LswDateControl.methods.toggleCalendar\", arguments);\n      this.isShowingCalendar = !this.isShowingCalendar;\n    },\n    generatePlaceholder() {\n      return this.settings.column.isFormSubtype === \"date\" ? 'Ej: 2025/01/01' :\n        this.settings.column.isFormSubtype === \"datetime\" ? 'Ej: 2025/01/01 00:00' :\n        this.settings.column.isFormSubtype === \"time\" ? 'Ej: 00:00' : ''\n    },\n    async submit() {\n      this.$trace(\"lsw-text-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n    },\n    validate() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    },\n    validateMode() {\n      this.$trace(\"lsw-date-control.methods.validateSettings\");\n      $ensure({mode: this.mode}, 1).to.be.oneOf([\"date\", \"time\", \"datetime\"]);\n    },\n    setValueFromCalendar(v) {\n      this.$trace(\"lsw-date-control.methods.setValueFromCalendar\");\n      console.log(\"Valor:\", v);\n      const value = LswTimer.utils.formatDatestringFromDate(v, false, false, true);\n      if(this.formMode === \"datetime\") {\n        this.value = value;\n      } else if(this.formMode === \"date\") {\n        this.value = value.split(\" \")[0];\n      } else if(this.formMode === \"time\") {\n        this.value = value.split(\" \")[1];\n      } else {\n        this.value = value;\n      }\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-date-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswDateControl API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswDurationControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-duration-control/lsw-duration-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 126,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswDurationControl component",
              "$code": "Vue.component(\"LswDurationControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n    skipLabel: {\n      type: Boolean,\n      default: () => false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-duration-control.data\");\n    this.validateSettings();\n    const value = this.settings?.initialValue || this.settings?.column?.hasDefaultValue || \"\";\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value,\n      isEditable: true,\n      isShowingDetails: true,\n      submitError: false,\n      validateError: false,\n    };\n  },\n  methods: {\n    async submit() {\n      this.$trace(\"lsw-text-control.methods.submit\");\n      try {\n        return LswFormtypes.utils.submitControl.call(this);\n      } catch (error) {\n        this.submitError = error;\n        throw error;\n      }\n    },\n    validate() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      try {\n        return LswFormtypes.utils.validateControl.call(this);\n      } catch (error) {\n        this.validateError = error;\n        throw error;\n      }\n    },\n    validateSettings() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    },\n    toggleDetails() {\n      this.$trace(\"lsw-duration-control.methods.toggleDetails\");\n      this.isShowingDetails = !this.isShowingDetails;\n    },\n    setValue(v) {\n      this.$trace(\"lsw-duration-control.methods.setValue\");\n      this.value = v;\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-duration-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswDurationControl API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswLongTextControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-long-text-control/lsw-long-text-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 126,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswLongTextControl component",
              "$code": "Vue.component(\"LswLongTextControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-long-text-control.data\");\n    this.validateSettings();\n    const value = this.settings?.initialValue || this.settings?.column.hasDefaultValue || \"\";\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value,\n      isEditable: true,\n    };\n  },\n  methods: {\n    async submit() {\n      this.$trace(\"lsw-text-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-long-text-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswLongTextControl API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswNumberControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-number-control/lsw-number-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 122,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswNumberControl component",
              "$code": "Vue.component(\"LswNumberControl\", {\n  template: $template,\n  props: {\n    configurations: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    this.$trace(\"lsw-number-control.data\");\n    return {};\n  },\n  methods: {},\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-number-control.mounted\");\n    } catch(error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswNumberControl API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswOptionsControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-options-control/lsw-options-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswOptionsControl component",
              "$code": "Vue.component(\"LswOptionsControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-options-control.data\");\n    this.validateSettings();\n    const value = this.settings?.initialValue || this.settings?.column?.hasInitialValue?.call() || \"\";\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value,\n      isEditable: true,\n      parameters: this.settings?.hasFormtypeParameters || {}\n    };\n  },\n  methods: {\n    async submit() {\n      this.$trace(\"lsw-text-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n    },\n    validate() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-options-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswOptionsControl API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswRefListControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-ref-list-control/lsw-ref-list-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 124,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswRefListControl component",
              "$code": "Vue.component(\"LswRefListControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-ref-list-control.data\");\n    this.validateSettings();\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value: this.settings.initialValue || [],\n      isValueLoaded: false,\n      isEditable: true,\n      isShownSelector: false,\n      isShownInfo: false,\n      rows: []\n    };\n  },\n  methods: {\n    toggleSelector() {\n      this.$trace(\"lsw-ref-list-control.methods.toggleSelector\");\n      this.isShownSelector = !this.isShownSelector;\n    },\n    toggleInfo() {\n      this.$trace(\"lsw-ref-list-control.methods.toggleInfo\");\n      this.isShownInfo = !this.isShownInfo;\n    },\n    async submit() {\n      this.$trace(\"lsw-ref-list-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-ref-list-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-ref-list-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    },\n    async loadRows() {\n      this.$trace(\"lsw-page-rows.methods.loadRows\", arguments);\n      const selection = await this.$lsw.database.select(this.settings.column.refersTo.table, it => true);\n      this.rows = selection;\n      return selection;\n    },\n    async loadValue() {\n      this.$trace(\"lsw-ref-list-control.methods.loadValue\");\n      const selection = await this.$lsw.database.select(this.settings.tableId, it => true);\n    },\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-ref-list-control.mounted\");\n      await this.loadRows();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswRefListControl API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswRefObjectByLabelControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-ref-object-by-label-control/lsw-ref-object-by-label-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 142,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswRefObjectByLabelControl component",
              "$code": "Vue.component(\"LswRefObjectByLabelControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-ref-object-by-label-control.data\");\n    this.validateSettings();\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value: this.settings.initialValue || [],\n      isLoaded: false,\n      isValueLoaded: false,\n      isEditable: true,\n      isShownSelector: true,\n      isShownInfo: false,\n      rows: []\n    };\n  },\n  methods: {\n    toggleSelector() {\n      this.$trace(\"lsw-ref-object-by-label-control.methods.toggleSelector\");\n      this.isShownSelector = !this.isShownSelector;\n    },\n    toggleInfo() {\n      this.$trace(\"lsw-ref-object-by-label-control.methods.toggleInfo\");\n      this.isShownInfo = !this.isShownInfo;\n    },\n    async submit() {\n      this.$trace(\"lsw-ref-object-by-label-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-ref-object-by-label-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-ref-object-by-label-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    },\n    async loadRows() {\n      this.$trace(\"lsw-page-rows.methods.loadRows\", arguments);\n      const selection = await this.$lsw.database.select(this.settings.column.refersTo.table, it => true);\n      this.rows = selection;\n      this.isLoaded = true;\n      return selection;\n    },\n    async loadValue() {\n      this.$trace(\"lsw-ref-object-by-label-control.methods.loadValue\");\n      const selection = await this.$lsw.database.select(this.settings.tableId, it => true);\n    },\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-ref-object-by-label-control.mounted\");\n      await this.loadRows();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswRefObjectByLabelControl API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswRefObjectControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-ref-object-control/lsw-ref-object-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 128,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswRefObjectControl component",
              "$code": "Vue.component(\"LswRefObjectControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n    labelField: {\n      type: String,\n      required: true,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-ref-object-control.data\");\n    this.validateSettings();\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value: this.settings.initialValue || [],\n      isLoaded: false,\n      isValueLoaded: false,\n      isEditable: true,\n      isShownSelector: true,\n      isShownInfo: false,\n      rows: [],\n    };\n  },\n  methods: {\n    toggleSelector() {\n      this.$trace(\"lsw-ref-object-control.methods.toggleSelector\");\n      this.isShownSelector = !this.isShownSelector;\n    },\n    toggleInfo() {\n      this.$trace(\"lsw-ref-object-control.methods.toggleInfo\");\n      this.isShownInfo = !this.isShownInfo;\n    },\n    async submit() {\n      this.$trace(\"lsw-ref-object-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-ref-object-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-ref-object-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    },\n    async loadRows() {\n      this.$trace(\"lsw-page-rows.methods.loadRows\", arguments);\n      const selection = await this.$lsw.database.select(this.settings.column.refersTo.table, it => true);\n      this.rows = selection;\n      this.isLoaded = true;\n      return selection;\n    },\n    async loadValue() {\n      this.$trace(\"lsw-ref-object-control.methods.loadValue\");\n      const selection = await this.$lsw.database.select(this.settings.tableId, it => true);\n    },\n    selectRow(row) {\n      this.$trace(\"lsw-ref-object-control.methods.selectRow\");\n      this.value = row;\n    }\n  },\n  watch: {},\n  async mounted() {\n    try {\n      this.$trace(\"lsw-ref-object-control.mounted\");\n      await this.loadRows();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswRefObjectControl API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswRefRelationControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-ref-relation-control/lsw-ref-relation-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 132,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswRefRelationControl component",
              "$code": "Vue.component(\"LswRefRelationControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n  },\n  data() {\n    this.$trace(\"lsw-ref-relation-control.data\");\n    this.validateSettings();\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value: this.settings?.initialValue || \"\",\n      isEditable: true,\n    };\n  },\n  methods: {\n    async submit() {\n      this.$trace(\"lsw-ref-relation-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-ref-relation-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-ref-relation-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-ref-relation-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswRefRelationControl API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswSourceCodeControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-source-code-control/lsw-source-code-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 130,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswSourceCodeControl component",
              "$code": "Vue.component(\"LswSourceCodeControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n    skipLabel: {\n      type: Boolean,\n      default: () => false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-source-code-control.data\");\n    this.validateSettings();\n    const value = this.settings?.initialValue || this.settings?.column.hasDefaultValue || \"\";\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value,\n      isEditable: true,\n      currentFontsize: 10,\n      currentFontfamily: \"monospace\",\n    };\n  },\n  methods: {\n    increaseFontsize(points = 1) {\n      this.$trace(\"lsw-source-code-control.methods.increaseFontsize\");\n      this.currentFontsize += points;\n    },\n    alternateFontfamily() {\n      this.$trace(\"lsw-source-code-control.methods.alternateFontfamily\");\n      if(this.currentFontfamily === 'monospace') {\n        this.currentFontfamily = 'Arial';\n      } else {\n        this.currentFontfamily = 'monospace';\n      }\n    },\n    async submit() {\n      this.$trace(\"lsw-source-code-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-source-code-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-source-code-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    }\n  },\n  watch: {},\n  mounted() {\n    try {\n      this.$trace(\"lsw-source-code-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswSourceCodeControl API",
              "$output": "index.html"
            }
          ],
          "Vue.js (v2) Components » Lsw Formtypes API » LswTextControl component": [
            {
              "$file": "/home/carlos/Escritorio/lsw-one/src/lsw-framework/src/components/lsw-formtypes/components/lsw-formtype/type/lsw-text-control/lsw-text-control.js",
              "$location": {
                "start": {
                  "offset": 0,
                  "line": 1,
                  "column": 1
                },
                "end": {
                  "offset": 118,
                  "line": 2,
                  "column": 1
                }
              },
              "$section": "Vue.js (v2) Components » Lsw Formtypes API » LswTextControl component",
              "$code": "Vue.component(\"LswTextControl\", {\n  template: $template,\n  props: {\n    settings: {\n      type: Object,\n      default: () => ({})\n    },\n    skipLabel: {\n      type: Boolean,\n      default: () => false,\n    }\n  },\n  data() {\n    this.$trace(\"lsw-text-control.data\");\n    this.validateSettings();\n    const value = this.settings?.initialValue || this.settings?.column?.hasDefaultValue || \"\";\n    return {\n      uuid: LswRandomizer.getRandomString(5),\n      value,\n      isEditable: true,\n      submitError: false,\n      validateError: false,\n    };\n  },\n  methods: {\n    async submit() {\n      this.$trace(\"lsw-text-control.methods.submit\");\n      return LswFormtypes.utils.submitControl.call(this);\n      \n    },\n    validate() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateControl.call(this);\n    },\n    validateSettings() {\n      this.$trace(\"lsw-text-control.methods.validateSettings\");\n      return LswFormtypes.utils.validateSettings.call(this);\n    }\n  },\n  watch: {},\n  computed: {\n    getSettingsInputEvents() {\n      const base0 = this.settings.input?.events || false;\n      if(typeof base0 === \"object\") {\n        return base0;\n      }\n      return {};\n    },\n    getSettingsInputProps() {\n      const base0 = this.settings.input?.props || false;\n      if(typeof base0 === \"object\") {\n        return base0;\n      }\n      return {};\n    }\n  },\n  mounted() {\n    try {\n      this.$trace(\"lsw-text-control.mounted\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n});\n",
              "$code.label": "LswTextControl API",
              "$output": "index.html"
            }
          ]
        }
      }
    }
  }
}