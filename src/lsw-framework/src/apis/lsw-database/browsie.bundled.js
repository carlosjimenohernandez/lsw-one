/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function(root) {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { Language: peg$parseLanguage },
        peg$startRuleFunction  = peg$parseLanguage,

        peg$c0 = function(s) { return s.join("\n") },
        peg$c1 = "on event",
        peg$c2 = peg$literalExpectation("on event", false),
        peg$c3 = function(token1, event, name, priority, then) { return `triggers.register(${event}, ${name}, (event) => { ${then} }, { ${ priority ? "priority: " + priority : "" } });` },
        peg$c4 = "as",
        peg$c5 = peg$literalExpectation("as", false),
        peg$c6 = function(token1, that) { return that },
        peg$c7 = "priority",
        peg$c8 = peg$literalExpectation("priority", false),
        peg$c9 = "then",
        peg$c10 = peg$literalExpectation("then", false),
        peg$c11 = function(token1, then) { return then },
        peg$c12 = "{",
        peg$c13 = peg$literalExpectation("{", false),
        peg$c14 = "}",
        peg$c15 = peg$literalExpectation("}", false),
        peg$c16 = function(token1, s, token2) { return s.join("\n") },
        peg$c17 = "switch on",
        peg$c18 = peg$literalExpectation("switch on", false),
        peg$c19 = "using",
        peg$c20 = peg$literalExpectation("using", false),
        peg$c21 = "passing",
        peg$c22 = peg$literalExpectation("passing", false),
        peg$c23 = function(token1, switchOn, token2, using, token3, passing) { return `${switchOn}[${using}](${passing});` },
        peg$c24 = function(_try, _catch, _finally) { return _try + _catch + (_finally ?? '')},
        peg$c25 = "try",
        peg$c26 = peg$literalExpectation("try", false),
        peg$c27 = function(token1, block) { return `try {\n ${ block }; \n}` },
        peg$c28 = "catch",
        peg$c29 = peg$literalExpectation("catch", false),
        peg$c30 = function(token1, block) { return ` catch(error) {\n ${ block }; \n}` },
        peg$c31 = "finally",
        peg$c32 = peg$literalExpectation("finally", false),
        peg$c33 = function(token1, block) { return ` finally {\n ${ error }; \n}` },
        peg$c34 = "throw",
        peg$c35 = peg$literalExpectation("throw", false),
        peg$c36 = function(token1, error) { return `throw ${ error };` },
        peg$c37 = "return",
        peg$c38 = peg$literalExpectation("return", false),
        peg$c39 = function(token1, value) { return `return ${ value };` },
        peg$c40 = "break process",
        peg$c41 = peg$literalExpectation("break process", false),
        peg$c42 = function(token1, process) { return `break ${ process };` },
        peg$c43 = "continue process",
        peg$c44 = peg$literalExpectation("continue process", false),
        peg$c45 = function(token1, process) { return `continue ${ process };` },
        peg$c46 = "always",
        peg$c47 = peg$literalExpectation("always", false),
        peg$c48 = function(token1, block) { return block },
        peg$c49 = "on process",
        peg$c50 = peg$literalExpectation("on process", false),
        peg$c51 = function(token1, name) { return name },
        peg$c52 = function(process, block) { return `${process}: {\n ${block} \n}` },
        peg$c53 = "or",
        peg$c54 = peg$literalExpectation("or", false),
        peg$c55 = function(left, right) { return `(${left} || ${right})`; },
        peg$c56 = "and",
        peg$c57 = peg$literalExpectation("and", false),
        peg$c58 = function(left, right) { return `(${left} && ${right})`; },
        peg$c59 = "(",
        peg$c60 = peg$literalExpectation("(", false),
        peg$c61 = ")",
        peg$c62 = peg$literalExpectation(")", false),
        peg$c63 = function(expr) { return `(${expr})`; },
        peg$c64 = "if",
        peg$c65 = peg$literalExpectation("if", false),
        peg$c66 = function(process, token1, cond1, cons1, condsN, exclud) { return `${ process ? process + ": " : '' }if( ${cond1} ) {\n ${cons1} \n}${ condsN ? condsN.join("\n") : '' }${ exclud ?? '' }`; },
        peg$c67 = "else if",
        peg$c68 = peg$literalExpectation("else if", false),
        peg$c69 = function(token1, cond1, cons1) { return ` else if( ${cond1} ) {\n ${cons1} \n}`; },
        peg$c70 = "else",
        peg$c71 = peg$literalExpectation("else", false),
        peg$c72 = function(token, cons) { return ` else {\n ${cons} }`; },
        peg$c73 = "{{",
        peg$c74 = peg$literalExpectation("{{", false),
        peg$c75 = "}}",
        peg$c76 = peg$literalExpectation("}}", false),
        peg$c77 = function(js) { return js.trim() },
        peg$c78 = "\\",
        peg$c79 = peg$literalExpectation("\\", false),
        peg$c80 = peg$anyExpectation(),
        peg$c81 = function() { return text() },
        peg$c82 = "//",
        peg$c83 = peg$literalExpectation("//", false),
        peg$c84 = function() { return { comment: text() } },
        peg$c85 = "/*",
        peg$c86 = peg$literalExpectation("/*", false),
        peg$c87 = "*/",
        peg$c88 = peg$literalExpectation("*/", false),
        peg$c89 = "\t",
        peg$c90 = peg$literalExpectation("\t", false),
        peg$c91 = " ",
        peg$c92 = peg$literalExpectation(" ", false),
        peg$c93 = "\r\n",
        peg$c94 = peg$literalExpectation("\r\n", false),
        peg$c95 = "\r",
        peg$c96 = peg$literalExpectation("\r", false),
        peg$c97 = "\n",
        peg$c98 = peg$literalExpectation("\n", false),

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseLanguage() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseOn_event_sentence();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseOn_event_sentence();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseOn_event_sentence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c1) {
          s3 = peg$c1;
          peg$currPos += 8;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c2); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJsblock();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSubsentence_as();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSubsentence_priority();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSubsentence_then();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c3(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSubsentence_as() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c4) {
          s3 = peg$c4;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJsblock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSubsentence_priority() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c7) {
          s3 = peg$c7;
          peg$currPos += 8;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJsblock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSubsentence_then() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c9) {
          s3 = peg$c9;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAnyblock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAnyblock() {
      var s0;

      s0 = peg$parseJsblock();
      if (s0 === peg$FAILED) {
        s0 = peg$parseInnerblock();
      }

      return s0;
    }

    function peg$parseInnerblock() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c12;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseInner_sentence();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseInner_sentence();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c14;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c16(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInner_sentence() {
      var s0;

      s0 = peg$parseAlways_sentence();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIf_sentence();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOn_process_sentence();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBreak_process_sentence();
            if (s0 === peg$FAILED) {
              s0 = peg$parseContinue_process_sentence();
              if (s0 === peg$FAILED) {
                s0 = peg$parseReturn_sentence();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseThrow_sentence();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseTry_catch_finally_sentence();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseSwitch_on_sentence();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSwitch_on_sentence() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c17) {
          s3 = peg$c17;
          peg$currPos += 9;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJsblock();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c19) {
              s5 = peg$c19;
              peg$currPos += 5;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseJsblock();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c21) {
                  s7 = peg$c21;
                  peg$currPos += 7;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse_();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse_();
                  }
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseJsblock();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c23(s1, s2, s3, s4, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTry_catch_finally_sentence() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSubsentence_try();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSubsentence_catch();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSubsentence_finally();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSubsentence_try() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c25) {
          s3 = peg$c25;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAnyblock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c27(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSubsentence_catch() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c28) {
          s3 = peg$c28;
          peg$currPos += 5;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAnyblock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c30(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSubsentence_finally() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c31) {
          s3 = peg$c31;
          peg$currPos += 7;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAnyblock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c33(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseThrow_sentence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c34) {
          s3 = peg$c34;
          peg$currPos += 5;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c35); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJsblock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseReturn_sentence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c37) {
          s3 = peg$c37;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJsblock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c39(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBreak_process_sentence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c40) {
          s3 = peg$c40;
          peg$currPos += 13;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAnyblock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c42(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseContinue_process_sentence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 16) === peg$c43) {
          s3 = peg$c43;
          peg$currPos += 16;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c44); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAnyblock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c45(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAlways_sentence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c46) {
          s3 = peg$c46;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJsblock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c48(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSubsentence_on_process() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c49) {
          s3 = peg$c49;
          peg$currPos += 10;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJsblock();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c51(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseOn_process_sentence() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSubsentence_on_process();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSubsentence_then();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c52(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseOrExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseAndExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c53) {
            s3 = peg$c53;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c54); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseOrExpression();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c55(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseAndExpression();
      }

      return s0;
    }

    function peg$parseAndExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsePrimaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c56) {
            s3 = peg$c56;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c57); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseAndExpression();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c58(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsePrimaryExpression();
      }

      return s0;
    }

    function peg$parsePrimaryExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c59;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOrExpression();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c61;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c62); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c63(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseJsblock();
      }

      return s0;
    }

    function peg$parseIf_sentence() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseSubsentence_on_process();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c64) {
            s4 = peg$c64;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parse_();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parse_();
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOrExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSubsentence_then();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseElse_if_sentence();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseElse_if_sentence();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseElse_sentence();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c66(s1, s2, s3, s4, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseElse_if_sentence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c67) {
          s3 = peg$c67;
          peg$currPos += 7;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOrExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSubsentence_then();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c69(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseElse_sentence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c70) {
          s3 = peg$c70;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSubsentence_then();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c72(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseJsblock() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c73) {
          s2 = peg$c73;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseJsblock_unclosed();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c75) {
              s4 = peg$c75;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c76); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c77(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseJsblock_unclosed() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c75) {
        s4 = peg$c75;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = void 0;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s4 = peg$c78;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c79); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c75) {
            s4 = peg$c75;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c76); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s4 = peg$c78;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c79); }
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c80); }
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c81();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseComentario() {
      var s0;

      s0 = peg$parseComentario_unilinea();
      if (s0 === peg$FAILED) {
        s0 = peg$parseComentario_multilinea();
      }

      return s0;
    }

    function peg$parseComentario_unilinea() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c82) {
        s1 = peg$c82;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parse___();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parse___();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c80); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse___();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c84();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseComentario_multilinea() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c85) {
        s1 = peg$c85;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c87) {
          s5 = peg$c87;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c87) {
            s5 = peg$c87;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c80); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c87) {
            s3 = peg$c87;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c84();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parse_() {
      var s0;

      s0 = peg$parse__();
      if (s0 === peg$FAILED) {
        s0 = peg$parse___();
        if (s0 === peg$FAILED) {
          s0 = peg$parseComentario();
        }
      }

      return s0;
    }

    function peg$parse__() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 9) {
        s0 = peg$c89;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s0 = peg$c91;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c92); }
        }
      }

      return s0;
    }

    function peg$parse___() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c93) {
        s0 = peg$c93;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c95;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c96); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 10) {
            s0 = peg$c97;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c98); }
          }
        }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  root.TriggersScriptParser = {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})(typeof window !== 'undefined' ? window : global);

(function (factory) {
  const mod = factory();
  if (typeof window !== 'undefined') {
    window['TriggersClass'] = mod;
  }
  if (typeof global !== 'undefined') {
    global['TriggersClass'] = mod;
  }
  if (typeof module !== 'undefined') {
    module.exports = mod;
  }
})(function () {

  class TriggersClass {

    static globMatch(patterns, list) {
      const matches = new Set();

      const regexes = patterns.map(pattern => {
        let regexPattern = pattern
          .replace(/[-/\\^$+?.()|[\]{}]/g, "\\$&") // Escapa caracteres especiales
          .replace(/\\\*/g, ".*")                 // '*' => cualquier cosa
        return new RegExp(`^${regexPattern}$`);
      });
      for (const item of list) {
        for (const regex of regexes) {
          if (regex.test(item)) {
            matches.add(item);
            break;
          }
        }
      }

      return Array.from(matches);
    }


    all = {};

    register(triggerNamePattern, triggerIdentifier, triggerCallback, triggerConfigurations = {}) {
      const { priority = 0 } = triggerConfigurations; // Default priority is 0
      if (!this.all[triggerNamePattern]) {
        this.all[triggerNamePattern] = [];
      }
      this.all[triggerNamePattern].push({
        id: triggerIdentifier,
        callback: triggerCallback,
        priority,
      });
    }

    async emit(triggerName, parameters = {}) {
      const matchedTriggers = [];
      const allPatterns = Object.keys(this.all);

      // Encuentra patrones que coincidan con el nombre del evento
      const matchedPatterns = this.constructor.globMatch(allPatterns, [triggerName]);

      // Agrega todos los eventos coincidentes a la lista de disparos
      for (const pattern of matchedPatterns) {
        matchedTriggers.push(...this.all[pattern]);
      }

      // Ordena por prioridad descendente
      matchedTriggers.sort((a, b) => b.priority - a.priority);

      // Ejecuta los callbacks en orden
      const output = [];
      for (const trigger of matchedTriggers) {
        const result = await trigger.callback(parameters);
        output.push(result);
      }

      return output;
    }

    unregister(triggerIdentifier) {
      for (const pattern in this.all) {
        this.all[pattern] = this.all[pattern].filter(
          (trigger) => trigger.id !== triggerIdentifier
        );
        if (this.all[pattern].length === 0) {
          delete this.all[pattern]; // Limpia patrones vacíos
        }
      }
    }

  }

  TriggersClass.default = TriggersClass;

  return TriggersClass;

});
(function (factory) {
  const mod = factory();
  if (typeof window !== 'undefined') {
    window['TriggersApi'] = mod;
  }
  if (typeof global !== 'undefined') {
    global['TriggersApi'] = mod;
  }
  if (typeof module !== 'undefined') {
    module.exports = mod;
  }
})(function () {
  
  const TriggersApi = class extends TriggersClass {

    load(script) {
      const executableString = TriggersScriptParser.parse(script);
      const AsyncFunction = (async function() {}).constructor;
      const executableFunction = new AsyncFunction("triggers", executableString);
      return executableFunction(this);
    }

  }

  return TriggersApi;

});

(function (factory) {
  const mod = factory();
  if (typeof window !== 'undefined') {
    window["Browsie"] = mod;
  }
  if (typeof global !== 'undefined') {
    // global["Browsie"] = mod;
  }
  if (typeof module !== 'undefined') {
    // module.exports = mod;
  }
})(function () {

  class BrowsieCheckersAPI {

    static mustBeString(obj, method = "Browsie.mustBeString", id = "?") {
      if (typeof obj !== "string") {
        throw new Error(`Required «${id}» to be a string on «${method}»`);
      }
    }

    static mustBeArray(obj, method = "Browsie.mustBeArray", id = "?") {
      if (!Array.isArray(obj)) {
        throw new Error(`Required «${id}» to be an array on «${method}»`);
      }
    }

    static mustBeObject(obj, method = "Browsie.mustBeObject", id = "?") {
      if (typeof obj !== "object") {
        throw new Error(`Required «${id}» to be an object on «${method}»`);
      }
    }

    static mustBeGreaterThan(obj, comparison = 0, method = "Browsie.mustBeObject", id = "?") {
      if (obj <= comparison) {
        throw new Error(`Required «${id}» to be greater than «${comparison}» on «${method}»`);
      }
    }
  }

  class BrowsieStaticAPI extends BrowsieCheckersAPI {

    static openedConnections = [];

    static _trace = true;

    static trace(methodName, args = []) {
      if (this._trace) {
        console.log("[TRACE][" + methodName + "]", args.length + " args: " + Array.from(args).map(arg => typeof (arg)).join(", "));
      }
    }

    static async listDatabases() {
      this.trace("Browsie.listDatabases", arguments);
      try {
        const databases = await indexedDB.databases();
        console.log('Bases de datos disponibles:', databases);
        return databases;
      } catch (error) {
        console.error('Error al obtener las bases de datos:', error);
      }
    }

    static createDatabase(dbName, schemaDefinition = null, version = 1, versionUpgrades = {}) {
      this.trace("Browsie.createDatabase", arguments);
      return new Promise((resolve, reject) => {
        const request = indexedDB.open(dbName, version);
        request.onsuccess = () => {
          console.log(`[SUCCESS] Database "${dbName}" created/opened successfully.`);
          request.result.close();
          resolve(request.result);
        };
        request.onerror = (error) => {
          console.error(`[ERROR] Failed to create/open database "${dbName}":`, error);
          reject(error);
        };
        request.onupgradeneeded = async (event) => {
          const db = event.target.result;
          console.log(`[UPGRADE] Upgrading database "${dbName}" from version ${event.oldVersion} to ${version}.`);
          // Si hay una definición de esquema inicial, crear los almacenes e índices
          if (schemaDefinition && event.oldVersion === 0) {
            console.log("[SCHEMA] Applying initial schema definition.");
            Object.keys(schemaDefinition).forEach((storeName) => {
              if (!db.objectStoreNames.contains(storeName)) {
                const objectStore = db.createObjectStore(storeName, {
                  keyPath: "id",
                  autoIncrement: true,
                });
                if (!Array.isArray(schemaDefinition[storeName])) {
                  console.log(schemaDefinition);
                  throw new Error(`Required property «schemaDefinition.${storeName}» to be an array on «LswDatabase.createDatabase»`);
                }
                schemaDefinition[storeName].forEach((index) => {
                  const indexName = index.replace(/^\!/, "");
                  objectStore.createIndex(indexName, indexName, {
                    unique: index.startsWith("!")
                  });
                });
              }
            });
          }
          // Aplicar las transformaciones de esquema para cada versión
          for (let v = event.oldVersion + 1; v <= version; v++) {
            if (versionUpgrades[v]) {
              console.log(`[VERSION ${v}] Applying upgrade function.`);
              await versionUpgrades[v](db);
            } else {
              console.log(`[VERSION ${v}] No upgrade function defined.`);
            }
          }
        };
      });
    }

    // Obtener todos los datos de un store
    static async getAllDataFromStore(dbName, storeName) {
      this.trace("Browsie.getAllDataFromStore", arguments);
      return await new Promise((resolve, reject) => {
        const request = indexedDB.open(dbName);

        request.onsuccess = (event) => {
          const db = event.target.result;
          const transaction = db.transaction(storeName, 'readonly');
          const store = transaction.objectStore(storeName);

          const getAllRequest = store.getAll();
          getAllRequest.onsuccess = () => resolve(getAllRequest.result);
          getAllRequest.onerror = () => {
            db.close();
            reject(new Error('Error al obtener los datos del store'));
          };
        };

        request.onerror = () => {
          reject(new Error('Error al abrir la base de datos'));
        };
      });
    }

    // Insertar datos en un store
    static async insertDataIntoStore(dbName, storeName, data) {
      this.trace("Browsie.insertDataIntoStore", arguments);
      return await new Promise((resolve, reject) => {
        const request = indexedDB.open(dbName);

        request.onsuccess = (event) => {
          const db = event.target.result;
          const transaction = db.transaction(storeName, 'readwrite');
          const store = transaction.objectStore(storeName);

          data.forEach(item => store.add(item));

          transaction.oncomplete = () => resolve();
          transaction.onerror = () => {
            db.close();
            reject(new Error('Error al insertar los datos en el store'));
          };
        };

        request.onerror = () => {
          reject(new Error('Error al abrir la base de datos'));
        };
      });
    }

    // Eliminar una base de datos
    static deleteDatabase(dbName) {
      this.trace("Browsie.deleteDatabase", arguments);
      return new Promise((resolve, reject) => {
        const request = indexedDB.deleteDatabase(dbName);

        request.onblocked = () => {
          // db.close();
          reject(new Error("Error al eliminar la base de datos porque está bloqueada"));
        };
        request.onsuccess = () => resolve();
        request.onerror = () => {
          // db.close();
          reject(new Error('Error al eliminar la base de datos'));
        };
      }).then(() => {
        console.log(`[!] Base de datos «${dbName}» eliminada correctamente.`);
      });
    }

    static async getSchema(dbName) {
      this.trace("Browsie.getSchema", arguments);
      let db = undefined;
      try {
        // Abrir la base de datos en modo solo lectura
        const request = indexedDB.open(dbName);

        db = await new Promise((resolve, reject) => {
          request.onsuccess = (event) => resolve(event.target.result);
          request.onerror = () => {
            reject(new Error('Error al abrir la base de datos'));
          };
        });

        // Construir el esquema a partir de los almacenes
        const schema = {};
        const objectStoreNames = Array.from(db.objectStoreNames); // Lista de stores

        objectStoreNames.forEach(storeName => {
          const transaction = db.transaction(storeName, 'readonly');
          const store = transaction.objectStore(storeName);

          const storeInfo = {
            keyPath: store.keyPath,
            autoIncrement: store.autoIncrement,
            indexes: []
          };

          // Recorrer los índices del store
          const indexNames = Array.from(store.indexNames); // Lista de índices
          indexNames.forEach(indexName => {
            const index = store.index(indexName);
            storeInfo.indexes.push({
              name: index.name,
              keyPath: index.keyPath,
              unique: index.unique,
              multiEntry: index.multiEntry
            });
          });

          schema[storeName] = storeInfo;
        });

        return schema;
      } catch (error) {
        console.error('Error al obtener el esquema:', error);
        throw error;
      } finally {
        if (db) {
          db.close();
        }
      }
    }

    static async pickRow(databaseId, tableId, rowId) {
      this.trace("Browsie.pickRow", arguments);
      $ensure(databaseId).type("string");
      $ensure(tableId).type("string");
      $ensure(rowId).type("number");
      let connection = undefined;
      try {
        connection = await this.open(databaseId);
        const rows = await connection.selectMany(tableId, v => v.id === rowId);
        if (rows.length === 1) {
          return rows[0];
        } else if (rows.length === 0) {
          return undefined;
        }
      } catch (error) {
        throw error;
      } finally {
        try {
          await connection.close();
        } catch (error) {
          console.log("Could not close connection on picking row");
        }
      }
    }

  }

  class BrowsieTriggersAPI extends BrowsieStaticAPI {

    static globMatch = TriggersClass.globMatch;

    triggers = new TriggersClass();

  }


  class BrowsieCrudAPI extends BrowsieTriggersAPI {

    static async open(...args) {
      this.trace("Browsie.open", arguments);
      const db = new this(...args);
      await db.open();
      return db;
    }

    // Constructor que abre la base de datos
    constructor(dbName, trace = false) {
      super();
      this.$dbName = dbName;
      this.$db = null;
      this.$innerSchema = null;
      this._trace = trace;
    }

    getInnerSchema() {
      this.constructor.trace("browsie.getInnerSchema", arguments);
      return this.$innerSchema;
    }

    setInnerSchema(innerSchema) {
      this.constructor.trace("browsie.setInnerSchema", arguments);
      if (!(innerSchema instanceof LswSchema)) {
        throw new Error(`Required parameter «innerSchema» to be an instance of LswSchema on «browsie.setInnerSchema»`);
      }
      this.$innerSchema = innerSchema;
    }

    // Abre la base de datos
    open() {
      this.constructor.trace("browsie.open", arguments);
      return new Promise((resolve, reject) => {
        const request = indexedDB.open(this.$dbName);

        request.onsuccess = () => {
          this.$db = request.result;
          resolve(this.$db);
        };
        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.open» operation over database «${this.$dbName}»: `));
      });
    }

    close(...args) {
      this.constructor.trace("browsie.close", arguments);
      return this.$db.close(...args);
    }

    // Método para seleccionar 1 elemento de un store con un filtro
    select(store, filter = {}) {
      this.constructor.trace("browsie.select", arguments);
      this.triggers.emit(`crud.select.one.${store}`, { store, filter });
      return new Promise((resolve, reject) => {
        const transaction = this.$db.transaction(store, 'readonly');
        const objectStore = transaction.objectStore(store);
        const request = objectStore.getAll();
        request.onsuccess = () => {
          const result = request.result.filter(item => {
            return Object.keys(filter).every(key => item[key] === filter[key]);
          });
          resolve(result);
        };
        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.select» operation over store «${store}»: `));
      });
    }

    // Método para insertar un solo item en un store
    insert(store, item) {
      this.constructor.trace("browsie.insert", arguments);
      this.triggers.emit(`crud.insert.one.${store}`, { store, item });
      return new Promise((resolve, reject) => {
        const transaction = this.$db.transaction(store, 'readwrite');
        const objectStore = transaction.objectStore(store);
        const request = objectStore.add(item);

        request.onsuccess = () => resolve(request.result);
        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.insert» operation over store «${store}»: `));
      });
    }

    // Método para actualizar un item en un store
    update(store, id, item) {
      this.constructor.trace("browsie.update", arguments);
      this.triggers.emit(`crud.update.one.${store}`, { store, id, item });
      return new Promise((resolve, reject) => {
        const transaction = this.$db.transaction(store, 'readwrite');
        const objectStore = transaction.objectStore(store);
        const request = objectStore.put({ ...item, id });

        request.onsuccess = () => resolve(request.result);
        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.update» operation over store «${store}»: `));
      });
    }

    // Método tipo upsert: que cambia solo los campos que le proporcionas (hace entre 1 y 2 queries)
    async overwrite(store, idOrItem, item) {
      this.constructor.trace("browsie.overwrite", arguments);
      this.triggers.emit(`crud.overwrite.one.${store}`, { store, idOrItem, item });
      const isId = (typeof idOrItem === "string") || (typeof idOrItem === "number");
      const isItem = typeof idOrItem === "object";
      let previousItem = undefined;
      if (isItem) {
        previousItem = idOrItem;
      } else if (isId) {
        const matches = await this.select(store, it => it.id === idOrItem);
        if (matches.length === 0) {
          throw new Error(`Zero rows on overwrite operator. Cannot overwrite a row that does not exist on «browsie.overwrite»`);
        } else if (matches.length > 1) {
          throw new Error(`Multiple rows on overwrite operation. Cannot overwrite multiple rows. Ensure store «${store}» is using index «id» as unique value to complete this operation`);
        }
        previousItem = matches[0];
      } else {
        throw new Error(`Required parameter «idOrItem» to be a string or an object on «browsie.overwrite»`);
      }
      const newItem = Object.assign({}, previousItem, item);
      return await this.update(store, newItem.id, newItem);
    }

    // Método para eliminar un item de un store por ID
    delete(store, id) {
      this.constructor.trace("browsie.delete", arguments);
      this._ensureIntegrity(store, id);
      this.triggers.emit(`crud.delete.one.${store}`, { store, id });
      return new Promise((resolve, reject) => {
        const transaction = this.$db.transaction(store, 'readwrite');
        const objectStore = transaction.objectStore(store);
        const request = objectStore.delete(id);
        request.onsuccess = () => resolve();
        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.delete» operation over store «${store}»: `));
      });
    }

    _getSchemaEntityByStoreName(store) {
      this.constructor.trace("browsie._ensureIntegrity", arguments);
      const innerSchema = this.getInnerSchema().$schema;
      const tableIds = Object.keys(innerSchema.hasTables);
      Iterating_tables:
      for (let indexTables = 0; indexTables < tableIds.length; indexTables++) {
        const tableId = tableIds[indexTables];
        if (tableId === store) {
          return innerSchema.hasTables[tableId];
        }
      }
      return undefined;
    }

    _ensureIntegrity(store, id) {
      this.constructor.trace("browsie._ensureIntegrity", arguments);
      const innerSchema = this.getInnerSchema().$schema;
      const tableIds = Object.keys(innerSchema.hasTables);
      const sourceEntity = innerSchema.hasTables[store];
      const sourceEntityId = sourceEntity.hasEntityId;
      const boundColumns = [];
      Iterating_tables:
      for (let indexTables = 0; indexTables < tableIds.length; indexTables++) {
        const tableId = tableIds[indexTables];
        const tableData = innerSchema.hasTables[tableId];
        const columnIds = Object.keys(tableData.hasColumns);
        Iterating_columns:
        for (let indexColumns = 0; indexColumns < columnIds.length; indexColumns++) {
          const columnId = columnIds[indexColumns];
          const columnData = tableData.hasColumns[columnId];
          When_it_has_references: {
            if (!columnData.refersTo) {
              break When_it_has_references;
            }
            const { entity: schemaEntityId, property: entityColumnId, constraint = true } = columnData.refersTo;
            if (!constraint) {
              break When_it_has_references;
            }
            const isSameEntity = schemaEntityId === sourceEntityId;
            if (!isSameEntity) {
              break When_it_has_references;
            }
            boundColumns.push({
              source: [store, entityColumnId],
              mustCheck: [tableId, columnId]
            });
          }
        }
      }
      console.log(`BOUND COLUMNS to ${store}:`, boundColumns);
    }

    _expandError(errorObject, baseMessage = false) {
      this.constructor.trace("browsie._expandError", arguments);
      let error = errorObject;
      if (errorObject instanceof Error) {
        error = errorObject;
      } else if (errorObject.target && errorObject.target.error) {
        error = errorObject.target.error;
      } else {
        error = new Error(errorObject);
      }
      if (baseMessage) {
        const errorTemp = new Error(error.message ?? error);
        Object.assign(errorTemp, error);
        errorTemp.message = baseMessage + errorTemp.message;
        error = errorTemp;
      }
      return error;
    }

    // Método para seleccionar elementos de un store con un filtro
    select(store, filter) {
      this.constructor.trace("browsie.select", arguments);
      this.triggers.emit(`crud.select.one.${store}`, { store, filter });
      return new Promise((resolve, reject) => {
        const transaction = this.$db.transaction(store, 'readonly');
        const objectStore = transaction.objectStore(store);
        const request = objectStore.getAll();

        request.onsuccess = () => {
          const result = request.result.filter(item => {
            try {
              return filter(item);
            } catch (error) {
              console.error("Error arised from filter callback on «browsie.select»");
              return false;
            }
          });
          resolve(result);
        };
        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.select» operation over store «${store}»: `));
      });
    }

    selectMany(store, filterFn = i => true) {
      this.constructor.trace("browsie.selectMany", arguments);
      this.triggers.emit(`crud.select.many.${store}`, { store, filterFn });
      return new Promise((resolve, reject) => {
        const transaction = this.$db.transaction(store, 'readonly');
        const objectStore = transaction.objectStore(store);
        const request = objectStore.openCursor(); // Usa cursor para recorrer la BD sin cargar todo en memoria
        const results = [];
        request.onsuccess = (event) => {
          const cursor = event.target.result;
          if (cursor) {
            let isAccepted = undefined;
            try {
              isAccepted = filterFn(cursor.value);
            } catch (error) {
              console.error("Error arised from filter callback on «browsie.selectMany»");
            }
            if (isAccepted) { // Aplica la función de filtro
              results.push(cursor.value);
            }
            cursor.continue(); // Avanza al siguiente registro
          } else {
            resolve(results); // Se terminó el recorrido
          }
        };
        request.onerror = (error) =>
          reject(this._expandError(error, `Error on «browsie.selectMany» operation over store «${store}»: `));
      });
    }

    // Método para insertar varios items en un store
    insertMany(store, items) {
      this.constructor.trace("browsie.insertMany", arguments);
      this.triggers.emit(`crud.insert.many.${store}`, { store, items });
      this.constructor.mustBeString(store, "insertMany", "arguments[0]");
      this.constructor.mustBeArray(items, "insertMany", "arguments[1]");
      return new Promise((resolve, reject) => {
        if (items.length === 0) {
          return resolve(false);
        }
        const transaction = this.$db.transaction(store, 'readwrite');
        const objectStore = transaction.objectStore(store);
        let insertedCount = 0;
        items.forEach(item => {
          const request = objectStore.add(item);
          request.onsuccess = () => {
            insertedCount++;
            if (insertedCount === items.length) resolve();
          };
          request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.insertMany» operation over store «${store}» inserting «${items.length}» items: `));
        });
      });
    }

    // Método para actualizar varios items en un store
    updateMany(store, filter, item) {
      this.constructor.trace("browsie.updateMany", arguments);
      this.triggers.emit(`crud.update.many.${store}`, { store, filter, item });
      return new Promise((resolve, reject) => {
        const transaction = this.$db.transaction(store, 'readwrite');
        const objectStore = transaction.objectStore(store);
        const request = objectStore.openCursor();
        let updatedCount = 0;
        request.onsuccess = () => {
          const cursor = request.result;
          if (cursor) {
            if (Object.keys(filter).every(key => cursor.value[key] === filter[key])) {
              const updatedItem = { ...cursor.value, ...item };
              const updateRequest = cursor.update(updatedItem);
              updateRequest.onsuccess = () => {
                updatedCount++;
                if (updatedCount === cursor.value.length) resolve();
              };
            }
            cursor.continue();
          }
        };

        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.updateMany» operation over store «${store}»: `));
      });
    }

    // Método a tipo upsertAll para llenar los valores pero dejar los que no
    async overwriteMany(store, filter, item) {
      this.constructor.trace("browsie.overwriteMany", arguments);
      this.triggers.emit(`crud.overwrite.many.${store}`, { store, filter, item });
      const allMatches = await this.selectMany(store, filter);
      const allResults = [];
      for (let indexRow = 0; indexRow < allMatches.length; indexRow++) {
        const row = allMatches[indexRow];
        const result = await this.overwrite(store, row, item);
        allResults.push(result);
      }
      return allResults;
    }

    // Método para eliminar varios items de un store según un filtro
    deleteMany(store, filterCallback) {
      this.constructor.trace("browsie.deleteMany", arguments);
      this.triggers.emit(`crud.delete.many.${store}`, { store, filterCallback });
      return new Promise((resolve, reject) => {
        const transaction = this.$db.transaction(store, 'readwrite');
        const objectStore = transaction.objectStore(store);
        const request = objectStore.openCursor();
        let deletedCount = 0;
        request.onsuccess = () => {
          const cursor = request.result;
          if (!cursor) {
            return resolve();
          }
          const isAccepted = filterCallback(cursor.value);
          if (isAccepted) {
            const deleteRequest = cursor.delete();
            deleteRequest.onsuccess = () => {
              deletedCount++;
              if (deletedCount === cursor.value.length) {
                return resolve();
              }
            };
            deleteRequest.onerror = (error) => reject(this._expandError(error, `Error on «browsie.deleteMany» operation over store «${store}» and id «${cursor.value.id}»: `));
          }
          cursor.continue();
        };
        request.onerror = (error) => reject(this._expandError(error, `Error on «browsie.deleteMany» operation over store «${store}»: `));
      });
    }
  }

  // @TOCONTINUEFROM
  class BrowsieMigration {

    static from(...args) {
      return new this(...args);
    }

    static createTable(arg) {
      return this.from({
        operation: "createTable",
        parameters: arg
      });
    }

    static renameTable(arg) {
      return this.from({
        operation: "renameTable",
        parameters: arg
      });
    }

    static deleteTable(arg) {
      return this.from({
        operation: "deleteTable",
        parameters: arg
      });
    }

    static createColumn(arg) {
      return this.from({
        operation: "createColumn",
        parameters: arg
      });
    }

    static renameColumn(arg) {
      return this.from({
        operation: "renameColumn",
        parameters: arg
      });
    }

    static deleteColumn(arg) {
      return this.from({
        operation: "deleteColumn",
        parameters: arg
      });
    }

    constructor(options = {}) {
      LswDatabase.trace("LswDatabaseMigration.constructor");
      const { operation, parameters } = options;
      this.$validateOperation(operation);
      this.$validateParameters(parameters);
      this.operation = operation;
      this.parameters = parameters;
      this.config = {
        temporaryDatabase: this.parameters.fromDatabase + "_" + this.$getRandomString(5),
      };
      this.migrated = false;
    }

    $getRandomString(len = 10) {
      LswDatabase.trace("LswDatabaseMigration.$getRandomString");
      const alphabet = "abcdefghijklmnopqrstuvwxyz".split("");
      let out = "";
      while (out.length < len) {
        out += alphabet[Math.floor(Math.random() * alphabet.length)];
      }
      return out;
    };

    $validateOperation(operation) {
      LswDatabase.trace("LswDatabaseMigration.$validateOperation");
      if (["createTable", "renameTable", "deleteTable", "createColumn", "renameColumn", "deleteColumn", "cloneDatabase", "moveDatabase"].indexOf(operation) === -1) {
        throw new Error("Required «operation» to be a valid operation on «LswDatabaseMigration.$validateOperation»");
      }
    }

    $validateParameters(parameters) {
      LswDatabase.trace("LswDatabaseMigration.$validateParameters");
      if (typeof parameters !== "object") {
        throw new Error("Required «parameters» to be an object on «LswDatabaseMigration.$validateParameters»");
      }
    }

    async $$transferBackTemporaryDatabase() {
      await LswDatabase.deleteDatabase(this.parameters.fromDatabase);
      await this.$replicateSchema({
        fromDatabase: this.config.temporaryDatabase,
        toDatabase: this.parameters.fromDatabase,
      });
      await this.$populateDatabase({
        fromDatabase: this.config.temporaryDatabase,
        toDatabase: this.parameters.fromDatabase,
      });
      await LswDatabase.deleteDatabase(this.config.temporaryDatabase);
    }

    commit() {
      LswDatabase.trace("LswDatabaseMigration.commit");
      return this["$$" + this.operation].call(this).finally(() => {
        this.migrated = true;
      });
    }

    $validateCreateTableParameters() {
      LswDatabase.trace("LswDatabaseMigration.$validateCreateTableParameters");
      if (typeof this.parameters.fromDatabase !== "string") {
        throw new Error("Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateCreateTableParameters»");
      }
      if (typeof this.parameters.table !== "string") {
        throw new Error("Required «parameters.table» to be a string on «LswDatabaseMigration.$validateCreateTableParameters»");
      }
      if (typeof this.parameters.tableDefinition !== "object") {
        throw new Error("Required «parameters.tableDefinition» to be an object on «LswDatabaseMigration.$validateCreateTableParameters»");
      }
    }

    async $$cloneDatabase() {
      LswDatabase.trace("LswDatabaseMigration.$$cloneDatabase");
      await this.$replicateSchema({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.parameters.toDatabase,
      });
      await this.$populateDatabase({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.parameters.toDatabase,
      });
    }

    async $$moveDatabase() {
      LswDatabase.trace("LswDatabaseMigration.$$moveDatabase");
      await this.$replicateSchema({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.parameters.toDatabase,
      });
      await this.$populateDatabase({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.parameters.toDatabase,
      });
      await LswDatabase.deleteDatabase(this.parameters.fromDatabase);
    }

    async $$createTable() {
      LswDatabase.trace("LswDatabaseMigration.$$createTable");
      this.$validateCreateTableParameters();
      await this.$replicateSchema({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.config.temporaryDatabase,
        onAlterSchema: schema => {
          schema[this.parameters.table] = this.parameters.tableDefinition;
          return schema;
        },
      });
      await this.$populateDatabase({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.config.temporaryDatabase,
        onMapTableId: false,
        onMapColumnId: false,
      });
      await this.$$transferBackTemporaryDatabase();
    }

    $validateDeleteTableParameters() {
      LswDatabase.trace("LswDatabaseMigration.$validateDeleteTableParameters");
      if (typeof this.parameters.fromDatabase !== "string") {
        throw new Error("Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»");
      }
      if (typeof this.parameters.table !== "string") {
        throw new Error("Required «parameters.table» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»");
      }
    }

    async $$deleteTable() {
      LswDatabase.trace("LswDatabaseMigration.$$deleteTable");
      this.$validateDeleteTableParameters();
      await this.$replicateSchema({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.config.temporaryDatabase,
        onAlterSchema: schema => {
          delete schema[this.parameters.table];
          return schema;
        },
      });
      await this.$populateDatabase({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.config.temporaryDatabase,
        onMapTableId: false,
        onMapColumnId: false,
      });
      await this.$$transferBackTemporaryDatabase();
    }

    $validateRenameTableParameters() {
      LswDatabase.trace("LswDatabaseMigration.$validateRenameTableParameters");
      if (typeof this.parameters.fromDatabase !== "string") {
        throw new Error("Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»");
      }
      if (typeof this.parameters.tableSource !== "string") {
        throw new Error("Required «parameters.tableSource» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»");
      }
      if (typeof this.parameters.tableDestination !== "string") {
        throw new Error("Required «parameters.tableDestination» to be a string on «LswDatabaseMigration.$validateDeleteTableParameters»");
      }
    }

    async $$renameTable() {
      LswDatabase.trace("LswDatabaseMigration.$$renameTable");
      this.$validateRenameTableParameters();
      const currentSchema = await LswDatabase.getSchema(this.parameters.fromDatabase);
      await this.$replicateSchema({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.config.temporaryDatabase,
        onAlterSchema: schema => {
          delete schema[this.parameters.tableSource];
          const tableInput = this.$adaptSchemaTableAsSchemaDefinition(currentSchema[this.parameters.tableSource]);
          schema[this.parameters.tableDestination] = tableInput;
          return schema;
        },
      });
      await this.$populateDatabase({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.config.temporaryDatabase,
        onMapTableId: tableId => {
          return this.parameters.tableDestination;
        },
        onMapColumnId: false,
      });
      await this.$$transferBackTemporaryDatabase();
    }

    $validateCreateColumnParameters() {
      LswDatabase.trace("LswDatabaseMigration.$validateCreateColumnParameters");
      if (typeof this.parameters.fromDatabase !== "string") {
        throw new Error("Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateCreateColumnParameters»");
      }
      if (typeof this.parameters.table !== "string") {
        throw new Error("Required «parameters.table» to be a string on «LswDatabaseMigration.$validateCreateColumnParameters»");
      }
      if (typeof this.parameters.column !== "string") {
        throw new Error("Required «parameters.column» to be a string on «LswDatabaseMigration.$validateCreateColumnParameters»");
      }
      if (typeof this.parameters.columnDefinition !== "object") {
        throw new Error("Required «parameters.columnDefinition» to be an object on «LswDatabaseMigration.$validateCreateColumnParameters»");
      }
    }

    async $$createColumn() {
      LswDatabase.trace("LswDatabaseMigration.$$createColumn");
      this.$validateCreateColumnParameters();
      const isUnique = !!this.parameters.columnDefinition.isUnique;
      const columnSymbol = `${isUnique ? "!" : ""}${this.parameters.column}`;
      await this.$replicateSchema({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.config.temporaryDatabase,
        table: this.parameters.table,
        onAlterSchema: schema => {
          schema[this.parameters.table].push(columnSymbol);
          return schema;
        },
      });
      await this.$populateDatabase({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.config.temporaryDatabase,
        onMapTableId: false,
        onMapColumnId: false,
      });
      await this.$$transferBackTemporaryDatabase();
    }

    $validateDeleteColumnParameters() {
      LswDatabase.trace("LswDatabaseMigration.$validateDeleteColumnParameters");
      if (typeof this.parameters.fromDatabase !== "string") {
        throw new Error("Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateDeleteColumnParameters»");
      }
      if (typeof this.parameters.table !== "string") {
        throw new Error("Required «parameters.table» to be a string on «LswDatabaseMigration.$validateDeleteColumnParameters»");
      }
      if (typeof this.parameters.column !== "string") {
        throw new Error("Required «parameters.column» to be a string on «LswDatabaseMigration.$validateDeleteColumnParameters»");
      }
    }

    async $$deleteColumn() {
      LswDatabase.trace("LswDatabaseMigration.$$deleteColumn");
      this.$validateDeleteColumnParameters();
      await this.$replicateSchema({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.config.temporaryDatabase,
        onAlterSchema: schema => {
          console.log(schema);
          const columnPosition = schema[this.parameters.table].indexOf(this.parameters.column);
          schema[this.parameters.table].splice(columnPosition, 1);
          return schema;
        },
      });
      await this.$populateDatabase({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.config.temporaryDatabase,
        // !@TOCONFIGURE: $$deleteColumn needs a specific hook (or none).
        onMapTableId: false,
        onMapColumnId: false,
      });
      await this.$$transferBackTemporaryDatabase();
    }

    $validateRenameColumnParameters() {
      LswDatabase.trace("LswDatabaseMigration.$validateRenameColumnParameters");
      if (typeof this.parameters.fromDatabase !== "string") {
        throw new Error("Required «parameters.fromDatabase» to be a string on «LswDatabaseMigration.$validateRenameColumnParameters»");
      }
      if (typeof this.parameters.table !== "string") {
        throw new Error("Required «parameters.table» to be a string on «LswDatabaseMigration.$validateRenameColumnParameters»");
      }
      if (typeof this.parameters.columnSource !== "string") {
        throw new Error("Required «parameters.columnSource» to be a string on «LswDatabaseMigration.$validateRenameColumnParameters»");
      }
      if (typeof this.parameters.columnDestination !== "string") {
        throw new Error("Required «parameters.columnDestination» to be a string on «LswDatabaseMigration.$validateRenameColumnParameters»");
      }
    }

    async $$renameColumn() {
      LswDatabase.trace("LswDatabaseMigration.$$renameColumn");
      this.$validateRenameColumnParameters();
      await this.$replicateSchema({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.config.temporaryDatabase,
        onAlterSchema: schema => {
          console.log(schema);
          const columnPosition = schema[this.parameters.table].indexOf(this.parameters.columnSource);
          schema[this.parameters.table].splice(columnPosition, 1);
          schema[this.parameters.table].push(this.parameters.columnDestination);
          return schema;
        },
      });
      await this.$populateDatabase({
        fromDatabase: this.parameters.fromDatabase,
        toDatabase: this.config.temporaryDatabase,
        onMapTableId: false,
        onMapColumnId: (columnId) => {
          return columnId;
        },
      });
      await this.$$transferBackTemporaryDatabase();
    }

    $adaptSchemaAsSchemaDefinition(schemaDefinition) {
      const output = {};
      const tableIds = Object.keys(schemaDefinition);
      for (let index = 0; index < tableIds.length; index++) {
        const storeId = tableIds[index];
        const tableDefinition = schemaDefinition[storeId];
        const columns = tableDefinition.indexes;
        if (!(storeId in output)) {
          output[storeId] = [];
        }
        for (let indexColumn = 0; indexColumn < columns.length; indexColumn++) {
          const column = columns[indexColumn];
          const columnId = column.name;
          const columnInput = this.$adaptSchemaColumnAsSchemaDefinition(column, columnId);
          output[storeId].push(columnInput);
        }
      }
      return output;
    }

    $adaptSchemaTableAsSchemaDefinition(tableDefinition) {
      const output = [];
      const columns = tableDefinition.indexes;
      for (let indexColumn = 0; indexColumn < columns.length; indexColumn++) {
        const column = columns[indexColumn];
        const columnId = column.name;
        const columnInput = this.$adaptSchemaColumnAsSchemaDefinition(column, columnId);
        output.push(columnInput);
      }
      return output;
    }

    $adaptSchemaColumnAsSchemaDefinition(column, columnId) {
      if (column.unique) {
        return "!" + columnId;
      } else {
        return columnId;
      }
    }

    async $replicateSchema(scenario) {
      LswDatabase.trace("LswDatabaseMigration.$replicateSchema");
      const { fromDatabase, toDatabase, onAlterSchema } = scenario;
      console.log(`⌛️ Replicating database from «${fromDatabase}» to «${toDatabase}» on «LswDatabaseMigration.$replicateSchema»`);
      const schemaDefinition = await LswDatabase.getSchema(fromDatabase);
      const schemaInput = this.$adaptSchemaAsSchemaDefinition(schemaDefinition);
      let alteredSchema = schemaInput;
      if (onAlterSchema) {
        alteredSchema = onAlterSchema(schemaInput);
        if (typeof alteredSchema === "undefined") {
          throw new Error("Required «onAlterSchema» to return an object on «LswDatabaseMigration.$replicateSchema»")
        }
      }
      console.log("Replicated schema:", alteredSchema);
      await LswDatabase.createDatabase(toDatabase, alteredSchema);
    }

    async $populateDatabase(scenario) {
      LswDatabase.trace("LswDatabaseMigration.$populateDatabase");
      const { fromDatabase, toDatabase, onMapTableId = false, onMapColumnId = false } = scenario;
      console.log(`⌛️ Populating database from «${fromDatabase}» to «${toDatabase}» on «LswDatabaseMigration.$populateDatabase»`);
      const schemaDefinition = await LswDatabase.getSchema(fromDatabase);
      const tableIds = Object.keys(schemaDefinition);
      let fromConnection = undefined;
      let toConnection = undefined;
      let indexTable = 0;
      let indexColumn = 0;
      let tableId = undefined;
      let alteredTableId = undefined;
      try {
        fromConnection = new LswDatabase(fromDatabase);
        toConnection = new LswDatabase(toDatabase);
        await fromConnection.open();
        await toConnection.open();
        for (indexTable = 0; indexTable < tableIds.length; indexTable++) {
          tableId = tableIds[indexTable];
          console.log("table:", tableId);
          Transfering_tables: {
            console.log(`⌛️ Transfering table «${tableId}» on «LswDatabaseMigration.$populateDatabase»`);
            let allRows = await fromConnection.selectMany(tableId, v => true);
            console.log("[*] Getting table id");
            alteredTableId = tableId;
            if (onMapTableId) {
              alteredTableId = onMapTableId(tableId);
            }
            console.log("[*] Getting column id");
            if (onMapColumnId) {
              allRows = allRows.reduce((output, row) => {
                const allKeys = Object.keys(row);
                const alteredRow = {};
                for (let indexKeys = 0; indexKeys < allKeys.length; indexKeys++) {
                  console.log("column:", indexKeys);
                  const columnId = allKeys[indexKeys];
                  const alteredColumnId = onMapColumnId(columnId, tableId, alteredTableId, {
                    fromConnection,
                    toConnection
                  }) || columnId;
                  alteredRow[alteredColumnId] = row[columnId];
                }
                output.push(alteredRow);
                return output;
              }, []);
            }
            console.log("[*] Got:", alteredTableId, allRows);
            await toConnection.insertMany(alteredTableId, allRows);
            console.log("What??? 444")
          }
        }
      } catch (error) {
        console.log(`💥 Error while populating database on table ${tableId || "-"} (alias «${alteredTableId}»):`, error);
      } finally {
        try {
          await fromConnection.close();
        } catch (error) {
          console.log(error);
        }
        try {
          await toConnection.close();
        } catch (error) {
          console.log(error);
        }
        console.log(`[*] Database «${toDatabase}» population finished successfully.`);
      }
    }

  }

  class LswDatabaseMigration extends BrowsieMigration {

  }

  LswDatabaseMigration.default = LswDatabaseMigration;
  window.LswDatabaseMigration = LswDatabaseMigration;
  window.BrowsieMigration = BrowsieMigration;

  class BrowsieMigrable extends BrowsieCrudAPI {

    static migration = LswDatabaseMigration;

  }

  window.Browsie = BrowsieMigrable;
  Browsie.default = BrowsieMigrable;

  /* Extended API */

  class LswDatabase extends BrowsieMigrable {

    class = this.constructor;

  }

  LswDatabase.default = LswDatabase;
  window.LswDatabase = LswDatabase;

  return LswDatabase;

});
